(global["webpackJsonp"]=global["webpackJsonp"]||[]).push([["common/vendor"],{1:
/*!********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-mp-qq/dist/index.js ***!
  \********************************************************/
/*! no static exports found */function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createApp=je,e.createComponent=Xe,e.createPage=qe,e.default=void 0;var r=i(n(/*! vue */2));function i(t){return t&&t.__esModule?t:{default:t}}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){h(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){return u(t)||l(t,e)||y(t,e)||c()}function c(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function l(t,e){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done);r=!0)if(n.push(a.value),e&&n.length===e)break}catch(c){i=!0,o=c}finally{try{r||null==s["return"]||s["return"]()}finally{if(i)throw o}}return n}}function u(t){if(Array.isArray(t))return t}function h(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function f(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function p(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function d(t,e,n){return e&&p(t.prototype,e),n&&p(t,n),t}function v(t){return x(t)||m(t)||y(t)||g()}function g(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function y(t,e){if(t){if("string"===typeof t)return _(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_(t,e):void 0}}function m(t){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}function x(t){if(Array.isArray(t))return _(t)}function _(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var b=Object.prototype.toString,w=Object.prototype.hasOwnProperty;function A(t){return"function"===typeof t}function S(t){return"string"===typeof t}function P(t){return"[object Object]"===b.call(t)}function k(t,e){return w.call(t,e)}function T(){}function O(t){var e=Object.create(null);return function(n){var r=e[n];return r||(e[n]=t(n))}}var $=/-(\w)/g,C=O((function(t){return t.replace($,(function(t,e){return e?e.toUpperCase():""}))})),M=["invoke","success","fail","complete","returnValue"],L={},E={};function j(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?D(n):n}function D(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}function R(t,e){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}function F(t,e){Object.keys(e).forEach((function(n){-1!==M.indexOf(n)&&A(e[n])&&(t[n]=j(t[n],e[n]))}))}function I(t,e){t&&e&&Object.keys(e).forEach((function(n){-1!==M.indexOf(n)&&A(e[n])&&R(t[n],e[n])}))}function z(t,e){"string"===typeof t&&P(e)?F(E[t]||(E[t]={}),e):P(t)&&F(L,t)}function N(t,e){"string"===typeof t?P(e)?I(E[t],e):delete E[t]:P(t)&&I(L,t)}function W(t){return function(e){return t(e)||e}}function B(t){return!!t&&("object"===typeof t||"function"===typeof t)&&"function"===typeof t.then}function V(t,e){for(var n=!1,r=0;r<t.length;r++){var i=t[r];if(n)n=Promise.resolve(W(i));else{var o=i(e);if(B(o)&&(n=Promise.resolve(o)),!1===o)return{then:function(){}}}}return n||{then:function(t){return t(e)}}}function U(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return["success","fail","complete"].forEach((function(n){if(Array.isArray(t[n])){var r=e[n];e[n]=function(e){V(t[n],e).then((function(t){return A(r)&&r(t)||t}))}}})),e}function H(t,e){var n=[];Array.isArray(L.returnValue)&&n.push.apply(n,v(L.returnValue));var r=E[t];return r&&Array.isArray(r.returnValue)&&n.push.apply(n,v(r.returnValue)),n.forEach((function(t){e=t(e)||e})),e}function G(t){var e=Object.create(null);Object.keys(L).forEach((function(t){"returnValue"!==t&&(e[t]=L[t].slice())}));var n=E[t];return n&&Object.keys(n).forEach((function(t){"returnValue"!==t&&(e[t]=(e[t]||[]).concat(n[t]))})),e}function q(t,e,n){for(var r=arguments.length,i=new Array(r>3?r-3:0),o=3;o<r;o++)i[o-3]=arguments[o];var a=G(t);if(a&&Object.keys(a).length){if(Array.isArray(a.invoke)){var s=V(a.invoke,n);return s.then((function(t){return e.apply(void 0,[U(a,t)].concat(i))}))}return e.apply(void 0,[U(a,n)].concat(i))}return e.apply(void 0,[n].concat(i))}var X={returnValue:function(t){return B(t)?t.then((function(t){return t[1]})).catch((function(t){return t[0]})):t}},J=/^\$|sendNativeEvent|restoreGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/,Y=/^create|Manager$/,Q=["createBLEConnection"],K=["createBLEConnection"],Z=/^on|^off/;function tt(t){return Y.test(t)&&-1===Q.indexOf(t)}function et(t){return J.test(t)&&-1===K.indexOf(t)}function nt(t){return Z.test(t)&&"onPush"!==t}function rt(t){return t.then((function(t){return[null,t]})).catch((function(t){return[t]}))}function it(t){return!(tt(t)||et(t)||nt(t))}function ot(t,e){return it(t)?function(){for(var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length,i=new Array(r>1?r-1:0),o=1;o<r;o++)i[o-1]=arguments[o];return A(n.success)||A(n.fail)||A(n.complete)?H(t,q.apply(void 0,[t,e,n].concat(i))):H(t,rt(new Promise((function(r,o){q.apply(void 0,[t,e,Object.assign({},n,{success:r,fail:o})].concat(i))}))))}:e}Promise.prototype.finally||(Promise.prototype.finally=function(t){var e=this.constructor;return this.then((function(n){return e.resolve(t()).then((function(){return n}))}),(function(n){return e.resolve(t()).then((function(){throw n}))}))});var at=1e-4,st=750,ct=!1,lt=0,ut=0;function ht(){var t=wx.getSystemInfoSync(),e=t.platform,n=t.pixelRatio,r=t.windowWidth;lt=r,ut=n,ct="ios"===e}function ft(t,e){if(0===lt&&ht(),t=Number(t),0===t)return 0;var n=t/st*(e||lt);return n<0&&(n=-n),n=Math.floor(n+at),0===n&&(n=1!==ut&&ct?.5:1),t<0?-n:n}var pt={promiseInterceptor:X},dt=Object.freeze({__proto__:null,upx2px:ft,addInterceptor:z,removeInterceptor:N,interceptors:pt}),vt=function(){function t(e,n){var r=this;f(this,t),this.id=e,this.listener={},this.emitCache={},n&&Object.keys(n).forEach((function(t){r.on(t,n[t])}))}return d(t,[{key:"emit",value:function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];var i=this.listener[t];if(!i)return(this.emitCache[t]||(this.emitCache[t]=[])).push(n);i.forEach((function(t){t.fn.apply(t.fn,n)})),this.listener[t]=i.filter((function(t){return"once"!==t.type}))}},{key:"on",value:function(t,e){this._addListener(t,"on",e),this._clearCache(t)}},{key:"once",value:function(t,e){this._addListener(t,"once",e),this._clearCache(t)}},{key:"off",value:function(t,e){var n=this.listener[t];if(n)if(e)for(var r=0;r<n.length;)n[r].fn===e&&(n.splice(r,1),r--),r++;else delete this.listener[t]}},{key:"_clearCache",value:function(t){var e=this.emitCache[t];if(e)for(;e.length>0;)this.emit.apply(this,[t].concat(e.shift()))}},{key:"_addListener",value:function(t,e,n){(this.listener[t]||(this.listener[t]=[])).push({fn:n,type:e})}}]),t}(),gt={},yt=[],mt=0;function xt(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];mt++;var n=new vt(mt,t);return e&&(gt[mt]=n,yt.push(n)),n}function _t(t){if(t){var e=gt[t];return delete gt[t],e}return yt.shift()}var bt={args:function(t,e){var n=xt(t.events).id;t.url&&(t.url=t.url+(-1===t.url.indexOf("?")?"?":"&")+"__id__="+n)},returnValue:function(t,e){t.eventChannel=_t()}};function wt(t){var e=getCurrentPages(),n=e.length;while(n--){var r=e[n];if(r.$page&&r.$page.fullPath===t)return n}return-1}var At={name:function(t){return"back"===t.exists&&t.delta?"navigateBack":"redirectTo"},args:function(t){if("back"===t.exists&&t.url){var e=wt(t.url);if(-1!==e){var n=getCurrentPages().length-1-e;n>0&&(t.delta=n)}}}},St={args:function(t){var e=parseInt(t.current);if(!isNaN(e)){var n=t.urls;if(Array.isArray(n)){var r=n.length;if(r)return e<0?e=0:e>=r&&(e=r-1),e>0?(t.current=n[e],t.urls=n.filter((function(t,r){return!(r<e)||t!==n[e]}))):t.current=n[0],{indicator:!1,loop:!1}}}}},Pt={navigateTo:bt,redirectTo:At,previewImage:St},kt=["preloadPage","unPreloadPage","loadSubPackage"],Tt=["scanCode","startAccelerometer","stopAccelerometer","onAccelerometerChange","startCompass","onCompassChange","setScreenBrightness","getScreenBrightness","setKeepScreenOn","onUserCaptureScreen","vibrateLong","vibrateShort","createWorker","connectSocket","onSocketOpen","onSocketError","sendSocketMessage","onSocketMessage","closeSocket","onSocketClose","openDocument","updateShareMenu","getShareInfo","createLivePlayerContext","createLivePusherContext","setNavigationBarColor","onMemoryWarning","onNetworkStatusChange","reportMonitor","getLogManager","reportAnalytics"],Ot=["success","fail","cancel","complete"];function $t(t,e,n){return function(r){return e(Mt(t,r,n))}}function Ct(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(P(e)){var o=!0===i?e:{};for(var a in A(n)&&(n=n(e,o)||{}),e)if(k(n,a)){var s=n[a];A(s)&&(s=s(e[a],e,o)),s?S(s)?o[s]=e[a]:P(s)&&(o[s.name?s.name:a]=s.value):console.warn("QQ小程序 ".concat(t,"暂不支持").concat(a))}else-1!==Ot.indexOf(a)?A(e[a])&&(o[a]=$t(t,e[a],r)):i||(o[a]=e[a]);return o}return A(e)&&(e=$t(t,e,r)),e}function Mt(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return A(Pt.returnValue)&&(e=Pt.returnValue(t,e)),Ct(t,e,n,{},r)}function Lt(t,e){if(k(Pt,t)){var n=Pt[t];return n?function(e,r){var i=n;A(n)&&(i=n(e)),e=Ct(t,e,i.args,i.returnValue);var o=[e];"undefined"!==typeof r&&o.push(r),A(i.name)?t=i.name(e):S(i.name)&&(t=i.name);var a=wx[t].apply(wx,o);return et(t)?Mt(t,a,i.returnValue,tt(t)):a}:function(){console.error("QQ小程序 暂不支持".concat(t))}}return e}var Et=Object.create(null),jt=["onTabBarMidButtonTap","subscribePush","unsubscribePush","onPush","offPush","share"];function Dt(t){return function(e){var n=e.fail,r=e.complete,i={errMsg:"".concat(t,":fail:暂不支持 ").concat(t," 方法")};A(n)&&n(i),A(r)&&r(i)}}jt.forEach((function(t){Et[t]=Dt(t)}));var Rt={oauth:["qq"],share:["qq"],payment:["qqpay"],push:["qq"]};function Ft(t){var e=t.service,n=t.success,r=t.fail,i=t.complete,o=!1;Rt[e]?(o={errMsg:"getProvider:ok",service:e,provider:Rt[e]},A(n)&&n(o)):(o={errMsg:"getProvider:fail:服务["+e+"]不存在"},A(r)&&r(o)),A(i)&&i(o)}var It=Object.freeze({__proto__:null,getProvider:Ft}),zt=function(){var t;return function(){return t||(t=new r.default),t}}();function Nt(t,e,n){return t[e].apply(t,n)}function Wt(){return Nt(zt(),"$on",Array.prototype.slice.call(arguments))}function Bt(){return Nt(zt(),"$off",Array.prototype.slice.call(arguments))}function Vt(){return Nt(zt(),"$once",Array.prototype.slice.call(arguments))}function Ut(){return Nt(zt(),"$emit",Array.prototype.slice.call(arguments))}var Ht=Object.freeze({__proto__:null,$on:Wt,$off:Bt,$once:Vt,$emit:Ut});function Gt(){var t={},e=wx.getSystemInfoSync(),n=e.windowWidth,r=e.windowHeight,i=n<r?"portrait":"landscape";return t.observe=function(t,e){var o=!0;for(var a in t){var s="orientation"===a?t[a]:Number(t[a]);if(""!==t[a]){if("width"===a){if(s!==n)return o=!1,e(o),o;o=!0}if("minWidth"===a){if(!(n>=s))return o=!1,e(o),o;o=!0}if("maxWidth"===a){if(!(n<=s))return o=!1,e(o),o;o=!0}if("height"===a){if(s!==r)return o=!1,e(o),o;o=!0}if("minHeight"===a){if(!(r>=s))return o=!1,e(o),o;o=!0}if("maxHeight"===a){if(!(r<=s))return o=!1,e(o),o;o=!0}if("orientation"===a){if(t[a]!==i)return o=!1,e(o),o;o=!0}}}return e(o),o},t.disconnect=function(){},t}var qt=Object.freeze({__proto__:null,createMediaQueryObserver:Gt}),Xt=Page,Jt=Component,Yt=/:/g,Qt=O((function(t){return C(t.replace(Yt,"-"))}));function Kt(t){var e=t.triggerEvent;t.triggerEvent=function(n){for(var r=arguments.length,i=new Array(r>1?r-1:0),o=1;o<r;o++)i[o-1]=arguments[o];return e.apply(t,[Qt(n)].concat(i))}}function Zt(t,e){var n=e[t];e[t]=n?function(){Kt(this);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return n.apply(this,e)}:function(){Kt(this)}}Page=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Zt("onLoad",t),Xt(t)},Component=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Zt("created",t),Jt(t)};var te=["onPullDownRefresh","onReachBottom","onAddToFavorites","onShareTimeline","onShareAppMessage","onPageScroll","onResize","onTabItemTap"];function ee(t,e){var n=t.$mp[t.mpType];e.forEach((function(e){k(n,e)&&(t[e]=n[e])}))}function ne(t,e){if(!e)return!0;if(r.default.options&&Array.isArray(r.default.options[t]))return!0;if(e=e.default||e,A(e))return!!A(e.extendOptions[t])||!!(e.super&&e.super.options&&Array.isArray(e.super.options[t]));if(A(e[t]))return!0;var n=e.mixins;return Array.isArray(n)?!!n.find((function(e){return ne(t,e)})):void 0}function re(t,e,n){e.forEach((function(e){ne(e,n)&&(t[e]=function(t){return this.$vm&&this.$vm.__call_hook(e,t)})}))}function ie(t,e){var n;return e=e.default||e,n=A(e)?e:t.extend(e),e=n.options,[n,e]}function oe(t,e){if(Array.isArray(e)&&e.length){var n=Object.create(null);e.forEach((function(t){n[t]=!0})),t.$scopedSlots=t.$slots=n}}function ae(t,e){t=(t||"").split(",");var n=t.length;1===n?e._$vueId=t[0]:2===n&&(e._$vueId=t[0],e._$vuePid=t[1])}function se(t,e){var n=t.data||{},r=t.methods||{};if("function"===typeof n)try{n=n.call(e)}catch(i){Object({NODE_ENV:"development",VUE_APP_NAME:"作业不磨蹭",VUE_APP_PLATFORM:"mp-qq",BASE_URL:"/"}).VUE_APP_DEBUG&&console.warn("根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。",n)}else try{n=JSON.parse(JSON.stringify(n))}catch(i){}return P(n)||(n={}),Object.keys(r).forEach((function(t){-1!==e.__lifecycle_hooks__.indexOf(t)||k(n,t)||(n[t]=r[t])})),n}var ce=[String,Number,Boolean,Object,Array,null];function le(t){return function(e,n){this.$vm&&(this.$vm[t]=e)}}function ue(t,e){var n=t.behaviors,r=t.extends,i=t.mixins,o=t.props;o||(t.props=o=[]);var a=[];return Array.isArray(n)&&n.forEach((function(t){a.push(t.replace("uni://","wx".concat("://"))),"uni://form-field"===t&&(Array.isArray(o)?(o.push("name"),o.push("value")):(o.name={type:String,default:""},o.value={type:[String,Number,Boolean,Array,Object,Date],default:""}))})),P(r)&&r.props&&a.push(e({properties:fe(r.props,!0)})),Array.isArray(i)&&i.forEach((function(t){P(t)&&t.props&&a.push(e({properties:fe(t.props,!0)}))})),a}function he(t,e,n,r){return Array.isArray(e)&&1===e.length?e[0]:e}function fe(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n={};return e||(n.vueId={type:String,value:""},n.generic={type:Object,value:null},n.vueSlots={type:null,value:[],observer:function(t,e){var n=Object.create(null);t.forEach((function(t){n[t]=!0})),this.setData({$slots:n})}}),Array.isArray(t)?t.forEach((function(t){n[t]={type:null,observer:le(t)}})):P(t)&&Object.keys(t).forEach((function(e){var r=t[e];if(P(r)){var i=r.default;A(i)&&(i=i()),r.type=he(e,r.type),n[e]={type:-1!==ce.indexOf(r.type)?r.type:null,value:i,observer:le(e)}}else{var o=he(e,r);n[e]={type:-1!==ce.indexOf(o)?o:null,observer:le(e)}}})),n}function pe(t){try{t.mp=JSON.parse(JSON.stringify(t))}catch(e){}return t.stopPropagation=T,t.preventDefault=T,t.target=t.target||{},k(t,"detail")||(t.detail={}),k(t,"markerId")&&(t.detail="object"===typeof t.detail?t.detail:{},t.detail.markerId=t.markerId),P(t.detail)&&(t.target=Object.assign({},t.target,t.detail)),t}function de(t,e){var n=t;return e.forEach((function(e){var r=e[0],i=e[2];if(r||"undefined"!==typeof i){var o,a=e[1],s=e[3];Number.isInteger(r)?o=r:r?"string"===typeof r&&r&&(o=0===r.indexOf("#s#")?r.substr(3):t.__get_value(r,n)):o=n,Number.isInteger(o)?n=i:a?Array.isArray(o)?n=o.find((function(e){return t.__get_value(a,e)===i})):P(o)?n=Object.keys(o).find((function(e){return t.__get_value(a,o[e])===i})):console.error("v-for 暂不支持循环数据：",o):n=o[i],s&&(n=t.__get_value(s,n))}})),n}function ve(t,e,n){var r={};return Array.isArray(e)&&e.length&&e.forEach((function(e,i){"string"===typeof e?e?"$event"===e?r["$"+i]=n:"arguments"===e?n.detail&&n.detail.__args__?r["$"+i]=n.detail.__args__:r["$"+i]=[n]:0===e.indexOf("$event.")?r["$"+i]=t.__get_value(e.replace("$event.",""),n):r["$"+i]=t.__get_value(e):r["$"+i]=t:r["$"+i]=de(t,e)})),r}function ge(t){for(var e={},n=1;n<t.length;n++){var r=t[n];e[r[0]]=r[1]}return e}function ye(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],i=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0,a=!1;if(i&&(a=e.currentTarget&&e.currentTarget.dataset&&"wx"===e.currentTarget.dataset.comType,!n.length))return a?[e]:e.detail.__args__||e.detail;var s=ve(t,r,e),c=[];return n.forEach((function(t){"$event"===t?"__set_model"!==o||i?i&&!a?c.push(e.detail.__args__[0]):c.push(e):c.push(e.target.value):Array.isArray(t)&&"o"===t[0]?c.push(ge(t)):"string"===typeof t&&k(s,t)?c.push(s[t]):c.push(t)})),c}var me="~",xe="^";function _e(t,e){return t===e||"regionchange"===e&&("begin"===t||"end"===t)}function be(t){var e=t.$parent;while(e&&e.$parent&&(e.$options.generic||e.$parent.$options.generic||e.$scope._$vuePid))e=e.$parent;return e&&e.$parent}function we(t){var e=this;t=pe(t);var n=(t.currentTarget||t.target).dataset;if(!n)return console.warn("事件信息不存在");var r=n.eventOpts||n["event-opts"];if(!r)return console.warn("事件信息不存在");var i=t.type,o=[];return r.forEach((function(n){var r=n[0],a=n[1],s=r.charAt(0)===xe;r=s?r.slice(1):r;var c=r.charAt(0)===me;r=c?r.slice(1):r,a&&_e(i,r)&&a.forEach((function(n){var r=n[0];if(r){var i=e.$vm;if(i.$options.generic&&(i=be(i)||i),"$emit"===r)return void i.$emit.apply(i,ye(e.$vm,t,n[1],n[2],s,r));var a=i[r];if(!A(a))throw new Error(" _vm.".concat(r," is not a function"));if(c){if(a.once)return;a.once=!0}var l=ye(e.$vm,t,n[1],n[2],s,r);o.push(a.apply(i,(Array.isArray(l)?l:[]).concat([,,,,,,,,,,t])))}}))})),"input"===i&&1===o.length&&"undefined"!==typeof o[0]?o[0]:void 0}var Ae=["onShow","onHide","onError","onPageNotFound","onThemeChange","onUnhandledRejection"];function Se(t,e){var n=e.mocks,i=e.initRefs;t.$options.store&&(r.default.prototype.$store=t.$options.store),r.default.prototype.mpHost="mp-qq",r.default.mixin({beforeCreate:function(){this.$options.mpType&&(this.mpType=this.$options.mpType,this.$mp=h({data:{}},this.mpType,this.$options.mpInstance),this.$scope=this.$options.mpInstance,delete this.$options.mpType,delete this.$options.mpInstance,"app"!==this.mpType&&(i(this),ee(this,n)))}});var o={onLaunch:function(e){this.$vm||(wx.canIUse("nextTick")||console.error("当前微信基础库版本过低，请将 微信开发者工具-详情-项目设置-调试基础库版本 更换为`2.3.0`以上"),this.$vm=t,this.$vm.$mp={app:this},this.$vm.$scope=this,this.$vm.globalData=this.globalData,this.$vm._isMounted=!0,this.$vm.__call_hook("mounted",e),this.$vm.__call_hook("onLaunch",e))}};o.globalData=t.$options.globalData||{};var a=t.$options.methods;return a&&Object.keys(a).forEach((function(t){o[t]=a[t]})),re(o,Ae),o}var Pe=["__route__","__wxExparserNodeId__","__wxWebviewId__"];function ke(t,e){for(var n,r=t.$children,i=r.length-1;i>=0;i--){var o=r[i];if(o.$scope._$vueId===e)return o}for(var a=r.length-1;a>=0;a--)if(n=ke(r[a],e),n)return n}function Te(t){return Behavior(t)}function Oe(){return!!this.route}function $e(t){this.triggerEvent("__l",t)}function Ce(t){var e=t.$scope;Object.defineProperty(t,"$refs",{get:function(){var t={},n=e.selectAllComponents(".vue-ref");n.forEach((function(e){var n=e.dataset.ref;t[n]=e.$vm||e}));var r=e.selectAllComponents(".vue-ref-in-for");return r.forEach((function(e){var n=e.dataset.ref;t[n]||(t[n]=[]),t[n].push(e.$vm||e)})),t}})}function Me(t){var e,n=t.detail||t.value,r=n.vuePid,i=n.vueOptions;r&&(e=ke(this.$vm,r)),e||(e=this.$vm),i.parent=e}function Le(t){return Se(t,{mocks:Pe,initRefs:Ce})}function Ee(t){return Le(t)}function je(t){r.default.prototype.getOpenerEventChannel=function(){return this.__eventChannel__||(this.__eventChannel__=new vt),this.__eventChannel__};var e=r.default.prototype.__call_hook;return r.default.prototype.__call_hook=function(t,n){return"onLoad"===t&&n&&n.__id__&&(this.__eventChannel__=_t(n.__id__),delete n.__id__),e.call(this,t,n)},App(Ee(t)),t}var De=/[!'()*]/g,Re=function(t){return"%"+t.charCodeAt(0).toString(16)},Fe=/%2C/g,Ie=function(t){return encodeURIComponent(t).replace(De,Re).replace(Fe,",")};function ze(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Ie,n=t?Object.keys(t).map((function(n){var r=t[n];if(void 0===r)return"";if(null===r)return e(n);if(Array.isArray(r)){var i=[];return r.forEach((function(t){void 0!==t&&(null===t?i.push(e(n)):i.push(e(n)+"="+e(t)))})),i.join("&")}return e(n)+"="+e(r)})).filter((function(t){return t.length>0})).join("&"):null;return n?"?".concat(n):""}function Ne(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.isPage,i=e.initRelation,o=ie(r.default,t),c=s(o,2),l=c[0],u=c[1],h=a({multipleSlots:!0,addGlobalClass:!0},u.options||{});u["mp-weixin"]&&u["mp-weixin"].options&&Object.assign(h,u["mp-weixin"].options);var f={options:h,data:se(u,r.default.prototype),behaviors:ue(u,Te),properties:fe(u.props,!1,u.__file),lifetimes:{attached:function(){var t=this.properties,e={mpType:n.call(this)?"page":"component",mpInstance:this,propsData:t};ae(t.vueId,this),i.call(this,{vuePid:this._$vuePid,vueOptions:e}),this.$vm=new l(e),oe(this.$vm,t.vueSlots),this.$vm.$mount()},ready:function(){this.$vm&&(this.$vm._isMounted=!0,this.$vm.__call_hook("mounted"),this.$vm.__call_hook("onReady"))},detached:function(){this.$vm&&this.$vm.$destroy()}},pageLifetimes:{show:function(t){this.$vm&&this.$vm.__call_hook("onPageShow",t)},hide:function(){this.$vm&&this.$vm.__call_hook("onPageHide")},resize:function(t){this.$vm&&this.$vm.__call_hook("onPageResize",t)}},methods:{__l:Me,__e:we}};return u.externalClasses&&(f.externalClasses=u.externalClasses),Array.isArray(u.wxsCallMethods)&&u.wxsCallMethods.forEach((function(t){f.methods[t]=function(e){return this.$vm[t](e)}})),n?f:[f,l]}function We(t){return Ne(t,{isPage:Oe,initRelation:$e})}function Be(t){return We(t)}var Ve=["onShow","onHide","onUnload"];function Ue(t,e){e.isPage,e.initRelation;var n=Be(t);return re(n.methods,Ve,t),n.methods.onLoad=function(t){this.options=t;var e=Object.assign({},t);delete e.__id__,this.$page={fullPath:"/"+(this.route||this.is)+ze(e)},this.$vm.$mp.query=t,this.$vm.__call_hook("onLoad",t)},n}function He(t){return Ue(t,{isPage:Oe,initRelation:$e})}function Ge(t){return He(t)}function qe(t){return Component(Ge(t))}function Xe(t){return Component(Be(t))}Ve.push.apply(Ve,te),kt.forEach((function(t){Pt[t]=!1})),Tt.forEach((function(t){var e=Pt[t]&&Pt[t].name?Pt[t].name:t;wx.canIUse(e)||(Pt[t]=!1)}));var Je={};"undefined"!==typeof Proxy?Je=new Proxy({},{get:function(t,e){return k(t,e)?t[e]:dt[e]?dt[e]:qt[e]?ot(e,qt[e]):It[e]?ot(e,It[e]):Et[e]?ot(e,Et[e]):Ht[e]?Ht[e]:k(wx,e)||k(Pt,e)?ot(e,Lt(e,wx[e])):void 0},set:function(t,e,n){return t[e]=n,!0}}):(Object.keys(dt).forEach((function(t){Je[t]=dt[t]})),Object.keys(Et).forEach((function(t){Je[t]=ot(t,Et[t])})),Object.keys(It).forEach((function(t){Je[t]=ot(t,Et[t])})),Object.keys(Ht).forEach((function(t){Je[t]=Ht[t]})),Object.keys(qt).forEach((function(t){Je[t]=ot(t,qt[t])})),Object.keys(wx).forEach((function(t){(k(wx,t)||k(Pt,t))&&(Je[t]=ot(t,Lt(t,wx[t])))}))),wx.createApp=je,wx.createPage=qe,wx.createComponent=Xe;var Ye=Je,Qe=Ye;e.default=Qe},10:
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */function(t,e,n){t.exports=n(/*! regenerator-runtime */11)},11:
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */function(t,e,n){var r=function(){return this||"object"===typeof self&&self}()||Function("return this")(),i=r.regeneratorRuntime&&Object.getOwnPropertyNames(r).indexOf("regeneratorRuntime")>=0,o=i&&r.regeneratorRuntime;if(r.regeneratorRuntime=void 0,t.exports=n(/*! ./runtime */12),i)r.regeneratorRuntime=o;else try{delete r.regeneratorRuntime}catch(a){r.regeneratorRuntime=void 0}},12:
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */function(t,e){!function(e){"use strict";var n,r=Object.prototype,i=r.hasOwnProperty,o="function"===typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag",l="object"===typeof t,u=e.regeneratorRuntime;if(u)l&&(t.exports=u);else{u=e.regeneratorRuntime=l?t.exports:{},u.wrap=_;var h="suspendedStart",f="suspendedYield",p="executing",d="completed",v={},g={};g[a]=function(){return this};var y=Object.getPrototypeOf,m=y&&y(y(L([])));m&&m!==r&&i.call(m,a)&&(g=m);var x=S.prototype=w.prototype=Object.create(g);A.prototype=x.constructor=S,S.constructor=A,S[c]=A.displayName="GeneratorFunction",u.isGeneratorFunction=function(t){var e="function"===typeof t&&t.constructor;return!!e&&(e===A||"GeneratorFunction"===(e.displayName||e.name))},u.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,S):(t.__proto__=S,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(x),t},u.awrap=function(t){return{__await:t}},P(k.prototype),k.prototype[s]=function(){return this},u.AsyncIterator=k,u.async=function(t,e,n,r){var i=new k(_(t,e,n,r));return u.isGeneratorFunction(e)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},P(x),x[c]="Generator",x[a]=function(){return this},x.toString=function(){return"[object Generator]"},u.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){while(e.length){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},u.values=L,M.prototype={constructor:M,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(C),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0],e=t.completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,i){return s.type="throw",s.arg=t,e.next=r,i&&(e.method="next",e.arg=n),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var c=i.call(a,"catchLoc"),l=i.call(a,"finallyLoc");if(c&&l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),C(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;C(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:L(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),v}}}function _(t,e,n,r){var i=e&&e.prototype instanceof w?e:w,o=Object.create(i.prototype),a=new M(r||[]);return o._invoke=T(t,n,a),o}function b(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(r){return{type:"throw",arg:r}}}function w(){}function A(){}function S(){}function P(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function k(t){function e(n,r,o,a){var s=b(t[n],t,r);if("throw"!==s.type){var c=s.arg,l=c.value;return l&&"object"===typeof l&&i.call(l,"__await")?Promise.resolve(l.__await).then((function(t){e("next",t,o,a)}),(function(t){e("throw",t,o,a)})):Promise.resolve(l).then((function(t){c.value=t,o(c)}),(function(t){return e("throw",t,o,a)}))}a(s.arg)}var n;function r(t,r){function i(){return new Promise((function(n,i){e(t,r,n,i)}))}return n=n?n.then(i,i):i()}this._invoke=r}function T(t,e,n){var r=h;return function(i,o){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===i)throw o;return E()}n.method=i,n.arg=o;while(1){var a=n.delegate;if(a){var s=O(a,n);if(s){if(s===v)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===h)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var c=b(t,e,n);if("normal"===c.type){if(r=n.done?d:f,c.arg===v)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=d,n.method="throw",n.arg=c.arg)}}}function O(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,O(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var i=b(r,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,v;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function $(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach($,this),this.reset(!0)}function L(t){if(t){var e=t[a];if(e)return e.call(t);if("function"===typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function e(){while(++r<t.length)if(i.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return o.next=o}}return{next:E}}function E(){return{value:n,done:!0}}}(function(){return this||"object"===typeof self&&self}()||Function("return this")())},13:
/*!*****************************************************************!*\
  !*** D:/g工作/zilv/code/defaultmoban/defaultmoban/store/index.js ***!
  \*****************************************************************/
/*! no static exports found */function(t,e,n){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=a(n(/*! ./node_modules/@babel/runtime/regenerator */10)),i=a(n(/*! vue */2)),o=a(n(/*! vuex */14));function a(t){return t&&t.__esModule?t:{default:t}}function s(t,e,n,r,i,o,a){try{var s=t[o](a),c=s.value}catch(l){return void n(l)}s.done?e(c):Promise.resolve(c).then(r,i)}function c(t){return function(){var e=this,n=arguments;return new Promise((function(r,i){var o=t.apply(e,n);function a(t){s(o,r,i,a,c,"next",t)}function c(t){s(o,r,i,a,c,"throw",t)}a(void 0)}))}}i.default.use(o.default);var l=new o.default.Store({state:{hasLogin:!1,loginProvider:"",userInfo:{},avatar:"",nickname:"",token:"",honor:"",userid:"",level:0,progress:0,starNum:null,cjNum:0,levelupdata:!1,honorupdata:!1,openid:null,testvuex:!1,colorIndex:0,signList:[],colorList:["#FF0000","#00FF00","#0000FF"]},mutations:{login:function(e,n){e.hasLogin=!0,e.userInfo=n,e.avatar=n.weiChatAuthUser.avatarUrl,e.nickname=n.weiChatAuthUser.nickName,e.token=n.token;for(var r=["avatarUrl","nickName","token","isLogin","userId"],i=[n.weiChatAuthUser.avatarUrl,n.weiChatAuthUser.nickName,n.token,!0,n.userId],o=0;o<r.length;o++)t.setStorageSync({key:r[o],data:i[o]});console.log("state_userInfo is"),console.log(e.userInfo)},logout:function(t){t.hasLogin=!1,t.openid=null},addLevel:function(t,e){t.level=t.level+e},levelUpdata:function(t,e){t.levelupdata=e},honorUpdata:function(t,e){t.honorupdata=e},changeLevel:function(t,e){t.level=e,console.log("state_level is ========"),console.log(t.level)},changeProgress:function(t,e){t.progress=e,console.log("state_progerss is ========"),console.log(t.progress)},changeStar:function(t,e){t.starNum=e,console.log("state_starNum  is ========"),console.log(t.starNum)},changeprogress:function(t,e){t.progress=e},changeHonor:function(t,e){t.honor=e},changeCj:function(t,e){t.cjNum=e},changName:function(t,e){t.nickname=e},changesignList:function(t,e){t.signList=e},setOpenid:function(t,e){t.openid=e},setTestTrue:function(t){t.testvuex=!0},setTestFalse:function(t){t.testvuex=!1},setColorIndex:function(t,e){t.colorIndex=e}},getters:{currentColor:function(t){return t.colorList[t.colorIndex]}},actions:{getUserOpenId:function(){var e=c(r.default.mark((function e(n){var i,o;return r.default.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return i=n.commit,o=n.state,e.next=3,new Promise((function(e,n){o.openid?e(o.openid):t.login({success:function(t){i("login"),setTimeout((function(){var t="123456789";console.log("uni.request mock openid["+t+"]"),i("setOpenid",t),e(t)}),1e3)},fail:function(t){console.log("uni.login 接口调用失败，将无法正常使用开放接口等服务",t),n(t)}})}));case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}),e)})));function n(t){return e.apply(this,arguments)}return n}()}}),u=l;e.default=u}).call(this,n(/*! ./node_modules/@dcloudio/uni-mp-qq/dist/index.js */1)["default"])},14:
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: default, Store, createNamespacedHelpers, install, mapActions, mapGetters, mapMutations, mapState */function(t,e,n){"use strict";n.r(e),function(t){
/*!
 * vuex v3.4.0
 * (c) 2020 Evan You
 * @license MIT
 */
function r(t){var e=Number(t.version.split(".")[0]);if(e>=2)t.mixin({beforeCreate:r});else{var n=t.prototype._init;t.prototype._init=function(t){void 0===t&&(t={}),t.init=t.init?[r].concat(t.init):r,n.call(this,t)}}function r(){var t=this.$options;t.store?this.$store="function"===typeof t.store?t.store():t.store:t.parent&&t.parent.$store&&(this.$store=t.parent.$store)}}n.d(e,"Store",(function(){return w})),n.d(e,"createNamespacedHelpers",(function(){return W})),n.d(e,"install",(function(){return R})),n.d(e,"mapActions",(function(){return N})),n.d(e,"mapGetters",(function(){return z})),n.d(e,"mapMutations",(function(){return I})),n.d(e,"mapState",(function(){return F}));var i="undefined"!==typeof window?window:"undefined"!==typeof t?t:{},o=i.__VUE_DEVTOOLS_GLOBAL_HOOK__;function a(t){o&&(t._devtoolHook=o,o.emit("vuex:init",t),o.on("vuex:travel-to-state",(function(e){t.replaceState(e)})),t.subscribe((function(t,e){o.emit("vuex:mutation",t,e)}),{prepend:!0}),t.subscribeAction((function(t,e){o.emit("vuex:action",t,e)}),{prepend:!0}))}function s(t,e){Object.keys(t).forEach((function(n){return e(t[n],n)}))}function c(t){return null!==t&&"object"===typeof t}function l(t){return t&&"function"===typeof t.then}function u(t,e){if(!t)throw new Error("[vuex] "+e)}function h(t,e){return function(){return t(e)}}var f=function(t,e){this.runtime=e,this._children=Object.create(null),this._rawModule=t;var n=t.state;this.state=("function"===typeof n?n():n)||{}},p={namespaced:{configurable:!0}};p.namespaced.get=function(){return!!this._rawModule.namespaced},f.prototype.addChild=function(t,e){this._children[t]=e},f.prototype.removeChild=function(t){delete this._children[t]},f.prototype.getChild=function(t){return this._children[t]},f.prototype.hasChild=function(t){return t in this._children},f.prototype.update=function(t){this._rawModule.namespaced=t.namespaced,t.actions&&(this._rawModule.actions=t.actions),t.mutations&&(this._rawModule.mutations=t.mutations),t.getters&&(this._rawModule.getters=t.getters)},f.prototype.forEachChild=function(t){s(this._children,t)},f.prototype.forEachGetter=function(t){this._rawModule.getters&&s(this._rawModule.getters,t)},f.prototype.forEachAction=function(t){this._rawModule.actions&&s(this._rawModule.actions,t)},f.prototype.forEachMutation=function(t){this._rawModule.mutations&&s(this._rawModule.mutations,t)},Object.defineProperties(f.prototype,p);var d=function(t){this.register([],t,!1)};function v(t,e,n){if(_(t,n),e.update(n),n.modules)for(var r in n.modules){if(!e.getChild(r))return void console.warn("[vuex] trying to add a new module '"+r+"' on hot reloading, manual reload is needed");v(t.concat(r),e.getChild(r),n.modules[r])}}d.prototype.get=function(t){return t.reduce((function(t,e){return t.getChild(e)}),this.root)},d.prototype.getNamespace=function(t){var e=this.root;return t.reduce((function(t,n){return e=e.getChild(n),t+(e.namespaced?n+"/":"")}),"")},d.prototype.update=function(t){v([],this.root,t)},d.prototype.register=function(t,e,n){var r=this;void 0===n&&(n=!0),_(t,e);var i=new f(e,n);if(0===t.length)this.root=i;else{var o=this.get(t.slice(0,-1));o.addChild(t[t.length-1],i)}e.modules&&s(e.modules,(function(e,i){r.register(t.concat(i),e,n)}))},d.prototype.unregister=function(t){var e=this.get(t.slice(0,-1)),n=t[t.length-1];e.getChild(n).runtime&&e.removeChild(n)},d.prototype.isRegistered=function(t){var e=this.get(t.slice(0,-1)),n=t[t.length-1];return e.hasChild(n)};var g,y={assert:function(t){return"function"===typeof t},expected:"function"},m={assert:function(t){return"function"===typeof t||"object"===typeof t&&"function"===typeof t.handler},expected:'function or object with "handler" function'},x={getters:y,mutations:y,actions:m};function _(t,e){Object.keys(x).forEach((function(n){if(e[n]){var r=x[n];s(e[n],(function(e,i){u(r.assert(e),b(t,n,i,e,r.expected))}))}}))}function b(t,e,n,r,i){var o=e+" should be "+i+' but "'+e+"."+n+'"';return t.length>0&&(o+=' in module "'+t.join(".")+'"'),o+=" is "+JSON.stringify(r)+".",o}var w=function t(e){var n=this;void 0===e&&(e={}),!g&&"undefined"!==typeof window&&window.Vue&&R(window.Vue),u(g,"must call Vue.use(Vuex) before creating a store instance."),u("undefined"!==typeof Promise,"vuex requires a Promise polyfill in this browser."),u(this instanceof t,"store must be called with the new operator.");var r=e.plugins;void 0===r&&(r=[]);var i=e.strict;void 0===i&&(i=!1),this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new d(e),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._watcherVM=new g,this._makeLocalGettersCache=Object.create(null);var o=this,s=this,c=s.dispatch,l=s.commit;this.dispatch=function(t,e){return c.call(o,t,e)},this.commit=function(t,e,n){return l.call(o,t,e,n)},this.strict=i;var h=this._modules.root.state;T(this,h,[],this._modules.root),k(this,h),r.forEach((function(t){return t(n)}));var f=void 0!==e.devtools?e.devtools:g.config.devtools;f&&a(this)},A={state:{configurable:!0}};function S(t,e,n){return e.indexOf(t)<0&&(n&&n.prepend?e.unshift(t):e.push(t)),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}function P(t,e){t._actions=Object.create(null),t._mutations=Object.create(null),t._wrappedGetters=Object.create(null),t._modulesNamespaceMap=Object.create(null);var n=t.state;T(t,n,[],t._modules.root,!0),k(t,n,e)}function k(t,e,n){var r=t._vm;t.getters={},t._makeLocalGettersCache=Object.create(null);var i=t._wrappedGetters,o={};s(i,(function(e,n){o[n]=h(e,t),Object.defineProperty(t.getters,n,{get:function(){return t._vm[n]},enumerable:!0})}));var a=g.config.silent;g.config.silent=!0,t._vm=new g({data:{$$state:e},computed:o}),g.config.silent=a,t.strict&&E(t),r&&(n&&t._withCommit((function(){r._data.$$state=null})),g.nextTick((function(){return r.$destroy()})))}function T(t,e,n,r,i){var o=!n.length,a=t._modules.getNamespace(n);if(r.namespaced&&(t._modulesNamespaceMap[a]&&console.error("[vuex] duplicate namespace "+a+" for the namespaced module "+n.join("/")),t._modulesNamespaceMap[a]=r),!o&&!i){var s=j(e,n.slice(0,-1)),c=n[n.length-1];t._withCommit((function(){c in s&&console.warn('[vuex] state field "'+c+'" was overridden by a module with the same name at "'+n.join(".")+'"'),g.set(s,c,r.state)}))}var l=r.context=O(t,a,n);r.forEachMutation((function(e,n){var r=a+n;C(t,r,e,l)})),r.forEachAction((function(e,n){var r=e.root?n:a+n,i=e.handler||e;M(t,r,i,l)})),r.forEachGetter((function(e,n){var r=a+n;L(t,r,e,l)})),r.forEachChild((function(r,o){T(t,e,n.concat(o),r,i)}))}function O(t,e,n){var r=""===e,i={dispatch:r?t.dispatch:function(n,r,i){var o=D(n,r,i),a=o.payload,s=o.options,c=o.type;if(s&&s.root||(c=e+c,t._actions[c]))return t.dispatch(c,a);console.error("[vuex] unknown local action type: "+o.type+", global type: "+c)},commit:r?t.commit:function(n,r,i){var o=D(n,r,i),a=o.payload,s=o.options,c=o.type;s&&s.root||(c=e+c,t._mutations[c])?t.commit(c,a,s):console.error("[vuex] unknown local mutation type: "+o.type+", global type: "+c)}};return Object.defineProperties(i,{getters:{get:r?function(){return t.getters}:function(){return $(t,e)}},state:{get:function(){return j(t.state,n)}}}),i}function $(t,e){if(!t._makeLocalGettersCache[e]){var n={},r=e.length;Object.keys(t.getters).forEach((function(i){if(i.slice(0,r)===e){var o=i.slice(r);Object.defineProperty(n,o,{get:function(){return t.getters[i]},enumerable:!0})}})),t._makeLocalGettersCache[e]=n}return t._makeLocalGettersCache[e]}function C(t,e,n,r){var i=t._mutations[e]||(t._mutations[e]=[]);i.push((function(e){n.call(t,r.state,e)}))}function M(t,e,n,r){var i=t._actions[e]||(t._actions[e]=[]);i.push((function(e){var i=n.call(t,{dispatch:r.dispatch,commit:r.commit,getters:r.getters,state:r.state,rootGetters:t.getters,rootState:t.state},e);return l(i)||(i=Promise.resolve(i)),t._devtoolHook?i.catch((function(e){throw t._devtoolHook.emit("vuex:error",e),e})):i}))}function L(t,e,n,r){t._wrappedGetters[e]?console.error("[vuex] duplicate getter key: "+e):t._wrappedGetters[e]=function(t){return n(r.state,r.getters,t.state,t.getters)}}function E(t){t._vm.$watch((function(){return this._data.$$state}),(function(){u(t._committing,"do not mutate vuex store state outside mutation handlers.")}),{deep:!0,sync:!0})}function j(t,e){return e.reduce((function(t,e){return t[e]}),t)}function D(t,e,n){return c(t)&&t.type&&(n=e,e=t,t=t.type),u("string"===typeof t,"expects string as the type, but found "+typeof t+"."),{type:t,payload:e,options:n}}function R(t){g&&t===g?console.error("[vuex] already installed. Vue.use(Vuex) should be called only once."):(g=t,r(g))}A.state.get=function(){return this._vm._data.$$state},A.state.set=function(t){u(!1,"use store.replaceState() to explicit replace store state.")},w.prototype.commit=function(t,e,n){var r=this,i=D(t,e,n),o=i.type,a=i.payload,s=i.options,c={type:o,payload:a},l=this._mutations[o];l?(this._withCommit((function(){l.forEach((function(t){t(a)}))})),this._subscribers.slice().forEach((function(t){return t(c,r.state)})),s&&s.silent&&console.warn("[vuex] mutation type: "+o+". Silent option has been removed. Use the filter functionality in the vue-devtools")):console.error("[vuex] unknown mutation type: "+o)},w.prototype.dispatch=function(t,e){var n=this,r=D(t,e),i=r.type,o=r.payload,a={type:i,payload:o},s=this._actions[i];if(s){try{this._actionSubscribers.slice().filter((function(t){return t.before})).forEach((function(t){return t.before(a,n.state)}))}catch(l){console.warn("[vuex] error in before action subscribers: "),console.error(l)}var c=s.length>1?Promise.all(s.map((function(t){return t(o)}))):s[0](o);return new Promise((function(t,e){c.then((function(e){try{n._actionSubscribers.filter((function(t){return t.after})).forEach((function(t){return t.after(a,n.state)}))}catch(l){console.warn("[vuex] error in after action subscribers: "),console.error(l)}t(e)}),(function(t){try{n._actionSubscribers.filter((function(t){return t.error})).forEach((function(e){return e.error(a,n.state,t)}))}catch(l){console.warn("[vuex] error in error action subscribers: "),console.error(l)}e(t)}))}))}console.error("[vuex] unknown action type: "+i)},w.prototype.subscribe=function(t,e){return S(t,this._subscribers,e)},w.prototype.subscribeAction=function(t,e){var n="function"===typeof t?{before:t}:t;return S(n,this._actionSubscribers,e)},w.prototype.watch=function(t,e,n){var r=this;return u("function"===typeof t,"store.watch only accepts a function."),this._watcherVM.$watch((function(){return t(r.state,r.getters)}),e,n)},w.prototype.replaceState=function(t){var e=this;this._withCommit((function(){e._vm._data.$$state=t}))},w.prototype.registerModule=function(t,e,n){void 0===n&&(n={}),"string"===typeof t&&(t=[t]),u(Array.isArray(t),"module path must be a string or an Array."),u(t.length>0,"cannot register the root module by using registerModule."),this._modules.register(t,e),T(this,this.state,t,this._modules.get(t),n.preserveState),k(this,this.state)},w.prototype.unregisterModule=function(t){var e=this;"string"===typeof t&&(t=[t]),u(Array.isArray(t),"module path must be a string or an Array."),this._modules.unregister(t),this._withCommit((function(){var n=j(e.state,t.slice(0,-1));g.delete(n,t[t.length-1])})),P(this)},w.prototype.hasModule=function(t){return"string"===typeof t&&(t=[t]),u(Array.isArray(t),"module path must be a string or an Array."),this._modules.isRegistered(t)},w.prototype.hotUpdate=function(t){this._modules.update(t),P(this,!0)},w.prototype._withCommit=function(t){var e=this._committing;this._committing=!0,t(),this._committing=e},Object.defineProperties(w.prototype,A);var F=U((function(t,e){var n={};return V(e)||console.error("[vuex] mapState: mapper parameter must be either an Array or an Object"),B(e).forEach((function(e){var r=e.key,i=e.val;n[r]=function(){var e=this.$store.state,n=this.$store.getters;if(t){var r=H(this.$store,"mapState",t);if(!r)return;e=r.context.state,n=r.context.getters}return"function"===typeof i?i.call(this,e,n):e[i]},n[r].vuex=!0})),n})),I=U((function(t,e){var n={};return V(e)||console.error("[vuex] mapMutations: mapper parameter must be either an Array or an Object"),B(e).forEach((function(e){var r=e.key,i=e.val;n[r]=function(){var e=[],n=arguments.length;while(n--)e[n]=arguments[n];var r=this.$store.commit;if(t){var o=H(this.$store,"mapMutations",t);if(!o)return;r=o.context.commit}return"function"===typeof i?i.apply(this,[r].concat(e)):r.apply(this.$store,[i].concat(e))}})),n})),z=U((function(t,e){var n={};return V(e)||console.error("[vuex] mapGetters: mapper parameter must be either an Array or an Object"),B(e).forEach((function(e){var r=e.key,i=e.val;i=t+i,n[r]=function(){if(!t||H(this.$store,"mapGetters",t)){if(i in this.$store.getters)return this.$store.getters[i];console.error("[vuex] unknown getter: "+i)}},n[r].vuex=!0})),n})),N=U((function(t,e){var n={};return V(e)||console.error("[vuex] mapActions: mapper parameter must be either an Array or an Object"),B(e).forEach((function(e){var r=e.key,i=e.val;n[r]=function(){var e=[],n=arguments.length;while(n--)e[n]=arguments[n];var r=this.$store.dispatch;if(t){var o=H(this.$store,"mapActions",t);if(!o)return;r=o.context.dispatch}return"function"===typeof i?i.apply(this,[r].concat(e)):r.apply(this.$store,[i].concat(e))}})),n})),W=function(t){return{mapState:F.bind(null,t),mapGetters:z.bind(null,t),mapMutations:I.bind(null,t),mapActions:N.bind(null,t)}};function B(t){return V(t)?Array.isArray(t)?t.map((function(t){return{key:t,val:t}})):Object.keys(t).map((function(e){return{key:e,val:t[e]}})):[]}function V(t){return Array.isArray(t)||c(t)}function U(t){return function(e,n){return"string"!==typeof e?(n=e,e=""):"/"!==e.charAt(e.length-1)&&(e+="/"),t(e,n)}}function H(t,e,n){var r=t._modulesNamespaceMap[n];return r||console.error("[vuex] module namespace not found in "+e+"(): "+n),r}var G={Store:w,install:R,version:"3.4.0",mapState:F,mapMutations:I,mapGetters:z,mapActions:N,createNamespacedHelpers:W};e["default"]=G}.call(this,n(/*! ./../../webpack/buildin/global.js */3))},2:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */function(t,e,n){"use strict";n.r(e),function(t){
/*!
 * Vue.js v2.6.11
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */
var n=Object.freeze({});function r(t){return void 0===t||null===t}function i(t){return void 0!==t&&null!==t}function o(t){return!0===t}function a(t){return!1===t}function s(t){return"string"===typeof t||"number"===typeof t||"symbol"===typeof t||"boolean"===typeof t}function c(t){return null!==t&&"object"===typeof t}var l=Object.prototype.toString;function u(t){return l.call(t).slice(8,-1)}function h(t){return"[object Object]"===l.call(t)}function f(t){return"[object RegExp]"===l.call(t)}function p(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function d(t){return i(t)&&"function"===typeof t.then&&"function"===typeof t.catch}function v(t){return null==t?"":Array.isArray(t)||h(t)&&t.toString===l?JSON.stringify(t,null,2):String(t)}function g(t){var e=parseFloat(t);return isNaN(e)?t:e}function y(t,e){for(var n=Object.create(null),r=t.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}var m=y("slot,component",!0),x=y("key,ref,slot,slot-scope,is");function _(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var b=Object.prototype.hasOwnProperty;function w(t,e){return b.call(t,e)}function A(t){var e=Object.create(null);return function(n){var r=e[n];return r||(e[n]=t(n))}}var S=/-(\w)/g,P=A((function(t){return t.replace(S,(function(t,e){return e?e.toUpperCase():""}))})),k=A((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),T=/\B([A-Z])/g,O=A((function(t){return t.replace(T,"-$1").toLowerCase()}));function $(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n}function C(t,e){return t.bind(e)}var M=Function.prototype.bind?C:$;function L(t,e){e=e||0;var n=t.length-e,r=new Array(n);while(n--)r[n]=t[n+e];return r}function E(t,e){for(var n in e)t[n]=e[n];return t}function j(t){for(var e={},n=0;n<t.length;n++)t[n]&&E(e,t[n]);return e}function D(t,e,n){}var R=function(t,e,n){return!1},F=function(t){return t};function I(t,e){if(t===e)return!0;var n=c(t),r=c(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var i=Array.isArray(t),o=Array.isArray(e);if(i&&o)return t.length===e.length&&t.every((function(t,n){return I(t,e[n])}));if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(i||o)return!1;var a=Object.keys(t),s=Object.keys(e);return a.length===s.length&&a.every((function(n){return I(t[n],e[n])}))}catch(l){return!1}}function z(t,e){for(var n=0;n<t.length;n++)if(I(t[n],e))return n;return-1}function N(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var W=["component","directive","filter"],B=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],V={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:R,isReservedAttr:R,isUnknownElement:R,getTagNamespace:D,parsePlatformTagName:F,mustUseProp:R,async:!0,_lifecycleHooks:B},U=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function G(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var q=new RegExp("[^"+U.source+".$_\\d]");function X(t){if(!q.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}var J,Y="__proto__"in{},Q="undefined"!==typeof window,K="undefined"!==typeof WXEnvironment&&!!WXEnvironment.platform,Z=K&&WXEnvironment.platform.toLowerCase(),tt=Q&&window.navigator.userAgent.toLowerCase(),et=tt&&/msie|trident/.test(tt),nt=(tt&&tt.indexOf("msie 9.0"),tt&&tt.indexOf("edge/")>0),rt=(tt&&tt.indexOf("android"),tt&&/iphone|ipad|ipod|ios/.test(tt)||"ios"===Z),it=(tt&&/chrome\/\d+/.test(tt),tt&&/phantomjs/.test(tt),tt&&tt.match(/firefox\/(\d+)/),{}.watch);if(Q)try{var ot={};Object.defineProperty(ot,"passive",{get:function(){}}),window.addEventListener("test-passive",null,ot)}catch(Di){}var at=function(){return void 0===J&&(J=!Q&&!K&&"undefined"!==typeof t&&(t["process"]&&"server"===t["process"].env.VUE_ENV)),J},st=Q&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ct(t){return"function"===typeof t&&/native code/.test(t.toString())}var lt,ut="undefined"!==typeof Symbol&&ct(Symbol)&&"undefined"!==typeof Reflect&&ct(Reflect.ownKeys);lt="undefined"!==typeof Set&&ct(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var ht=D,ft=D,pt=D,dt=D,vt="undefined"!==typeof console,gt=/(?:^|[-_])(\w)/g,yt=function(t){return t.replace(gt,(function(t){return t.toUpperCase()})).replace(/[-_]/g,"")};ht=function(t,e){var n=e?pt(e):"";V.warnHandler?V.warnHandler.call(null,t,e,n):vt&&!V.silent&&console.error("[Vue warn]: "+t+n)},ft=function(t,e){vt&&!V.silent&&console.warn("[Vue tip]: "+t+(e?pt(e):""))},dt=function(t,e){if(t.$root===t)return t.$options&&t.$options.__file?""+t.$options.__file:"<Root>";var n="function"===typeof t&&null!=t.cid?t.options:t._isVue?t.$options||t.constructor.options:t,r=n.name||n._componentTag,i=n.__file;if(!r&&i){var o=i.match(/([^/\\]+)\.vue$/);r=o&&o[1]}return(r?"<"+yt(r)+">":"<Anonymous>")+(i&&!1!==e?" at "+i:"")};var mt=function(t,e){var n="";while(e)e%2===1&&(n+=t),e>1&&(t+=t),e>>=1;return n};pt=function(t){if(t._isVue&&t.$parent){var e=[],n=0;while(t&&"PageBody"!==t.$options.name){if(e.length>0){var r=e[e.length-1];if(r.constructor===t.constructor){n++,t=t.$parent;continue}n>0&&(e[e.length-1]=[r,n],n=0)}!t.$options.isReserved&&e.push(t),t=t.$parent}return"\n\nfound in\n\n"+e.map((function(t,e){return""+(0===e?"---\x3e ":mt(" ",5+2*e))+(Array.isArray(t)?dt(t[0])+"... ("+t[1]+" recursive calls)":dt(t))})).join("\n")}return"\n\n(found in "+dt(t)+")"};var xt=0,_t=function(){this.id=xt++,this.subs=[]};function bt(t){_t.SharedObject.targetStack.push(t),_t.SharedObject.target=t,_t.target=t}function wt(){_t.SharedObject.targetStack.pop(),_t.SharedObject.target=_t.SharedObject.targetStack[_t.SharedObject.targetStack.length-1],_t.target=_t.SharedObject.target}_t.prototype.addSub=function(t){this.subs.push(t)},_t.prototype.removeSub=function(t){_(this.subs,t)},_t.prototype.depend=function(){_t.SharedObject.target&&_t.SharedObject.target.addDep(this)},_t.prototype.notify=function(){var t=this.subs.slice();V.async||t.sort((function(t,e){return t.id-e.id}));for(var e=0,n=t.length;e<n;e++)t[e].update()},_t.SharedObject={},_t.SharedObject.target=null,_t.SharedObject.targetStack=[];var At=function(t,e,n,r,i,o,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},St={child:{configurable:!0}};St.child.get=function(){return this.componentInstance},Object.defineProperties(At.prototype,St);var Pt=function(t){void 0===t&&(t="");var e=new At;return e.text=t,e.isComment=!0,e};function kt(t){return new At(void 0,void 0,void 0,String(t))}function Tt(t){var e=new At(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var Ot=Array.prototype,$t=Object.create(Ot),Ct=["push","pop","shift","unshift","splice","sort","reverse"];Ct.forEach((function(t){var e=Ot[t];G($t,t,(function(){var n=[],r=arguments.length;while(r--)n[r]=arguments[r];var i,o=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2);break}return i&&a.observeArray(i),a.dep.notify(),o}))}));var Mt=Object.getOwnPropertyNames($t),Lt=!0;function Et(t){Lt=t}var jt=function(t){this.value=t,this.dep=new _t,this.vmCount=0,G(t,"__ob__",this),Array.isArray(t)?(Y?t.push!==t.__proto__.push?Rt(t,$t,Mt):Dt(t,$t):Rt(t,$t,Mt),this.observeArray(t)):this.walk(t)};function Dt(t,e){t.__proto__=e}function Rt(t,e,n){for(var r=0,i=n.length;r<i;r++){var o=n[r];G(t,o,e[o])}}function Ft(t,e){var n;if(c(t)&&!(t instanceof At))return w(t,"__ob__")&&t.__ob__ instanceof jt?n=t.__ob__:Lt&&!at()&&(Array.isArray(t)||h(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new jt(t)),e&&n&&n.vmCount++,n}function It(t,e,n,r,i){var o=new _t,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=t[e]);var l=!i&&Ft(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return _t.SharedObject.target&&(o.depend(),l&&(l.dep.depend(),Array.isArray(e)&&Wt(e))),e},set:function(e){var a=s?s.call(t):n;e===a||e!==e&&a!==a||(r&&r(),s&&!c||(c?c.call(t,e):n=e,l=!i&&Ft(e),o.notify()))}})}}function zt(t,e,n){if((r(t)||s(t))&&ht("Cannot set reactive property on undefined, null, or primitive value: "+t),Array.isArray(t)&&p(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var i=t.__ob__;return t._isVue||i&&i.vmCount?(ht("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):i?(It(i.value,e,n),i.dep.notify(),n):(t[e]=n,n)}function Nt(t,e){if((r(t)||s(t))&&ht("Cannot delete reactive property on undefined, null, or primitive value: "+t),Array.isArray(t)&&p(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount?ht("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):w(t,e)&&(delete t[e],n&&n.dep.notify())}}function Wt(t){for(var e=void 0,n=0,r=t.length;n<r;n++)e=t[n],e&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&Wt(e)}jt.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)It(t,e[n])},jt.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)Ft(t[e])};var Bt=V.optionMergeStrategies;function Vt(t,e){if(!e)return t;for(var n,r,i,o=ut?Reflect.ownKeys(e):Object.keys(e),a=0;a<o.length;a++)n=o[a],"__ob__"!==n&&(r=t[n],i=e[n],w(t,n)?r!==i&&h(r)&&h(i)&&Vt(r,i):zt(t,n,i));return t}function Ut(t,e,n){return n?function(){var r="function"===typeof e?e.call(n,n):e,i="function"===typeof t?t.call(n,n):t;return r?Vt(r,i):i}:e?t?function(){return Vt("function"===typeof e?e.call(this,this):e,"function"===typeof t?t.call(this,this):t)}:e:t}function Ht(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?Gt(n):n}function Gt(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}function qt(t,e,n,r){var i=Object.create(t||null);return e?(te(r,e,n),E(i,e)):i}Bt.el=Bt.propsData=function(t,e,n,r){return n||ht('option "'+r+'" can only be used during instance creation with the `new` keyword.'),Xt(t,e)},Bt.data=function(t,e,n){return n?Ut(t,e,n):e&&"function"!==typeof e?(ht('The "data" option should be a function that returns a per-instance value in component definitions.',n),t):Ut(t,e)},B.forEach((function(t){Bt[t]=Ht})),W.forEach((function(t){Bt[t+"s"]=qt})),Bt.watch=function(t,e,n,r){if(t===it&&(t=void 0),e===it&&(e=void 0),!e)return Object.create(t||null);if(te(r,e,n),!t)return e;var i={};for(var o in E(i,t),e){var a=i[o],s=e[o];a&&!Array.isArray(a)&&(a=[a]),i[o]=a?a.concat(s):Array.isArray(s)?s:[s]}return i},Bt.props=Bt.methods=Bt.inject=Bt.computed=function(t,e,n,r){if(e&&te(r,e,n),!t)return e;var i=Object.create(null);return E(i,t),e&&E(i,e),i},Bt.provide=Ut;var Xt=function(t,e){return void 0===e?t:e};function Jt(t){for(var e in t.components)Yt(e)}function Yt(t){new RegExp("^[a-zA-Z][\\-\\.0-9_"+U.source+"]*$").test(t)||ht('Invalid component name: "'+t+'". Component names should conform to valid custom element name in html5 specification.'),(m(t)||V.isReservedTag(t))&&ht("Do not use built-in or reserved HTML elements as component id: "+t)}function Qt(t,e){var n=t.props;if(n){var r,i,o,a={};if(Array.isArray(n)){r=n.length;while(r--)i=n[r],"string"===typeof i?(o=P(i),a[o]={type:null}):ht("props must be strings when using array syntax.")}else if(h(n))for(var s in n)i=n[s],o=P(s),a[o]=h(i)?i:{type:i};else ht('Invalid value for option "props": expected an Array or an Object, but got '+u(n)+".",e);t.props=a}}function Kt(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var i=0;i<n.length;i++)r[n[i]]={from:n[i]};else if(h(n))for(var o in n){var a=n[o];r[o]=h(a)?E({from:o},a):{from:a}}else ht('Invalid value for option "inject": expected an Array or an Object, but got '+u(n)+".",e)}}function Zt(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"===typeof r&&(e[n]={bind:r,update:r})}}function te(t,e,n){h(e)||ht('Invalid value for option "'+t+'": expected an Object, but got '+u(e)+".",n)}function ee(t,e,n){if(Jt(e),"function"===typeof e&&(e=e.options),Qt(e,n),Kt(e,n),Zt(e),!e._base&&(e.extends&&(t=ee(t,e.extends,n)),e.mixins))for(var r=0,i=e.mixins.length;r<i;r++)t=ee(t,e.mixins[r],n);var o,a={};for(o in t)s(o);for(o in e)w(t,o)||s(o);function s(r){var i=Bt[r]||Xt;a[r]=i(t[r],e[r],n,r)}return a}function ne(t,e,n,r){if("string"===typeof n){var i=t[e];if(w(i,n))return i[n];var o=P(n);if(w(i,o))return i[o];var a=k(o);if(w(i,a))return i[a];var s=i[n]||i[o]||i[a];return r&&!s&&ht("Failed to resolve "+e.slice(0,-1)+": "+n,t),s}}function re(t,e,n,r){var i=e[t],o=!w(n,t),a=n[t],s=ue(Boolean,i.type);if(s>-1)if(o&&!w(i,"default"))a=!1;else if(""===a||a===O(t)){var c=ue(String,i.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=ie(r,i,t);var l=Lt;Et(!0),Ft(a),Et(l)}return oe(i,t,a,r,o),a}function ie(t,e,n){if(w(e,"default")){var r=e.default;return c(r)&&ht('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',t),t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n]?t._props[n]:"function"===typeof r&&"Function"!==ce(e.type)?r.call(t):r}}function oe(t,e,n,r,i){if(t.required&&i)ht('Missing required prop: "'+e+'"',r);else if(null!=n||t.required){var o=t.type,a=!o||!0===o,s=[];if(o){Array.isArray(o)||(o=[o]);for(var c=0;c<o.length&&!a;c++){var l=se(n,o[c]);s.push(l.expectedType||""),a=l.valid}}if(a){var u=t.validator;u&&(u(n)||ht('Invalid prop: custom validator check failed for prop "'+e+'".',r))}else ht(he(e,n,s),r)}}var ae=/^(String|Number|Boolean|Function|Symbol)$/;function se(t,e){var n,r=ce(e);if(ae.test(r)){var i=typeof t;n=i===r.toLowerCase(),n||"object"!==i||(n=t instanceof e)}else n="Object"===r?h(t):"Array"===r?Array.isArray(t):t instanceof e;return{valid:n,expectedType:r}}function ce(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function le(t,e){return ce(t)===ce(e)}function ue(t,e){if(!Array.isArray(e))return le(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(le(e[n],t))return n;return-1}function he(t,e,n){var r='Invalid prop: type check failed for prop "'+t+'". Expected '+n.map(k).join(", "),i=n[0],o=u(e),a=fe(e,i),s=fe(e,o);return 1===n.length&&pe(i)&&!de(i,o)&&(r+=" with value "+a),r+=", got "+o+" ",pe(o)&&(r+="with value "+s+"."),r}function fe(t,e){return"String"===e?'"'+t+'"':"Number"===e?""+Number(t):""+t}function pe(t){var e=["string","number","boolean"];return e.some((function(e){return t.toLowerCase()===e}))}function de(){var t=[],e=arguments.length;while(e--)t[e]=arguments[e];return t.some((function(t){return"boolean"===t.toLowerCase()}))}function ve(t,e,n){bt();try{if(e){var r=e;while(r=r.$parent){var i=r.$options.errorCaptured;if(i)for(var o=0;o<i.length;o++)try{var a=!1===i[o].call(r,t,e,n);if(a)return}catch(Di){ye(Di,r,"errorCaptured hook")}}}ye(t,e,n)}finally{wt()}}function ge(t,e,n,r,i){var o;try{o=n?t.apply(e,n):t.call(e),o&&!o._isVue&&d(o)&&!o._handled&&(o.catch((function(t){return ve(t,r,i+" (Promise/async)")})),o._handled=!0)}catch(Di){ve(Di,r,i)}return o}function ye(t,e,n){if(V.errorHandler)try{return V.errorHandler.call(null,t,e,n)}catch(Di){Di!==t&&me(Di,null,"config.errorHandler")}me(t,e,n)}function me(t,e,n){if(ht("Error in "+n+': "'+t.toString()+'"',e),!Q&&!K||"undefined"===typeof console)throw t;console.error(t)}var xe,_e,be=[],we=!1;function Ae(){we=!1;var t=be.slice(0);be.length=0;for(var e=0;e<t.length;e++)t[e]()}if("undefined"!==typeof Promise&&ct(Promise)){var Se=Promise.resolve();xe=function(){Se.then(Ae),rt&&setTimeout(D)}}else if(et||"undefined"===typeof MutationObserver||!ct(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())xe="undefined"!==typeof setImmediate&&ct(setImmediate)?function(){setImmediate(Ae)}:function(){setTimeout(Ae,0)};else{var Pe=1,ke=new MutationObserver(Ae),Te=document.createTextNode(String(Pe));ke.observe(Te,{characterData:!0}),xe=function(){Pe=(Pe+1)%2,Te.data=String(Pe)}}function Oe(t,e){var n;if(be.push((function(){if(t)try{t.call(e)}catch(Di){ve(Di,e,"nextTick")}else n&&n(e)})),we||(we=!0,xe()),!t&&"undefined"!==typeof Promise)return new Promise((function(t){n=t}))}var $e=y("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),Ce=function(t,e){ht('Property or method "'+e+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',t)},Me=function(t,e){ht('Property "'+e+'" must be accessed with "$data.'+e+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internals. See: https://vuejs.org/v2/api/#data',t)},Le="undefined"!==typeof Proxy&&ct(Proxy);if(Le){var Ee=y("stop,prevent,self,ctrl,shift,alt,meta,exact");V.keyCodes=new Proxy(V.keyCodes,{set:function(t,e,n){return Ee(e)?(ht("Avoid overwriting built-in modifier in config.keyCodes: ."+e),!1):(t[e]=n,!0)}})}var je={has:function(t,e){var n=e in t,r=$e(e)||"string"===typeof e&&"_"===e.charAt(0)&&!(e in t.$data);return n||r||(e in t.$data?Me(t,e):Ce(t,e)),n||!r}},De={get:function(t,e){return"string"!==typeof e||e in t||(e in t.$data?Me(t,e):Ce(t,e)),t[e]}};_e=function(t){if(Le){var e=t.$options,n=e.render&&e.render._withStripped?De:je;t._renderProxy=new Proxy(t,n)}else t._renderProxy=t};var Re,Fe,Ie=new lt;function ze(t){Ne(t,Ie),Ie.clear()}function Ne(t,e){var n,r,i=Array.isArray(t);if(!(!i&&!c(t)||Object.isFrozen(t)||t instanceof At)){if(t.__ob__){var o=t.__ob__.dep.id;if(e.has(o))return;e.add(o)}if(i){n=t.length;while(n--)Ne(t[n],e)}else{r=Object.keys(t),n=r.length;while(n--)Ne(t[r[n]],e)}}}var We=Q&&window.performance;We&&We.mark&&We.measure&&We.clearMarks&&We.clearMeasures&&(Re=function(t){return We.mark(t)},Fe=function(t,e,n){We.measure(t,e,n),We.clearMarks(e),We.clearMarks(n)});var Be=A((function(t){var e="&"===t.charAt(0);t=e?t.slice(1):t;var n="~"===t.charAt(0);t=n?t.slice(1):t;var r="!"===t.charAt(0);return t=r?t.slice(1):t,{name:t,once:n,capture:r,passive:e}}));function Ve(t,e){function n(){var t=arguments,r=n.fns;if(!Array.isArray(r))return ge(r,null,arguments,e,"v-on handler");for(var i=r.slice(),o=0;o<i.length;o++)ge(i[o],null,t,e,"v-on handler")}return n.fns=t,n}function Ue(t,e,n,i,a,s){var c,l,u,h;for(c in t)l=t[c],u=e[c],h=Be(c),r(l)?ht('Invalid handler for event "'+h.name+'": got '+String(l),s):r(u)?(r(l.fns)&&(l=t[c]=Ve(l,s)),o(h.once)&&(l=t[c]=a(h.name,l,h.capture)),n(h.name,l,h.capture,h.passive,h.params)):l!==u&&(u.fns=l,t[c]=u);for(c in e)r(t[c])&&(h=Be(c),i(h.name,e[c],h.capture))}function He(t,e,n,o){var a=e.options.mpOptions&&e.options.mpOptions.properties;if(r(a))return n;var s=e.options.mpOptions.externalClasses||[],c=t.attrs,l=t.props;if(i(c)||i(l))for(var u in a){var h=O(u),f=qe(n,l,u,h,!0)||qe(n,c,u,h,!1);f&&n[u]&&-1!==s.indexOf(h)&&o[P(n[u])]&&(n[u]=o[P(n[u])])}return n}function Ge(t,e,n,o){var a=e.options.props;if(r(a))return He(t,e,{},o);var s={},c=t.attrs,l=t.props;if(i(c)||i(l))for(var u in a){var h=O(u),f=u.toLowerCase();u!==f&&c&&w(c,f)&&ft('Prop "'+f+'" is passed to component '+dt(n||e)+', but the declared prop name is "'+u+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+h+'" instead of "'+u+'".'),qe(s,l,u,h,!0)||qe(s,c,u,h,!1)}return He(t,e,s,o)}function qe(t,e,n,r,o){if(i(e)){if(w(e,n))return t[n]=e[n],o||delete e[n],!0;if(w(e,r))return t[n]=e[r],o||delete e[r],!0}return!1}function Xe(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}function Je(t){return s(t)?[kt(t)]:Array.isArray(t)?Qe(t):void 0}function Ye(t){return i(t)&&i(t.text)&&a(t.isComment)}function Qe(t,e){var n,a,c,l,u=[];for(n=0;n<t.length;n++)a=t[n],r(a)||"boolean"===typeof a||(c=u.length-1,l=u[c],Array.isArray(a)?a.length>0&&(a=Qe(a,(e||"")+"_"+n),Ye(a[0])&&Ye(l)&&(u[c]=kt(l.text+a[0].text),a.shift()),u.push.apply(u,a)):s(a)?Ye(l)?u[c]=kt(l.text+a):""!==a&&u.push(kt(a)):Ye(a)&&Ye(l)?u[c]=kt(l.text+a.text):(o(t._isVList)&&i(a.tag)&&r(a.key)&&i(e)&&(a.key="__vlist"+e+"_"+n+"__"),u.push(a)));return u}function Ke(t){var e=t.$options.provide;e&&(t._provided="function"===typeof e?e.call(t):e)}function Ze(t){var e=tn(t.$options.inject,t);e&&(Et(!1),Object.keys(e).forEach((function(n){It(t,n,e[n],(function(){ht('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',t)}))})),Et(!0))}function tn(t,e){if(t){for(var n=Object.create(null),r=ut?Reflect.ownKeys(t):Object.keys(t),i=0;i<r.length;i++){var o=r[i];if("__ob__"!==o){var a=t[o].from,s=e;while(s){if(s._provided&&w(s._provided,a)){n[o]=s._provided[a];break}s=s.$parent}if(!s)if("default"in t[o]){var c=t[o].default;n[o]="function"===typeof c?c.call(e):c}else ht('Injection "'+o+'" not found',e)}}return n}}function en(t,e){if(!t||!t.length)return{};for(var n={},r=0,i=t.length;r<i;r++){var o=t[r],a=o.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,o.context!==e&&o.fnContext!==e||!a||null==a.slot)o.asyncMeta&&o.asyncMeta.data&&"page"===o.asyncMeta.data.slot?(n["page"]||(n["page"]=[])).push(o):(n.default||(n.default=[])).push(o);else{var s=a.slot,c=n[s]||(n[s]=[]);"template"===o.tag?c.push.apply(c,o.children||[]):c.push(o)}}for(var l in n)n[l].every(nn)&&delete n[l];return n}function nn(t){return t.isComment&&!t.asyncFactory||" "===t.text}function rn(t,e,r){var i,o=Object.keys(e).length>0,a=t?!!t.$stable:!o,s=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(a&&r&&r!==n&&s===r.$key&&!o&&!r.$hasNormal)return r;for(var c in i={},t)t[c]&&"$"!==c[0]&&(i[c]=on(e,c,t[c]))}else i={};for(var l in e)l in i||(i[l]=an(e,l));return t&&Object.isExtensible(t)&&(t._normalized=i),G(i,"$stable",a),G(i,"$key",s),G(i,"$hasNormal",o),i}function on(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({});return t=t&&"object"===typeof t&&!Array.isArray(t)?[t]:Je(t),t&&(0===t.length||1===t.length&&t[0].isComment)?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function an(t,e){return function(){return t[e]}}function sn(t,e){var n,r,o,a,s;if(Array.isArray(t)||"string"===typeof t)for(n=new Array(t.length),r=0,o=t.length;r<o;r++)n[r]=e(t[r],r,r,r);else if("number"===typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r,r,r);else if(c(t))if(ut&&t[Symbol.iterator]){n=[];var l=t[Symbol.iterator](),u=l.next();while(!u.done)n.push(e(u.value,n.length,r++,r)),u=l.next()}else for(a=Object.keys(t),n=new Array(a.length),r=0,o=a.length;r<o;r++)s=a[r],n[r]=e(t[s],s,r,r);return i(n)||(n=[]),n._isVList=!0,n}function cn(t,e,n,r){var i,o=this.$scopedSlots[t];o?(n=n||{},r&&(c(r)||ht("slot v-bind without argument expects an Object",this),n=E(E({},r),n)),i=o(n,this,n._i)||e):i=this.$slots[t]||e;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},i):i}function ln(t){return ne(this.$options,"filters",t,!0)||F}function un(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function hn(t,e,n,r,i){var o=V.keyCodes[e]||n;return i&&r&&!V.keyCodes[e]?un(i,r):o?un(o,t):r?O(r)!==e:void 0}function fn(t,e,n,r,i){if(n)if(c(n)){var o;Array.isArray(n)&&(n=j(n));var a=function(a){if("class"===a||"style"===a||x(a))o=t;else{var s=t.attrs&&t.attrs.type;o=r||V.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var c=P(a),l=O(a);if(!(c in o)&&!(l in o)&&(o[a]=n[a],i)){var u=t.on||(t.on={});u["update:"+a]=function(t){n[a]=t}}};for(var s in n)a(s)}else ht("v-bind without argument expects an Object or Array value",this);return t}function pn(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e||(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),vn(r,"__static__"+t,!1)),r}function dn(t,e,n){return vn(t,"__once__"+e+(n?"_"+n:""),!0),t}function vn(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!==typeof t[r]&&gn(t[r],e+"_"+r,n);else gn(t,e,n)}function gn(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function yn(t,e){if(e)if(h(e)){var n=t.on=t.on?E({},t.on):{};for(var r in e){var i=n[r],o=e[r];n[r]=i?[].concat(i,o):o}}else ht("v-on without argument expects an Object value",this);return t}function mn(t,e,n,r){e=e||{$stable:!n};for(var i=0;i<t.length;i++){var o=t[i];Array.isArray(o)?mn(o,e,n):o&&(o.proxy&&(o.fn.proxy=!0),e[o.key]=o.fn)}return r&&(e.$key=r),e}function xn(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];"string"===typeof r&&r?t[e[n]]=e[n+1]:""!==r&&null!==r&&ht("Invalid value for dynamic directive argument (expected string or null): "+r,this)}return t}function _n(t,e){return"string"===typeof t?e+t:t}function bn(t){t._o=dn,t._n=g,t._s=v,t._l=sn,t._t=cn,t._q=I,t._i=z,t._m=pn,t._f=ln,t._k=hn,t._b=fn,t._v=kt,t._e=Pt,t._u=mn,t._g=yn,t._d=xn,t._p=_n}function wn(t,e,r,i,a){var s,c=this,l=a.options;w(i,"_uid")?(s=Object.create(i),s._original=i):(s=i,i=i._original);var u=o(l._compiled),h=!u;this.data=t,this.props=e,this.children=r,this.parent=i,this.listeners=t.on||n,this.injections=tn(l.inject,i),this.slots=function(){return c.$slots||rn(t.scopedSlots,c.$slots=en(r,i)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return rn(t.scopedSlots,this.slots())}}),u&&(this.$options=l,this.$slots=this.slots(),this.$scopedSlots=rn(t.scopedSlots,this.$slots)),l._scopeId?this._c=function(t,e,n,r){var o=Dn(s,t,e,n,r,h);return o&&!Array.isArray(o)&&(o.fnScopeId=l._scopeId,o.fnContext=i),o}:this._c=function(t,e,n,r){return Dn(s,t,e,n,r,h)}}function An(t,e,r,o,a){var s=t.options,c={},l=s.props;if(i(l))for(var u in l)c[u]=re(u,l,e||n);else i(r.attrs)&&Pn(c,r.attrs),i(r.props)&&Pn(c,r.props);var h=new wn(r,c,a,o,t),f=s.render.call(null,h._c,h);if(f instanceof At)return Sn(f,r,h.parent,s,h);if(Array.isArray(f)){for(var p=Je(f)||[],d=new Array(p.length),v=0;v<p.length;v++)d[v]=Sn(p[v],r,h.parent,s,h);return d}}function Sn(t,e,n,r,i){var o=Tt(t);return o.fnContext=n,o.fnOptions=r,(o.devtoolsMeta=o.devtoolsMeta||{}).renderContext=i,e.slot&&((o.data||(o.data={})).slot=e.slot),o}function Pn(t,e){for(var n in e)t[P(n)]=e[n]}bn(wn.prototype);var kn={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;kn.prepatch(n,n)}else{var r=t.componentInstance=$n(t,tr);r.$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var n=e.componentOptions,r=e.componentInstance=t.componentInstance;or(r,n.propsData,n.listeners,e,n.children)},insert:function(t){var e=t.context,n=t.componentInstance;n._isMounted||(lr(n,"onServiceCreated"),lr(n,"onServiceAttached"),n._isMounted=!0,lr(n,"mounted")),t.data.keepAlive&&(e._isMounted?Ar(n):sr(n,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?cr(e,!0):e.$destroy())}},Tn=Object.keys(kn);function On(t,e,n,a,s){if(!r(t)){var l=n.$options._base;if(c(t)&&(t=l.extend(t)),"function"===typeof t){var u;if(r(t.cid)&&(u=t,t=Hn(u,l),void 0===t))return Un(u,e,n,a,s);e=e||{},Gr(t),i(e.model)&&Ln(t.options,e);var h=Ge(e,t,s,n);if(o(t.options.functional))return An(t,h,e,n,a);var f=e.on;if(e.on=e.nativeOn,o(t.options.abstract)){var p=e.slot;e={},p&&(e.slot=p)}Cn(e);var d=t.options.name||s,v=new At("vue-component-"+t.cid+(d?"-"+d:""),e,void 0,void 0,void 0,n,{Ctor:t,propsData:h,listeners:f,tag:s,children:a},u);return v}ht("Invalid Component definition: "+String(t),n)}}function $n(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},r=t.data.inlineTemplate;return i(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns),new t.componentOptions.Ctor(n)}function Cn(t){for(var e=t.hook||(t.hook={}),n=0;n<Tn.length;n++){var r=Tn[n],i=e[r],o=kn[r];i===o||i&&i._merged||(e[r]=i?Mn(o,i):o)}}function Mn(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}function Ln(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.attrs||(e.attrs={}))[n]=e.model.value;var o=e.on||(e.on={}),a=o[r],s=e.model.callback;i(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(o[r]=[s].concat(a)):o[r]=s}var En=1,jn=2;function Dn(t,e,n,r,i,a){return(Array.isArray(n)||s(n))&&(i=r,r=n,n=void 0),o(a)&&(i=jn),Rn(t,e,n,r,i)}function Rn(t,e,n,r,o){if(i(n)&&i(n.__ob__))return ht("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",t),Pt();if(i(n)&&i(n.is)&&(e=n.is),!e)return Pt();var a,c,l;(i(n)&&i(n.key)&&!s(n.key)&&ht("Avoid using non-primitive value as key, use string/number value instead.",t),Array.isArray(r)&&"function"===typeof r[0]&&(n=n||{},n.scopedSlots={default:r[0]},r.length=0),o===jn?r=Je(r):o===En&&(r=Xe(r)),"string"===typeof e)?(c=t.$vnode&&t.$vnode.ns||V.getTagNamespace(e),V.isReservedTag(e)?(i(n)&&i(n.nativeOn)&&ht("The .native modifier for v-on is only valid on components but it was used on <"+e+">.",t),a=new At(V.parsePlatformTagName(e),n,r,void 0,void 0,t)):a=n&&n.pre||!i(l=ne(t.$options,"components",e))?new At(e,n,r,void 0,void 0,t):On(l,n,t,r,e)):a=On(e,n,t,r);return Array.isArray(a)?a:i(a)?(i(c)&&Fn(a,c),i(n)&&In(n),a):Pt()}function Fn(t,e,n){if(t.ns=e,"foreignObject"===t.tag&&(e=void 0,n=!0),i(t.children))for(var a=0,s=t.children.length;a<s;a++){var c=t.children[a];i(c.tag)&&(r(c.ns)||o(n)&&"svg"!==c.tag)&&Fn(c,e,n)}}function In(t){c(t.style)&&ze(t.style),c(t.class)&&ze(t.class)}function zn(t){t._vnode=null,t._staticTrees=null;var e=t.$options,r=t.$vnode=e._parentVnode,i=r&&r.context;t.$slots=en(e._renderChildren,i),t.$scopedSlots=n,t._c=function(e,n,r,i){return Dn(t,e,n,r,i,!1)},t.$createElement=function(e,n,r,i){return Dn(t,e,n,r,i,!0)};var o=r&&r.data;It(t,"$attrs",o&&o.attrs||n,(function(){!er&&ht("$attrs is readonly.",t)}),!0),It(t,"$listeners",e._parentListeners||n,(function(){!er&&ht("$listeners is readonly.",t)}),!0)}var Nn,Wn=null;function Bn(t){bn(t.prototype),t.prototype.$nextTick=function(t){return Oe(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,r=n.render,i=n._parentVnode;i&&(e.$scopedSlots=rn(i.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=i;try{Wn=e,t=r.call(e._renderProxy,e.$createElement)}catch(Di){if(ve(Di,e,"render"),e.$options.renderError)try{t=e.$options.renderError.call(e._renderProxy,e.$createElement,Di)}catch(Di){ve(Di,e,"renderError"),t=e._vnode}else t=e._vnode}finally{Wn=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof At||(Array.isArray(t)&&ht("Multiple root nodes returned from render function. Render function should return a single root node.",e),t=Pt()),t.parent=i,t}}function Vn(t,e){return(t.__esModule||ut&&"Module"===t[Symbol.toStringTag])&&(t=t.default),c(t)?e.extend(t):t}function Un(t,e,n,r,i){var o=Pt();return o.asyncFactory=t,o.asyncMeta={data:e,context:n,children:r,tag:i},o}function Hn(t,e){if(o(t.error)&&i(t.errorComp))return t.errorComp;if(i(t.resolved))return t.resolved;var n=Wn;if(n&&i(t.owners)&&-1===t.owners.indexOf(n)&&t.owners.push(n),o(t.loading)&&i(t.loadingComp))return t.loadingComp;if(n&&!i(t.owners)){var a=t.owners=[n],s=!0,l=null,u=null;n.$on("hook:destroyed",(function(){return _(a,n)}));var h=function(t){for(var e=0,n=a.length;e<n;e++)a[e].$forceUpdate();t&&(a.length=0,null!==l&&(clearTimeout(l),l=null),null!==u&&(clearTimeout(u),u=null))},f=N((function(n){t.resolved=Vn(n,e),s?a.length=0:h(!0)})),p=N((function(e){ht("Failed to resolve async component: "+String(t)+(e?"\nReason: "+e:"")),i(t.errorComp)&&(t.error=!0,h(!0))})),v=t(f,p);return c(v)&&(d(v)?r(t.resolved)&&v.then(f,p):d(v.component)&&(v.component.then(f,p),i(v.error)&&(t.errorComp=Vn(v.error,e)),i(v.loading)&&(t.loadingComp=Vn(v.loading,e),0===v.delay?t.loading=!0:l=setTimeout((function(){l=null,r(t.resolved)&&r(t.error)&&(t.loading=!0,h(!1))}),v.delay||200)),i(v.timeout)&&(u=setTimeout((function(){u=null,r(t.resolved)&&p("timeout ("+v.timeout+"ms)")}),v.timeout)))),s=!1,t.loading?t.loadingComp:t.resolved}}function Gn(t){return t.isComment&&t.asyncFactory}function qn(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(i(n)&&(i(n.componentOptions)||Gn(n)))return n}}function Xn(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&Kn(t,e)}function Jn(t,e){Nn.$on(t,e)}function Yn(t,e){Nn.$off(t,e)}function Qn(t,e){var n=Nn;return function r(){var i=e.apply(null,arguments);null!==i&&n.$off(t,r)}}function Kn(t,e,n){Nn=t,Ue(e,n||{},Jn,Yn,Qn,t),Nn=void 0}function Zn(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(Array.isArray(t))for(var i=0,o=t.length;i<o;i++)r.$on(t[i],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,i=t.length;r<i;r++)n.$off(t[r],e);return n}var o,a=n._events[t];if(!a)return n;if(!e)return n._events[t]=null,n;var s=a.length;while(s--)if(o=a[s],o===e||o.fn===e){a.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this,n=t.toLowerCase();n!==t&&e._events[n]&&ft('Event "'+n+'" is emitted in component '+dt(e)+' but the handler is registered for "'+t+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+O(t)+'" instead of "'+t+'".');var r=e._events[t];if(r){r=r.length>1?L(r):r;for(var i=L(arguments,1),o='event handler for "'+t+'"',a=0,s=r.length;a<s;a++)ge(r[a],e,i,e,o)}return e}}var tr=null,er=!1;function nr(t){var e=tr;return tr=t,function(){tr=e}}function rr(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){while(n.$options.abstract&&n.$parent)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}function ir(t){t.prototype._update=function(t,e){var n=this,r=n.$el,i=n._vnode,o=nr(n);n._vnode=t,n.$el=i?n.__patch__(i,t):n.__patch__(n.$el,t,e,!1),o(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){var t=this;t._watcher&&t._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){lr(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||_(e.$children,t),t._watcher&&t._watcher.teardown();var n=t._watchers.length;while(n--)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),lr(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}function or(t,e,r,i,o){er=!0;var a=i.data.scopedSlots,s=t.$scopedSlots,c=!!(a&&!a.$stable||s!==n&&!s.$stable||a&&t.$scopedSlots.$key!==a.$key),l=!!(o||t.$options._renderChildren||c);if(t.$options._parentVnode=i,t.$vnode=i,t._vnode&&(t._vnode.parent=i),t.$options._renderChildren=o,t.$attrs=i.data.attrs||n,t.$listeners=r||n,e&&t.$options.props){Et(!1);for(var u=t._props,h=t.$options._propKeys||[],f=0;f<h.length;f++){var p=h[f],d=t.$options.props;u[p]=re(p,d,e,t)}Et(!0),t.$options.propsData=e}t._$updateProperties&&t._$updateProperties(t),r=r||n;var v=t.$options._parentListeners;t.$options._parentListeners=r,Kn(t,r,v),l&&(t.$slots=en(o,i.context),t.$forceUpdate()),er=!1}function ar(t){while(t&&(t=t.$parent))if(t._inactive)return!0;return!1}function sr(t,e){if(e){if(t._directInactive=!1,ar(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)sr(t.$children[n]);lr(t,"activated")}}function cr(t,e){if((!e||(t._directInactive=!0,!ar(t)))&&!t._inactive){t._inactive=!0;for(var n=0;n<t.$children.length;n++)cr(t.$children[n]);lr(t,"deactivated")}}function lr(t,e){bt();var n=t.$options[e],r=e+" hook";if(n)for(var i=0,o=n.length;i<o;i++)ge(n[i],t,null,t,r);t._hasHookEvent&&t.$emit("hook:"+e),wt()}var ur=100,hr=[],fr=[],pr={},dr={},vr=!1,gr=!1,yr=0;function mr(){yr=hr.length=fr.length=0,pr={},dr={},vr=gr=!1}var xr=Date.now;if(Q&&!et){var _r=window.performance;_r&&"function"===typeof _r.now&&xr()>document.createEvent("Event").timeStamp&&(xr=function(){return _r.now()})}function br(){var t,e;for(xr(),gr=!0,hr.sort((function(t,e){return t.id-e.id})),yr=0;yr<hr.length;yr++)if(t=hr[yr],t.before&&t.before(),e=t.id,pr[e]=null,t.run(),null!=pr[e]&&(dr[e]=(dr[e]||0)+1,dr[e]>ur)){ht("You may have an infinite update loop "+(t.user?'in watcher with expression "'+t.expression+'"':"in a component render function."),t.vm);break}var n=fr.slice(),r=hr.slice();mr(),Sr(n),wr(r),st&&V.devtools&&st.emit("flush")}function wr(t){var e=t.length;while(e--){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&lr(r,"updated")}}function Ar(t){t._inactive=!1,fr.push(t)}function Sr(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,sr(t[e],!0)}function Pr(t){var e=t.id;if(null==pr[e]){if(pr[e]=!0,gr){var n=hr.length-1;while(n>yr&&hr[n].id>t.id)n--;hr.splice(n+1,0,t)}else hr.push(t);if(!vr){if(vr=!0,!V.async)return void br();Oe(br)}}}var kr=0,Tr=function(t,e,n,r,i){this.vm=t,i&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++kr,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new lt,this.newDepIds=new lt,this.expression=e.toString(),"function"===typeof e?this.getter=e:(this.getter=X(e),this.getter||(this.getter=D,ht('Failed watching path: "'+e+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',t))),this.value=this.lazy?void 0:this.get()};Tr.prototype.get=function(){var t;bt(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(Di){if(!this.user)throw Di;ve(Di,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ze(t),wt(),this.cleanupDeps()}return t},Tr.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},Tr.prototype.cleanupDeps=function(){var t=this.deps.length;while(t--){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Tr.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():Pr(this)},Tr.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||c(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(Di){ve(Di,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},Tr.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Tr.prototype.depend=function(){var t=this.deps.length;while(t--)this.deps[t].depend()},Tr.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||_(this.vm._watchers,this);var t=this.deps.length;while(t--)this.deps[t].removeSub(this);this.active=!1}};var Or={enumerable:!0,configurable:!0,get:D,set:D};function $r(t,e,n){Or.get=function(){return this[e][n]},Or.set=function(t){this[e][n]=t},Object.defineProperty(t,n,Or)}function Cr(t){t._watchers=[];var e=t.$options;e.props&&Mr(t,e.props),e.methods&&zr(t,e.methods),e.data?Lr(t):Ft(t._data={},!0),e.computed&&Dr(t,e.computed),e.watch&&e.watch!==it&&Nr(t,e.watch)}function Mr(t,e){var n=t.$options.propsData||{},r=t._props={},i=t.$options._propKeys=[],o=!t.$parent;o||Et(!1);var a=function(a){i.push(a);var s=re(a,e,n,t),c=O(a);(x(c)||V.isReservedAttr(c))&&ht('"'+c+'" is a reserved attribute and cannot be used as component prop.',t),It(r,a,s,(function(){if(!o&&!er){if("mp-baidu"===t.mpHost)return;if("value"===a&&Array.isArray(t.$options.behaviors)&&-1!==t.$options.behaviors.indexOf("uni://form-field"))return;if(t._getFormData)return;var e=t.$parent;while(e){if(e.__next_tick_pending)return;e=e.$parent}ht("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+a+'"',t)}})),a in t||$r(t,"_props",a)};for(var s in e)a(s);Et(!0)}function Lr(t){var e=t.$options.data;e=t._data="function"===typeof e?Er(e,t):e||{},h(e)||(e={},ht("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",t));var n=Object.keys(e),r=t.$options.props,i=t.$options.methods,o=n.length;while(o--){var a=n[o];i&&w(i,a)&&ht('Method "'+a+'" has already been defined as a data property.',t),r&&w(r,a)?ht('The data property "'+a+'" is already declared as a prop. Use prop default value instead.',t):H(a)||$r(t,"_data",a)}Ft(e,!0)}function Er(t,e){bt();try{return t.call(e,e)}catch(Di){return ve(Di,e,"data()"),{}}finally{wt()}}var jr={lazy:!0};function Dr(t,e){var n=t._computedWatchers=Object.create(null),r=at();for(var i in e){var o=e[i],a="function"===typeof o?o:o.get;null==a&&ht('Getter is missing for computed property "'+i+'".',t),r||(n[i]=new Tr(t,a||D,D,jr)),i in t?i in t.$data?ht('The computed property "'+i+'" is already defined in data.',t):t.$options.props&&i in t.$options.props&&ht('The computed property "'+i+'" is already defined as a prop.',t):Rr(t,i,o)}}function Rr(t,e,n){var r=!at();"function"===typeof n?(Or.get=r?Fr(e):Ir(n),Or.set=D):(Or.get=n.get?r&&!1!==n.cache?Fr(e):Ir(n.get):D,Or.set=n.set||D),Or.set===D&&(Or.set=function(){ht('Computed property "'+e+'" was assigned to but it has no setter.',this)}),Object.defineProperty(t,e,Or)}function Fr(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),_t.SharedObject.target&&e.depend(),e.value}}function Ir(t){return function(){return t.call(this,this)}}function zr(t,e){var n=t.$options.props;for(var r in e)"function"!==typeof e[r]&&ht('Method "'+r+'" has type "'+typeof e[r]+'" in the component definition. Did you reference the function correctly?',t),n&&w(n,r)&&ht('Method "'+r+'" has already been defined as a prop.',t),r in t&&H(r)&&ht('Method "'+r+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),t[r]="function"!==typeof e[r]?D:M(e[r],t)}function Nr(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)Wr(t,n,r[i]);else Wr(t,n,r)}}function Wr(t,e,n,r){return h(n)&&(r=n,n=n.handler),"string"===typeof n&&(n=t[n]),t.$watch(e,n,r)}function Br(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};e.set=function(){ht("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){ht("$props is readonly.",this)},Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=zt,t.prototype.$delete=Nt,t.prototype.$watch=function(t,e,n){var r=this;if(h(e))return Wr(r,t,e,n);n=n||{},n.user=!0;var i=new Tr(r,t,e,n);if(n.immediate)try{e.call(r,i.value)}catch(o){ve(o,r,'callback for immediate watcher "'+i.expression+'"')}return function(){i.teardown()}}}var Vr=0;function Ur(t){t.prototype._init=function(t){var e,n,r=this;r._uid=Vr++,V.performance&&Re&&(e="vue-perf-start:"+r._uid,n="vue-perf-end:"+r._uid,Re(e)),r._isVue=!0,t&&t._isComponent?Hr(r,t):r.$options=ee(Gr(r.constructor),t||{},r),_e(r),r._self=r,rr(r),Xn(r),zn(r),lr(r,"beforeCreate"),!r._$fallback&&Ze(r),Cr(r),!r._$fallback&&Ke(r),!r._$fallback&&lr(r,"created"),V.performance&&Re&&(r._name=dt(r,!1),Re(n),Fe("vue "+r._name+" init",e,n)),r.$options.el&&r.$mount(r.$options.el)}}function Hr(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var i=r.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}function Gr(t){var e=t.options;if(t.super){var n=Gr(t.super),r=t.superOptions;if(n!==r){t.superOptions=n;var i=qr(t);i&&E(t.extendOptions,i),e=t.options=ee(n,t.extendOptions),e.name&&(e.components[e.name]=t)}}return e}function qr(t){var e,n=t.options,r=t.sealedOptions;for(var i in n)n[i]!==r[i]&&(e||(e={}),e[i]=n[i]);return e}function Xr(t){this instanceof Xr||ht("Vue is a constructor and should be called with the `new` keyword"),this._init(t)}function Jr(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=L(arguments,1);return n.unshift(this),"function"===typeof t.install?t.install.apply(t,n):"function"===typeof t&&t.apply(null,n),e.push(t),this}}function Yr(t){t.mixin=function(t){return this.options=ee(this.options,t),this}}function Qr(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,i=t._Ctor||(t._Ctor={});if(i[r])return i[r];var o=t.name||n.options.name;o&&Yt(o);var a=function(t){this._init(t)};return a.prototype=Object.create(n.prototype),a.prototype.constructor=a,a.cid=e++,a.options=ee(n.options,t),a["super"]=n,a.options.props&&Kr(a),a.options.computed&&Zr(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,W.forEach((function(t){a[t]=n[t]})),o&&(a.options.components[o]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=E({},a.options),i[r]=a,a}}function Kr(t){var e=t.options.props;for(var n in e)$r(t.prototype,"_props",n)}function Zr(t){var e=t.options.computed;for(var n in e)Rr(t.prototype,n,e[n])}function ti(t){W.forEach((function(e){t[e]=function(t,n){return n?("component"===e&&Yt(t),"component"===e&&h(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"===typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}}))}function ei(t){return t&&(t.Ctor.options.name||t.tag)}function ni(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"===typeof t?t.split(",").indexOf(e)>-1:!!f(t)&&t.test(e)}function ri(t,e){var n=t.cache,r=t.keys,i=t._vnode;for(var o in n){var a=n[o];if(a){var s=ei(a.componentOptions);s&&!e(s)&&ii(n,o,r,i)}}}function ii(t,e,n,r){var i=t[e];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),t[e]=null,_(n,e)}Ur(Xr),Br(Xr),Zn(Xr),ir(Xr),Bn(Xr);var oi=[String,RegExp,Array],ai={name:"keep-alive",abstract:!0,props:{include:oi,exclude:oi,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)ii(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",(function(e){ri(t,(function(t){return ni(e,t)}))})),this.$watch("exclude",(function(e){ri(t,(function(t){return!ni(e,t)}))}))},render:function(){var t=this.$slots.default,e=qn(t),n=e&&e.componentOptions;if(n){var r=ei(n),i=this,o=i.include,a=i.exclude;if(o&&(!r||!ni(o,r))||a&&r&&ni(a,r))return e;var s=this,c=s.cache,l=s.keys,u=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;c[u]?(e.componentInstance=c[u].componentInstance,_(l,u),l.push(u)):(c[u]=e,l.push(u),this.max&&l.length>parseInt(this.max)&&ii(c,l[0],l,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}},si={KeepAlive:ai};function ci(t){var e={get:function(){return V},set:function(){ht("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(t,"config",e),t.util={warn:ht,extend:E,mergeOptions:ee,defineReactive:It},t.set=zt,t.delete=Nt,t.nextTick=Oe,t.observable=function(t){return Ft(t),t},t.options=Object.create(null),W.forEach((function(e){t.options[e+"s"]=Object.create(null)})),t.options._base=t,E(t.options.components,si),Jr(t),Yr(t),Qr(t),ti(t)}ci(Xr),Object.defineProperty(Xr.prototype,"$isServer",{get:at}),Object.defineProperty(Xr.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Xr,"FunctionalRenderContext",{value:wn}),Xr.version="2.6.11";var li="[object Array]",ui="[object Object]";function hi(t,e){var n={};return fi(t,e),pi(t,e,"",n),n}function fi(t,e){if(t!==e){var n=vi(t),r=vi(e);if(n==ui&&r==ui){if(Object.keys(t).length>=Object.keys(e).length)for(var i in e){var o=t[i];void 0===o?t[i]=null:fi(o,e[i])}}else n==li&&r==li&&t.length>=e.length&&e.forEach((function(e,n){fi(t[n],e)}))}}function pi(t,e,n,r){if(t!==e){var i=vi(t),o=vi(e);if(i==ui)if(o!=ui||Object.keys(t).length<Object.keys(e).length)di(r,n,t);else{var a=function(i){var o=t[i],a=e[i],s=vi(o),c=vi(a);if(s!=li&&s!=ui)o!=e[i]&&di(r,(""==n?"":n+".")+i,o);else if(s==li)c!=li||o.length<a.length?di(r,(""==n?"":n+".")+i,o):o.forEach((function(t,e){pi(t,a[e],(""==n?"":n+".")+i+"["+e+"]",r)}));else if(s==ui)if(c!=ui||Object.keys(o).length<Object.keys(a).length)di(r,(""==n?"":n+".")+i,o);else for(var l in o)pi(o[l],a[l],(""==n?"":n+".")+i+"."+l,r)};for(var s in t)a(s)}else i==li?o!=li||t.length<e.length?di(r,n,t):t.forEach((function(t,i){pi(t,e[i],n+"["+i+"]",r)})):di(r,n,t)}}function di(t,e,n){t[e]=n}function vi(t){return Object.prototype.toString.call(t)}function gi(t){if(t.__next_tick_callbacks&&t.__next_tick_callbacks.length){if(Object({NODE_ENV:"development",VUE_APP_NAME:"作业不磨蹭",VUE_APP_PLATFORM:"mp-qq",BASE_URL:"/"}).VUE_APP_DEBUG){var e=t.$scope;console.log("["+ +new Date+"]["+(e.is||e.route)+"]["+t._uid+"]:flushCallbacks["+t.__next_tick_callbacks.length+"]")}var n=t.__next_tick_callbacks.slice(0);t.__next_tick_callbacks.length=0;for(var r=0;r<n.length;r++)n[r]()}}function yi(t){return hr.find((function(e){return t._watcher===e}))}function mi(t,e){if(!t.__next_tick_pending&&!yi(t)){if(Object({NODE_ENV:"development",VUE_APP_NAME:"作业不磨蹭",VUE_APP_PLATFORM:"mp-qq",BASE_URL:"/"}).VUE_APP_DEBUG){var n=t.$scope;console.log("["+ +new Date+"]["+(n.is||n.route)+"]["+t._uid+"]:nextVueTick")}return Oe(e,t)}if(Object({NODE_ENV:"development",VUE_APP_NAME:"作业不磨蹭",VUE_APP_PLATFORM:"mp-qq",BASE_URL:"/"}).VUE_APP_DEBUG){var r=t.$scope;console.log("["+ +new Date+"]["+(r.is||r.route)+"]["+t._uid+"]:nextMPTick")}var i;if(t.__next_tick_callbacks||(t.__next_tick_callbacks=[]),t.__next_tick_callbacks.push((function(){if(e)try{e.call(t)}catch(Di){ve(Di,t,"nextTick")}else i&&i(t)})),!e&&"undefined"!==typeof Promise)return new Promise((function(t){i=t}))}function xi(t){var e=Object.create(null),n=[].concat(Object.keys(t._data||{}),Object.keys(t._computedWatchers||{}));n.reduce((function(e,n){return e[n]=t[n],e}),e);var r=t.__composition_api_state__||t.__secret_vfa_state__,i=r&&r.rawBindings;return i&&Object.keys(i).forEach((function(n){e[n]=t[n]})),Object.assign(e,t.$mp.data||{}),Array.isArray(t.$options.behaviors)&&-1!==t.$options.behaviors.indexOf("uni://form-field")&&(e["name"]=t.name,e["value"]=t.value),JSON.parse(JSON.stringify(e))}var _i=function(t,e){var n=this;if(null!==e&&("page"===this.mpType||"component"===this.mpType)){var r=this.$scope,i=Object.create(null);try{i=xi(this)}catch(s){console.error(s)}i.__webviewId__=r.data.__webviewId__;var o=Object.create(null);Object.keys(i).forEach((function(t){o[t]=r.data[t]}));var a=!1===this.$shouldDiffData?i:hi(i,o);Object.keys(a).length?(Object({NODE_ENV:"development",VUE_APP_NAME:"作业不磨蹭",VUE_APP_PLATFORM:"mp-qq",BASE_URL:"/"}).VUE_APP_DEBUG&&console.log("["+ +new Date+"]["+(r.is||r.route)+"]["+this._uid+"]差量更新",JSON.stringify(a)),this.__next_tick_pending=!0,r.setData(a,(function(){n.__next_tick_pending=!1,gi(n)}))):gi(this)}};function bi(){}function wi(t,e,n){if(!t.mpType)return t;"app"===t.mpType&&(t.$options.render=bi),t.$options.render||(t.$options.render=bi,t.$options.template&&"#"!==t.$options.template.charAt(0)||t.$options.el||e?ht("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",t):ht("Failed to mount component: template or render function not defined.",t)),!t._$fallback&&lr(t,"beforeMount");var r=function(){t._update(t._render(),n)};return new Tr(t,r,D,{before:function(){t._isMounted&&!t._isDestroyed&&lr(t,"beforeUpdate")}},!0),n=!1,t}function Ai(t,e){return i(t)||i(e)?Si(t,Pi(e)):""}function Si(t,e){return t?e?t+" "+e:t:e||""}function Pi(t){return Array.isArray(t)?ki(t):c(t)?Ti(t):"string"===typeof t?t:""}function ki(t){for(var e,n="",r=0,o=t.length;r<o;r++)i(e=Pi(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}function Ti(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}var Oi=A((function(t){var e={},n=/;(?![^(]*\))/g,r=/:(.+)/;return t.split(n).forEach((function(t){if(t){var n=t.split(r);n.length>1&&(e[n[0].trim()]=n[1].trim())}})),e}));function $i(t){return Array.isArray(t)?j(t):"string"===typeof t?Oi(t):t}var Ci=["createSelectorQuery","createIntersectionObserver","selectAllComponents","selectComponent"];function Mi(t,e){var n=e.split("."),r=n[0];return 0===r.indexOf("__$n")&&(r=parseInt(r.replace("__$n",""))),1===n.length?t[r]:Mi(t[r],n.slice(1).join("."))}function Li(t){t.config.errorHandler=function(e,n,r){t.util.warn("Error in "+r+': "'+e.toString()+'"',n),console.error(e);var i=getApp();i&&i.onError&&i.onError(e)};var e=t.prototype.$emit;t.prototype.$emit=function(t){return this.$scope&&t&&this.$scope["triggerEvent"](t,{__args__:L(arguments,1)}),e.apply(this,arguments)},t.prototype.$nextTick=function(t){return mi(this,t)},Ci.forEach((function(e){t.prototype[e]=function(t){return this.$scope&&this.$scope[e]?this.$scope[e](t):"undefined"!==typeof my?"createSelectorQuery"===e?my.createSelectorQuery(t):"createIntersectionObserver"===e?my.createIntersectionObserver(t):void 0:void 0}})),t.prototype.__init_provide=Ke,t.prototype.__init_injections=Ze,t.prototype.__call_hook=function(t,e){var n=this;bt();var r,i=n.$options[t],o=t+" hook";if(i)for(var a=0,s=i.length;a<s;a++)r=ge(i[a],n,e?[e]:null,n,o);return n._hasHookEvent&&n.$emit("hook:"+t,e),wt(),r},t.prototype.__set_model=function(t,e,n,r){Array.isArray(r)&&(-1!==r.indexOf("trim")&&(n=n.trim()),-1!==r.indexOf("number")&&(n=this._n(n))),t||(t=this),t[e]=n},t.prototype.__set_sync=function(t,e,n){t||(t=this),t[e]=n},t.prototype.__get_orig=function(t){return h(t)&&t["$orig"]||t},t.prototype.__get_value=function(t,e){return Mi(e||this,t)},t.prototype.__get_class=function(t,e){return Ai(e,t)},t.prototype.__get_style=function(t,e){if(!t&&!e)return"";var n=$i(t),r=e?E(e,n):n;return Object.keys(r).map((function(t){return O(t)+":"+r[t]})).join(";")},t.prototype.__map=function(t,e){var n,r,i,o,a;if(Array.isArray(t)){for(n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=e(t[r],r);return n}if(c(t)){for(o=Object.keys(t),n=Object.create(null),r=0,i=o.length;r<i;r++)a=o[r],n[a]=e(t[a],a,r);return n}if("number"===typeof t){for(n=new Array(t),r=0,i=t;r<i;r++)n[r]=e(r,r);return n}return[]}}var Ei=["onLaunch","onShow","onHide","onUniNViewMessage","onPageNotFound","onThemeChange","onError","onUnhandledRejection","onLoad","onReady","onUnload","onPullDownRefresh","onReachBottom","onTabItemTap","onAddToFavorites","onShareTimeline","onShareAppMessage","onResize","onPageScroll","onNavigationBarButtonTap","onBackPress","onNavigationBarSearchInputChanged","onNavigationBarSearchInputConfirmed","onNavigationBarSearchInputClicked","onPageShow","onPageHide","onPageResize"];function ji(t){var e=t.extend;t.extend=function(t){t=t||{};var n=t.methods;return n&&Object.keys(n).forEach((function(e){-1!==Ei.indexOf(e)&&(t[e]=n[e],delete n[e])})),e.call(this,t)};var n=t.config.optionMergeStrategies,r=n.created;Ei.forEach((function(t){n[t]=r})),t.prototype.__lifecycle_hooks__=Ei}Xr.prototype.__patch__=_i,Xr.prototype.$mount=function(t,e){return wi(this,t,e)},ji(Xr),Li(Xr),e["default"]=Xr}.call(this,n(/*! ./../../../../../webpack/buildin/global.js */3))},211:
/*!**********************************************************************************************!*\
  !*** D:/g工作/zilv/code/defaultmoban/defaultmoban/components/uni-swipe-action-item/mpother.js ***!
  \**********************************************************************************************/
/*! no static exports found */function(t,e,n){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n={data:function(){return{uniShow:!1,left:0}},computed:{moveLeft:function(){return"translateX(".concat(this.left,"px)")}},watch:{show:function(t){this.position&&"{}"!==JSON.stringify(this.position)&&(this.autoClose||(t?(this.$emit("change",!0),this.open()):(this.$emit("change",!1),this.close())))}},mounted:function(){var t=this;this.position={},void 0!==this.swipeaction.children&&this.swipeaction.children.push(this),setTimeout((function(){t.getSelectorQuery()}),100)},beforeDestoy:function(){var t=this;this.swipeaction.children.forEach((function(e,n){e===t&&t.swipeaction.children.splice(n,1)}))},methods:{onClick:function(t,e){this.$emit("click",{content:e,index:t}),this.close()},touchstart:function(t){var e=t.touches[0].pageX;if(!this.disabled){var n=this.position.content.left;this.autoClose&&this.swipeaction.closeOther(this),this.width=e-n,this.isopen||this.uniShow&&(this.uniShow=!1,this.isopen=!0,this.openleft=this.left+this.position.button.width)}},touchmove:function(t,e){if(!this.disabled){var n=t.touches[0].pageX;this.setPosition(n)}},touchend:function(){this.disabled||(this.isopen?this.move(this.openleft,0):this.move(this.left,-40))},setPosition:function(t,e){this.position.button.width&&this.setValue(t-this.width)},setValue:function(t){this.left=Math.max(-this.position.button.width,Math.min(parseInt(t),0)),this.position.content.left=this.left,this.isopen&&(this.openleft=this.left+this.position.button.width)},move:function(t,e){t>=e?(this.$emit("change",!1),this.close()):(this.$emit("change",!0),this.open())},open:function(){this.uniShow=!0,this.left=-this.position.button.width,this.setValue(-this.position.button.width)},close:function(){var t=this;this.uniShow=!0,this.setValue(0),setTimeout((function(){t.uniShow=!1,t.isopen=!1}),300)},getSelectorQuery:function(){var e=this,n=t.createSelectorQuery().in(this);n.selectAll(".selector-query-hock").boundingClientRect((function(t){console.log(t),e.position.content=t[1],e.position.button=t[0],e.autoClose||(e.show?e.open():e.close())})).exec()}}};e.default=n}).call(this,n(/*! ./node_modules/@dcloudio/uni-mp-qq/dist/index.js */1)["default"])},29:
/*!**********************************************************************************!*\
  !*** D:/g工作/zilv/code/defaultmoban/defaultmoban/components/u-charts/u-charts.js ***!
  \**********************************************************************************/
/*! no static exports found */function(t,e,n){"use strict";(function(e){var n,r={yAxisWidth:15,yAxisSplit:5,xAxisHeight:15,xAxisLineHeight:15,legendHeight:15,yAxisTitleWidth:15,padding:[10,10,10,10],pixelRatio:1,rotate:!1,columePadding:3,fontSize:13,dataPointShape:["circle","circle","circle","circle"],colors:["#1890ff","#2fc25b","#facc14","#f04864","#8543e0","#90ed7d"],pieChartLinePadding:15,pieChartTextPadding:5,xAxisTextPadding:3,titleColor:"#333333",titleFontSize:20,subtitleColor:"#999999",subtitleFontSize:15,toolTipPadding:3,toolTipBackground:"#000000",toolTipOpacity:.7,toolTipLineHeight:20,radarGridCount:3,radarLabelTextMargin:15,gaugeLabelTextMargin:15};n=Object.assign?Object.assign:function(t,e){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var n=Object(t),r=1;r<arguments.length;r++){var i=arguments[r];if(null!=i)for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(n[o]=i[o])}return n};var i={toFixed:function(t,e){return e=e||2,this.isFloat(t)&&(t=t.toFixed(e)),t},isFloat:function(t){return t%1!==0},approximatelyEqual:function(t,e){return Math.abs(t-e)<1e-10},isSameSign:function(t,e){return Math.abs(t)===t&&Math.abs(e)===e||Math.abs(t)!==t&&Math.abs(e)!==e},isSameXCoordinateArea:function(t,e){return this.isSameSign(t.x,e.x)},isCollision:function(t,e){t.end={},t.end.x=t.start.x+t.width,t.end.y=t.start.y-t.height,e.end={},e.end.x=e.start.x+e.width,e.end.y=e.start.y-e.height;var n=e.start.x>t.end.x||e.end.x<t.start.x||e.end.y>t.start.y||e.start.y<t.end.y;return!n}};function o(t,e){var n=/^#?([a-f\d])([a-f\d])([a-f\d])$/i,r=t.replace(n,(function(t,e,n,r){return e+e+n+n+r+r})),i=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(r),o=parseInt(i[1],16),a=parseInt(i[2],16),s=parseInt(i[3],16);return"rgba("+o+","+a+","+s+","+e+")"}function a(t,e,n){if(isNaN(t))throw new Error("[uCharts] unvalid series data!");n=n||10,e=e||"upper";var r=1;while(n<1)n*=10,r*=10;t="upper"===e?Math.ceil(t*r):Math.floor(t*r);while(t%n!==0)"upper"===e?t++:t--;return t/r}function s(t,e,n,r){for(var i=[],o=0;o<t.length;o++){for(var a={data:[],name:e[o],color:n[o]},s=0,c=r.length;s<c;s++)if(s<t[o])a.data.push(null);else{for(var l=0,u=0;u<t[o];u++)l+=r[s-u][1];a.data.push(+(l/t[o]).toFixed(3))}i.push(a)}return i}function c(t,e,n,r){var i=r.width-r.area[1]-r.area[3],o=e.eachSpacing*(r.chartData.xAxisData.xAxisPoints.length-1),a=t;return t>=0?a=0:Math.abs(t)>=o-i&&(a=i-o),a}function l(t,e,n){function r(t){while(t<0)t+=2*Math.PI;while(t>2*Math.PI)t-=2*Math.PI;return t}return t=r(t),e=r(e),n=r(n),e>n&&(n+=2*Math.PI,t<e&&(t+=2*Math.PI)),t>=e&&t<=n}function u(t,e,n){var r=t,i=n-e,o=r+(n-i-r)/Math.sqrt(2);o*=-1;var a=(n-i)*(Math.sqrt(2)-1)-(n-i-r)/Math.sqrt(2);return{transX:o,transY:a}}function h(t,e){function n(t,e){return!(!t[e-1]||!t[e+1])&&(t[e].y>=Math.max(t[e-1].y,t[e+1].y)||t[e].y<=Math.min(t[e-1].y,t[e+1].y))}var r=.2,i=.2,o=null,a=null,s=null,c=null;if(e<1?(o=t[0].x+(t[1].x-t[0].x)*r,a=t[0].y+(t[1].y-t[0].y)*r):(o=t[e].x+(t[e+1].x-t[e-1].x)*r,a=t[e].y+(t[e+1].y-t[e-1].y)*r),e>t.length-3){var l=t.length-1;s=t[l].x-(t[l].x-t[l-1].x)*i,c=t[l].y-(t[l].y-t[l-1].y)*i}else s=t[e+1].x-(t[e+2].x-t[e].x)*i,c=t[e+1].y-(t[e+2].y-t[e].y)*i;return n(t,e+1)&&(c=t[e+1].y),n(t,e)&&(a=t[e].y),{ctrA:{x:o,y:a},ctrB:{x:s,y:c}}}function f(t,e,n){return{x:n.x+t,y:n.y-e}}function p(t,e){if(e)while(i.isCollision(t,e))t.start.x>0?t.start.y--:t.start.x<0||t.start.y>0?t.start.y++:t.start.y--;return t}function d(t,e,n){var r=0;return t.map((function(t){if(t.color||(t.color=n.colors[r],r=(r+1)%n.colors.length),t.type||(t.type=e.type),"undefined"==typeof t.show&&(t.show=!0),t.type||(t.type=e.type),t.pointShape||(t.pointShape="circle"),!t.legendShape)switch(t.type){case"line":t.legendShape="line";break;case"column":t.legendShape="rect";break;case"area":t.legendShape="triangle";break;default:t.legendShape="circle"}return t}))}function v(t,e){var n=0,r=e-t;return n=r>=1e4?1e3:r>=1e3?100:r>=100?10:r>=10?5:r>=1?1:r>=.1?.1:r>=.01?.01:r>=.001?.001:r>=1e-4?1e-4:r>=1e-5?1e-5:1e-6,{minRange:a(t,"lower",n),maxRange:a(e,"upper",n)}}function g(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r.fontSize;t=String(t);t=t.split("");for(var n=0,i=0;i<t.length;i++){var o=t[i];/[a-zA-Z]/.test(o)?n+=7:/[0-9]/.test(o)?n+=5.5:/\./.test(o)?n+=2.7:/-/.test(o)?n+=3.25:/[\u4e00-\u9fa5]/.test(o)?n+=10:/\(|\)/.test(o)?n+=3.73:/\s/.test(o)?n+=2.5:/%/.test(o)?n+=8:n+=10}return n*e/10}function y(t){return t.reduce((function(t,e){return(t.data?t.data:t).concat(e.data)}),[])}function m(t,e){for(var n=new Array(e),r=0;r<n.length;r++)n[r]=0;for(var i=0;i<t.length;i++)for(r=0;r<n.length;r++)n[r]+=t[i].data[r];return t.reduce((function(t,e){return(t.data?t.data:t).concat(e.data).concat(n)}),[])}function x(t,e,n){var r,i;return t.clientX?e.rotate?(i=e.height-t.clientX*e.pixelRatio,r=(t.pageY-n.currentTarget.offsetTop-e.height/e.pixelRatio/2*(e.pixelRatio-1))*e.pixelRatio):(r=t.clientX*e.pixelRatio,i=(t.pageY-n.currentTarget.offsetTop-e.height/e.pixelRatio/2*(e.pixelRatio-1))*e.pixelRatio):e.rotate?(i=e.height-t.x*e.pixelRatio,r=t.y*e.pixelRatio):(r=t.x*e.pixelRatio,i=t.y*e.pixelRatio),{x:r,y:i}}function _(t,e){for(var n=[],r=0;r<t.length;r++){var i=t[r];if(null!==i.data[e]&&"undefined"!==typeof i.data[e]&&i.show){var o={};o.color=i.color,o.type=i.type,o.style=i.style,o.pointShape=i.pointShape,o.disableLegend=i.disableLegend,o.name=i.name,o.show=i.show,o.data=i.format?i.format(i.data[e]):i.data[e],n.push(o)}}return n}function b(t){var e=t.map((function(t){return g(t)}));return Math.max.apply(null,e)}function w(t){for(var e=2*Math.PI/t,n=[],r=0;r<t;r++)n.push(e*r);return n.map((function(t){return-1*t+Math.PI/2}))}function A(t,e,n,r){for(var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},o=t.map((function(t){return{text:i.format?i.format(t,r[n]):t.name+": "+t.data,color:t.color}})),a=[],s={x:0,y:0},c=0;c<e.length;c++){var l=e[c];"undefined"!==typeof l[n]&&null!==l[n]&&a.push(l[n])}for(var u=0;u<a.length;u++){var h=a[u];s.x=Math.round(h.x),s.y+=h.y}return s.y/=a.length,{textList:o,offset:s}}function S(t,e,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},o=t.map((function(t){return{text:i.format?i.format(t,r[n]):t.name+": "+t.data,color:t.color,disableLegend:!!t.disableLegend}}));o=o.filter((function(t){if(!0!==t.disableLegend)return t}));for(var a=[],s={x:0,y:0},c=0;c<e.length;c++){var l=e[c];"undefined"!==typeof l[n]&&null!==l[n]&&a.push(l[n])}for(var u=0;u<a.length;u++){var h=a[u];s.x=Math.round(h.x),s.y+=h.y}return s.y/=a.length,{textList:o,offset:s}}function P(t,e,n,r,i,o){var a=o.color.upFill,s=o.color.downFill,c=[a,a,s,a],l=[],u={text:i[r],color:null};l.push(u),e.map((function(e){0==r&&e.data[1]-e.data[0]<0?c[1]=s:(e.data[0]<t[r-1][1]&&(c[0]=s),e.data[1]<e.data[0]&&(c[1]=s),e.data[2]>t[r-1][1]&&(c[2]=a),e.data[3]<t[r-1][1]&&(c[3]=s));var n={text:"开盘："+e.data[0],color:c[0]},i={text:"收盘："+e.data[1],color:c[1]},o={text:"最低："+e.data[2],color:c[2]},u={text:"最高："+e.data[3],color:c[3]};l.push(n,i,o,u)}));for(var h=[],f={x:0,y:0},p=0;p<n.length;p++){var d=n[p];"undefined"!==typeof d[r]&&null!==d[r]&&h.push(d[r])}return f.x=Math.round(h[0][0].x),{textList:l,offset:f}}function k(t){for(var e=[],n=0;n<t.length;n++)1==t[n].show&&e.push(t[n]);return e}function T(t,e,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,o=-1,a=0;return"line"!=n.type&&"area"!=n.type||"justify"!=n.xAxis.boundaryGap||(a=n.chartData.eachSpacing/2),C(t,n,r)&&e.forEach((function(e,n){t.x+i+a>e&&(o=n)})),o}function O(t,e,n){var r=-1;if($(t,e.area)){for(var i=e.points,o=-1,a=0,s=i.length;a<s;a++)for(var c=i[a],l=0;l<c.length;l++){o+=1;var u=c[l]["area"];if(t.x>u[0]&&t.x<u[2]&&t.y>u[1]&&t.y<u[3]){r=o;break}}return r}return r}function $(t,e){return t.x>e.start.x&&t.x<e.end.x&&t.y>e.start.y&&t.y<e.end.y}function C(t,e,n){return t.x<e.width-e.area[1]+10&&t.x>e.area[3]-10&&t.y>e.area[0]&&t.y<e.height-e.area[2]}function M(t,e,n){var r=2*Math.PI/n,i=-1;if(R(t,e.center,e.radius)){var o=function(t){return t<0&&(t+=2*Math.PI),t>2*Math.PI&&(t-=2*Math.PI),t},a=Math.atan2(e.center.y-t.y,t.x-e.center.x);a*=-1,a<0&&(a+=2*Math.PI);var s=e.angleList.map((function(t){return t=o(-1*t),t}));s.forEach((function(t,e){var n=o(t-r/2),s=o(t+r/2);s<n&&(s+=2*Math.PI),(a>=n&&a<=s||a+2*Math.PI>=n&&a+2*Math.PI<=s)&&(i=e)}))}return i}function L(t,e){for(var n=-1,r=0,i=e.series.length;r<i;r++){var o=e.series[r];if(t.x>o.funnelArea[0]&&t.x<o.funnelArea[2]&&t.y>o.funnelArea[1]&&t.y<o.funnelArea[3]){n=r;break}}return n}function E(t,e){for(var n=-1,r=0,i=e.length;r<i;r++){var o=e[r];if(t.x>o.area[0]&&t.x<o.area[2]&&t.y>o.area[1]&&t.y<o.area[3]){n=r;break}}return n}function j(t,e){for(var n=-1,r=e.chartData.mapData,i=e.series,o=Ft(t.y,t.x,r.bounds,r.scale,r.xoffset,r.yoffset),a=[o.x,o.y],s=0,c=i.length;s<c;s++){var l=i[s].geometry.coordinates;if(zt(a,l)){n=s;break}}return n}function D(t,e){var n=-1;if(R(t,e.center,e.radius)){var r=Math.atan2(e.center.y-t.y,t.x-e.center.x);r=-r;for(var i=0,o=e.series.length;i<o;i++){var a=e.series[i];if(l(r,a._start_,a._start_+2*a._proportion_*Math.PI)){n=i;break}}}return n}function R(t,e,n){return Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)<=Math.pow(n,2)}function F(t){var e=[],n=[];return t.forEach((function(t,r){null!==t?n.push(t):(n.length&&e.push(n),n=[])})),n.length&&e.push(n),e}function I(t,e,n,r){var i={area:{start:{x:0,y:0},end:{x:0,y:0},width:0,height:0,wholeWidth:0,wholeHeight:0},points:[],widthArr:[],heightArr:[]};if(!1===e.legend.show)return r.legendData=i,i;var o=e.legend.padding,a=e.legend.margin,s=e.legend.fontSize,c=15*e.pixelRatio,l=5*e.pixelRatio,u=Math.max(e.legend.lineHeight*e.pixelRatio,s);if("top"==e.legend.position||"bottom"==e.legend.position){for(var h=[],f=0,p=[],d=[],v=0;v<t.length;v++){var y=t[v],m=c+l+g(y.name||"undefined",s)+e.legend.itemGap;f+m>e.width-e.padding[1]-e.padding[3]?(h.push(d),p.push(f-e.legend.itemGap),f=m,d=[y]):(f+=m,d.push(y))}if(d.length){h.push(d),p.push(f-e.legend.itemGap),i.widthArr=p;var x=Math.max.apply(null,p);switch(e.legend.float){case"left":i.area.start.x=e.padding[3],i.area.end.x=e.padding[3]+2*o;break;case"right":i.area.start.x=e.width-e.padding[1]-x-2*o,i.area.end.x=e.width-e.padding[1];break;default:i.area.start.x=(e.width-x)/2-o,i.area.end.x=(e.width+x)/2+o}i.area.width=x+2*o,i.area.wholeWidth=x+2*o,i.area.height=h.length*u+2*o,i.area.wholeHeight=h.length*u+2*o+2*a,i.points=h}}else{var _=t.length,b=e.height-e.padding[0]-e.padding[2]-2*a-2*o,w=Math.min(Math.floor(b/u),_);switch(i.area.height=w*u+2*o,i.area.wholeHeight=w*u+2*o,e.legend.float){case"top":i.area.start.y=e.padding[0]+a,i.area.end.y=e.padding[0]+a+i.area.height;break;case"bottom":i.area.start.y=e.height-e.padding[2]-a-i.area.height,i.area.end.y=e.height-e.padding[2]-a;break;default:i.area.start.y=(e.height-i.area.height)/2,i.area.end.y=(e.height+i.area.height)/2}for(var A=_%w===0?_/w:Math.floor(_/w+1),S=[],P=0;P<A;P++){var k=t.slice(P*w,P*w+w);S.push(k)}if(i.points=S,S.length){for(var T=0;T<S.length;T++){for(var O=S[T],$=0,C=0;C<O.length;C++){var M=c+l+g(O[C].name||"undefined",s)+e.legend.itemGap;M>$&&($=M)}i.widthArr.push($),i.heightArr.push(O.length*u+2*o)}for(var L=0,E=0;E<i.widthArr.length;E++)L+=i.widthArr[E];i.area.width=L-e.legend.itemGap+2*o,i.area.wholeWidth=i.area.width+o}}switch(e.legend.position){case"top":i.area.start.y=e.padding[0]+a,i.area.end.y=e.padding[0]+a+i.area.height;break;case"bottom":i.area.start.y=e.height-e.padding[2]-i.area.height-a,i.area.end.y=e.height-e.padding[2]-a;break;case"left":i.area.start.x=e.padding[3],i.area.end.x=e.padding[3]+i.area.width;break;case"right":i.area.start.x=e.width-e.padding[1]-i.area.width,i.area.end.x=e.width-e.padding[1];break}return r.legendData=i,i}function z(t,e,n,r){var i={angle:0,xAxisHeight:n.xAxisHeight},o=t.map((function(t){return g(t)})),a=Math.max.apply(this,o);return 1==e.xAxis.rotateLabel&&a+2*n.xAxisTextPadding>r&&(i.angle=45*Math.PI/180,i.xAxisHeight=2*n.xAxisTextPadding+a*Math.sin(i.angle)),i}function N(t,e,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,a=i.extra.radar||{};a.max=a.max||0;for(var s=Math.max(a.max,Math.max.apply(null,y(r))),c=[],l=function(i){var a=r[i],l={};l.color=a.color,l.data=[],a.data.forEach((function(r,i){var a={};a.angle=t[i],a.proportion=r/s,a.position=f(n*a.proportion*o*Math.cos(a.angle),n*a.proportion*o*Math.sin(a.angle),e),l.data.push(a)})),c.push(l)},u=0;u<r.length;u++)l(u);return c}function W(t,e){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=0,i=0,o=0;o<t.length;o++){var a=t[o];a.data=null===a.data?0:a.data,r+=a.data}for(var s=0;s<t.length;s++){var c=t[s];c.data=null===c.data?0:c.data,c._proportion_=0===r?1/t.length*n:c.data/r*n,c._radius_=e}for(var l=0;l<t.length;l++){var u=t[l];u._start_=i,i+=2*u._proportion_*Math.PI}return t}function B(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;t=t.sort((function(t,e){return parseInt(e.data)-parseInt(t.data)}));for(var r=0;r<t.length;r++)t[r].radius=t[r].data/t[0].data*e*n,t[r]._proportion_=t[r].data/t[0].data;return t.reverse()}function V(t,e,n,r){for(var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,o=0,a=0,s=[],c=0;c<t.length;c++){var l=t[c];l.data=null===l.data?0:l.data,o+=l.data,s.push(l.data)}for(var u=Math.min.apply(null,s),h=Math.max.apply(null,s),f=r-n,p=0;p<t.length;p++){var d=t[p];d.data=null===d.data?0:d.data,0===o||"area"==e?(d._proportion_=d.data/o*i,d._rose_proportion_=1/t.length*i):(d._proportion_=d.data/o*i,d._rose_proportion_=d.data/o*i),d._radius_=n+f*((d.data-u)/(h-u))}for(var v=0;v<t.length;v++){var g=t[v];g._start_=a,a+=2*g._rose_proportion_*Math.PI}return t}function U(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;1==n&&(n=.999999);for(var r=0;r<t.length;r++){var i=t[r];i.data=null===i.data?0:i.data;var o=void 0;o="default"==e.type?e.endAngle<e.startAngle?2+e.endAngle-e.startAngle:e.startAngle-e.endAngle:2,i._proportion_=o*i.data*n+e.startAngle,i._proportion_>=2&&(i._proportion_=i._proportion_%2)}return t}function H(t,e,n){for(var r=e-n+1,i=e,o=0;o<t.length;o++)t[o].value=null===t[o].value?0:t[o].value,t[o]._startAngle_=i,t[o]._endAngle_=r*t[o].value+e,t[o]._endAngle_>=2&&(t[o]._endAngle_=t[o]._endAngle_%2),i=t[o]._endAngle_;return t}function G(t,e,n){for(var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,i=0;i<t.length;i++){var o=t[i];if(o.data=null===o.data?0:o.data,"auto"==n.pointer.color){for(var a=0;a<e.length;a++)if(o.data<=e[a].value){o.color=e[a].color;break}}else o.color=n.pointer.color;var s=n.startAngle-n.endAngle+1;o._endAngle_=s*o.data+n.startAngle,o._oldAngle_=n.oldAngle,n.oldAngle<n.endAngle&&(o._oldAngle_+=2),o.data>=n.oldData?o._proportion_=(o._endAngle_-o._oldAngle_)*r+n.oldAngle:o._proportion_=o._oldAngle_-(o._oldAngle_-o._endAngle_)*r,o._proportion_>=2&&(o._proportion_=o._proportion_%2)}return t}function q(t){t=W(t);for(var e=0,n=0;n<t.length;n++){var r=t[n],o=r.format?r.format(+r._proportion_.toFixed(2)):i.toFixed(100*r._proportion_)+"%";e=Math.max(e,g(o))}return e}function X(t,e,n,r,i,o){return t.map((function(t){return null===t?null:(t.width=Math.ceil((e-2*i.columePadding)/n),o.extra.column&&o.extra.column.width&&+o.extra.column.width>0&&(t.width=Math.min(t.width,+o.extra.column.width)),t.width<=0&&(t.width=1),t.x+=(r+.5-n/2)*t.width,t)}))}function J(t,e,n,r,i,o,a){return t.map((function(t){return null===t?null:(t.width=Math.ceil((e-2*i.columePadding)/2),o.extra.column&&o.extra.column.width&&+o.extra.column.width>0&&(t.width=Math.min(t.width,+o.extra.column.width)),r>0&&(t.width-=2*a),t)}))}function Y(t,e,n,r,i,o,a){return t.map((function(t,n){return null===t?null:(t.width=Math.ceil((e-2*i.columePadding)/2),o.extra.column&&o.extra.column.width&&+o.extra.column.width>0&&(t.width=Math.min(t.width,+o.extra.column.width)),t)}))}function Q(t,e,n){n.yAxisWidth,n.yAxisTitleWidth;var r=e.width-e.area[1]-e.area[3],i=e.enableScroll?Math.min(e.xAxis.itemCount,t.length):t.length;("line"==e.type||"area"==e.type)&&i>1&&"justify"==e.xAxis.boundaryGap&&(i-=1);var o=r/i,a=[],s=e.area[3],c=e.width-e.area[1];return t.forEach((function(t,e){a.push(s+e*o)})),"justify"!==e.xAxis.boundaryGap&&(!0===e.enableScroll?a.push(s+t.length*o):a.push(c)),{xAxisPoints:a,startX:s,endX:c,eachSpacing:o}}function K(t,e,n,r,i,o,a){var s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:1,c=[],l=o.height-o.area[0]-o.area[2];return t.forEach((function(t,a){if(null===t)c.push(null);else{var u=[];t.forEach((function(t,c){var h={};h.x=r[a]+Math.round(i/2);var f=t.value||t,p=l*(f-e)/(n-e);p*=s,h.y=o.height-Math.round(p)-o.area[2],u.push(h)})),c.push(u)}})),c}function Z(t,e,n,r,i,o,a){var s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:1,c="center";"line"!=o.type&&"area"!=o.type||(c=o.xAxis.boundaryGap);var l=[],u=o.height-o.area[0]-o.area[2];return t.forEach((function(t,a){if(null===t)l.push(null);else{var h={};h.color=t.color,h.x=r[a],"center"==c&&(h.x+=Math.round(i/2));var f=t;"object"===typeof t&&null!==t&&(f=t.value);var p=u*(f-e)/(n-e);p*=s,h.y=o.height-Math.round(p)-o.area[2],l.push(h)}})),l}function tt(t,e,n,r,i,o,a,s,c){var l=arguments.length>9&&void 0!==arguments[9]?arguments[9]:1,u=[],h=o.height-o.area[0]-o.area[2];return t.forEach((function(t,a){if(null===t)u.push(null);else{var f={};if(f.color=t.color,f.x=r[a]+Math.round(i/2),s>0){for(var p=0,d=0;d<=s;d++)p+=c[d].data[a];var v=p-t,g=h*(p-e)/(n-e),y=h*(v-e)/(n-e)}else p=t,g=h*(p-e)/(n-e),y=0;var m=y;g*=l,m*=l,f.y=o.height-Math.round(g)-o.area[2],f.y0=o.height-Math.round(m)-o.area[2],u.push(f)}})),u}function et(t,e,n,r){var i;i="stack"==r?m(t,e.categories.length):y(t);var o=[];i=i.filter((function(t){return"object"===typeof t&&null!==t?Array.isArray(t)?null!==t:null!==t.value:null!==t})),i.map((function(t){"object"===typeof t?Array.isArray(t)?t.map((function(t){o.push(t)})):o.push(t.value):o.push(t)}));var a=0,s=0;if(o.length>0&&(a=Math.min.apply(this,o),s=Math.max.apply(this,o)),"number"===typeof e.yAxis.min&&(a=Math.min(e.yAxis.min,a)),"number"===typeof e.yAxis.max&&(s=Math.max(e.yAxis.max,s)),a===s){var c=s||10;s+=c}for(var l=v(a,s),u=l.minRange,h=l.maxRange,f=[],p=(h-u)/n.yAxisSplit,d=0;d<=n.yAxisSplit;d++)f.push(u+p*d);return f.reverse()}function nt(t,e,r){var o=n({},{type:""},e.extra.column),a=et(t,e,r,o.type),s=r.yAxisWidth,c=e.yAxis.fontSize||r.fontSize,l=a.map((function(t){return t=i.toFixed(t,6),t=e.yAxis.format?e.yAxis.format(Number(t)):t,s=Math.max(s,g(t,c)+5),t}));return!0===e.yAxis.disabled&&(s=0),{rangesFormat:l,ranges:a,yAxisWidth:s}}function rt(t,e,n,r,i){var o=et(e,n,r),a=n.height-n.area[0]-n.area[2],s=o[0],c=o[o.length-1],l=n.padding[3],u=n.padding[1]+a,h=s-(s-c)*(t-l)/(u-l);return h=n.yAxis.format?n.yAxis.format(Number(h)):h,h}function it(t,e,n,r){for(var i=r.height-r.area[0]-r.area[2],o=0;o<n.length;o++){var a=i*(n[o].value-t)/(e-t);n[o].y=r.height-Math.round(a)-r.area[2]}return n}function ot(t,e){!0!==e.rotateLock?(t.translate(e.height,0),t.rotate(90*Math.PI/180)):!0!==e._rotate_&&(t.translate(e.height,0),t.rotate(90*Math.PI/180),e._rotate_=!0)}function at(t,e,n,r,i){r.beginPath(),r.setStrokeStyle("#ffffff"),r.setLineWidth(1*i.pixelRatio),r.setFillStyle(e),"diamond"===n?t.forEach((function(t,e){null!==t&&(r.moveTo(t.x,t.y-4.5),r.lineTo(t.x-4.5,t.y),r.lineTo(t.x,t.y+4.5),r.lineTo(t.x+4.5,t.y),r.lineTo(t.x,t.y-4.5))})):"circle"===n?t.forEach((function(t,e){null!==t&&(r.moveTo(t.x+3.5*i.pixelRatio,t.y),r.arc(t.x,t.y,4*i.pixelRatio,0,2*Math.PI,!1))})):"rect"===n?t.forEach((function(t,e){null!==t&&(r.moveTo(t.x-3.5,t.y-3.5),r.rect(t.x-3.5,t.y-3.5,7,7))})):"triangle"===n&&t.forEach((function(t,e){null!==t&&(r.moveTo(t.x,t.y-4.5),r.lineTo(t.x-4.5,t.y+4.5),r.lineTo(t.x+4.5,t.y+4.5),r.lineTo(t.x,t.y-4.5))})),r.closePath(),r.fill(),r.stroke()}function st(t,e,n,r){var i=t.title.fontSize||e.titleFontSize,o=t.subtitle.fontSize||e.subtitleFontSize,a=t.title.name||"",s=t.subtitle.name||"",c=t.title.color||e.titleColor,l=t.subtitle.color||e.subtitleColor,u=a?i:0,h=s?o:0,f=5;if(s){var p=g(s,o),d=r.x-p/2+(t.subtitle.offsetX||0),v=r.y+o/2+(t.subtitle.offsetY||0);a&&(v+=(u+f)/2),n.beginPath(),n.setFontSize(o),n.setFillStyle(l),n.fillText(s,d,v),n.closePath(),n.stroke()}if(a){var y=g(a,i),m=r.x-y/2+(t.title.offsetX||0),x=r.y+i/2+(t.title.offsetY||0);s&&(x-=(h+f)/2),n.beginPath(),n.setFontSize(i),n.setFillStyle(c),n.fillText(a,m,x),n.closePath(),n.stroke()}}function ct(t,e,n,r){var i=e.data;t.forEach((function(t,o){if(null!==t){r.beginPath(),r.setFontSize(e.textSize||n.fontSize),r.setFillStyle(e.textColor||"#666666");var a=i[o];"object"===typeof i[o]&&null!==i[o]&&(a=i[o].value);var s=e.format?e.format(a):a;r.fillText(String(s),t.x-g(s,e.textSize||n.fontSize)/2,t.y-2),r.closePath(),r.stroke()}}))}function lt(t,e,n,r,i,o){e-=t.width/2+i.gaugeLabelTextMargin;for(var a=t.startAngle-t.endAngle+1,s=a/t.splitLine.splitNumber,c=t.endNumber-t.startNumber,l=c/t.splitLine.splitNumber,u=t.startAngle,h=t.startNumber,f=0;f<t.splitLine.splitNumber+1;f++){var p={x:e*Math.cos(u*Math.PI),y:e*Math.sin(u*Math.PI)},d=t.labelFormat?t.labelFormat(h):h;p.x+=n.x-g(d)/2,p.y+=n.y;var v=p.x,y=p.y;o.beginPath(),o.setFontSize(i.fontSize),o.setFillStyle(t.labelColor||"#666666"),o.fillText(d,v,y+i.fontSize/2),o.closePath(),o.stroke(),u+=s,u>=2&&(u%=2),h+=l}}function ut(t,e,n,r,o,a){var s=r.extra.radar||{};e+=o.radarLabelTextMargin,t.forEach((function(t,c){var l={x:e*Math.cos(t),y:e*Math.sin(t)},u=f(l.x,l.y,n),h=u.x,p=u.y;i.approximatelyEqual(l.x,0)?h-=g(r.categories[c]||"")/2:l.x<0&&(h-=g(r.categories[c]||"")),a.beginPath(),a.setFontSize(o.fontSize),a.setFillStyle(s.labelColor||"#666666"),a.fillText(r.categories[c]||"",h,p+o.fontSize/2),a.closePath(),a.stroke()}))}function ht(t,e,n,r,o,a){for(var s=n.pieChartLinePadding,c=[],l=null,u=t.map((function(t){var e=t.format?t.format(+t._proportion_.toFixed(2)):i.toFixed(100*t._proportion_.toFixed(4))+"%";t._rose_proportion_&&(t._proportion_=t._rose_proportion_);var n=2*Math.PI-(t._start_+2*Math.PI*t._proportion_/2),r=t.color,o=t._radius_;return{arc:n,text:e,color:r,radius:o,textColor:t.textColor,textSize:t.textSize}})),h=0;h<u.length;h++){var d=u[h],v=Math.cos(d.arc)*(d.radius+s),y=Math.sin(d.arc)*(d.radius+s),m=Math.cos(d.arc)*d.radius,x=Math.sin(d.arc)*d.radius,_=v>=0?v+n.pieChartTextPadding:v-n.pieChartTextPadding,b=y,w=g(d.text),A=b;l&&i.isSameXCoordinateArea(l.start,{x:_})&&(A=_>0?Math.min(b,l.start.y):v<0||b>0?Math.max(b,l.start.y):Math.min(b,l.start.y)),_<0&&(_-=w);var S={lineStart:{x:m,y:x},lineEnd:{x:v,y:y},start:{x:_,y:A},width:w,height:n.fontSize,text:d.text,color:d.color,textColor:d.textColor,textSize:d.textSize};l=p(S,l),c.push(l)}for(var P=0;P<c.length;P++){var k=c[P],T=f(k.lineStart.x,k.lineStart.y,a),O=f(k.lineEnd.x,k.lineEnd.y,a),$=f(k.start.x,k.start.y,a);r.setLineWidth(1*e.pixelRatio),r.setFontSize(n.fontSize),r.beginPath(),r.setStrokeStyle(k.color),r.setFillStyle(k.color),r.moveTo(T.x,T.y);var C=k.start.x<0?$.x+k.width:$.x,M=k.start.x<0?$.x-5:$.x+5;r.quadraticCurveTo(O.x,O.y,C,$.y),r.moveTo(T.x,T.y),r.stroke(),r.closePath(),r.beginPath(),r.moveTo($.x+k.width,$.y),r.arc(C,$.y,2,0,2*Math.PI),r.closePath(),r.fill(),r.beginPath(),r.setFontSize(k.textSize||n.fontSize),r.setFillStyle(k.textColor||"#666666"),r.fillText(k.text,M,$.y+3),r.closePath(),r.stroke(),r.closePath()}}function ft(t,e,n,r){var i=e.extra.tooltip||{};i.gridType=void 0==i.gridType?"solid":i.gridType,i.dashLength=void 0==i.dashLength?4:i.dashLength;var a=e.area[0],s=e.height-e.area[2];if("dash"==i.gridType&&r.setLineDash([i.dashLength,i.dashLength]),r.setStrokeStyle(i.gridColor||"#cccccc"),r.setLineWidth(1*e.pixelRatio),r.beginPath(),r.moveTo(t,a),r.lineTo(t,s),r.stroke(),r.setLineDash([]),i.xAxisLabel){var c=e.categories[e.tooltip.index];r.setFontSize(n.fontSize);var l=g(c,n.fontSize),u=t-.5*l,h=s;r.beginPath(),r.setFillStyle(o(i.labelBgColor||n.toolTipBackground,i.labelBgOpacity||n.toolTipOpacity)),r.setStrokeStyle(i.labelBgColor||n.toolTipBackground),r.setLineWidth(1*e.pixelRatio),r.rect(u-n.toolTipPadding,h,l+2*n.toolTipPadding,n.fontSize+2*n.toolTipPadding),r.closePath(),r.stroke(),r.fill(),r.beginPath(),r.setFontSize(n.fontSize),r.setFillStyle(i.labelFontColor||n.fontColor),r.fillText(String(c),u,h+n.toolTipPadding+n.fontSize),r.closePath(),r.stroke()}}function pt(t,e,r,i,a){for(var s=n({},{type:"solid",dashLength:4,data:[]},r.extra.markLine),c=r.area[3],l=r.width-r.padding[1],u=it(t,e,s.data,r),h=0;h<u.length;h++){var f=n({},{lineColor:"#DE4A42",showLabel:!1,labelFontColor:"#666666",labelBgColor:"#DFE8FF",labelBgOpacity:.8,yAxisIndex:0},u[h]);if("dash"==s.type&&a.setLineDash([s.dashLength,s.dashLength]),a.setStrokeStyle(f.lineColor),a.setLineWidth(1*r.pixelRatio),a.beginPath(),a.moveTo(c,f.y),a.lineTo(l,f.y),a.stroke(),a.setLineDash([]),f.showLabel){var p=r.yAxis.format?r.yAxis.format(Number(f.value)):f.value;a.setFontSize(i.fontSize);var d=g(p,i.fontSize),v=r.padding[3]+i.yAxisTitleWidth-i.toolTipPadding,y=Math.max(r.area[3],d+2*i.toolTipPadding),m=y-v,x=v+(m-d)/2,_=f.y;a.setFillStyle(o(f.labelBgColor,f.labelBgOpacity)),a.setStrokeStyle(f.labelBgColor),a.setLineWidth(1*r.pixelRatio),a.beginPath(),a.rect(v,_-.5*i.fontSize-i.toolTipPadding,m,i.fontSize+2*i.toolTipPadding),a.closePath(),a.stroke(),a.fill(),a.beginPath(),a.setFontSize(i.fontSize),a.setFillStyle(f.labelFontColor),a.fillText(String(p),x,_+.5*i.fontSize),a.stroke()}}}function dt(t,e,r,i,a){var s=n({},{gridType:"solid",dashLength:4},t.extra.tooltip),c=t.area[3],l=t.width-t.padding[1];if("dash"==s.gridType&&r.setLineDash([s.dashLength,s.dashLength]),r.setStrokeStyle(s.gridColor||"#cccccc"),r.setLineWidth(1*t.pixelRatio),r.beginPath(),r.moveTo(c,t.tooltip.offset.y),r.lineTo(l,t.tooltip.offset.y),r.stroke(),r.setLineDash([]),s.yAxisLabel){var u=rt(t.tooltip.offset.y,t.series,t,e,i);r.setFontSize(e.fontSize);var h=g(u,e.fontSize),f=t.padding[3]+e.yAxisTitleWidth-e.toolTipPadding,p=Math.max(t.area[3],h+2*e.toolTipPadding),d=p-f,v=f+(d-h)/2,y=t.tooltip.offset.y;r.beginPath(),r.setFillStyle(o(s.labelBgColor||e.toolTipBackground,s.labelBgOpacity||e.toolTipOpacity)),r.setStrokeStyle(s.labelBgColor||e.toolTipBackground),r.setLineWidth(1*t.pixelRatio),r.rect(f,y-.5*e.fontSize-e.toolTipPadding,d,e.fontSize+2*e.toolTipPadding),r.closePath(),r.stroke(),r.fill(),r.beginPath(),r.setFontSize(e.fontSize),r.setFillStyle(s.labelFontColor||e.fontColor),r.fillText(u,v,y+.5*e.fontSize),r.closePath(),r.stroke()}}function vt(t,e,r,i,a){var s=n({},{activeBgColor:"#000000",activeBgOpacity:.08},e.extra.tooltip),c=e.area[0],l=e.height-e.area[2];i.beginPath(),i.setFillStyle(o(s.activeBgColor,s.activeBgOpacity)),i.rect(t-a/2,c,a,l-c),i.closePath(),i.fill()}function gt(t,e,r,i,a,s,c){var l=n({},{bgColor:"#000000",bgOpacity:.7,fontColor:"#FFFFFF"},r.extra.tooltip),u=4*r.pixelRatio,h=5*r.pixelRatio,f=8*r.pixelRatio,p=!1;"line"!=r.type&&"area"!=r.type&&"candle"!=r.type&&"mix"!=r.type||ft(r.tooltip.offset.x,r,i,a),e=n({x:0,y:0},e),e.y-=8*r.pixelRatio;var d=t.map((function(t){return g(t.text,i.fontSize)})),v=u+h+4*i.toolTipPadding+Math.max.apply(null,d),y=2*i.toolTipPadding+t.length*i.toolTipLineHeight;e.x-Math.abs(r._scrollDistance_)+f+v>r.width&&(p=!0),y+e.y>r.height&&(e.y=r.height-y),a.beginPath(),a.setFillStyle(o(l.bgColor||i.toolTipBackground,l.bgOpacity||i.toolTipOpacity)),p?(a.moveTo(e.x,e.y+10*r.pixelRatio),a.lineTo(e.x-f,e.y+10*r.pixelRatio-5*r.pixelRatio),a.lineTo(e.x-f,e.y),a.lineTo(e.x-f-Math.round(v),e.y),a.lineTo(e.x-f-Math.round(v),e.y+y),a.lineTo(e.x-f,e.y+y),a.lineTo(e.x-f,e.y+10*r.pixelRatio+5*r.pixelRatio),a.lineTo(e.x,e.y+10*r.pixelRatio)):(a.moveTo(e.x,e.y+10*r.pixelRatio),a.lineTo(e.x+f,e.y+10*r.pixelRatio-5*r.pixelRatio),a.lineTo(e.x+f,e.y),a.lineTo(e.x+f+Math.round(v),e.y),a.lineTo(e.x+f+Math.round(v),e.y+y),a.lineTo(e.x+f,e.y+y),a.lineTo(e.x+f,e.y+10*r.pixelRatio+5*r.pixelRatio),a.lineTo(e.x,e.y+10*r.pixelRatio)),a.closePath(),a.fill(),t.forEach((function(t,n){if(null!==t.color){a.beginPath(),a.setFillStyle(t.color);var r=e.x+f+2*i.toolTipPadding,o=e.y+(i.toolTipLineHeight-i.fontSize)/2+i.toolTipLineHeight*n+i.toolTipPadding+1;p&&(r=e.x-v-f+2*i.toolTipPadding),a.fillRect(r,o,u,i.fontSize),a.closePath()}})),t.forEach((function(t,n){var r=e.x+f+2*i.toolTipPadding+u+h;p&&(r=e.x-v-f+2*i.toolTipPadding+ +u+h);var o=e.y+(i.toolTipLineHeight-i.fontSize)/2+i.toolTipLineHeight*n+i.toolTipPadding;a.beginPath(),a.setFontSize(i.fontSize),a.setFillStyle(l.fontColor),a.fillText(t.text,r,o+i.fontSize),a.closePath(),a.stroke()}))}function yt(t,e,n,r){var i=n.xAxisHeight+(e.height-n.xAxisHeight-g(t))/2;r.save(),r.beginPath(),r.setFontSize(n.fontSize),r.setFillStyle(e.yAxis.titleFontColor||"#333333"),r.translate(0,e.height),r.rotate(-90*Math.PI/180),r.fillText(t,i,e.padding[3]+.5*n.fontSize),r.closePath(),r.stroke(),r.restore()}function mt(t,e,r,i){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,a=[].concat(e.chartData.yAxisData.ranges),s=e.chartData.xAxisData,c=s.xAxisPoints,l=s.eachSpacing,u=n({},{type:"group",width:l/2,meter:{border:4,fillColor:"#FFFFFF"}},e.extra.column),h=a.pop(),f=a.shift(),p=[];return i.save(),e._scrollDistance_&&0!==e._scrollDistance_&&!0===e.enableScroll&&i.translate(e._scrollDistance_,0),e.tooltip&&e.tooltip.textList&&e.tooltip.textList.length&&1===o&&vt(e.tooltip.offset.x,e,r,i,l),t.forEach((function(n,a){var s=n.data;switch(u.type){case"group":var d=Z(s,h,f,c,l,e,r,o),v=tt(s,h,f,c,l,e,r,a,t,o);p.push(v),d=X(d,l,t.length,a,r,e),d.forEach((function(t,r){if(null!==t){i.beginPath(),i.setStrokeStyle(t.color||n.color),i.setLineWidth(1),i.setFillStyle(t.color||n.color);var o=t.x-t.width/2;e.height,t.y,e.area[2];i.moveTo(o-1,t.y),i.lineTo(o+t.width-2,t.y),i.lineTo(o+t.width-2,e.height-e.area[2]),i.lineTo(o,e.height-e.area[2]),i.lineTo(o,t.y),i.closePath(),i.stroke(),i.fill()}}));break;case"stack":d=tt(s,h,f,c,l,e,r,a,t,o);p.push(d),d=Y(d,l,t.length,a,r,e,t),d.forEach((function(t,r){if(null!==t){i.beginPath(),i.setFillStyle(t.color||n.color);var o=t.x-t.width/2+1,s=e.height-t.y-e.area[2],c=e.height-t.y0-e.area[2];a>0&&(s-=c),i.moveTo(o,t.y),i.fillRect(o,t.y,t.width-2,s),i.closePath(),i.fill()}}));break;case"meter":d=Z(s,h,f,c,l,e,r,o);p.push(d),d=J(d,l,t.length,a,r,e,u.meter.border),0==a?d.forEach((function(t,r){if(null!==t){i.beginPath(),i.setFillStyle(u.meter.fillColor);var o=t.x-t.width/2,a=e.height-t.y-e.area[2];i.moveTo(o,t.y),i.fillRect(o,t.y,t.width,a),i.closePath(),i.fill(),u.meter.border>0&&(i.beginPath(),i.setStrokeStyle(n.color),i.setLineWidth(u.meter.border*e.pixelRatio),i.moveTo(o+.5*u.meter.border,t.y+a),i.lineTo(o+.5*u.meter.border,t.y+.5*u.meter.border),i.lineTo(o+t.width-.5*u.meter.border,t.y+.5*u.meter.border),i.lineTo(o+t.width-.5*u.meter.border,t.y+a),i.stroke())}})):d.forEach((function(t,r){if(null!==t){i.beginPath(),i.setFillStyle(t.color||n.color);var o=t.x-t.width/2,a=e.height-t.y-e.area[2];i.moveTo(o,t.y),i.fillRect(o,t.y,t.width,a),i.closePath(),i.fill()}}));break}})),!1!==e.dataLabel&&1===o&&t.forEach((function(n,a){var s=n.data;switch(u.type){case"group":var p=Z(s,h,f,c,l,e,r,o);p=X(p,l,t.length,a,r,e),ct(p,n,r,i);break;case"stack":p=tt(s,h,f,c,l,e,r,a,t,o);ct(p,n,r,i);break;case"meter":p=Z(s,h,f,c,l,e,r,o);ct(p,n,r,i);break}})),i.restore(),{xAxisPoints:c,calPoints:p,eachSpacing:l,minRange:h,maxRange:f}}function xt(t,e,r,i,o){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,s=n({},{color:{},average:{}},r.extra.candle);s.color=n({},{upLine:"#f04864",upFill:"#f04864",downLine:"#2fc25b",downFill:"#2fc25b"},s.color),s.average=n({},{show:!1,name:[],day:[],color:i.colors},s.average),r.extra.candle=s;var c=[].concat(r.chartData.yAxisData.ranges),l=r.chartData.xAxisData,u=l.xAxisPoints,f=l.eachSpacing,p=c.pop(),d=c.shift(),v=[];return o.save(),r._scrollDistance_&&0!==r._scrollDistance_&&!0===r.enableScroll&&o.translate(r._scrollDistance_,0),s.average.show&&e.forEach((function(t,e){var n=t.data,s=Z(n,p,d,u,f,r,i,a),c=F(s);c.forEach((function(e,n){o.beginPath(),o.setStrokeStyle(t.color),o.setLineWidth(1),1===e.length?(o.moveTo(e[0].x,e[0].y),o.arc(e[0].x,e[0].y,1,0,2*Math.PI)):(o.moveTo(e[0].x,e[0].y),e.forEach((function(t,n){if(n>0){var r=h(e,n-1);o.bezierCurveTo(r.ctrA.x,r.ctrA.y,r.ctrB.x,r.ctrB.y,t.x,t.y)}})),o.moveTo(e[0].x,e[0].y)),o.closePath(),o.stroke()}))})),t.forEach((function(t,e){var n=t.data,c=K(n,p,d,u,f,r,i,a);v.push(c);var l=F(c);l=l[0],l.forEach((function(t,e){o.beginPath(),n[e][1]-n[e][0]>0?(o.setStrokeStyle(s.color.upLine),o.setFillStyle(s.color.upFill),o.setLineWidth(1*r.pixelRatio),o.moveTo(t[3].x,t[3].y),o.lineTo(t[1].x,t[1].y),o.lineTo(t[1].x-f/4,t[1].y),o.lineTo(t[0].x-f/4,t[0].y),o.lineTo(t[0].x,t[0].y),o.lineTo(t[2].x,t[2].y),o.lineTo(t[0].x,t[0].y),o.lineTo(t[0].x+f/4,t[0].y),o.lineTo(t[1].x+f/4,t[1].y),o.lineTo(t[1].x,t[1].y),o.moveTo(t[3].x,t[3].y)):(o.setStrokeStyle(s.color.downLine),o.setFillStyle(s.color.downFill),o.setLineWidth(1*r.pixelRatio),o.moveTo(t[3].x,t[3].y),o.lineTo(t[0].x,t[0].y),o.lineTo(t[0].x-f/4,t[0].y),o.lineTo(t[1].x-f/4,t[1].y),o.lineTo(t[1].x,t[1].y),o.lineTo(t[2].x,t[2].y),o.lineTo(t[1].x,t[1].y),o.lineTo(t[1].x+f/4,t[1].y),o.lineTo(t[0].x+f/4,t[0].y),o.lineTo(t[0].x,t[0].y),o.moveTo(t[3].x,t[3].y)),o.closePath(),o.fill(),o.stroke()}))})),o.restore(),{xAxisPoints:u,calPoints:v,eachSpacing:f,minRange:p,maxRange:d}}function _t(t,e,r,i){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,s=n({},{type:"straight",opacity:.2,addLine:!1,width:2},e.extra.area),c=[].concat(e.chartData.yAxisData.ranges),l=e.chartData.xAxisData,u=l.xAxisPoints,f=l.eachSpacing,p=c.pop(),d=c.shift(),v=e.height-e.area[2],g=[];return i.save(),e._scrollDistance_&&0!==e._scrollDistance_&&!0===e.enableScroll&&i.translate(e._scrollDistance_,0),t.forEach((function(t,n){var c=t.data,l=Z(c,p,d,u,f,e,r,a);g.push(l);for(var y=F(l),m=function(n){var r=y[n];if(i.beginPath(),i.setStrokeStyle(o(t.color,s.opacity)),i.setFillStyle(o(t.color,s.opacity)),i.setLineWidth(s.width*e.pixelRatio),r.length>1){var a=r[0],c=r[r.length-1];i.moveTo(a.x,a.y),"curve"===s.type?r.forEach((function(t,e){if(e>0){var n=h(r,e-1);i.bezierCurveTo(n.ctrA.x,n.ctrA.y,n.ctrB.x,n.ctrB.y,t.x,t.y)}})):r.forEach((function(t,e){e>0&&i.lineTo(t.x,t.y)})),i.lineTo(c.x,v),i.lineTo(a.x,v),i.lineTo(a.x,a.y)}else{var l=r[0];i.moveTo(l.x-f/2,l.y),i.lineTo(l.x+f/2,l.y),i.lineTo(l.x+f/2,v),i.lineTo(l.x-f/2,v),i.moveTo(l.x-f/2,l.y)}i.closePath(),i.fill(),s.addLine&&(i.beginPath(),i.setStrokeStyle(t.color),i.setLineWidth(s.width*e.pixelRatio),1===r.length?(i.moveTo(r[0].x,r[0].y),i.arc(r[0].x,r[0].y,1,0,2*Math.PI)):(i.moveTo(r[0].x,r[0].y),"curve"===s.type?r.forEach((function(t,e){if(e>0){var n=h(r,e-1);i.bezierCurveTo(n.ctrA.x,n.ctrA.y,n.ctrB.x,n.ctrB.y,t.x,t.y)}})):r.forEach((function(t,e){e>0&&i.lineTo(t.x,t.y)})),i.moveTo(r[0].x,r[0].y)),i.closePath(),i.stroke())},x=0;x<y.length;x++)m(x);if(!1!==e.dataPointShape){var _=r.dataPointShape[n%r.dataPointShape.length];at(l,t.color,_,i,e)}})),!1!==e.dataLabel&&1===a&&t.forEach((function(t,n){var o=t.data,s=Z(o,p,d,u,f,e,r,a);ct(s,t,r,i)})),i.restore(),{xAxisPoints:u,calPoints:g,eachSpacing:f,minRange:p,maxRange:d}}function bt(t,e,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,o=e.extra.line||{type:"straight",width:2};o.type=o.type?o.type:"straight",o.width=o.width?o.width:2;var a=[].concat(e.chartData.yAxisData.ranges),s=e.chartData.xAxisData,c=s.xAxisPoints,l=s.eachSpacing,u=a.pop(),f=a.shift(),p=[];return r.save(),e._scrollDistance_&&0!==e._scrollDistance_&&!0===e.enableScroll&&r.translate(e._scrollDistance_,0),t.forEach((function(t,a){var s=t.data,d=Z(s,u,f,c,l,e,n,i);p.push(d);var v=F(d);if(v.forEach((function(n,i){r.beginPath(),r.setStrokeStyle(t.color),r.setLineWidth(o.width*e.pixelRatio),1===n.length?(r.moveTo(n[0].x,n[0].y),r.arc(n[0].x,n[0].y,1,0,2*Math.PI)):(r.moveTo(n[0].x,n[0].y),"curve"===o.type?n.forEach((function(t,e){if(e>0){var i=h(n,e-1);r.bezierCurveTo(i.ctrA.x,i.ctrA.y,i.ctrB.x,i.ctrB.y,t.x,t.y)}})):n.forEach((function(t,e){e>0&&r.lineTo(t.x,t.y)})),r.moveTo(n[0].x,n[0].y)),r.closePath(),r.stroke()})),!1!==e.dataPointShape){var g=n.dataPointShape[a%n.dataPointShape.length];at(d,t.color,g,r,e)}})),!1!==e.dataLabel&&1===i&&t.forEach((function(t,o){var a=t.data,s=Z(a,u,f,c,l,e,n,i);ct(s,t,n,r)})),r.restore(),{xAxisPoints:c,calPoints:p,eachSpacing:l,minRange:u,maxRange:f}}function wt(t,e,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,a=[].concat(e.chartData.yAxisData.ranges),s=e.chartData.xAxisData,c=s.xAxisPoints,l=s.eachSpacing,u=a.pop(),f=a.shift(),p=e.height-e.area[2],d=[],v=0,g=0;if(t.forEach((function(t,e){"column"==t.type&&(g+=1)})),r.save(),e._scrollDistance_&&0!==e._scrollDistance_&&!0===e.enableScroll&&r.translate(e._scrollDistance_,0),t.forEach((function(t,a){var s=t.data,y=Z(s,u,f,c,l,e,n,i);if(d.push(y),"column"==t.type&&(y=X(y,l,g,v,n,e),y.forEach((function(n,i){if(null!==n){r.beginPath(),r.setStrokeStyle(n.color||t.color),r.setLineWidth(1),r.setFillStyle(n.color||t.color);var o=n.x-n.width/2;e.height,n.y,e.area[2];r.moveTo(o,n.y),r.moveTo(o-1,n.y),r.lineTo(o+n.width-2,n.y),r.lineTo(o+n.width-2,e.height-e.area[2]),r.lineTo(o,e.height-e.area[2]),r.lineTo(o,n.y),r.closePath(),r.stroke(),r.fill(),r.closePath(),r.fill()}})),v+=1),"area"==t.type)for(var m=F(y),x=function(n){var i=m[n];if(r.beginPath(),r.setStrokeStyle(t.color),r.setFillStyle(o(t.color,.2)),r.setLineWidth(2*e.pixelRatio),i.length>1){b=i[0];var a=i[i.length-1];r.moveTo(b.x,b.y),"curve"===t.style?i.forEach((function(t,e){if(e>0){var n=h(i,e-1);r.bezierCurveTo(n.ctrA.x,n.ctrA.y,n.ctrB.x,n.ctrB.y,t.x,t.y)}})):i.forEach((function(t,e){e>0&&r.lineTo(t.x,t.y)})),r.lineTo(a.x,p),r.lineTo(b.x,p),r.lineTo(b.x,b.y)}else{var s=i[0];r.moveTo(s.x-l/2,s.y),r.lineTo(s.x+l/2,s.y),r.lineTo(s.x+l/2,p),r.lineTo(s.x-l/2,p),r.moveTo(s.x-l/2,s.y)}r.closePath(),r.fill()},_=0;_<m.length;_++){var b;x(_)}if("line"==t.type){var w=F(y);w.forEach((function(n,i){r.beginPath(),r.setStrokeStyle(t.color),r.setLineWidth(2*e.pixelRatio),1===n.length?(r.moveTo(n[0].x,n[0].y),r.arc(n[0].x,n[0].y,1,0,2*Math.PI)):(r.moveTo(n[0].x,n[0].y),"curve"==t.style?n.forEach((function(t,e){if(e>0){var i=h(n,e-1);r.bezierCurveTo(i.ctrA.x,i.ctrA.y,i.ctrB.x,i.ctrB.y,t.x,t.y)}})):n.forEach((function(t,e){e>0&&r.lineTo(t.x,t.y)})),r.moveTo(n[0].x,n[0].y)),r.closePath(),r.stroke()}))}if("point"==t.type&&y.forEach((function(n,i){n&&(r.beginPath(),r.setFillStyle(t.color),r.setStrokeStyle("#FFFFFF"),r.setLineWidth(1*e.pixelRatio),r.moveTo(n.x+3.5*e.pixelRatio,n.y),r.arc(n.x,n.y,4*e.pixelRatio,0,2*Math.PI),r.closePath(),r.fill(),r.stroke())})),1==t.addPoint&&"column"!==t.type){var A=n.dataPointShape[a%n.dataPointShape.length];at(y,t.color,A,r,e)}})),!1!==e.dataLabel&&1===i){v=0;t.forEach((function(t,o){var a=t.data,s=Z(a,u,f,c,l,e,n,i);"column"!==t.type?ct(s,t,n,r):(s=X(s,l,g,v,n,e),ct(s,t,n,r),v+=1)}))}return r.restore(),{xAxisPoints:c,calPoints:d,eachSpacing:l,minRange:u,maxRange:f}}function At(t,e,n,r,i,o){var a=t.extra.tooltip||{};a.horizentalLine&&t.tooltip&&1===r&&("line"==t.type||"area"==t.type||"column"==t.type||"candle"==t.type||"mix"==t.type)&&dt(t,e,n,i,o),n.save(),t._scrollDistance_&&0!==t._scrollDistance_&&!0===t.enableScroll&&n.translate(t._scrollDistance_,0),t.tooltip&&t.tooltip.textList&&t.tooltip.textList.length&&1===r&&gt(t.tooltip.textList,t.tooltip.offset,t,e,n,i,o),n.restore()}function St(t,e,n,r){var i=e.chartData.xAxisData,o=i.xAxisPoints,a=i.startX,s=i.endX,c=i.eachSpacing,l="center";"line"!=e.type&&"area"!=e.type||(l=e.xAxis.boundaryGap);var h=e.height-e.area[2],f=e.area[0];if(e.enableScroll&&e.xAxis.scrollShow){var p=e.height-e.area[2]+n.xAxisHeight,d=s-a,v=c*(o.length-1),y=d*d/v,m=0;e._scrollDistance_&&(m=-e._scrollDistance_*d/v),r.beginPath(),r.setLineCap("round"),r.setLineWidth(6*e.pixelRatio),r.setStrokeStyle(e.xAxis.scrollBackgroundColor||"#EFEBEF"),r.moveTo(a,p),r.lineTo(s,p),r.stroke(),r.closePath(),r.beginPath(),r.setLineCap("round"),r.setLineWidth(6*e.pixelRatio),r.setStrokeStyle(e.xAxis.scrollColor||"#A6A6A6"),r.moveTo(a+m,p),r.lineTo(a+m+y,p),r.stroke(),r.closePath(),r.setLineCap("butt")}if(r.save(),e._scrollDistance_&&0!==e._scrollDistance_&&r.translate(e._scrollDistance_,0),!0!==e.xAxis.disableGrid&&(r.setStrokeStyle(e.xAxis.gridColor||"#cccccc"),r.setLineCap("butt"),r.setLineWidth(1*e.pixelRatio),"dash"==e.xAxis.gridType&&r.setLineDash([e.xAxis.dashLength,e.xAxis.dashLength]),"calibration"===e.xAxis.type?o.forEach((function(t,n){n>0&&(r.beginPath(),r.moveTo(t-c/2,h),r.lineTo(t-c/2,h+4*e.pixelRatio),r.closePath(),r.stroke())})):(e.xAxis.gridEval=e.xAxis.gridEval||1,o.forEach((function(t,n){n%e.xAxis.gridEval==0&&(r.beginPath(),r.moveTo(t,h),r.lineTo(t,f),r.stroke())}))),r.setLineDash([])),!0!==e.xAxis.disabled){e.width,e.padding[1],e.padding[3],n.yAxisWidth,n.yAxisTitleWidth;var x=t.length;e.xAxis.labelCount&&(x=e.xAxis.itemCount?Math.ceil(t.length/e.xAxis.itemCount*e.xAxis.labelCount):e.xAxis.labelCount,x-=1);for(var _=Math.ceil(t.length/x),b=[],w=t.length,A=0;A<w;A++)A%_!==0?b.push(""):b.push(t[A]);b[w-1]=t[w-1];var S=e.xAxis.fontSize||n.fontSize;0===n._xAxisTextAngle_?b.forEach((function(t,i){var a=-g(t,S)/2;"center"==l&&(a+=c/2),r.beginPath(),r.setFontSize(S),r.setFillStyle(e.xAxis.fontColor||"#666666"),r.fillText(t,o[i]+a,h+S+(n.xAxisHeight-S)/2),r.closePath(),r.stroke()})):b.forEach((function(t,i){r.save(),r.beginPath(),r.setFontSize(S),r.setFillStyle(e.xAxis.fontColor||"#666666");var a=g(t),s=-a;"center"==l&&(s+=c/2);var f=u(o[i]+c/2,h+S/2+5,e.height),p=f.transX,d=f.transY;r.rotate(-1*n._xAxisTextAngle_),r.translate(p,d),r.fillText(t,o[i]+s,h+S+5),r.closePath(),r.stroke(),r.restore()}))}r.restore()}function Pt(t,e,n,r){if(!0!==e.yAxis.disableGrid){for(var i=e.height-e.area[0]-e.area[2],o=i/n.yAxisSplit,a=e.area[3],s=e.chartData.xAxisData.xAxisPoints,c=e.chartData.xAxisData.eachSpacing,l=c*(s.length-1),u=a+l,h=[],f=0;f<n.yAxisSplit+1;f++)h.push(e.height-e.area[2]-o*f);r.save(),e._scrollDistance_&&0!==e._scrollDistance_&&r.translate(e._scrollDistance_,0),"dash"==e.yAxis.gridType&&r.setLineDash([e.yAxis.dashLength,e.yAxis.dashLength]),r.setStrokeStyle(e.yAxis.gridColor||"#cccccc"),r.setLineWidth(1*e.pixelRatio),h.forEach((function(t,e){r.beginPath(),r.moveTo(a,t),r.lineTo(u,t),r.stroke()})),r.setLineDash([]),r.restore()}}function kt(t,e,n,r){if(!0!==e.yAxis.disabled){var i=e.chartData.yAxisData.rangesFormat,o=e.height-e.area[0]-e.area[2],a=Math.floor(o/n.yAxisSplit),s=e.area[3],c=e.width-e.area[1],l=e.height-e.area[2],u=l+n.xAxisHeight;e.xAxis.scrollShow&&(u-=3*e.pixelRatio),r.beginPath(),r.setFillStyle(e.background||"#ffffff"),e._scrollDistance_<0&&r.fillRect(0,0,s,u),1==e.enableScroll&&r.fillRect(c,0,e.width,u),r.closePath(),r.stroke();for(var h=[],f=0;f<=n.yAxisSplit;f++)h.push(e.area[0]+a*f);var p=e.yAxis.fontSize||n.fontSize;i.forEach((function(t,i){var o=h[i]?h[i]:l;r.beginPath(),r.setFontSize(p),r.setFillStyle(e.yAxis.fontColor||"#666666"),r.fillText(String(t),e.area[3]-n.yAxisWidth,o+p/2),r.closePath(),r.stroke()})),e.yAxis.title&&yt(e.yAxis.title,e,n,r)}}function Tt(t,e,n,r,i){if(!1!==e.legend.show){var o=i.legendData,a=o.points,s=o.area,c=e.legend.padding,l=e.legend.fontSize,u=15*e.pixelRatio,h=5*e.pixelRatio,f=e.legend.itemGap,p=Math.max(e.legend.lineHeight*e.pixelRatio,l);r.beginPath(),r.setLineWidth(e.legend.borderWidth),r.setStrokeStyle(e.legend.borderColor),r.setFillStyle(e.legend.backgroundColor),r.moveTo(s.start.x,s.start.y),r.rect(s.start.x,s.start.y,s.width,s.height),r.closePath(),r.fill(),r.stroke(),a.forEach((function(t,i){var a=0,d=0;a=o.widthArr[i],d=o.heightArr[i];var v=0,y=0;"top"==e.legend.position||"bottom"==e.legend.position?(v=s.start.x+(s.width-a)/2,y=s.start.y+c+i*p):(a=0==i?0:o.widthArr[i-1],v=s.start.x+c+a,y=s.start.y+c+(s.height-d)/2),r.setFontSize(n.fontSize);for(var m=0;m<t.length;m++){var x=t[m];switch(x.area=[0,0,0,0],x.area[0]=v,x.area[1]=y,x.area[3]=y+p,r.beginPath(),r.setLineWidth(1*e.pixelRatio),r.setStrokeStyle(x.show?x.color:e.legend.hiddenColor),r.setFillStyle(x.show?x.color:e.legend.hiddenColor),x.legendShape){case"line":r.moveTo(v,y+.5*p-2*e.pixelRatio),r.fillRect(v,y+.5*p-2*e.pixelRatio,15*e.pixelRatio,4*e.pixelRatio);break;case"triangle":r.moveTo(v+7.5*e.pixelRatio,y+.5*p-5*e.pixelRatio),r.lineTo(v+2.5*e.pixelRatio,y+.5*p+5*e.pixelRatio),r.lineTo(v+12.5*e.pixelRatio,y+.5*p+5*e.pixelRatio),r.lineTo(v+7.5*e.pixelRatio,y+.5*p-5*e.pixelRatio);break;case"diamond":r.moveTo(v+7.5*e.pixelRatio,y+.5*p-5*e.pixelRatio),r.lineTo(v+2.5*e.pixelRatio,y+.5*p),r.lineTo(v+7.5*e.pixelRatio,y+.5*p+5*e.pixelRatio),r.lineTo(v+12.5*e.pixelRatio,y+.5*p),r.lineTo(v+7.5*e.pixelRatio,y+.5*p-5*e.pixelRatio);break;case"circle":r.moveTo(v+7.5*e.pixelRatio,y+.5*p),r.arc(v+7.5*e.pixelRatio,y+.5*p,5*e.pixelRatio,0,2*Math.PI);break;case"rect":r.moveTo(v,y+.5*p-5*e.pixelRatio),r.fillRect(v,y+.5*p-5*e.pixelRatio,15*e.pixelRatio,10*e.pixelRatio);break;default:r.moveTo(v,y+.5*p-5*e.pixelRatio),r.fillRect(v,y+.5*p-5*e.pixelRatio,15*e.pixelRatio,10*e.pixelRatio)}r.closePath(),r.fill(),r.stroke(),v+=u+h;var _=.5*p+.5*l-2;r.beginPath(),r.setFontSize(l),r.setFillStyle(x.show?e.legend.fontColor:e.legend.hiddenColor),r.fillText(x.name,v,y+_),r.closePath(),r.stroke(),"top"==e.legend.position||"bottom"==e.legend.position?(v+=g(x.name,l)+f,x.area[2]=v):(x.area[2]=v+g(x.name,l)+f,v-=u+h,y+=p)}}))}}function Ot(t,e,r,i){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,s=n({},{activeOpacity:.5,activeRadius:10*e.pixelRatio,offsetAngle:0,labelWidth:15*e.pixelRatio,ringWidth:0,border:!1,borderWidth:2,borderColor:"#FFFFFF"},e.extra.pie),c={x:e.area[3]+(e.width-e.area[1]-e.area[3])/2,y:e.area[0]+(e.height-e.area[0]-e.area[2])/2};0==r.pieChartLinePadding&&(r.pieChartLinePadding=s.activeRadius);var l=Math.min((e.width-e.area[1]-e.area[3])/2-r.pieChartLinePadding-r.pieChartTextPadding-r._pieTextMaxLength_,(e.height-e.area[0]-e.area[2])/2-r.pieChartLinePadding-r.pieChartTextPadding);t=W(t,l,a);var u=s.activeRadius;if(t=t.map((function(t){return t._start_+=s.offsetAngle*Math.PI/180,t})),t.forEach((function(t,n){e.tooltip&&e.tooltip.index==n&&(i.beginPath(),i.setFillStyle(o(t.color,e.extra.pie.activeOpacity||.5)),i.moveTo(c.x,c.y),i.arc(c.x,c.y,t._radius_+u,t._start_,t._start_+2*t._proportion_*Math.PI),i.closePath(),i.fill()),i.beginPath(),i.setLineWidth(s.borderWidth*e.pixelRatio),i.lineJoin="round",i.setStrokeStyle(s.borderColor),i.setFillStyle(t.color),i.moveTo(c.x,c.y),i.arc(c.x,c.y,t._radius_,t._start_,t._start_+2*t._proportion_*Math.PI),i.closePath(),i.fill(),1==s.border&&i.stroke()})),"ring"===e.type){var h=.6*l;"number"===typeof e.extra.pie.ringWidth&&e.extra.pie.ringWidth>0&&(h=Math.max(0,l-e.extra.pie.ringWidth)),i.beginPath(),i.setFillStyle(e.background||"#ffffff"),i.moveTo(c.x,c.y),i.arc(c.x,c.y,h,0,2*Math.PI),i.closePath(),i.fill()}if(!1!==e.dataLabel&&1===a){for(var f=!1,p=0,d=t.length;p<d;p++)if(t[p].data>0){f=!0;break}f&&ht(t,e,r,i,l,c)}return 1===a&&"ring"===e.type&&st(e,r,i,c),{center:c,radius:l,series:t}}function $t(t,e,r,i){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,s=n({},{type:"area",activeOpacity:.5,activeRadius:10*e.pixelRatio,offsetAngle:0,labelWidth:15*e.pixelRatio,border:!1,borderWidth:2,borderColor:"#FFFFFF"},e.extra.rose);0==r.pieChartLinePadding&&(r.pieChartLinePadding=s.activeRadius);var c={x:e.area[3]+(e.width-e.area[1]-e.area[3])/2,y:e.area[0]+(e.height-e.area[0]-e.area[2])/2},l=Math.min((e.width-e.area[1]-e.area[3])/2-r.pieChartLinePadding-r.pieChartTextPadding-r._pieTextMaxLength_,(e.height-e.area[0]-e.area[2])/2-r.pieChartLinePadding-r.pieChartTextPadding),u=s.minRadius||.5*l;t=V(t,s.type,u,l,a);var h=s.activeRadius;if(t=t.map((function(t){return t._start_+=(s.offsetAngle||0)*Math.PI/180,t})),t.forEach((function(t,n){e.tooltip&&e.tooltip.index==n&&(i.beginPath(),i.setFillStyle(o(t.color,s.activeOpacity||.5)),i.moveTo(c.x,c.y),i.arc(c.x,c.y,h+t._radius_,t._start_,t._start_+2*t._rose_proportion_*Math.PI),i.closePath(),i.fill()),i.beginPath(),i.setLineWidth(s.borderWidth*e.pixelRatio),i.lineJoin="round",i.setStrokeStyle(s.borderColor),i.setFillStyle(t.color),i.moveTo(c.x,c.y),i.arc(c.x,c.y,t._radius_,t._start_,t._start_+2*t._rose_proportion_*Math.PI),i.closePath(),i.fill(),1==s.border&&i.stroke()})),!1!==e.dataLabel&&1===a){for(var f=!1,p=0,d=t.length;p<d;p++)if(t[p].data>0){f=!0;break}f&&ht(t,e,r,i,l,c)}return{center:c,radius:l,series:t}}function Ct(t,e,r,i){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,a=n({},{startAngle:.75,endAngle:.25,type:"default",width:12*e.pixelRatio},e.extra.arcbar);t=U(t,a,o);var s={x:e.width/2,y:e.height/2},c=Math.min(s.x,s.y);c-=5*e.pixelRatio,c-=a.width/2,i.setLineWidth(a.width),i.setStrokeStyle(a.backgroundColor||"#E9E9E9"),i.setLineCap("round"),i.beginPath(),"default"==a.type?i.arc(s.x,s.y,c,a.startAngle*Math.PI,a.endAngle*Math.PI,!1):i.arc(s.x,s.y,c,0,2*Math.PI,!1),i.stroke();for(var l=0;l<t.length;l++){var u=t[l];i.setLineWidth(a.width),i.setStrokeStyle(u.color),i.setLineCap("round"),i.beginPath(),i.arc(s.x,s.y,c,a.startAngle*Math.PI,u._proportion_*Math.PI,!1),i.stroke()}return st(e,r,i,s),{center:s,radius:c,series:t}}function Mt(t,e,r,i,o){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,s=n({},{startAngle:.75,endAngle:.25,width:15,splitLine:{fixRadius:0,splitNumber:10,width:15,color:"#FFFFFF",childNumber:5,childWidth:5},pointer:{width:15,color:"auto"}},r.extra.gauge);void 0==s.oldAngle&&(s.oldAngle=s.startAngle),void 0==s.oldData&&(s.oldData=0),t=H(t,s.startAngle,s.endAngle);var c={x:r.width/2,y:r.height/2},l=Math.min(c.x,c.y);l-=5*r.pixelRatio,l-=s.width/2;var u=l-s.width;o.setLineWidth(s.width),o.setLineCap("butt");for(var h=0;h<t.length;h++){var f=t[h];o.beginPath(),o.setStrokeStyle(f.color),o.arc(c.x,c.y,l,f._startAngle_*Math.PI,f._endAngle_*Math.PI,!1),o.stroke()}o.save();var p=s.startAngle-s.endAngle+1,d=p/s.splitLine.splitNumber,v=p/s.splitLine.splitNumber/s.splitLine.childNumber,g=-l-.5*s.width-s.splitLine.fixRadius,y=-l-.5*s.width-s.splitLine.fixRadius+s.splitLine.width,m=-l-.5*s.width-s.splitLine.fixRadius+s.splitLine.childWidth;o.translate(c.x,c.y),o.rotate((s.startAngle-1)*Math.PI);for(var x=0;x<s.splitLine.splitNumber+1;x++)o.beginPath(),o.setStrokeStyle(s.splitLine.color),o.setLineWidth(2*r.pixelRatio),o.moveTo(g,0),o.lineTo(y,0),o.stroke(),o.rotate(d*Math.PI);o.restore(),o.save(),o.translate(c.x,c.y),o.rotate((s.startAngle-1)*Math.PI);for(var _=0;_<s.splitLine.splitNumber*s.splitLine.childNumber+1;_++)o.beginPath(),o.setStrokeStyle(s.splitLine.color),o.setLineWidth(1*r.pixelRatio),o.moveTo(g,0),o.lineTo(m,0),o.stroke(),o.rotate(v*Math.PI);o.restore(),e=G(e,t,s,a);for(var b=0;b<e.length;b++){var w=e[b];o.save(),o.translate(c.x,c.y),o.rotate((w._proportion_-1)*Math.PI),o.beginPath(),o.setFillStyle(w.color),o.moveTo(s.pointer.width,0),o.lineTo(0,-s.pointer.width/2),o.lineTo(-u,0),o.lineTo(0,s.pointer.width/2),o.lineTo(s.pointer.width,0),o.closePath(),o.fill(),o.beginPath(),o.setFillStyle("#FFFFFF"),o.arc(0,0,s.pointer.width/6,0,2*Math.PI,!1),o.fill(),o.restore()}return!1!==r.dataLabel&&lt(s,l,c,r,i,o),st(r,i,o,c),1===a&&"gauge"===r.type&&(r.extra.gauge.oldAngle=e[0]._proportion_,r.extra.gauge.oldData=e[0].data),{center:c,radius:l,innerRadius:u,categories:t,totalAngle:p}}function Lt(t,e,r,i){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,s=n({},{gridColor:"#cccccc",labelColor:"#666666",opacity:.2},e.extra.radar),c=w(e.categories.length),l={x:e.area[3]+(e.width-e.area[1]-e.area[3])/2,y:e.area[0]+(e.height-e.area[0]-e.area[2])/2},u=Math.min(l.x-(b(e.categories)+r.radarLabelTextMargin),l.y-r.radarLabelTextMargin);u-=e.padding[1],i.beginPath(),i.setLineWidth(1*e.pixelRatio),i.setStrokeStyle(s.gridColor),c.forEach((function(t){var e=f(u*Math.cos(t),u*Math.sin(t),l);i.moveTo(l.x,l.y),i.lineTo(e.x,e.y)})),i.stroke(),i.closePath();for(var h=function(t){var n={};i.beginPath(),i.setLineWidth(1*e.pixelRatio),i.setStrokeStyle(s.gridColor),c.forEach((function(e,o){var a=f(u/r.radarGridCount*t*Math.cos(e),u/r.radarGridCount*t*Math.sin(e),l);0===o?(n=a,i.moveTo(a.x,a.y)):i.lineTo(a.x,a.y)})),i.lineTo(n.x,n.y),i.stroke(),i.closePath()},p=1;p<=r.radarGridCount;p++)h(p);var d=N(c,l,u,t,e,a);return d.forEach((function(t,n){if(i.beginPath(),i.setFillStyle(o(t.color,s.opacity)),t.data.forEach((function(t,e){0===e?i.moveTo(t.position.x,t.position.y):i.lineTo(t.position.x,t.position.y)})),i.closePath(),i.fill(),!1!==e.dataPointShape){var a=r.dataPointShape[n%r.dataPointShape.length],c=t.data.map((function(t){return t.position}));at(c,t.color,a,i,e)}})),ut(c,u,l,e,r,i),{center:l,radius:u,angleList:c}}function Et(t,e,n){n=0==n?1:n;for(var r=[],i=0;i<n;i++)r[i]=Math.random();return Math.floor(r.reduce((function(t,e){return t+e}))/n*(e-t))+t}function jt(t,e,n,r){for(var i=!1,o=0;o<e.length;o++)if(e[o].area){if(!(t[3]<e[o].area[1]||t[0]>e[o].area[2]||t[1]>e[o].area[3]||t[2]<e[o].area[0])){i=!0;break}if(t[0]<0||t[1]<0||t[2]>n||t[3]>r){i=!0;break}i=!1}return i}function Dt(t){var e,n={};n.xMin=180,n.xMax=0,n.yMin=90,n.yMax=0;for(var r=0;r<t.length;r++)for(var i=t[r].geometry.coordinates,o=0;o<i.length;o++){e=i[o],1==e.length&&(e=e[0]);for(var a=0;a<e.length;a++){var s=e[a][0],c=e[a][1],l={x:s,y:c};n.xMin=n.xMin<l.x?n.xMin:l.x,n.xMax=n.xMax>l.x?n.xMax:l.x,n.yMin=n.yMin<l.y?n.yMin:l.y,n.yMax=n.yMax>l.y?n.yMax:l.y}}return n}function Rt(t,e,n,r,i,o){return{x:(e-n.xMin)*r+i,y:(n.yMax-t)*r+o}}function Ft(t,e,n,r,i,o){return{x:(e-i)/r+n.xMin,y:n.yMax-(t-o)/r}}function It(t,e,n){if(e[1]==n[1])return!1;if(e[1]>t[1]&&n[1]>t[1])return!1;if(e[1]<t[1]&&n[1]<t[1])return!1;if(e[1]==t[1]&&n[1]>t[1])return!1;if(n[1]==t[1]&&e[1]>t[1])return!1;if(e[0]<t[0]&&n[1]<t[1])return!1;var r=n[0]-(n[0]-e[0])*(n[1]-t[1])/(n[1]-e[1]);return!(r<t[0])}function zt(t,e){for(var n=0,r=0;r<e.length;r++){var i=e[r][0];1==e.length&&(i=e[r][0]);for(var o=0;o<i.length-1;o++){var a=i[o],s=i[o+1];It(t,a,s)&&(n+=1)}}return n%2==1}function Nt(t,e,r,i){var a,s,c=n({},{border:!0,borderWidth:1,borderColor:"#666666",fillOpacity:.6,activeBorderColor:"#f04864",activeFillColor:"#facc14",activeFillOpacity:1},e.extra.map),l=t,u=Dt(l),h=e.width/Math.abs(u.xMax-u.xMin),f=e.height/Math.abs(u.yMax-u.yMin),p=h<f?h:f,d=e.width/2-Math.abs(u.xMax-u.xMin)/2*p,v=e.height/2-Math.abs(u.yMax-u.yMin)/2*p;i.beginPath(),i.clearRect(0,0,e.width,e.height),i.setFillStyle(e.background||"#FFFFFF"),i.rect(0,0,e.width,e.height),i.fill();for(var y=0;y<l.length;y++){i.beginPath(),i.setLineWidth(c.borderWidth*e.pixelRatio),i.setStrokeStyle(c.borderColor),i.setFillStyle(o(t[y].color,c.fillOpacity)),e.tooltip&&e.tooltip.index==y&&(i.setStrokeStyle(c.activeBorderColor),i.setFillStyle(o(c.activeFillColor,c.activeFillOpacity)));for(var m=l[y].geometry.coordinates,x=0;x<m.length;x++){a=m[x],1==a.length&&(a=a[0]);for(var _=0;_<a.length;_++)s=Rt(a[_][1],a[_][0],u,p,d,v),0===_?(i.beginPath(),i.moveTo(s.x,s.y)):i.lineTo(s.x,s.y);i.fill(),1==c.border&&i.stroke()}if(1==e.dataLabel){var b=l[y].properties.centroid;if(b){s=Rt(b[1],b[0],u,p,d,v);var w=l[y].textSize||r.fontSize,A=l[y].properties.name;i.beginPath(),i.setFontSize(w),i.setFillStyle(l[y].textColor||"#666666"),i.fillText(A,s.x-g(A,w)/2,s.y+w/2),i.closePath(),i.stroke()}}}e.chartData.mapData={bounds:u,scale:p,xoffset:d,yoffset:v},At(e,r,i,1),i.draw()}function Wt(t,e){var n=t.series.sort((function(t,e){return parseInt(e.textSize)-parseInt(t.textSize)}));switch(e){case"normal":for(var r=0;r<n.length;r++){var i=n[r].name,o=n[r].textSize,a=g(i,o),s=void 0,c=void 0,l=void 0,u=0;while(1){u++,s=Et(-t.width/2,t.width/2,5)-a/2,c=Et(-t.height/2,t.height/2,5)+o/2,l=[s-5+t.width/2,c-5-o+t.height/2,s+a+5+t.width/2,c+5+t.height/2];var h=jt(l,n,t.width,t.height);if(!h)break;if(1e3==u){l=[-100,-100,-100,-100];break}}n[r].area=l}break;case"vertical":for(var f=function(){return Math.random()>.7},p=0;p<n.length;p++){var d=n[p].name,v=n[p].textSize,y=g(d,v),m=f(),x=void 0,_=void 0,b=void 0,w=void 0,A=0;while(1){A++;var S=void 0;if(m?(x=Et(-t.width/2,t.width/2,5)-y/2,_=Et(-t.height/2,t.height/2,5)+v/2,b=[_-5-y+t.width/2,-x-5+t.height/2,_+5+t.width/2,-x+v+5+t.height/2],w=[t.width-(t.width/2-t.height/2)-(-x+v+5+t.height/2)-5,t.height/2-t.width/2+(_-5-y+t.width/2)-5,t.width-(t.width/2-t.height/2)-(-x+v+5+t.height/2)+v,t.height/2-t.width/2+(_-5-y+t.width/2)+y+5],S=jt(w,n,t.height,t.width)):(x=Et(-t.width/2,t.width/2,5)-y/2,_=Et(-t.height/2,t.height/2,5)+v/2,b=[x-5+t.width/2,_-5-v+t.height/2,x+y+5+t.width/2,_+5+t.height/2],S=jt(b,n,t.width,t.height)),!S)break;if(1e3==A){b=[-1e3,-1e3,-1e3,-1e3];break}}m?(n[p].area=w,n[p].areav=b):n[p].area=b,n[p].rotate=m}break}return n}function Bt(t,e,r,i){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1;n({},{type:"normal",autoColors:!0},e.extra.word);i.beginPath(),i.setFillStyle(e.background||"#FFFFFF"),i.rect(0,0,e.width,e.height),i.fill(),i.save();var a=e.chartData.wordCloudData;i.translate(e.width/2,e.height/2);for(var s=0;s<a.length;s++){i.save(),a[s].rotate&&i.rotate(90*Math.PI/180);var c=a[s].name,l=a[s].textSize,u=g(c,l);i.beginPath(),i.setStrokeStyle(a[s].color),i.setFillStyle(a[s].color),i.setFontSize(l),a[s].rotate?a[s].areav[0]>0&&(e.tooltip&&e.tooltip.index==s?i.strokeText(c,(a[s].areav[0]+5-e.width/2)*o-u*(1-o)/2,(a[s].areav[1]+5+l-e.height/2)*o):i.fillText(c,(a[s].areav[0]+5-e.width/2)*o-u*(1-o)/2,(a[s].areav[1]+5+l-e.height/2)*o)):a[s].area[0]>0&&(e.tooltip&&e.tooltip.index==s?i.strokeText(c,(a[s].area[0]+5-e.width/2)*o-u*(1-o)/2,(a[s].area[1]+5+l-e.height/2)*o):i.fillText(c,(a[s].area[0]+5-e.width/2)*o-u*(1-o)/2,(a[s].area[1]+5+l-e.height/2)*o)),i.stroke(),i.restore()}i.restore()}function Vt(t,e,r,i){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,s=n({},{activeWidth:10,activeOpacity:.3,border:!1,borderWidth:2,borderColor:"#FFFFFF",fillOpacity:1,labelAlign:"right"},e.extra.funnel),c=(e.height-e.area[0]-e.area[2])/t.length,l={x:e.area[3]+(e.width-e.area[1]-e.area[3])/2,y:e.height-e.area[2]},u=s.activeWidth,h=Math.min((e.width-e.area[1]-e.area[3])/2-u,(e.height-e.area[0]-e.area[2])/2-u);t=B(t,h,a),i.save(),i.translate(l.x,l.y);for(var f=0;f<t.length;f++)0==f?(e.tooltip&&e.tooltip.index==f&&(i.beginPath(),i.setFillStyle(o(t[f].color,s.activeOpacity)),i.moveTo(-u,0),i.lineTo(-t[f].radius-u,-c),i.lineTo(t[f].radius+u,-c),i.lineTo(u,0),i.lineTo(-u,0),i.closePath(),i.fill()),t[f].funnelArea=[l.x-t[f].radius,l.y-c,l.x+t[f].radius,l.y],i.beginPath(),i.setLineWidth(s.borderWidth*e.pixelRatio),i.setStrokeStyle(s.borderColor),i.setFillStyle(o(t[f].color,s.fillOpacity)),i.moveTo(0,0),i.lineTo(-t[f].radius,-c),i.lineTo(t[f].radius,-c),i.lineTo(0,0),i.closePath(),i.fill(),1==s.border&&i.stroke()):(e.tooltip&&e.tooltip.index==f&&(i.beginPath(),i.setFillStyle(o(t[f].color,s.activeOpacity)),i.moveTo(0,0),i.lineTo(-t[f-1].radius-u,0),i.lineTo(-t[f].radius-u,-c),i.lineTo(t[f].radius+u,-c),i.lineTo(t[f-1].radius+u,0),i.lineTo(0,0),i.closePath(),i.fill(),i.closePath(),i.fill()),t[f].funnelArea=[l.x-t[f].radius,l.y-c*(f+1),l.x+t[f].radius,l.y-c*f],i.beginPath(),i.setLineWidth(s.borderWidth*e.pixelRatio),i.setStrokeStyle(s.borderColor),i.setFillStyle(o(t[f].color,s.fillOpacity)),i.moveTo(0,0),i.lineTo(-t[f-1].radius,0),i.lineTo(-t[f].radius,-c),i.lineTo(t[f].radius,-c),i.lineTo(t[f-1].radius,0),i.lineTo(0,0),i.closePath(),i.fill(),1==s.border&&i.stroke()),i.translate(0,-c);return i.restore(),!1!==e.dataLabel&&1===a&&Ut(t,e,i,c,s.labelAlign,u,l),{center:l,radius:h,series:t}}function Ut(t,e,n,r,o,a,s){for(var c=0;c<t.length;c++){var l=t[c],u=void 0,h=void 0,f=void 0,p=void 0,d=l.format?l.format(+l._proportion_.toFixed(2)):i.toFixed(100*l._proportion_)+"%";"right"==o?(u=0==c?(l.funnelArea[2]+s.x)/2:(l.funnelArea[2]+t[c-1].funnelArea[2])/2,h=u+2*a,f=l.funnelArea[1]+r/2,p=l.textSize||e.fontSize,n.setLineWidth(1*e.pixelRatio),n.setStrokeStyle(l.color),n.setFillStyle(l.color),n.beginPath(),n.moveTo(u,f),n.lineTo(h,f),n.stroke(),n.closePath(),n.beginPath(),n.moveTo(h,f),n.arc(h,f,2,0,2*Math.PI),n.closePath(),n.fill(),n.beginPath(),n.setFontSize(p),n.setFillStyle(l.textColor||"#666666"),n.fillText(d,h+5,f+p/2-2),n.closePath(),n.stroke(),n.closePath()):(u=0==c?(l.funnelArea[0]+s.x)/2:(l.funnelArea[0]+t[c-1].funnelArea[0])/2,h=u-2*a,f=l.funnelArea[1]+r/2,p=l.textSize||e.fontSize,n.setLineWidth(1*e.pixelRatio),n.setStrokeStyle(l.color),n.setFillStyle(l.color),n.beginPath(),n.moveTo(u,f),n.lineTo(h,f),n.stroke(),n.closePath(),n.beginPath(),n.moveTo(h,f),n.arc(h,f,2,0,2*Math.PI),n.closePath(),n.fill(),n.beginPath(),n.setFontSize(p),n.setFillStyle(l.textColor||"#666666"),n.fillText(d,h-5-g(d),f+p/2-2),n.closePath(),n.stroke(),n.closePath())}}function Ht(t,e){e.draw()}var Gt={easeIn:function(t){return Math.pow(t,3)},easeOut:function(t){return Math.pow(t-1,3)+1},easeInOut:function(t){return(t/=.5)<1?.5*Math.pow(t,3):.5*(Math.pow(t-2,3)+2)},linear:function(t){return t}};function qt(t){this.isStop=!1,t.duration="undefined"===typeof t.duration?1e3:t.duration,t.timing=t.timing||"linear";var e=17;function n(){return"undefined"!==typeof setTimeout?function(t,e){setTimeout((function(){var e=+new Date;t(e)}),e)}:"undefined"!==typeof requestAnimationFrame?requestAnimationFrame:function(t){t(null)}}var r=n(),i=null,o=function(n){if(null===n||!0===this.isStop)return t.onProcess&&t.onProcess(1),void(t.onAnimationFinish&&t.onAnimationFinish());if(null===i&&(i=n),n-i<t.duration){var a=(n-i)/t.duration,s=Gt[t.timing];a=s(a),t.onProcess&&t.onProcess(a),r(o,e)}else t.onProcess&&t.onProcess(1),t.onAnimationFinish&&t.onAnimationFinish()};o=o.bind(this),r(o,e)}function Xt(t,e,r,i){var o=this,a=e.series,c=e.categories;a=d(a,e,r);var l=e.animation?e.duration:0;this.animationInstance&&this.animationInstance.stop();var u=null;if("candle"==t){var h=n({},e.extra.candle.average);h.show?(u=s(h.day,h.name,h.color,a[0].data),u=d(u,e,r),e.seriesMA=u):u=e.seriesMA?e.seriesMA=d(e.seriesMA,e,r):a}else u=a;e._series_=a=k(a),e.area=new Array(4);for(var f=0;f<4;f++)e.area[f]=e.padding[f];var p=I(u,e,r,e.chartData),v=p.area.wholeHeight,g=p.area.wholeWidth;switch(r.legendHeight=v,e.legend.position){case"top":e.area[0]+=v;break;case"bottom":e.area[2]+=v;break;case"left":e.area[3]+=g;break;case"right":e.area[1]+=g;break}var y={},m=0;if("line"===e.type||"column"===e.type||"area"===e.type||"mix"===e.type||"candle"===e.type?(y=nt(a,e,r),m=y.yAxisWidth,r.yAxisWidth=m,e.area[3]+=m):r.yAxisWidth=m,e.chartData.yAxisData=y,e.categories&&e.categories.length){e.chartData.xAxisData=Q(e.categories,e,r);var x=z(e.categories,e,r,e.chartData.xAxisData.eachSpacing),_=x.xAxisHeight,b=x.angle;r.xAxisHeight=_,r._xAxisTextAngle_=b,e.area[2]+=_,e.chartData.categoriesData=x}if(e.enableScroll&&"right"==e.xAxis.scrollAlign&&void 0===e._scrollDistance_){var w=0,A=e.chartData.xAxisData.xAxisPoints,S=e.chartData.xAxisData.startX,P=e.chartData.xAxisData.endX,T=e.chartData.xAxisData.eachSpacing,O=T*(A.length-1),$=P-S;w=$-O,o.scrollOption={currentOffset:w,startTouchX:w,distance:0,lastMoveTime:0},e._scrollDistance_=w}switch("pie"!==t&&"ring"!==t&&"rose"!==t||(r._pieTextMaxLength_=!1===e.dataLabel?0:q(u)),t){case"word":var C=n({},{type:"normal",autoColors:!0},e.extra.word);1!=e.updateData&&void 0!=e.updateData||(e.chartData.wordCloudData=Wt(e,C.type)),this.animationInstance=new qt({timing:"easeInOut",duration:l,onProcess:function(t){i.clearRect(0,0,e.width,e.height),e.rotate&&ot(i,e),Bt(a,e,r,i,t),Ht(e,i)},onAnimationFinish:function(){o.event.trigger("renderComplete")}});break;case"map":i.clearRect(0,0,e.width,e.height),Nt(a,e,r,i);break;case"funnel":this.animationInstance=new qt({timing:"easeInOut",duration:l,onProcess:function(t){i.clearRect(0,0,e.width,e.height),e.rotate&&ot(i,e),e.chartData.funnelData=Vt(a,e,r,i,t),Tt(e.series,e,r,i,e.chartData),At(e,r,i,t),Ht(e,i)},onAnimationFinish:function(){o.event.trigger("renderComplete")}});break;case"line":this.animationInstance=new qt({timing:"easeIn",duration:l,onProcess:function(t){i.clearRect(0,0,e.width,e.height),e.rotate&&ot(i,e),Pt(c,e,r,i),St(c,e,r,i);var n=bt(a,e,r,i,t),o=n.xAxisPoints,s=n.calPoints,l=n.eachSpacing,u=n.minRange,h=n.maxRange;e.chartData.xAxisPoints=o,e.chartData.calPoints=s,e.chartData.eachSpacing=l,kt(a,e,r,i),!1!==e.enableMarkLine&&1===t&&pt(u,h,e,r,i),Tt(e.series,e,r,i,e.chartData),At(e,r,i,t,l,o),Ht(e,i)},onAnimationFinish:function(){o.event.trigger("renderComplete")}});break;case"mix":this.animationInstance=new qt({timing:"easeIn",duration:l,onProcess:function(t){i.clearRect(0,0,e.width,e.height),e.rotate&&ot(i,e),Pt(c,e,r,i),St(c,e,r,i);var n=wt(a,e,r,i,t),o=n.xAxisPoints,s=n.calPoints,l=n.eachSpacing,u=n.minRange,h=n.maxRange;e.chartData.xAxisPoints=o,e.chartData.calPoints=s,e.chartData.eachSpacing=l,kt(a,e,r,i),!1!==e.enableMarkLine&&1===t&&pt(u,h,e,r,i),Tt(e.series,e,r,i,e.chartData),At(e,r,i,t,l,o),Ht(e,i)},onAnimationFinish:function(){o.event.trigger("renderComplete")}});break;case"column":this.animationInstance=new qt({timing:"easeIn",duration:l,onProcess:function(t){i.clearRect(0,0,e.width,e.height),e.rotate&&ot(i,e),Pt(c,e,r,i),St(c,e,r,i);var n=mt(a,e,r,i,t),o=n.xAxisPoints,s=n.calPoints,l=n.eachSpacing,u=n.minRange,h=n.maxRange;e.chartData.xAxisPoints=o,e.chartData.calPoints=s,e.chartData.eachSpacing=l,kt(a,e,r,i),!1!==e.enableMarkLine&&1===t&&pt(u,h,e,r,i),Tt(e.series,e,r,i,e.chartData),At(e,r,i,t,l,o),Ht(e,i)},onAnimationFinish:function(){o.event.trigger("renderComplete")}});break;case"area":this.animationInstance=new qt({timing:"easeIn",duration:l,onProcess:function(t){i.clearRect(0,0,e.width,e.height),e.rotate&&ot(i,e),Pt(c,e,r,i),St(c,e,r,i);var n=_t(a,e,r,i,t),o=n.xAxisPoints,s=n.calPoints,l=n.eachSpacing,u=n.minRange,h=n.maxRange;e.chartData.xAxisPoints=o,e.chartData.calPoints=s,e.chartData.eachSpacing=l,kt(a,e,r,i),!1!==e.enableMarkLine&&1===t&&pt(u,h,e,r,i),Tt(e.series,e,r,i,e.chartData),At(e,r,i,t,l,o),Ht(e,i)},onAnimationFinish:function(){o.event.trigger("renderComplete")}});break;case"ring":case"pie":this.animationInstance=new qt({timing:"easeInOut",duration:l,onProcess:function(t){i.clearRect(0,0,e.width,e.height),e.rotate&&ot(i,e),e.chartData.pieData=Ot(a,e,r,i,t),Tt(e.series,e,r,i,e.chartData),At(e,r,i,t),Ht(e,i)},onAnimationFinish:function(){o.event.trigger("renderComplete")}});break;case"rose":this.animationInstance=new qt({timing:"easeInOut",duration:l,onProcess:function(t){i.clearRect(0,0,e.width,e.height),e.rotate&&ot(i,e),e.chartData.pieData=$t(a,e,r,i,t),Tt(e.series,e,r,i,e.chartData),At(e,r,i,t),Ht(e,i)},onAnimationFinish:function(){o.event.trigger("renderComplete")}});break;case"radar":this.animationInstance=new qt({timing:"easeInOut",duration:l,onProcess:function(t){i.clearRect(0,0,e.width,e.height),e.rotate&&ot(i,e),e.chartData.radarData=Lt(a,e,r,i,t),Tt(e.series,e,r,i,e.chartData),At(e,r,i,t),Ht(e,i)},onAnimationFinish:function(){o.event.trigger("renderComplete")}});break;case"arcbar":this.animationInstance=new qt({timing:"easeInOut",duration:l,onProcess:function(t){i.clearRect(0,0,e.width,e.height),e.rotate&&ot(i,e),e.chartData.arcbarData=Ct(a,e,r,i,t),Ht(e,i)},onAnimationFinish:function(){o.event.trigger("renderComplete")}});break;case"gauge":this.animationInstance=new qt({timing:"easeInOut",duration:l,onProcess:function(t){i.clearRect(0,0,e.width,e.height),e.rotate&&ot(i,e),e.chartData.gaugeData=Mt(c,a,e,r,i,t),Ht(e,i)},onAnimationFinish:function(){o.event.trigger("renderComplete")}});break;case"candle":this.animationInstance=new qt({timing:"easeIn",duration:l,onProcess:function(t){i.clearRect(0,0,e.width,e.height),e.rotate&&ot(i,e),Pt(c,e,r,i),St(c,e,r,i);var n=xt(a,u,e,r,i,t),o=n.xAxisPoints,s=n.calPoints,l=n.eachSpacing,h=n.minRange,f=n.maxRange;e.chartData.xAxisPoints=o,e.chartData.calPoints=s,e.chartData.eachSpacing=l,kt(a,e,r,i),!1!==e.enableMarkLine&&1===t&&pt(h,f,e,r,i),Tt(u||e.series,e,r,i,e.chartData),At(e,r,i,t,l,o),Ht(e,i)},onAnimationFinish:function(){o.event.trigger("renderComplete")}});break}}function Jt(){this.events={}}qt.prototype.stop=function(){this.isStop=!0},Jt.prototype.addEventListener=function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)},Jt.prototype.trigger=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=e[0],i=e.slice(1);this.events[r]&&this.events[r].forEach((function(t){try{t.apply(null,i)}catch(e){console.error(e)}}))};var Yt=function(t){t.pixelRatio=t.pixelRatio?t.pixelRatio:1,t.fontSize=t.fontSize?t.fontSize*t.pixelRatio:13*t.pixelRatio,t.title=n({},t.title),t.subtitle=n({},t.subtitle),t.duration=t.duration?t.duration:1e3,t.yAxis=n({},{gridType:"solid",dashLength:4*t.pixelRatio},t.yAxis),t.xAxis=n({},{rotateLabel:!1,type:"calibration",gridType:"solid",dashLength:4*t.pixelRatio,scrollAlign:"left",boundaryGap:"center"},t.xAxis),t.legend=n({},{show:!0,position:"bottom",float:"center",backgroundColor:"rgba(0,0,0,0)",borderColor:"rgba(0,0,0,0)",borderWidth:0,padding:5,margin:5,itemGap:10,fontSize:t.fontSize,lineHeight:t.fontSize,fontColor:"#333333",format:{},hiddenColor:"#CECECE"},t.legend),t.legend.borderWidth=t.legend.borderWidth*t.pixelRatio,t.legend.itemGap=t.legend.itemGap*t.pixelRatio,t.legend.padding=t.legend.padding*t.pixelRatio,t.legend.margin=t.legend.margin*t.pixelRatio,t.extra=n({},t.extra),t.rotate=!!t.rotate,t.animation=!!t.animation;var i=JSON.parse(JSON.stringify(r));if(i.colors=t.colors?t.colors:i.colors,i.yAxisTitleWidth=!0!==t.yAxis.disabled&&t.yAxis.title?i.yAxisTitleWidth:0,"pie"!=t.type&&"ring"!=t.type||(i.pieChartLinePadding=!1===t.dataLabel?0:t.extra.pie.labelWidth*t.pixelRatio||i.pieChartLinePadding*t.pixelRatio),"rose"==t.type&&(i.pieChartLinePadding=!1===t.dataLabel?0:t.extra.rose.labelWidth*t.pixelRatio||i.pieChartLinePadding*t.pixelRatio),i.pieChartTextPadding=!1===t.dataLabel?0:i.pieChartTextPadding*t.pixelRatio,i.yAxisSplit=t.yAxis.splitNumber?t.yAxis.splitNumber:r.yAxisSplit,i.rotate=t.rotate,t.rotate){var o=t.width,a=t.height;t.width=a,t.height=o}t.padding=t.padding?t.padding:i.padding;for(var s=0;s<4;s++)t.padding[s]*=t.pixelRatio;i.yAxisWidth=r.yAxisWidth*t.pixelRatio,i.xAxisHeight=r.xAxisHeight*t.pixelRatio,t.enableScroll&&t.xAxis.scrollShow&&(i.xAxisHeight+=6*t.pixelRatio),i.xAxisLineHeight=r.xAxisLineHeight*t.pixelRatio,i.legendHeight=r.legendHeight*t.pixelRatio,i.fontSize=t.fontSize,i.titleFontSize=r.titleFontSize*t.pixelRatio,i.subtitleFontSize=r.subtitleFontSize*t.pixelRatio,i.toolTipPadding=r.toolTipPadding*t.pixelRatio,i.toolTipLineHeight=r.toolTipLineHeight*t.pixelRatio,i.columePadding=r.columePadding*t.pixelRatio,t.$this=t.$this?t.$this:this,this.context=e.createCanvasContext(t.canvasId,t.$this),t.chartData={},this.event=new Jt,this.scrollOption={currentOffset:0,startTouchX:0,distance:0,lastMoveTime:0},this.opts=t,this.config=i,Xt.call(this,t.type,t,i,this.context)};Yt.prototype.updateData=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.opts=n({},this.opts,t),this.opts.updateData=!0;var e=t.scrollPosition||"current";switch(e){case"current":this.opts._scrollDistance_=this.scrollOption.currentOffset;break;case"left":this.opts._scrollDistance_=0,this.scrollOption={currentOffset:0,startTouchX:0,distance:0,lastMoveTime:0};break;case"right":var r=nt(this.opts.series,this.opts,this.config),i=r.yAxisWidth;this.config.yAxisWidth=i;var o=0,a=Q(this.opts.categories,this.opts,this.config),s=a.xAxisPoints,c=a.startX,l=a.endX,u=a.eachSpacing,h=u*(s.length-1),f=l-c;o=f-h,this.scrollOption={currentOffset:o,startTouchX:o,distance:0,lastMoveTime:0},this.opts._scrollDistance_=o;break}Xt.call(this,this.opts.type,this.opts,this.config,this.context)},Yt.prototype.zoom=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.opts.xAxis.itemCount;if(!0===this.opts.enableScroll){var e=Math.round(Math.abs(this.scrollOption.currentOffset)/this.opts.chartData.eachSpacing)+Math.round(this.opts.xAxis.itemCount/2);this.opts.animation=!1,this.opts.xAxis.itemCount=t.itemCount;var n=nt(this.opts.series,this.opts,this.config),r=n.yAxisWidth;this.config.yAxisWidth=r;var i=0,o=Q(this.opts.categories,this.opts,this.config),a=o.xAxisPoints,s=o.startX,c=o.endX,l=o.eachSpacing,u=l*e,h=c-s,f=h-l*(a.length-1);i=h/2-u,i>0&&(i=0),i<f&&(i=f),this.scrollOption={currentOffset:i,startTouchX:i,distance:0,lastMoveTime:0},this.opts._scrollDistance_=i,Xt.call(this,this.opts.type,this.opts,this.config,this.context)}else console.log("请启用滚动条后使用！")},Yt.prototype.stopAnimation=function(){this.animationInstance&&this.animationInstance.stop()},Yt.prototype.addEventListener=function(t,e){this.event.addEventListener(t,e)},Yt.prototype.getCurrentDataIndex=function(t){var e=null;if(e=t.changedTouches?t.changedTouches[0]:t.mp.changedTouches[0],e){var n=x(e,this.opts,t);return"pie"===this.opts.type||"ring"===this.opts.type||"rose"===this.opts.type?D({x:n.x,y:n.y},this.opts.chartData.pieData):"radar"===this.opts.type?M({x:n.x,y:n.y},this.opts.chartData.radarData,this.opts.categories.length):"funnel"===this.opts.type?L({x:n.x,y:n.y},this.opts.chartData.funnelData):"map"===this.opts.type?j({x:n.x,y:n.y},this.opts):"word"===this.opts.type?E({x:n.x,y:n.y},this.opts.chartData.wordCloudData):T({x:n.x,y:n.y},this.opts.chartData.xAxisPoints,this.opts,this.config,Math.abs(this.scrollOption.currentOffset))}return-1},Yt.prototype.getLegendDataIndex=function(t){var e=null;if(e=t.changedTouches?t.changedTouches[0]:t.mp.changedTouches[0],e){var n=x(e,this.opts,t);return O({x:n.x,y:n.y},this.opts.chartData.legendData)}return-1},Yt.prototype.touchLegend=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=null;if(n=t.changedTouches?t.changedTouches[0]:t.mp.changedTouches[0],n){x(n,this.opts,t);var r=this.getLegendDataIndex(t);r>=0&&(this.opts.series[r].show=!this.opts.series[r].show,this.opts.animation=!!e.animation,Xt.call(this,this.opts.type,this.opts,this.config,this.context))}},Yt.prototype.showToolTip=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=null;r=t.changedTouches?t.changedTouches[0]:t.mp.changedTouches[0],r||console.log("touchError");var i=x(r,this.opts,t),o=this.scrollOption.currentOffset,a=n({},this.opts,{_scrollDistance_:o,animation:!1});if("line"===this.opts.type||"area"===this.opts.type||"column"===this.opts.type){var s=this.getCurrentDataIndex(t);if(s>-1){var c=_(this.opts.series,s);if(0!==c.length){var l=A(c,this.opts.chartData.calPoints,s,this.opts.categories,e),u=l.textList,h=l.offset;h.y=i.y,a.tooltip={textList:u,offset:h,option:e,index:s}}}Xt.call(this,a.type,a,this.config,this.context)}if("mix"===this.opts.type){s=this.getCurrentDataIndex(t);if(s>-1){o=this.scrollOption.currentOffset,a=n({},this.opts,{_scrollDistance_:o,animation:!1}),c=_(this.opts.series,s);if(0!==c.length){var f=S(c,this.opts.chartData.calPoints,s,this.opts.categories,e);u=f.textList,h=f.offset;h.y=i.y,a.tooltip={textList:u,offset:h,option:e,index:s}}}Xt.call(this,a.type,a,this.config,this.context)}if("candle"===this.opts.type){s=this.getCurrentDataIndex(t);if(s>-1){o=this.scrollOption.currentOffset,a=n({},this.opts,{_scrollDistance_:o,animation:!1}),c=_(this.opts.series,s);if(0!==c.length){l=P(this.opts.series[0].data,c,this.opts.chartData.calPoints,s,this.opts.categories,this.opts.extra.candle,e),u=l.textList,h=l.offset;h.y=i.y,a.tooltip={textList:u,offset:h,option:e,index:s}}}Xt.call(this,a.type,a,this.config,this.context)}if("pie"===this.opts.type||"ring"===this.opts.type||"rose"===this.opts.type||"funnel"===this.opts.type){s=this.getCurrentDataIndex(t);if(s>-1){o=this.scrollOption.currentOffset,a=n({},this.opts,{_scrollDistance_:o,animation:!1}),c=this.opts._series_[s],u=[{text:e.format?e.format(c):c.name+": "+c.data,color:c.color}],h={x:i.x,y:i.y};a.tooltip={textList:u,offset:h,option:e,index:s}}Xt.call(this,a.type,a,this.config,this.context)}if("map"===this.opts.type||"word"===this.opts.type){s=this.getCurrentDataIndex(t);if(s>-1){o=this.scrollOption.currentOffset,a=n({},this.opts,{_scrollDistance_:o,animation:!1}),c=this.opts._series_[s],u=[{text:e.format?e.format(c):c.properties.name,color:c.color}],h={x:i.x,y:i.y};a.tooltip={textList:u,offset:h,option:e,index:s}}a.updateData=!1,Xt.call(this,a.type,a,this.config,this.context)}if("radar"===this.opts.type){s=this.getCurrentDataIndex(t);if(s>-1){o=this.scrollOption.currentOffset,a=n({},this.opts,{_scrollDistance_:o,animation:!1}),c=_(this.opts.series,s);if(0!==c.length){u=c.map((function(t){return{text:e.format?e.format(t):t.name+": "+t.data,color:t.color}})),h={x:i.x,y:i.y};a.tooltip={textList:u,offset:h,option:e,index:s}}}Xt.call(this,a.type,a,this.config,this.context)}},Yt.prototype.translate=function(t){this.scrollOption={currentOffset:t,startTouchX:t,distance:0,lastMoveTime:0};var e=n({},this.opts,{_scrollDistance_:t,animation:!1});Xt.call(this,this.opts.type,e,this.config,this.context)},Yt.prototype.scrollStart=function(t){var e=null;e=t.changedTouches?t.changedTouches[0]:t.mp.changedTouches[0];var n=x(e,this.opts,t);e&&!0===this.opts.enableScroll&&(this.scrollOption.startTouchX=n.x)},Yt.prototype.scroll=function(t){0===this.scrollOption.lastMoveTime&&(this.scrollOption.lastMoveTime=Date.now());var e=this.opts.extra.touchMoveLimit||20,r=Date.now(),i=r-this.scrollOption.lastMoveTime;if(!(i<Math.floor(1e3/e))){this.scrollOption.lastMoveTime=r;var o=null;if(o=t.changedTouches?t.changedTouches[0]:t.mp.changedTouches[0],o&&!0===this.opts.enableScroll){var a,s=x(o,this.opts,t);a=s.x-this.scrollOption.startTouchX;var l=this.scrollOption.currentOffset,u=c(l+a,this.opts.chartData,this.config,this.opts);this.scrollOption.distance=a=u-l;var h=n({},this.opts,{_scrollDistance_:l+a,animation:!1});return Xt.call(this,h.type,h,this.config,this.context),l+a}}},Yt.prototype.scrollEnd=function(t){if(!0===this.opts.enableScroll){var e=this.scrollOption,n=e.currentOffset,r=e.distance;this.scrollOption.currentOffset=n+r,this.scrollOption.distance=0}},"object"===typeof t.exports&&(t.exports=Yt)}).call(this,n(/*! ./node_modules/@dcloudio/uni-mp-qq/dist/index.js */1)["default"])},3:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(r){"object"===typeof window&&(n=window)}t.exports=n},4:
/*!*************************************************************!*\
  !*** D:/g工作/zilv/code/defaultmoban/defaultmoban/pages.json ***!
  \*************************************************************/
/*! no static exports found */function(t,e){},8:
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */function(t,e,n){"use strict";function r(t,e,n,r,i,o,a,s,c,l){var u,h="function"===typeof t?t.options:t;if(c){h.components||(h.components={});var f=Object.prototype.hasOwnProperty;for(var p in c)f.call(c,p)&&!f.call(h.components,p)&&(h.components[p]=c[p])}if(l&&((l.beforeCreate||(l.beforeCreate=[])).unshift((function(){this[l.__module]=this})),(h.mixins||(h.mixins=[])).push(l)),e&&(h.render=e,h.staticRenderFns=n,h._compiled=!0),r&&(h.functional=!0),o&&(h._scopeId="data-v-"+o),a?(u=function(t){t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,t||"undefined"===typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),i&&i.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},h._ssrRegister=u):i&&(u=s?function(){i.call(this,this.$root.$options.shadowRoot)}:i),u)if(h.functional){h._injectStyles=u;var d=h.render;h.render=function(t,e){return u.call(e),d(t,e)}}else{var v=h.beforeCreate;h.beforeCreate=v?[].concat(v,u):[u]}return{exports:t,options:h}}n.r(e),n.d(e,"default",(function(){return r}))},9:
/*!****************************************************************!*\
  !*** D:/g工作/zilv/code/defaultmoban/defaultmoban/common/api.js ***!
  \****************************************************************/
/*! no static exports found */function(t,e,n){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=a(n(/*! ./node_modules/@babel/runtime/regenerator */10)),i=a(n(/*! @/store */13)),o=void 0;function a(t){return t&&t.__esModule?t:{default:t}}function s(t,e,n,r,i,o,a){try{var s=t[o](a),c=s.value}catch(l){return void n(l)}s.done?e(c):Promise.resolve(c).then(r,i)}function c(t){return function(){var e=this,n=arguments;return new Promise((function(r,i){var o=t.apply(e,n);function a(t){s(o,r,i,a,c,"next",t)}function c(t){s(o,r,i,a,c,"throw",t)}a(void 0)}))}}var l="https://task.vsclouds.com/",u={cTaskType:l+"type/create",dTaskType:l+"type/delete",rTaskType:l+"type/list",cTask:l+"job/create",uTask:l+"job/update",dTask:l+"job/delete",TaskList:l+"job/list",TaskStart:l+"job/start",TaskEnd:l+"job/end",ranklist:l+"rank/list",shareTask:l+"public/share/jobs",uniLogin:l+"public/qq/mp/common/user/login",visitLogin:l+"public/weixin/mp/common/tourist/login/wx",userInfo:l+"qq/mp/common/user/info",editName:l+"common/c/user/update",exp:l+"user/experience/cumulative",star:l+"star/adjust/create",starhistory:l+"star/adjust/history",creward:l+"star/exchange/create",ureward:l+"star/exchange/update",rewardList:l+"star/exchange/list",rewardOk:l+"star/exchange/exchange",rewardDelete:l+"star/exchange/delete",charts:l+"job/uchart",signin:l+"sign/in",notice:l+"announcement/current",signget:l+"sign/get",signclear:l+"sign/clear",userclear:l+"user/experience/clear",cjList:l+"achievement/user/list",cjRequest:l+"achievement/user/check",getVerCode:l+"public/common/user/code",phoneLogin:l+"public/weixin/mp/common/user/login/phone"},h=["胜","三","十","百","千","初","传","应","秒","稳","坚","恒","精"],f=function(t){var e=[{title:"旗开得胜",icon:"胜"},{title:"三阳开泰",icon:"三"},{title:"十全十美",icon:"十"},{title:"百尺竿头",icon:"百"},{title:"千锤百炼",icon:"千"},{title:"初出茅庐",icon:"初"},{title:"十口相传",icon:"传"},{title:"一呼百应",icon:"应"},{title:"争分夺秒",icon:"秒"},{title:"高枕无忧",icon:"稳"},{title:"坚持不懈",icon:"坚"},{title:"持之以恒",icon:"恒"},{title:"精益求精",icon:"精"}],n="";return e.forEach((function(e,r,i){t==e.title&&(n=e.icon)})),n},p={ctask:10,endtask:30,signin:10,share:50},d=function(){var t=new Date,e=t.getDay();return 0==e?7:e},v={qt:"青铜学渣",by:"白银学民",hj:"黄金学霸",bj:"铂金学帝",zs:"钻石学仙",xs:"学神"},g=function(t){return t>=1&&t<=2?v.qt:t>=3&&t<=4?v.by:t>=5&&t<=6?v.hj:t>=7&&t<=8?v.bj:t>=9&&t<=10?v.zs:t>10?v.xs:void 0},y=function(e,n){return new Promise((function(r,i){t.request({url:e,method:"GET",data:n,timeout:12e3,header:{"content-type":"application/json",token:t.getStorageSync("token")},success:function(e){console.log(e),200==e.statusCode||401==e.statusCode?r(e.data):(404==e.statusCode?t.showToast({title:"访问资源错误",icon:"none",duration:1e3}):t.showToast({title:e.data.message,icon:"none",duration:1e3}),setTimeout((function(){t.switchTab({url:"/pages/rwlist/rwlist"})}),1e3))},fail:function(t){console.log(t),i(t)}})}))},m=function(e,n){return new Promise((function(r,i){t.request({url:e,method:"POST",data:n,timeout:12e3,header:{"content-type":"application/json",token:t.getStorageSync("token")},success:function(t){console.log(t),r(t.data)},fail:function(t){console.log(t),i(t)}})}))},x=function(t){return"true"==t||"false"!=t&&("undefined"==t||void 0)},_=function(t){return null!=t},b={taskid:null,smzq:[],zxlc:[],getSec:!1},w=function(){var e=c(r.default.mark((function e(){var n,o;return r.default.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,y(u.userInfo);case 2:if(n=e.sent,!C(n)){e.next=18;break}return o=parseInt(n.data.userLevelInfo.currentExperience/n.data.userLevelInfo.totalExperienceForCurrentLevel*100),t.getStorageSync("level")&&(n.data.userLevelInfo.level==t.getStorageSync("level")?i.default.commit("levelUpdata",!1):i.default.commit("levelUpdata",!0)),t.getStorageSync("honor")&&(g(n.data.userLevelInfo.level)==t.getStorageSync("honor")?i.default.commit("honorUpdata",!1):i.default.commit("honorUpdata",!0)),t.setStorage({key:"level",data:n.data.userLevelInfo.level}),i.default.commit("changeLevel",n.data.userLevelInfo.level),t.setStorage({key:"honor",data:g(n.data.userLevelInfo.level)}),i.default.commit("changeHonor",g(n.data.userLevelInfo.level)),t.setStorage({key:"progress",data:o}),i.default.commit("changeProgress",o),t.setStorage({key:"starNum",data:n.data.starSummary.currentCount}),i.default.commit("changeStar",n.data.starSummary.currentCount),e.abrupt("return",!0);case 18:return t.showModal({title:"用户信息获取失败",content:t.getStorageSync("token")?t.getStorageSync("token"):"no token",success:function(t){t.confirm?(console.log(n),console.log("用户点击确定")):t.cancel&&console.log("用户点击取消")}}),e.abrupt("return",!1);case 20:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),A=function(){var t=c(r.default.mark((function t(e,n){var i,o;return r.default.wrap((function(t){while(1)switch(t.prev=t.next){case 0:return i={experience:e},t.next=3,m(u.exp,i);case 3:o=t.sent,C(o)&&0==o.resultCode&&(console.log(o),n||w());case 5:case"end":return t.stop()}}),t)})));return function(e,n){return t.apply(this,arguments)}}(),S=function(){var t=c(r.default.mark((function t(e){var n;return r.default.wrap((function(t){while(1)switch(t.prev=t.next){case 0:return t.next=2,m(u.cjRequest,e);case 2:if(n=t.sent,!C(n)){t.next=8;break}if(console.log("成就返回结果"),console.log(n),0!=n.resultCode){t.next=8;break}return t.abrupt("return",n);case 8:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),P=function(){var t=c(r.default.mark((function t(e,n,i){var o,a;return r.default.wrap((function(t){while(1)switch(t.prev=t.next){case 0:return o={adjustCount:e,reason:n},t.next=3,m(u.star,o);case 3:a=t.sent,C(a)&&0==a.resultCode&&(console.log(a),i||w());case 5:case"end":return t.stop()}}),t)})));return function(e,n,r){return t.apply(this,arguments)}}(),k=function(){return new Promise((function(e,n){t.showLoading({title:"加载中...",mask:!0,success:function(t){e(t)},fail:function(t){n(t)}})}))},T=function(){return new Promise((function(e){t.hideLoading(),e()}))},O=function(t){return 0==t};function $(t){return t.replace(/(^\s*)|(\s*$)/g,"")}var C=function(e,n){if(O(e.resultCode))return!0;if(4001==e.resultCode){var r={url:n},i=M(r);console.log("/pages/login/login?"+i),t.redirectTo({url:"/pages/login/login?"+i})}87014!=e.resultCode&&7001!=e.resultCode||(t.showToast({title:e.message,icon:"none",duration:1500}),87014==e.resultCode&&setTimeout((function(){t.reLaunch({url:"/pages/rwlist/rwlist"})}),1500)),console.log("reshook"),console.log(e),console.log(n),console.log(o)},M=function(t){var e=Object.keys(t).map((function(e){return encodeURIComponent(e)+"="+encodeURIComponent(t[e])})).join("&");return e},L=function(t){if(t>3600){var e=parseInt(t/3600),n=parseInt((t-3600*e)/60),r=t-3600*e-60*n;return e+"小时"+n+"分钟"+r+"秒"}var i=parseInt(t/60),o=t-60*i;return(0==i?"":i+"分钟")+o+"秒"},E=function(t){if(1!==t){var e=new Array;e=t.split(" ");return e[1]}},j=function(t){return new Date(t).getTime()},D=function(t,e){if(1!==e){var n=j(e),r=(new Date).getTime(),i=60*t-parseInt((r-n)/1e3);return i}};function R(t){return t=t.toString(),t[1]?t:"0"+t}var F=function(t){var e=t.getFullYear(),n=t.getMonth()+1,r=t.getDate();return[e,n,r].map(R).join("-")},I={encodeData:M,getData:y,postData:m,webapi:u,honor:v,reshook:C,showLoading:k,hideLoading:T,formatTime:F,getUserinfo:w,trim:$,secToTime:L,addExp:A,starAdjust:P,expval:p,getWeekDay:d,expTitle:g,honorTitle:h,cjCheck:S,strbool:x,honorCorres:f,timeSwitch:E,surplusTime:D,startPd:_,TempData:b};e.default=I}).call(this,n(/*! ./node_modules/@dcloudio/uni-mp-qq/dist/index.js */1)["default"])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,