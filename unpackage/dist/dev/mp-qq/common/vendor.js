(global["webpackJsonp"]=global["webpackJsonp"]||[]).push([["common/vendor"],{1:
/*!********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-mp-qq/dist/index.js ***!
  \********************************************************/
/*! no static exports found */function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createApp=be,e.createComponent=Ce,e.createPage=$e,e.default=void 0;var r=o(n(/*! vue */2));function o(t){return t&&t.__esModule?t:{default:t}}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){h(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){return u(t)||c(t,e)||d(t,e)||l()}function l(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function c(t,e){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done);r=!0)if(n.push(a.value),e&&n.length===e)break}catch(l){o=!0,i=l}finally{try{r||null==s["return"]||s["return"]()}finally{if(o)throw i}}return n}}function u(t){if(Array.isArray(t))return t}function h(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function f(t){return g(t)||v(t)||d(t)||p()}function p(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function d(t,e){if(t){if("string"===typeof t)return y(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?y(t,e):void 0}}function v(t){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}function g(t){if(Array.isArray(t))return y(t)}function y(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var x=Object.prototype.toString,m=Object.prototype.hasOwnProperty;function _(t){return"function"===typeof t}function b(t){return"string"===typeof t}function w(t){return"[object Object]"===x.call(t)}function S(t,e){return m.call(t,e)}function A(){}function P(t){var e=Object.create(null);return function(n){var r=e[n];return r||(e[n]=t(n))}}var T=/-(\w)/g,k=P((function(t){return t.replace(T,(function(t,e){return e?e.toUpperCase():""}))})),O=["invoke","success","fail","complete","returnValue"],$={},C={};function M(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?L(n):n}function L(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}function D(t,e){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}function F(t,e){Object.keys(e).forEach((function(n){-1!==O.indexOf(n)&&_(e[n])&&(t[n]=M(t[n],e[n]))}))}function E(t,e){t&&e&&Object.keys(e).forEach((function(n){-1!==O.indexOf(n)&&_(e[n])&&D(t[n],e[n])}))}function R(t,e){"string"===typeof t&&w(e)?F(C[t]||(C[t]={}),e):w(t)&&F($,t)}function j(t,e){"string"===typeof t?w(e)?E(C[t],e):delete C[t]:w(t)&&E($,t)}function I(t){return function(e){return t(e)||e}}function z(t){return!!t&&("object"===typeof t||"function"===typeof t)&&"function"===typeof t.then}function N(t,e){for(var n=!1,r=0;r<t.length;r++){var o=t[r];if(n)n=Promise.resolve(I(o));else{var i=o(e);if(z(i)&&(n=Promise.resolve(i)),!1===i)return{then:function(){}}}}return n||{then:function(t){return t(e)}}}function W(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return["success","fail","complete"].forEach((function(n){if(Array.isArray(t[n])){var r=e[n];e[n]=function(e){N(t[n],e).then((function(t){return _(r)&&r(t)||t}))}}})),e}function B(t,e){var n=[];Array.isArray($.returnValue)&&n.push.apply(n,f($.returnValue));var r=C[t];return r&&Array.isArray(r.returnValue)&&n.push.apply(n,f(r.returnValue)),n.forEach((function(t){e=t(e)||e})),e}function V(t){var e=Object.create(null);Object.keys($).forEach((function(t){"returnValue"!==t&&(e[t]=$[t].slice())}));var n=C[t];return n&&Object.keys(n).forEach((function(t){"returnValue"!==t&&(e[t]=(e[t]||[]).concat(n[t]))})),e}function U(t,e,n){for(var r=arguments.length,o=new Array(r>3?r-3:0),i=3;i<r;i++)o[i-3]=arguments[i];var a=V(t);if(a&&Object.keys(a).length){if(Array.isArray(a.invoke)){var s=N(a.invoke,n);return s.then((function(t){return e.apply(void 0,[W(a,t)].concat(o))}))}return e.apply(void 0,[W(a,n)].concat(o))}return e.apply(void 0,[n].concat(o))}var H={returnValue:function(t){return z(t)?t.then((function(t){return t[1]})).catch((function(t){return t[0]})):t}},G=/^\$|sendNativeEvent|restoreGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/,q=/^create|Manager$/,X=["createBLEConnection"],J=["createBLEConnection"],Y=/^on|^off/;function K(t){return q.test(t)&&-1===X.indexOf(t)}function Q(t){return G.test(t)&&-1===J.indexOf(t)}function Z(t){return Y.test(t)&&"onPush"!==t}function tt(t){return t.then((function(t){return[null,t]})).catch((function(t){return[t]}))}function et(t){return!(K(t)||Q(t)||Z(t))}function nt(t,e){return et(t)?function(){for(var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length,o=new Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return _(n.success)||_(n.fail)||_(n.complete)?B(t,U.apply(void 0,[t,e,n].concat(o))):B(t,tt(new Promise((function(r,i){U.apply(void 0,[t,e,Object.assign({},n,{success:r,fail:i})].concat(o))}))))}:e}Promise.prototype.finally||(Promise.prototype.finally=function(t){var e=this.constructor;return this.then((function(n){return e.resolve(t()).then((function(){return n}))}),(function(n){return e.resolve(t()).then((function(){throw n}))}))});var rt=1e-4,ot=750,it=!1,at=0,st=0;function lt(){var t=wx.getSystemInfoSync(),e=t.platform,n=t.pixelRatio,r=t.windowWidth;at=r,st=n,it="ios"===e}function ct(t,e){if(0===at&&lt(),t=Number(t),0===t)return 0;var n=t/ot*(e||at);return n<0&&(n=-n),n=Math.floor(n+rt),0===n&&(n=1!==st&&it?.5:1),t<0?-n:n}var ut={promiseInterceptor:H},ht=Object.freeze({__proto__:null,upx2px:ct,addInterceptor:R,removeInterceptor:j,interceptors:ut}),ft={args:function(t){var e=parseInt(t.current);if(!isNaN(e)){var n=t.urls;if(Array.isArray(n)){var r=n.length;if(r)return e<0?e=0:e>=r&&(e=r-1),e>0?(t.current=n[e],t.urls=n.filter((function(t,r){return!(r<e)||t!==n[e]}))):t.current=n[0],{indicator:!1,loop:!1}}}}},pt={previewImage:ft},dt=["preloadPage","unPreloadPage","loadSubPackage"],vt=["scanCode","startAccelerometer","stopAccelerometer","onAccelerometerChange","startCompass","onCompassChange","setScreenBrightness","getScreenBrightness","setKeepScreenOn","onUserCaptureScreen","vibrateLong","vibrateShort","createWorker","connectSocket","onSocketOpen","onSocketError","sendSocketMessage","onSocketMessage","closeSocket","onSocketClose","openDocument","updateShareMenu","getShareInfo","createLivePlayerContext","createLivePusherContext","setNavigationBarColor","onMemoryWarning","onNetworkStatusChange","reportMonitor","getLogManager","reportAnalytics"],gt=["success","fail","cancel","complete"];function yt(t,e,n){return function(r){return e(mt(t,r,n))}}function xt(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(w(e)){var i=!0===o?e:{};for(var a in _(n)&&(n=n(e,i)||{}),e)if(S(n,a)){var s=n[a];_(s)&&(s=s(e[a],e,i)),s?b(s)?i[s]=e[a]:w(s)&&(i[s.name?s.name:a]=s.value):console.warn("QQ小程序 ".concat(t,"暂不支持").concat(a))}else-1!==gt.indexOf(a)?_(e[a])&&(i[a]=yt(t,e[a],r)):o||(i[a]=e[a]);return i}return _(e)&&(e=yt(t,e,r)),e}function mt(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return _(pt.returnValue)&&(e=pt.returnValue(t,e)),xt(t,e,n,{},r)}function _t(t,e){if(S(pt,t)){var n=pt[t];return n?function(e,r){var o=n;_(n)&&(o=n(e)),e=xt(t,e,o.args,o.returnValue);var i=[e];"undefined"!==typeof r&&i.push(r);var a=wx[o.name||t].apply(wx,i);return Q(t)?mt(t,a,o.returnValue,K(t)):a}:function(){console.error("QQ小程序 暂不支持".concat(t))}}return e}var bt=Object.create(null),wt=["onTabBarMidButtonTap","subscribePush","unsubscribePush","onPush","offPush","share"];function St(t){return function(e){var n=e.fail,r=e.complete,o={errMsg:"".concat(t,":fail:暂不支持 ").concat(t," 方法")};_(n)&&n(o),_(r)&&r(o)}}wt.forEach((function(t){bt[t]=St(t)}));var At={oauth:["qq"],share:["qq"],payment:["qqpay"],push:["qq"]};function Pt(t){var e=t.service,n=t.success,r=t.fail,o=t.complete,i=!1;At[e]?(i={errMsg:"getProvider:ok",service:e,provider:At[e]},_(n)&&n(i)):(i={errMsg:"getProvider:fail:服务["+e+"]不存在"},_(r)&&r(i)),_(o)&&o(i)}var Tt=Object.freeze({__proto__:null,getProvider:Pt}),kt=function(){var t;return function(){return t||(t=new r.default),t}}();function Ot(t,e,n){return t[e].apply(t,n)}function $t(){return Ot(kt(),"$on",Array.prototype.slice.call(arguments))}function Ct(){return Ot(kt(),"$off",Array.prototype.slice.call(arguments))}function Mt(){return Ot(kt(),"$once",Array.prototype.slice.call(arguments))}function Lt(){return Ot(kt(),"$emit",Array.prototype.slice.call(arguments))}var Dt=Object.freeze({__proto__:null,$on:$t,$off:Ct,$once:Mt,$emit:Lt}),Ft=Object.freeze({__proto__:null}),Et=Page,Rt=Component,jt=/:/g,It=P((function(t){return k(t.replace(jt,"-"))}));function zt(t){var e=t.triggerEvent;t.triggerEvent=function(n){for(var r=arguments.length,o=new Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return e.apply(t,[It(n)].concat(o))}}function Nt(t,e){var n=e[t];e[t]=n?function(){zt(this);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return n.apply(this,e)}:function(){zt(this)}}Page=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Nt("onLoad",t),Et(t)},Component=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Nt("created",t),Rt(t)};var Wt=["onPullDownRefresh","onReachBottom","onAddToFavorites","onShareTimeline","onShareAppMessage","onPageScroll","onResize","onTabItemTap"];function Bt(t,e){var n=t.$mp[t.mpType];e.forEach((function(e){S(n,e)&&(t[e]=n[e])}))}function Vt(t,e){if(!e)return!0;if(r.default.options&&Array.isArray(r.default.options[t]))return!0;if(e=e.default||e,_(e))return!!_(e.extendOptions[t])||!!(e.super&&e.super.options&&Array.isArray(e.super.options[t]));if(_(e[t]))return!0;var n=e.mixins;return Array.isArray(n)?!!n.find((function(e){return Vt(t,e)})):void 0}function Ut(t,e,n){e.forEach((function(e){Vt(e,n)&&(t[e]=function(t){return this.$vm&&this.$vm.__call_hook(e,t)})}))}function Ht(t,e){var n;return e=e.default||e,n=_(e)?e:t.extend(e),e=n.options,[n,e]}function Gt(t,e){if(Array.isArray(e)&&e.length){var n=Object.create(null);e.forEach((function(t){n[t]=!0})),t.$scopedSlots=t.$slots=n}}function qt(t,e){t=(t||"").split(",");var n=t.length;1===n?e._$vueId=t[0]:2===n&&(e._$vueId=t[0],e._$vuePid=t[1])}function Xt(t,e){var n=t.data||{},r=t.methods||{};if("function"===typeof n)try{n=n.call(e)}catch(o){Object({NODE_ENV:"development",VUE_APP_PLATFORM:"mp-qq",BASE_URL:"/"}).VUE_APP_DEBUG&&console.warn("根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。",n)}else try{n=JSON.parse(JSON.stringify(n))}catch(o){}return w(n)||(n={}),Object.keys(r).forEach((function(t){-1!==e.__lifecycle_hooks__.indexOf(t)||S(n,t)||(n[t]=r[t])})),n}var Jt=[String,Number,Boolean,Object,Array,null];function Yt(t){return function(e,n){this.$vm&&(this.$vm[t]=e)}}function Kt(t,e){var n=t.behaviors,r=t.extends,o=t.mixins,i=t.props;i||(t.props=i=[]);var a=[];return Array.isArray(n)&&n.forEach((function(t){a.push(t.replace("uni://","wx".concat("://"))),"uni://form-field"===t&&(Array.isArray(i)?(i.push("name"),i.push("value")):(i.name={type:String,default:""},i.value={type:[String,Number,Boolean,Array,Object,Date],default:""}))})),w(r)&&r.props&&a.push(e({properties:Zt(r.props,!0)})),Array.isArray(o)&&o.forEach((function(t){w(t)&&t.props&&a.push(e({properties:Zt(t.props,!0)}))})),a}function Qt(t,e,n,r){return Array.isArray(e)&&1===e.length?e[0]:e}function Zt(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=(arguments.length>2&&void 0!==arguments[2]&&arguments[2],{});return e||(n.vueId={type:String,value:""},n.generic={type:Object,value:null},n.vueSlots={type:null,value:[],observer:function(t,e){var n=Object.create(null);t.forEach((function(t){n[t]=!0})),this.setData({$slots:n})}}),Array.isArray(t)?t.forEach((function(t){n[t]={type:null,observer:Yt(t)}})):w(t)&&Object.keys(t).forEach((function(e){var r=t[e];if(w(r)){var o=r.default;_(o)&&(o=o()),r.type=Qt(e,r.type),n[e]={type:-1!==Jt.indexOf(r.type)?r.type:null,value:o,observer:Yt(e)}}else{var i=Qt(e,r);n[e]={type:-1!==Jt.indexOf(i)?i:null,observer:Yt(e)}}})),n}function te(t){try{t.mp=JSON.parse(JSON.stringify(t))}catch(e){}return t.stopPropagation=A,t.preventDefault=A,t.target=t.target||{},S(t,"detail")||(t.detail={}),S(t,"markerId")&&(t.detail="object"===typeof t.detail?t.detail:{},t.detail.markerId=t.markerId),w(t.detail)&&(t.target=Object.assign({},t.target,t.detail)),t}function ee(t,e){var n=t;return e.forEach((function(e){var r=e[0],o=e[2];if(r||"undefined"!==typeof o){var i,a=e[1],s=e[3];Number.isInteger(r)?i=r:r?"string"===typeof r&&r&&(i=0===r.indexOf("#s#")?r.substr(3):t.__get_value(r,n)):i=n,Number.isInteger(i)?n=o:a?Array.isArray(i)?n=i.find((function(e){return t.__get_value(a,e)===o})):w(i)?n=Object.keys(i).find((function(e){return t.__get_value(a,i[e])===o})):console.error("v-for 暂不支持循环数据：",i):n=i[o],s&&(n=t.__get_value(s,n))}})),n}function ne(t,e,n){var r={};return Array.isArray(e)&&e.length&&e.forEach((function(e,o){"string"===typeof e?e?"$event"===e?r["$"+o]=n:"arguments"===e?n.detail&&n.detail.__args__?r["$"+o]=n.detail.__args__:r["$"+o]=[n]:0===e.indexOf("$event.")?r["$"+o]=t.__get_value(e.replace("$event.",""),n):r["$"+o]=t.__get_value(e):r["$"+o]=t:r["$"+o]=ee(t,e)})),r}function re(t){for(var e={},n=1;n<t.length;n++){var r=t[n];e[r[0]]=r[1]}return e}function oe(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],o=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0,a=!1;if(o&&(a=e.currentTarget&&e.currentTarget.dataset&&"wx"===e.currentTarget.dataset.comType,!n.length))return a?[e]:e.detail.__args__||e.detail;var s=ne(t,r,e),l=[];return n.forEach((function(t){"$event"===t?"__set_model"!==i||o?o&&!a?l.push(e.detail.__args__[0]):l.push(e):l.push(e.target.value):Array.isArray(t)&&"o"===t[0]?l.push(re(t)):"string"===typeof t&&S(s,t)?l.push(s[t]):l.push(t)})),l}var ie="~",ae="^";function se(t,e){return t===e||"regionchange"===e&&("begin"===t||"end"===t)}function le(t){var e=t.$parent;while(e&&e.$parent&&(e.$options.generic||e.$parent.$options.generic||e.$scope._$vuePid))e=e.$parent;return e&&e.$parent}function ce(t){var e=this;t=te(t);var n=(t.currentTarget||t.target).dataset;if(!n)return console.warn("事件信息不存在");var r=n.eventOpts||n["event-opts"];if(!r)return console.warn("事件信息不存在");var o=t.type,i=[];return r.forEach((function(n){var r=n[0],a=n[1],s=r.charAt(0)===ae;r=s?r.slice(1):r;var l=r.charAt(0)===ie;r=l?r.slice(1):r,a&&se(o,r)&&a.forEach((function(n){var r=n[0];if(r){var o=e.$vm;if(o.$options.generic&&(o=le(o)||o),"$emit"===r)return void o.$emit.apply(o,oe(e.$vm,t,n[1],n[2],s,r));var a=o[r];if(!_(a))throw new Error(" _vm.".concat(r," is not a function"));if(l){if(a.once)return;a.once=!0}var c=oe(e.$vm,t,n[1],n[2],s,r);i.push(a.apply(o,(Array.isArray(c)?c:[]).concat([,,,,,,,,,,t])))}}))})),"input"===o&&1===i.length&&"undefined"!==typeof i[0]?i[0]:void 0}var ue=["onShow","onHide","onError","onPageNotFound","onThemeChange","onUnhandledRejection"];function he(t,e){var n=e.mocks,o=e.initRefs;t.$options.store&&(r.default.prototype.$store=t.$options.store),r.default.prototype.mpHost="mp-qq",r.default.mixin({beforeCreate:function(){this.$options.mpType&&(this.mpType=this.$options.mpType,this.$mp=h({data:{}},this.mpType,this.$options.mpInstance),this.$scope=this.$options.mpInstance,delete this.$options.mpType,delete this.$options.mpInstance,"app"!==this.mpType&&(o(this),Bt(this,n)))}});var i={onLaunch:function(e){this.$vm||(wx.canIUse("nextTick")||console.error("当前微信基础库版本过低，请将 微信开发者工具-详情-项目设置-调试基础库版本 更换为`2.3.0`以上"),this.$vm=t,this.$vm.$mp={app:this},this.$vm.$scope=this,this.$vm.globalData=this.globalData,this.$vm._isMounted=!0,this.$vm.__call_hook("mounted",e),this.$vm.__call_hook("onLaunch",e))}};i.globalData=t.$options.globalData||{};var a=t.$options.methods;return a&&Object.keys(a).forEach((function(t){i[t]=a[t]})),Ut(i,ue),i}var fe=["__route__","__wxExparserNodeId__","__wxWebviewId__"];function pe(t,e){for(var n,r=t.$children,o=r.length-1;o>=0;o--){var i=r[o];if(i.$scope._$vueId===e)return i}for(var a=r.length-1;a>=0;a--)if(n=pe(r[a],e),n)return n}function de(t){return Behavior(t)}function ve(){return!!this.route}function ge(t){this.triggerEvent("__l",t)}function ye(t){var e=t.$scope;Object.defineProperty(t,"$refs",{get:function(){var t={},n=e.selectAllComponents(".vue-ref");n.forEach((function(e){var n=e.dataset.ref;t[n]=e.$vm||e}));var r=e.selectAllComponents(".vue-ref-in-for");return r.forEach((function(e){var n=e.dataset.ref;t[n]||(t[n]=[]),t[n].push(e.$vm||e)})),t}})}function xe(t){var e,n=t.detail||t.value,r=n.vuePid,o=n.vueOptions;r&&(e=pe(this.$vm,r)),e||(e=this.$vm),o.parent=e}function me(t){return he(t,{mocks:fe,initRefs:ye})}function _e(t){return me(t)}function be(t){return App(_e(t)),t}function we(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.isPage,o=e.initRelation,i=Ht(r.default,t),l=s(i,2),c=l[0],u=l[1],h=a({multipleSlots:!0,addGlobalClass:!0},u.options||{});u["mp-weixin"]&&u["mp-weixin"].options&&Object.assign(h,u["mp-weixin"].options);var f={options:h,data:Xt(u,r.default.prototype),behaviors:Kt(u,de),properties:Zt(u.props,!1,u.__file),lifetimes:{attached:function(){var t=this.properties,e={mpType:n.call(this)?"page":"component",mpInstance:this,propsData:t};qt(t.vueId,this),o.call(this,{vuePid:this._$vuePid,vueOptions:e}),this.$vm=new c(e),Gt(this.$vm,t.vueSlots),this.$vm.$mount()},ready:function(){this.$vm&&(this.$vm._isMounted=!0,this.$vm.__call_hook("mounted"),this.$vm.__call_hook("onReady"))},detached:function(){this.$vm&&this.$vm.$destroy()}},pageLifetimes:{show:function(t){this.$vm&&this.$vm.__call_hook("onPageShow",t)},hide:function(){this.$vm&&this.$vm.__call_hook("onPageHide")},resize:function(t){this.$vm&&this.$vm.__call_hook("onPageResize",t)}},methods:{__l:xe,__e:ce}};return u.externalClasses&&(f.externalClasses=u.externalClasses),Array.isArray(u.wxsCallMethods)&&u.wxsCallMethods.forEach((function(t){f.methods[t]=function(e){return this.$vm[t](e)}})),n?f:[f,c]}function Se(t){return we(t,{isPage:ve,initRelation:ge})}function Ae(t){return Se(t)}var Pe=["onShow","onHide","onUnload"];function Te(t,e){e.isPage,e.initRelation;var n=Ae(t);return Ut(n.methods,Pe,t),n.methods.onLoad=function(t){this.$vm.$mp.query=t,this.$vm.__call_hook("onLoad",t)},n}function ke(t){return Te(t,{isPage:ve,initRelation:ge})}function Oe(t){return ke(t)}function $e(t){return Component(Oe(t))}function Ce(t){return Component(Ae(t))}Pe.push.apply(Pe,Wt),dt.forEach((function(t){pt[t]=!1})),vt.forEach((function(t){var e=pt[t]&&pt[t].name?pt[t].name:t;wx.canIUse(e)||(pt[t]=!1)}));var Me={};"undefined"!==typeof Proxy?Me=new Proxy({},{get:function(t,e){return S(t,e)?t[e]:ht[e]?ht[e]:Ft[e]?nt(e,Ft[e]):Tt[e]?nt(e,Tt[e]):bt[e]?nt(e,bt[e]):Dt[e]?Dt[e]:S(wx,e)||S(pt,e)?nt(e,_t(e,wx[e])):void 0},set:function(t,e,n){return t[e]=n,!0}}):(Object.keys(ht).forEach((function(t){Me[t]=ht[t]})),Object.keys(bt).forEach((function(t){Me[t]=nt(t,bt[t])})),Object.keys(Tt).forEach((function(t){Me[t]=nt(t,bt[t])})),Object.keys(Dt).forEach((function(t){Me[t]=Dt[t]})),Object.keys(Ft).forEach((function(t){Me[t]=nt(t,Ft[t])})),Object.keys(wx).forEach((function(t){(S(wx,t)||S(pt,t))&&(Me[t]=nt(t,_t(t,wx[t])))}))),wx.createApp=be,wx.createPage=$e,wx.createComponent=Ce;var Le=Me,De=Le;e.default=De},10:
/*!*********************************************************************************************!*\
  !*** ./node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/regenerator/index.js ***!
  \*********************************************************************************************/
/*! no static exports found */function(t,e,n){t.exports=n(/*! regenerator-runtime */11)},11:
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */function(t,e,n){var r=function(){return this||"object"===typeof self&&self}()||Function("return this")(),o=r.regeneratorRuntime&&Object.getOwnPropertyNames(r).indexOf("regeneratorRuntime")>=0,i=o&&r.regeneratorRuntime;if(r.regeneratorRuntime=void 0,t.exports=n(/*! ./runtime */12),o)r.regeneratorRuntime=i;else try{delete r.regeneratorRuntime}catch(a){r.regeneratorRuntime=void 0}},12:
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */function(t,e){!function(e){"use strict";var n,r=Object.prototype,o=r.hasOwnProperty,i="function"===typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",l=i.toStringTag||"@@toStringTag",c="object"===typeof t,u=e.regeneratorRuntime;if(u)c&&(t.exports=u);else{u=e.regeneratorRuntime=c?t.exports:{},u.wrap=_;var h="suspendedStart",f="suspendedYield",p="executing",d="completed",v={},g={};g[a]=function(){return this};var y=Object.getPrototypeOf,x=y&&y(y(L([])));x&&x!==r&&o.call(x,a)&&(g=x);var m=A.prototype=w.prototype=Object.create(g);S.prototype=m.constructor=A,A.constructor=S,A[l]=S.displayName="GeneratorFunction",u.isGeneratorFunction=function(t){var e="function"===typeof t&&t.constructor;return!!e&&(e===S||"GeneratorFunction"===(e.displayName||e.name))},u.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,A):(t.__proto__=A,l in t||(t[l]="GeneratorFunction")),t.prototype=Object.create(m),t},u.awrap=function(t){return{__await:t}},P(T.prototype),T.prototype[s]=function(){return this},u.AsyncIterator=T,u.async=function(t,e,n,r){var o=new T(_(t,e,n,r));return u.isGeneratorFunction(e)?o:o.next().then((function(t){return t.done?t.value:o.next()}))},P(m),m[l]="Generator",m[a]=function(){return this},m.toString=function(){return"[object Generator]"},u.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){while(e.length){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},u.values=L,M.prototype={constructor:M,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(C),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0],e=t.completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,o){return s.type="throw",s.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=o.call(a,"catchLoc"),c=o.call(a,"finallyLoc");if(l&&c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),C(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:L(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),v}}}function _(t,e,n,r){var o=e&&e.prototype instanceof w?e:w,i=Object.create(o.prototype),a=new M(r||[]);return i._invoke=k(t,n,a),i}function b(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(r){return{type:"throw",arg:r}}}function w(){}function S(){}function A(){}function P(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function T(t){function e(n,r,i,a){var s=b(t[n],t,r);if("throw"!==s.type){var l=s.arg,c=l.value;return c&&"object"===typeof c&&o.call(c,"__await")?Promise.resolve(c.__await).then((function(t){e("next",t,i,a)}),(function(t){e("throw",t,i,a)})):Promise.resolve(c).then((function(t){l.value=t,i(l)}),(function(t){return e("throw",t,i,a)}))}a(s.arg)}var n;function r(t,r){function o(){return new Promise((function(n,o){e(t,r,n,o)}))}return n=n?n.then(o,o):o()}this._invoke=r}function k(t,e,n){var r=h;return function(o,i){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return D()}n.method=o,n.arg=i;while(1){var a=n.delegate;if(a){var s=O(a,n);if(s){if(s===v)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===h)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var l=b(t,e,n);if("normal"===l.type){if(r=n.done?d:f,l.arg===v)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=d,n.method="throw",n.arg=l.arg)}}}function O(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,O(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=b(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,v;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function $(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach($,this),this.reset(!0)}function L(t){if(t){var e=t[a];if(e)return e.call(t);if("function"===typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){while(++r<t.length)if(o.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return i.next=i}}return{next:D}}function D(){return{value:n,done:!0}}}(function(){return this||"object"===typeof self&&self}()||Function("return this")())},13:
/*!*****************************************************************!*\
  !*** D:/g工作/zilv/code/defaultmoban/defaultmoban/store/index.js ***!
  \*****************************************************************/
/*! no static exports found */function(t,e,n){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=a(n(/*! ./node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/regenerator */10)),o=a(n(/*! vue */2)),i=a(n(/*! vuex */14));function a(t){return t&&t.__esModule?t:{default:t}}function s(t,e,n,r,o,i,a){try{var s=t[i](a),l=s.value}catch(c){return void n(c)}s.done?e(l):Promise.resolve(l).then(r,o)}function l(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){s(i,r,o,a,l,"next",t)}function l(t){s(i,r,o,a,l,"throw",t)}a(void 0)}))}}o.default.use(i.default);var c=new i.default.Store({state:{hasLogin:!1,loginProvider:"",userInfo:{},avatar:"",nickname:"",token:"",honor:"",userid:"",level:0,progress:0,starNum:0,cjNum:0,levelupdata:!1,honorupdata:!1,openid:null,testvuex:!1,colorIndex:0,signList:[],colorList:["#FF0000","#00FF00","#0000FF"]},mutations:{login:function(e,n){e.hasLogin=!0,e.userInfo=n,e.avatar=n.weiChatAuthUser.avatarUrl,e.nickname=n.weiChatAuthUser.nickName,e.token=n.token;for(var r=["avatarUrl","nickName","token","isLogin","userId"],o=[n.weiChatAuthUser.avatarUrl,n.weiChatAuthUser.nickName,n.token,!0,n.userId],i=0;i<r.length;i++)t.setStorageSync({key:r[i],data:o[i]});console.log("state_userInfo is"),console.log(e.userInfo)},logout:function(t){t.hasLogin=!1,t.openid=null},addLevel:function(t,e){t.level=t.level+e},levelUpdata:function(t,e){t.levelupdata=e},honorUpdata:function(t,e){t.honorupdata=e},changeLevel:function(t,e){t.level=e,console.log("state_level is ========"),console.log(t.level)},changeProgress:function(t,e){t.progress=e,console.log("state_progerss is ========"),console.log(t.progress)},changeStar:function(t,e){t.starNum=e,console.log("state_starNum  is ========"),console.log(t.starNum)},changeprogress:function(t,e){t.progress=e},changeHonor:function(t,e){t.honor=e},changeCj:function(t,e){t.cjNum=e},changName:function(t,e){t.nickname=e},changesignList:function(t,e){t.signList=e},setOpenid:function(t,e){t.openid=e},setTestTrue:function(t){t.testvuex=!0},setTestFalse:function(t){t.testvuex=!1},setColorIndex:function(t,e){t.colorIndex=e}},getters:{currentColor:function(t){return t.colorList[t.colorIndex]}},actions:{getUserOpenId:function(){var e=l(r.default.mark((function e(n){var o,i;return r.default.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return o=n.commit,i=n.state,e.next=3,new Promise((function(e,n){i.openid?e(i.openid):t.login({success:function(t){o("login"),setTimeout((function(){var t="123456789";console.log("uni.request mock openid["+t+"]"),o("setOpenid",t),e(t)}),1e3)},fail:function(t){console.log("uni.login 接口调用失败，将无法正常使用开放接口等服务",t),n(t)}})}));case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}),e)})));function n(t){return e.apply(this,arguments)}return n}()}}),u=c;e.default=u}).call(this,n(/*! ./node_modules/@dcloudio/uni-mp-qq/dist/index.js */1)["default"])},14:
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: Store, install, mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers, default */function(t,e,n){"use strict";n.r(e),n.d(e,"Store",(function(){return _})),n.d(e,"install",(function(){return F})),n.d(e,"mapState",(function(){return E})),n.d(e,"mapMutations",(function(){return R})),n.d(e,"mapGetters",(function(){return j})),n.d(e,"mapActions",(function(){return I})),n.d(e,"createNamespacedHelpers",(function(){return z}));
/**
 * vuex v3.0.1
 * (c) 2017 Evan You
 * @license MIT
 */
var r=function(t){var e=Number(t.version.split(".")[0]);if(e>=2)t.mixin({beforeCreate:r});else{var n=t.prototype._init;t.prototype._init=function(t){void 0===t&&(t={}),t.init=t.init?[r].concat(t.init):r,n.call(this,t)}}function r(){var t=this.$options;t.store?this.$store="function"===typeof t.store?t.store():t.store:t.parent&&t.parent.$store&&(this.$store=t.parent.$store)}},o="undefined"!==typeof window&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function i(t){o&&(t._devtoolHook=o,o.emit("vuex:init",t),o.on("vuex:travel-to-state",(function(e){t.replaceState(e)})),t.subscribe((function(t,e){o.emit("vuex:mutation",t,e)})))}function a(t,e){Object.keys(t).forEach((function(n){return e(t[n],n)}))}function s(t){return null!==t&&"object"===typeof t}function l(t){return t&&"function"===typeof t.then}function c(t,e){if(!t)throw new Error("[vuex] "+e)}var u=function(t,e){this.runtime=e,this._children=Object.create(null),this._rawModule=t;var n=t.state;this.state=("function"===typeof n?n():n)||{}},h={namespaced:{configurable:!0}};h.namespaced.get=function(){return!!this._rawModule.namespaced},u.prototype.addChild=function(t,e){this._children[t]=e},u.prototype.removeChild=function(t){delete this._children[t]},u.prototype.getChild=function(t){return this._children[t]},u.prototype.update=function(t){this._rawModule.namespaced=t.namespaced,t.actions&&(this._rawModule.actions=t.actions),t.mutations&&(this._rawModule.mutations=t.mutations),t.getters&&(this._rawModule.getters=t.getters)},u.prototype.forEachChild=function(t){a(this._children,t)},u.prototype.forEachGetter=function(t){this._rawModule.getters&&a(this._rawModule.getters,t)},u.prototype.forEachAction=function(t){this._rawModule.actions&&a(this._rawModule.actions,t)},u.prototype.forEachMutation=function(t){this._rawModule.mutations&&a(this._rawModule.mutations,t)},Object.defineProperties(u.prototype,h);var f=function(t){this.register([],t,!1)};function p(t,e,n){if(x(t,n),e.update(n),n.modules)for(var r in n.modules){if(!e.getChild(r))return void console.warn("[vuex] trying to add a new module '"+r+"' on hot reloading, manual reload is needed");p(t.concat(r),e.getChild(r),n.modules[r])}}f.prototype.get=function(t){return t.reduce((function(t,e){return t.getChild(e)}),this.root)},f.prototype.getNamespace=function(t){var e=this.root;return t.reduce((function(t,n){return e=e.getChild(n),t+(e.namespaced?n+"/":"")}),"")},f.prototype.update=function(t){p([],this.root,t)},f.prototype.register=function(t,e,n){var r=this;void 0===n&&(n=!0),x(t,e);var o=new u(e,n);if(0===t.length)this.root=o;else{var i=this.get(t.slice(0,-1));i.addChild(t[t.length-1],o)}e.modules&&a(e.modules,(function(e,o){r.register(t.concat(o),e,n)}))},f.prototype.unregister=function(t){var e=this.get(t.slice(0,-1)),n=t[t.length-1];e.getChild(n).runtime&&e.removeChild(n)};var d,v={assert:function(t){return"function"===typeof t},expected:"function"},g={assert:function(t){return"function"===typeof t||"object"===typeof t&&"function"===typeof t.handler},expected:'function or object with "handler" function'},y={getters:v,mutations:v,actions:g};function x(t,e){Object.keys(y).forEach((function(n){if(e[n]){var r=y[n];a(e[n],(function(e,o){c(r.assert(e),m(t,n,o,e,r.expected))}))}}))}function m(t,e,n,r,o){var i=e+" should be "+o+' but "'+e+"."+n+'"';return t.length>0&&(i+=' in module "'+t.join(".")+'"'),i+=" is "+JSON.stringify(r)+".",i}var _=function t(e){var n=this;void 0===e&&(e={}),!d&&"undefined"!==typeof window&&window.Vue&&F(window.Vue),c(d,"must call Vue.use(Vuex) before creating a store instance."),c("undefined"!==typeof Promise,"vuex requires a Promise polyfill in this browser."),c(this instanceof t,"Store must be called with the new operator.");var r=e.plugins;void 0===r&&(r=[]);var o=e.strict;void 0===o&&(o=!1);var a=e.state;void 0===a&&(a={}),"function"===typeof a&&(a=a()||{}),this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new f(e),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._watcherVM=new d;var s=this,l=this,u=l.dispatch,h=l.commit;this.dispatch=function(t,e){return u.call(s,t,e)},this.commit=function(t,e,n){return h.call(s,t,e,n)},this.strict=o,P(this,a,[],this._modules.root),A(this,a),r.forEach((function(t){return t(n)})),d.config.devtools&&i(this)},b={state:{configurable:!0}};function w(t,e){return e.indexOf(t)<0&&e.push(t),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}function S(t,e){t._actions=Object.create(null),t._mutations=Object.create(null),t._wrappedGetters=Object.create(null),t._modulesNamespaceMap=Object.create(null);var n=t.state;P(t,n,[],t._modules.root,!0),A(t,n,e)}function A(t,e,n){var r=t._vm;t.getters={};var o=t._wrappedGetters,i={};a(o,(function(e,n){i[n]=function(){return e(t)},Object.defineProperty(t.getters,n,{get:function(){return t._vm[n]},enumerable:!0})}));var s=d.config.silent;d.config.silent=!0,t._vm=new d({data:{$$state:e},computed:i}),d.config.silent=s,t.strict&&M(t),r&&(n&&t._withCommit((function(){r._data.$$state=null})),d.nextTick((function(){return r.$destroy()})))}function P(t,e,n,r,o){var i=!n.length,a=t._modules.getNamespace(n);if(r.namespaced&&(t._modulesNamespaceMap[a]=r),!i&&!o){var s=L(e,n.slice(0,-1)),l=n[n.length-1];t._withCommit((function(){d.set(s,l,r.state)}))}var c=r.context=T(t,a,n);r.forEachMutation((function(e,n){var r=a+n;O(t,r,e,c)})),r.forEachAction((function(e,n){var r=e.root?n:a+n,o=e.handler||e;$(t,r,o,c)})),r.forEachGetter((function(e,n){var r=a+n;C(t,r,e,c)})),r.forEachChild((function(r,i){P(t,e,n.concat(i),r,o)}))}function T(t,e,n){var r=""===e,o={dispatch:r?t.dispatch:function(n,r,o){var i=D(n,r,o),a=i.payload,s=i.options,l=i.type;if(s&&s.root||(l=e+l,t._actions[l]))return t.dispatch(l,a);console.error("[vuex] unknown local action type: "+i.type+", global type: "+l)},commit:r?t.commit:function(n,r,o){var i=D(n,r,o),a=i.payload,s=i.options,l=i.type;s&&s.root||(l=e+l,t._mutations[l])?t.commit(l,a,s):console.error("[vuex] unknown local mutation type: "+i.type+", global type: "+l)}};return Object.defineProperties(o,{getters:{get:r?function(){return t.getters}:function(){return k(t,e)}},state:{get:function(){return L(t.state,n)}}}),o}function k(t,e){var n={},r=e.length;return Object.keys(t.getters).forEach((function(o){if(o.slice(0,r)===e){var i=o.slice(r);Object.defineProperty(n,i,{get:function(){return t.getters[o]},enumerable:!0})}})),n}function O(t,e,n,r){var o=t._mutations[e]||(t._mutations[e]=[]);o.push((function(e){n.call(t,r.state,e)}))}function $(t,e,n,r){var o=t._actions[e]||(t._actions[e]=[]);o.push((function(e,o){var i=n.call(t,{dispatch:r.dispatch,commit:r.commit,getters:r.getters,state:r.state,rootGetters:t.getters,rootState:t.state},e,o);return l(i)||(i=Promise.resolve(i)),t._devtoolHook?i.catch((function(e){throw t._devtoolHook.emit("vuex:error",e),e})):i}))}function C(t,e,n,r){t._wrappedGetters[e]?console.error("[vuex] duplicate getter key: "+e):t._wrappedGetters[e]=function(t){return n(r.state,r.getters,t.state,t.getters)}}function M(t){t._vm.$watch((function(){return this._data.$$state}),(function(){c(t._committing,"Do not mutate vuex store state outside mutation handlers.")}),{deep:!0,sync:!0})}function L(t,e){return e.length?e.reduce((function(t,e){return t[e]}),t):t}function D(t,e,n){return s(t)&&t.type&&(n=e,e=t,t=t.type),c("string"===typeof t,"Expects string as the type, but found "+typeof t+"."),{type:t,payload:e,options:n}}function F(t){d&&t===d?console.error("[vuex] already installed. Vue.use(Vuex) should be called only once."):(d=t,r(d))}b.state.get=function(){return this._vm._data.$$state},b.state.set=function(t){c(!1,"Use store.replaceState() to explicit replace store state.")},_.prototype.commit=function(t,e,n){var r=this,o=D(t,e,n),i=o.type,a=o.payload,s=o.options,l={type:i,payload:a},c=this._mutations[i];c?(this._withCommit((function(){c.forEach((function(t){t(a)}))})),this._subscribers.forEach((function(t){return t(l,r.state)})),s&&s.silent&&console.warn("[vuex] mutation type: "+i+". Silent option has been removed. Use the filter functionality in the vue-devtools")):console.error("[vuex] unknown mutation type: "+i)},_.prototype.dispatch=function(t,e){var n=this,r=D(t,e),o=r.type,i=r.payload,a={type:o,payload:i},s=this._actions[o];if(s)return this._actionSubscribers.forEach((function(t){return t(a,n.state)})),s.length>1?Promise.all(s.map((function(t){return t(i)}))):s[0](i);console.error("[vuex] unknown action type: "+o)},_.prototype.subscribe=function(t){return w(t,this._subscribers)},_.prototype.subscribeAction=function(t){return w(t,this._actionSubscribers)},_.prototype.watch=function(t,e,n){var r=this;return c("function"===typeof t,"store.watch only accepts a function."),this._watcherVM.$watch((function(){return t(r.state,r.getters)}),e,n)},_.prototype.replaceState=function(t){var e=this;this._withCommit((function(){e._vm._data.$$state=t}))},_.prototype.registerModule=function(t,e,n){void 0===n&&(n={}),"string"===typeof t&&(t=[t]),c(Array.isArray(t),"module path must be a string or an Array."),c(t.length>0,"cannot register the root module by using registerModule."),this._modules.register(t,e),P(this,this.state,t,this._modules.get(t),n.preserveState),A(this,this.state)},_.prototype.unregisterModule=function(t){var e=this;"string"===typeof t&&(t=[t]),c(Array.isArray(t),"module path must be a string or an Array."),this._modules.unregister(t),this._withCommit((function(){var n=L(e.state,t.slice(0,-1));d.delete(n,t[t.length-1])})),S(this)},_.prototype.hotUpdate=function(t){this._modules.update(t),S(this,!0)},_.prototype._withCommit=function(t){var e=this._committing;this._committing=!0,t(),this._committing=e},Object.defineProperties(_.prototype,b);var E=W((function(t,e){var n={};return N(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){var e=this.$store.state,n=this.$store.getters;if(t){var r=B(this.$store,"mapState",t);if(!r)return;e=r.context.state,n=r.context.getters}return"function"===typeof o?o.call(this,e,n):e[o]},n[r].vuex=!0})),n})),R=W((function(t,e){var n={};return N(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){var e=[],n=arguments.length;while(n--)e[n]=arguments[n];var r=this.$store.commit;if(t){var i=B(this.$store,"mapMutations",t);if(!i)return;r=i.context.commit}return"function"===typeof o?o.apply(this,[r].concat(e)):r.apply(this.$store,[o].concat(e))}})),n})),j=W((function(t,e){var n={};return N(e).forEach((function(e){var r=e.key,o=e.val;o=t+o,n[r]=function(){if(!t||B(this.$store,"mapGetters",t)){if(o in this.$store.getters)return this.$store.getters[o];console.error("[vuex] unknown getter: "+o)}},n[r].vuex=!0})),n})),I=W((function(t,e){var n={};return N(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){var e=[],n=arguments.length;while(n--)e[n]=arguments[n];var r=this.$store.dispatch;if(t){var i=B(this.$store,"mapActions",t);if(!i)return;r=i.context.dispatch}return"function"===typeof o?o.apply(this,[r].concat(e)):r.apply(this.$store,[o].concat(e))}})),n})),z=function(t){return{mapState:E.bind(null,t),mapGetters:j.bind(null,t),mapMutations:R.bind(null,t),mapActions:I.bind(null,t)}};function N(t){return Array.isArray(t)?t.map((function(t){return{key:t,val:t}})):Object.keys(t).map((function(e){return{key:e,val:t[e]}}))}function W(t){return function(e,n){return"string"!==typeof e?(n=e,e=""):"/"!==e.charAt(e.length-1)&&(e+="/"),t(e,n)}}function B(t,e,n){var r=t._modulesNamespaceMap[n];return r||console.error("[vuex] module namespace not found in "+e+"(): "+n),r}var V={Store:_,install:F,version:"3.0.1",mapState:E,mapMutations:R,mapGetters:j,mapActions:I,createNamespacedHelpers:z};e["default"]=V},189:
/*!**********************************************************************************************!*\
  !*** D:/g工作/zilv/code/defaultmoban/defaultmoban/components/uni-swipe-action-item/mpother.js ***!
  \**********************************************************************************************/
/*! no static exports found */function(t,e,n){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n={data:function(){return{uniShow:!1,left:0}},computed:{moveLeft:function(){return"translateX(".concat(this.left,"px)")}},watch:{show:function(t){this.position&&"{}"!==JSON.stringify(this.position)&&(this.autoClose||(t?(this.$emit("change",!0),this.open()):(this.$emit("change",!1),this.close())))}},mounted:function(){var t=this;this.position={},void 0!==this.swipeaction.children&&this.swipeaction.children.push(this),setTimeout((function(){t.getSelectorQuery()}),100)},beforeDestoy:function(){var t=this;this.swipeaction.children.forEach((function(e,n){e===t&&t.swipeaction.children.splice(n,1)}))},methods:{onClick:function(t,e){this.$emit("click",{content:e,index:t}),this.close()},touchstart:function(t){var e=t.touches[0].pageX;if(!this.disabled){var n=this.position.content.left;this.autoClose&&this.swipeaction.closeOther(this),this.width=e-n,this.isopen||this.uniShow&&(this.uniShow=!1,this.isopen=!0,this.openleft=this.left+this.position.button.width)}},touchmove:function(t,e){if(!this.disabled){var n=t.touches[0].pageX;this.setPosition(n)}},touchend:function(){this.disabled||(this.isopen?this.move(this.openleft,0):this.move(this.left,-40))},setPosition:function(t,e){this.position.button.width&&this.setValue(t-this.width)},setValue:function(t){this.left=Math.max(-this.position.button.width,Math.min(parseInt(t),0)),this.position.content.left=this.left,this.isopen&&(this.openleft=this.left+this.position.button.width)},move:function(t,e){t>=e?(this.$emit("change",!1),this.close()):(this.$emit("change",!0),this.open())},open:function(){this.uniShow=!0,this.left=-this.position.button.width,this.setValue(-this.position.button.width)},close:function(){var t=this;this.uniShow=!0,this.setValue(0),setTimeout((function(){t.uniShow=!1,t.isopen=!1}),300)},getSelectorQuery:function(){var e=this,n=t.createSelectorQuery().in(this);n.selectAll(".selector-query-hock").boundingClientRect((function(t){console.log(t),e.position.content=t[1],e.position.button=t[0],e.autoClose||(e.show?e.open():e.close())})).exec()}}};e.default=n}).call(this,n(/*! ./node_modules/@dcloudio/uni-mp-qq/dist/index.js */1)["default"])},2:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */function(t,e,n){"use strict";n.r(e),function(t){
/*!
 * Vue.js v2.6.11
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */
var n=Object.freeze({});function r(t){return void 0===t||null===t}function o(t){return void 0!==t&&null!==t}function i(t){return!0===t}function a(t){return!1===t}function s(t){return"string"===typeof t||"number"===typeof t||"symbol"===typeof t||"boolean"===typeof t}function l(t){return null!==t&&"object"===typeof t}var c=Object.prototype.toString;function u(t){return c.call(t).slice(8,-1)}function h(t){return"[object Object]"===c.call(t)}function f(t){return"[object RegExp]"===c.call(t)}function p(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function d(t){return o(t)&&"function"===typeof t.then&&"function"===typeof t.catch}function v(t){return null==t?"":Array.isArray(t)||h(t)&&t.toString===c?JSON.stringify(t,null,2):String(t)}function g(t){var e=parseFloat(t);return isNaN(e)?t:e}function y(t,e){for(var n=Object.create(null),r=t.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}var x=y("slot,component",!0),m=y("key,ref,slot,slot-scope,is");function _(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var b=Object.prototype.hasOwnProperty;function w(t,e){return b.call(t,e)}function S(t){var e=Object.create(null);return function(n){var r=e[n];return r||(e[n]=t(n))}}var A=/-(\w)/g,P=S((function(t){return t.replace(A,(function(t,e){return e?e.toUpperCase():""}))})),T=S((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),k=/\B([A-Z])/g,O=S((function(t){return t.replace(k,"-$1").toLowerCase()}));function $(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n}function C(t,e){return t.bind(e)}var M=Function.prototype.bind?C:$;function L(t,e){e=e||0;var n=t.length-e,r=new Array(n);while(n--)r[n]=t[n+e];return r}function D(t,e){for(var n in e)t[n]=e[n];return t}function F(t){for(var e={},n=0;n<t.length;n++)t[n]&&D(e,t[n]);return e}function E(t,e,n){}var R=function(t,e,n){return!1},j=function(t){return t};function I(t,e){if(t===e)return!0;var n=l(t),r=l(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var o=Array.isArray(t),i=Array.isArray(e);if(o&&i)return t.length===e.length&&t.every((function(t,n){return I(t,e[n])}));if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(o||i)return!1;var a=Object.keys(t),s=Object.keys(e);return a.length===s.length&&a.every((function(n){return I(t[n],e[n])}))}catch(c){return!1}}function z(t,e){for(var n=0;n<t.length;n++)if(I(t[n],e))return n;return-1}function N(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var W=["component","directive","filter"],B=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],V={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:R,isReservedAttr:R,isUnknownElement:R,getTagNamespace:E,parsePlatformTagName:j,mustUseProp:R,async:!0,_lifecycleHooks:B},U=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function G(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var q=new RegExp("[^"+U.source+".$_\\d]");function X(t){if(!q.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}var J,Y="__proto__"in{},K="undefined"!==typeof window,Q="undefined"!==typeof WXEnvironment&&!!WXEnvironment.platform,Z=Q&&WXEnvironment.platform.toLowerCase(),tt=K&&window.navigator.userAgent.toLowerCase(),et=tt&&/msie|trident/.test(tt),nt=(tt&&tt.indexOf("msie 9.0"),tt&&tt.indexOf("edge/")>0),rt=(tt&&tt.indexOf("android"),tt&&/iphone|ipad|ipod|ios/.test(tt)||"ios"===Z),ot=(tt&&/chrome\/\d+/.test(tt),tt&&/phantomjs/.test(tt),tt&&tt.match(/firefox\/(\d+)/),{}.watch);if(K)try{var it={};Object.defineProperty(it,"passive",{get:function(){}}),window.addEventListener("test-passive",null,it)}catch(Ro){}var at=function(){return void 0===J&&(J=!K&&!Q&&"undefined"!==typeof t&&(t["process"]&&"server"===t["process"].env.VUE_ENV)),J},st=K&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function lt(t){return"function"===typeof t&&/native code/.test(t.toString())}var ct,ut="undefined"!==typeof Symbol&&lt(Symbol)&&"undefined"!==typeof Reflect&&lt(Reflect.ownKeys);ct="undefined"!==typeof Set&&lt(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var ht=E,ft=E,pt=E,dt=E,vt="undefined"!==typeof console,gt=/(?:^|[-_])(\w)/g,yt=function(t){return t.replace(gt,(function(t){return t.toUpperCase()})).replace(/[-_]/g,"")};ht=function(t,e){var n=e?pt(e):"";V.warnHandler?V.warnHandler.call(null,t,e,n):vt&&!V.silent&&console.error("[Vue warn]: "+t+n)},ft=function(t,e){vt&&!V.silent&&console.warn("[Vue tip]: "+t+(e?pt(e):""))},dt=function(t,e){if(t.$root===t)return t.$options&&t.$options.__file?""+t.$options.__file:"<Root>";var n="function"===typeof t&&null!=t.cid?t.options:t._isVue?t.$options||t.constructor.options:t,r=n.name||n._componentTag,o=n.__file;if(!r&&o){var i=o.match(/([^/\\]+)\.vue$/);r=i&&i[1]}return(r?"<"+yt(r)+">":"<Anonymous>")+(o&&!1!==e?" at "+o:"")};var xt=function(t,e){var n="";while(e)e%2===1&&(n+=t),e>1&&(t+=t),e>>=1;return n};pt=function(t){if(t._isVue&&t.$parent){var e=[],n=0;while(t&&"PageBody"!==t.$options.name){if(e.length>0){var r=e[e.length-1];if(r.constructor===t.constructor){n++,t=t.$parent;continue}n>0&&(e[e.length-1]=[r,n],n=0)}!t.$options.isReserved&&e.push(t),t=t.$parent}return"\n\nfound in\n\n"+e.map((function(t,e){return""+(0===e?"---\x3e ":xt(" ",5+2*e))+(Array.isArray(t)?dt(t[0])+"... ("+t[1]+" recursive calls)":dt(t))})).join("\n")}return"\n\n(found in "+dt(t)+")"};var mt=0,_t=function(){this.id=mt++,this.subs=[]};function bt(t){_t.SharedObject.targetStack.push(t),_t.SharedObject.target=t}function wt(){_t.SharedObject.targetStack.pop(),_t.SharedObject.target=_t.SharedObject.targetStack[_t.SharedObject.targetStack.length-1]}_t.prototype.addSub=function(t){this.subs.push(t)},_t.prototype.removeSub=function(t){_(this.subs,t)},_t.prototype.depend=function(){_t.SharedObject.target&&_t.SharedObject.target.addDep(this)},_t.prototype.notify=function(){var t=this.subs.slice();V.async||t.sort((function(t,e){return t.id-e.id}));for(var e=0,n=t.length;e<n;e++)t[e].update()},_t.SharedObject={},_t.SharedObject.target=null,_t.SharedObject.targetStack=[];var St=function(t,e,n,r,o,i,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},At={child:{configurable:!0}};At.child.get=function(){return this.componentInstance},Object.defineProperties(St.prototype,At);var Pt=function(t){void 0===t&&(t="");var e=new St;return e.text=t,e.isComment=!0,e};function Tt(t){return new St(void 0,void 0,void 0,String(t))}function kt(t){var e=new St(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var Ot=Array.prototype,$t=Object.create(Ot),Ct=["push","pop","shift","unshift","splice","sort","reverse"];Ct.forEach((function(t){var e=Ot[t];G($t,t,(function(){var n=[],r=arguments.length;while(r--)n[r]=arguments[r];var o,i=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2);break}return o&&a.observeArray(o),a.dep.notify(),i}))}));var Mt=Object.getOwnPropertyNames($t),Lt=!0;function Dt(t){Lt=t}var Ft=function(t){this.value=t,this.dep=new _t,this.vmCount=0,G(t,"__ob__",this),Array.isArray(t)?(Y?t.push!==t.__proto__.push?Rt(t,$t,Mt):Et(t,$t):Rt(t,$t,Mt),this.observeArray(t)):this.walk(t)};function Et(t,e){t.__proto__=e}function Rt(t,e,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];G(t,i,e[i])}}function jt(t,e){var n;if(l(t)&&!(t instanceof St))return w(t,"__ob__")&&t.__ob__ instanceof Ft?n=t.__ob__:Lt&&!at()&&(Array.isArray(t)||h(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new Ft(t)),e&&n&&n.vmCount++,n}function It(t,e,n,r,o){var i=new _t,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get,l=a&&a.set;s&&!l||2!==arguments.length||(n=t[e]);var c=!o&&jt(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return _t.SharedObject.target&&(i.depend(),c&&(c.dep.depend(),Array.isArray(e)&&Wt(e))),e},set:function(e){var a=s?s.call(t):n;e===a||e!==e&&a!==a||(r&&r(),s&&!l||(l?l.call(t,e):n=e,c=!o&&jt(e),i.notify()))}})}}function zt(t,e,n){if((r(t)||s(t))&&ht("Cannot set reactive property on undefined, null, or primitive value: "+t),Array.isArray(t)&&p(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var o=t.__ob__;return t._isVue||o&&o.vmCount?(ht("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):o?(It(o.value,e,n),o.dep.notify(),n):(t[e]=n,n)}function Nt(t,e){if((r(t)||s(t))&&ht("Cannot delete reactive property on undefined, null, or primitive value: "+t),Array.isArray(t)&&p(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount?ht("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):w(t,e)&&(delete t[e],n&&n.dep.notify())}}function Wt(t){for(var e=void 0,n=0,r=t.length;n<r;n++)e=t[n],e&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&Wt(e)}Ft.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)It(t,e[n])},Ft.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)jt(t[e])};var Bt=V.optionMergeStrategies;function Vt(t,e){if(!e)return t;for(var n,r,o,i=ut?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++)n=i[a],"__ob__"!==n&&(r=t[n],o=e[n],w(t,n)?r!==o&&h(r)&&h(o)&&Vt(r,o):zt(t,n,o));return t}function Ut(t,e,n){return n?function(){var r="function"===typeof e?e.call(n,n):e,o="function"===typeof t?t.call(n,n):t;return r?Vt(r,o):o}:e?t?function(){return Vt("function"===typeof e?e.call(this,this):e,"function"===typeof t?t.call(this,this):t)}:e:t}function Ht(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?Gt(n):n}function Gt(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}function qt(t,e,n,r){var o=Object.create(t||null);return e?(te(r,e,n),D(o,e)):o}Bt.el=Bt.propsData=function(t,e,n,r){return n||ht('option "'+r+'" can only be used during instance creation with the `new` keyword.'),Xt(t,e)},Bt.data=function(t,e,n){return n?Ut(t,e,n):e&&"function"!==typeof e?(ht('The "data" option should be a function that returns a per-instance value in component definitions.',n),t):Ut(t,e)},B.forEach((function(t){Bt[t]=Ht})),W.forEach((function(t){Bt[t+"s"]=qt})),Bt.watch=function(t,e,n,r){if(t===ot&&(t=void 0),e===ot&&(e=void 0),!e)return Object.create(t||null);if(te(r,e,n),!t)return e;var o={};for(var i in D(o,t),e){var a=o[i],s=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},Bt.props=Bt.methods=Bt.inject=Bt.computed=function(t,e,n,r){if(e&&te(r,e,n),!t)return e;var o=Object.create(null);return D(o,t),e&&D(o,e),o},Bt.provide=Ut;var Xt=function(t,e){return void 0===e?t:e};function Jt(t){for(var e in t.components)Yt(e)}function Yt(t){new RegExp("^[a-zA-Z][\\-\\.0-9_"+U.source+"]*$").test(t)||ht('Invalid component name: "'+t+'". Component names should conform to valid custom element name in html5 specification.'),(x(t)||V.isReservedTag(t))&&ht("Do not use built-in or reserved HTML elements as component id: "+t)}function Kt(t,e){var n=t.props;if(n){var r,o,i,a={};if(Array.isArray(n)){r=n.length;while(r--)o=n[r],"string"===typeof o?(i=P(o),a[i]={type:null}):ht("props must be strings when using array syntax.")}else if(h(n))for(var s in n)o=n[s],i=P(s),a[i]=h(o)?o:{type:o};else ht('Invalid value for option "props": expected an Array or an Object, but got '+u(n)+".",e);t.props=a}}function Qt(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(h(n))for(var i in n){var a=n[i];r[i]=h(a)?D({from:i},a):{from:a}}else ht('Invalid value for option "inject": expected an Array or an Object, but got '+u(n)+".",e)}}function Zt(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"===typeof r&&(e[n]={bind:r,update:r})}}function te(t,e,n){h(e)||ht('Invalid value for option "'+t+'": expected an Object, but got '+u(e)+".",n)}function ee(t,e,n){if(Jt(e),"function"===typeof e&&(e=e.options),Kt(e,n),Qt(e,n),Zt(e),!e._base&&(e.extends&&(t=ee(t,e.extends,n)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)t=ee(t,e.mixins[r],n);var i,a={};for(i in t)s(i);for(i in e)w(t,i)||s(i);function s(r){var o=Bt[r]||Xt;a[r]=o(t[r],e[r],n,r)}return a}function ne(t,e,n,r){if("string"===typeof n){var o=t[e];if(w(o,n))return o[n];var i=P(n);if(w(o,i))return o[i];var a=T(i);if(w(o,a))return o[a];var s=o[n]||o[i]||o[a];return r&&!s&&ht("Failed to resolve "+e.slice(0,-1)+": "+n,t),s}}function re(t,e,n,r){var o=e[t],i=!w(n,t),a=n[t],s=ue(Boolean,o.type);if(s>-1)if(i&&!w(o,"default"))a=!1;else if(""===a||a===O(t)){var l=ue(String,o.type);(l<0||s<l)&&(a=!0)}if(void 0===a){a=oe(r,o,t);var c=Lt;Dt(!0),jt(a),Dt(c)}return ie(o,t,a,r,i),a}function oe(t,e,n){if(w(e,"default")){var r=e.default;return l(r)&&ht('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',t),t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n]?t._props[n]:"function"===typeof r&&"Function"!==le(e.type)?r.call(t):r}}function ie(t,e,n,r,o){if(t.required&&o)ht('Missing required prop: "'+e+'"',r);else if(null!=n||t.required){var i=t.type,a=!i||!0===i,s=[];if(i){Array.isArray(i)||(i=[i]);for(var l=0;l<i.length&&!a;l++){var c=se(n,i[l]);s.push(c.expectedType||""),a=c.valid}}if(a){var u=t.validator;u&&(u(n)||ht('Invalid prop: custom validator check failed for prop "'+e+'".',r))}else ht(he(e,n,s),r)}}var ae=/^(String|Number|Boolean|Function|Symbol)$/;function se(t,e){var n,r=le(e);if(ae.test(r)){var o=typeof t;n=o===r.toLowerCase(),n||"object"!==o||(n=t instanceof e)}else n="Object"===r?h(t):"Array"===r?Array.isArray(t):t instanceof e;return{valid:n,expectedType:r}}function le(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function ce(t,e){return le(t)===le(e)}function ue(t,e){if(!Array.isArray(e))return ce(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(ce(e[n],t))return n;return-1}function he(t,e,n){var r='Invalid prop: type check failed for prop "'+t+'". Expected '+n.map(T).join(", "),o=n[0],i=u(e),a=fe(e,o),s=fe(e,i);return 1===n.length&&pe(o)&&!de(o,i)&&(r+=" with value "+a),r+=", got "+i+" ",pe(i)&&(r+="with value "+s+"."),r}function fe(t,e){return"String"===e?'"'+t+'"':"Number"===e?""+Number(t):""+t}function pe(t){var e=["string","number","boolean"];return e.some((function(e){return t.toLowerCase()===e}))}function de(){var t=[],e=arguments.length;while(e--)t[e]=arguments[e];return t.some((function(t){return"boolean"===t.toLowerCase()}))}function ve(t,e,n){bt();try{if(e){var r=e;while(r=r.$parent){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{var a=!1===o[i].call(r,t,e,n);if(a)return}catch(Ro){ye(Ro,r,"errorCaptured hook")}}}ye(t,e,n)}finally{wt()}}function ge(t,e,n,r,o){var i;try{i=n?t.apply(e,n):t.call(e),i&&!i._isVue&&d(i)&&!i._handled&&(i.catch((function(t){return ve(t,r,o+" (Promise/async)")})),i._handled=!0)}catch(Ro){ve(Ro,r,o)}return i}function ye(t,e,n){if(V.errorHandler)try{return V.errorHandler.call(null,t,e,n)}catch(Ro){Ro!==t&&xe(Ro,null,"config.errorHandler")}xe(t,e,n)}function xe(t,e,n){if(ht("Error in "+n+': "'+t.toString()+'"',e),!K&&!Q||"undefined"===typeof console)throw t;console.error(t)}var me,_e,be=[],we=!1;function Se(){we=!1;var t=be.slice(0);be.length=0;for(var e=0;e<t.length;e++)t[e]()}if("undefined"!==typeof Promise&&lt(Promise)){var Ae=Promise.resolve();me=function(){Ae.then(Se),rt&&setTimeout(E)}}else if(et||"undefined"===typeof MutationObserver||!lt(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())me="undefined"!==typeof setImmediate&&lt(setImmediate)?function(){setImmediate(Se)}:function(){setTimeout(Se,0)};else{var Pe=1,Te=new MutationObserver(Se),ke=document.createTextNode(String(Pe));Te.observe(ke,{characterData:!0}),me=function(){Pe=(Pe+1)%2,ke.data=String(Pe)}}function Oe(t,e){var n;if(be.push((function(){if(t)try{t.call(e)}catch(Ro){ve(Ro,e,"nextTick")}else n&&n(e)})),we||(we=!0,me()),!t&&"undefined"!==typeof Promise)return new Promise((function(t){n=t}))}var $e=y("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),Ce=function(t,e){ht('Property or method "'+e+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',t)},Me=function(t,e){ht('Property "'+e+'" must be accessed with "$data.'+e+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internals. See: https://vuejs.org/v2/api/#data',t)},Le="undefined"!==typeof Proxy&&lt(Proxy);if(Le){var De=y("stop,prevent,self,ctrl,shift,alt,meta,exact");V.keyCodes=new Proxy(V.keyCodes,{set:function(t,e,n){return De(e)?(ht("Avoid overwriting built-in modifier in config.keyCodes: ."+e),!1):(t[e]=n,!0)}})}var Fe={has:function(t,e){var n=e in t,r=$e(e)||"string"===typeof e&&"_"===e.charAt(0)&&!(e in t.$data);return n||r||(e in t.$data?Me(t,e):Ce(t,e)),n||!r}},Ee={get:function(t,e){return"string"!==typeof e||e in t||(e in t.$data?Me(t,e):Ce(t,e)),t[e]}};_e=function(t){if(Le){var e=t.$options,n=e.render&&e.render._withStripped?Ee:Fe;t._renderProxy=new Proxy(t,n)}else t._renderProxy=t};var Re,je,Ie=new ct;function ze(t){Ne(t,Ie),Ie.clear()}function Ne(t,e){var n,r,o=Array.isArray(t);if(!(!o&&!l(t)||Object.isFrozen(t)||t instanceof St)){if(t.__ob__){var i=t.__ob__.dep.id;if(e.has(i))return;e.add(i)}if(o){n=t.length;while(n--)Ne(t[n],e)}else{r=Object.keys(t),n=r.length;while(n--)Ne(t[r[n]],e)}}}var We=K&&window.performance;We&&We.mark&&We.measure&&We.clearMarks&&We.clearMeasures&&(Re=function(t){return We.mark(t)},je=function(t,e,n){We.measure(t,e,n),We.clearMarks(e),We.clearMarks(n)});var Be=S((function(t){var e="&"===t.charAt(0);t=e?t.slice(1):t;var n="~"===t.charAt(0);t=n?t.slice(1):t;var r="!"===t.charAt(0);return t=r?t.slice(1):t,{name:t,once:n,capture:r,passive:e}}));function Ve(t,e){function n(){var t=arguments,r=n.fns;if(!Array.isArray(r))return ge(r,null,arguments,e,"v-on handler");for(var o=r.slice(),i=0;i<o.length;i++)ge(o[i],null,t,e,"v-on handler")}return n.fns=t,n}function Ue(t,e,n,o,a,s){var l,c,u,h;for(l in t)c=t[l],u=e[l],h=Be(l),r(c)?ht('Invalid handler for event "'+h.name+'": got '+String(c),s):r(u)?(r(c.fns)&&(c=t[l]=Ve(c,s)),i(h.once)&&(c=t[l]=a(h.name,c,h.capture)),n(h.name,c,h.capture,h.passive,h.params)):c!==u&&(u.fns=c,t[l]=u);for(l in e)r(t[l])&&(h=Be(l),o(h.name,e[l],h.capture))}function He(t,e,n,i){var a=e.options.mpOptions&&e.options.mpOptions.properties;if(r(a))return n;var s=e.options.mpOptions.externalClasses||[],l=t.attrs,c=t.props;if(o(l)||o(c))for(var u in a){var h=O(u),f=qe(n,c,u,h,!0)||qe(n,l,u,h,!1);f&&n[u]&&-1!==s.indexOf(h)&&i[P(n[u])]&&(n[u]=i[P(n[u])])}return n}function Ge(t,e,n,i){var a=e.options.props;if(r(a))return He(t,e,{},i);var s={},l=t.attrs,c=t.props;if(o(l)||o(c))for(var u in a){var h=O(u),f=u.toLowerCase();u!==f&&l&&w(l,f)&&ft('Prop "'+f+'" is passed to component '+dt(n||e)+', but the declared prop name is "'+u+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+h+'" instead of "'+u+'".'),qe(s,c,u,h,!0)||qe(s,l,u,h,!1)}return He(t,e,s,i)}function qe(t,e,n,r,i){if(o(e)){if(w(e,n))return t[n]=e[n],i||delete e[n],!0;if(w(e,r))return t[n]=e[r],i||delete e[r],!0}return!1}function Xe(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}function Je(t){return s(t)?[Tt(t)]:Array.isArray(t)?Ke(t):void 0}function Ye(t){return o(t)&&o(t.text)&&a(t.isComment)}function Ke(t,e){var n,a,l,c,u=[];for(n=0;n<t.length;n++)a=t[n],r(a)||"boolean"===typeof a||(l=u.length-1,c=u[l],Array.isArray(a)?a.length>0&&(a=Ke(a,(e||"")+"_"+n),Ye(a[0])&&Ye(c)&&(u[l]=Tt(c.text+a[0].text),a.shift()),u.push.apply(u,a)):s(a)?Ye(c)?u[l]=Tt(c.text+a):""!==a&&u.push(Tt(a)):Ye(a)&&Ye(c)?u[l]=Tt(c.text+a.text):(i(t._isVList)&&o(a.tag)&&r(a.key)&&o(e)&&(a.key="__vlist"+e+"_"+n+"__"),u.push(a)));return u}function Qe(t){var e=t.$options.provide;e&&(t._provided="function"===typeof e?e.call(t):e)}function Ze(t){var e=tn(t.$options.inject,t);e&&(Dt(!1),Object.keys(e).forEach((function(n){It(t,n,e[n],(function(){ht('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',t)}))})),Dt(!0))}function tn(t,e){if(t){for(var n=Object.create(null),r=ut?Reflect.ownKeys(t):Object.keys(t),o=0;o<r.length;o++){var i=r[o];if("__ob__"!==i){var a=t[i].from,s=e;while(s){if(s._provided&&w(s._provided,a)){n[i]=s._provided[a];break}s=s.$parent}if(!s)if("default"in t[i]){var l=t[i].default;n[i]="function"===typeof l?l.call(e):l}else ht('Injection "'+i+'" not found',e)}}return n}}function en(t,e){if(!t||!t.length)return{};for(var n={},r=0,o=t.length;r<o;r++){var i=t[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==e&&i.fnContext!==e||!a||null==a.slot)i.asyncMeta&&i.asyncMeta.data&&"page"===i.asyncMeta.data.slot?(n["page"]||(n["page"]=[])).push(i):(n.default||(n.default=[])).push(i);else{var s=a.slot,l=n[s]||(n[s]=[]);"template"===i.tag?l.push.apply(l,i.children||[]):l.push(i)}}for(var c in n)n[c].every(nn)&&delete n[c];return n}function nn(t){return t.isComment&&!t.asyncFactory||" "===t.text}function rn(t,e,r){var o,i=Object.keys(e).length>0,a=t?!!t.$stable:!i,s=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(a&&r&&r!==n&&s===r.$key&&!i&&!r.$hasNormal)return r;for(var l in o={},t)t[l]&&"$"!==l[0]&&(o[l]=on(e,l,t[l]))}else o={};for(var c in e)c in o||(o[c]=an(e,c));return t&&Object.isExtensible(t)&&(t._normalized=o),G(o,"$stable",a),G(o,"$key",s),G(o,"$hasNormal",i),o}function on(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({});return t=t&&"object"===typeof t&&!Array.isArray(t)?[t]:Je(t),t&&(0===t.length||1===t.length&&t[0].isComment)?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function an(t,e){return function(){return t[e]}}function sn(t,e){var n,r,i,a,s;if(Array.isArray(t)||"string"===typeof t)for(n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=e(t[r],r,r,r);else if("number"===typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r,r,r);else if(l(t))if(ut&&t[Symbol.iterator]){n=[];var c=t[Symbol.iterator](),u=c.next();while(!u.done)n.push(e(u.value,n.length,r++,r)),u=c.next()}else for(a=Object.keys(t),n=new Array(a.length),r=0,i=a.length;r<i;r++)s=a[r],n[r]=e(t[s],s,r,r);return o(n)||(n=[]),n._isVList=!0,n}function ln(t,e,n,r){var o,i=this.$scopedSlots[t];i?(n=n||{},r&&(l(r)||ht("slot v-bind without argument expects an Object",this),n=D(D({},r),n)),o=i(n,this,n._i)||e):o=this.$slots[t]||e;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},o):o}function cn(t){return ne(this.$options,"filters",t,!0)||j}function un(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function hn(t,e,n,r,o){var i=V.keyCodes[e]||n;return o&&r&&!V.keyCodes[e]?un(o,r):i?un(i,t):r?O(r)!==e:void 0}function fn(t,e,n,r,o){if(n)if(l(n)){var i;Array.isArray(n)&&(n=F(n));var a=function(a){if("class"===a||"style"===a||m(a))i=t;else{var s=t.attrs&&t.attrs.type;i=r||V.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var l=P(a),c=O(a);if(!(l in i)&&!(c in i)&&(i[a]=n[a],o)){var u=t.on||(t.on={});u["update:"+a]=function(t){n[a]=t}}};for(var s in n)a(s)}else ht("v-bind without argument expects an Object or Array value",this);return t}function pn(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e?r:(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),vn(r,"__static__"+t,!1),r)}function dn(t,e,n){return vn(t,"__once__"+e+(n?"_"+n:""),!0),t}function vn(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!==typeof t[r]&&gn(t[r],e+"_"+r,n);else gn(t,e,n)}function gn(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function yn(t,e){if(e)if(h(e)){var n=t.on=t.on?D({},t.on):{};for(var r in e){var o=n[r],i=e[r];n[r]=o?[].concat(o,i):i}}else ht("v-on without argument expects an Object value",this);return t}function xn(t,e,n,r){e=e||{$stable:!n};for(var o=0;o<t.length;o++){var i=t[o];Array.isArray(i)?xn(i,e,n):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function mn(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];"string"===typeof r&&r?t[e[n]]=e[n+1]:""!==r&&null!==r&&ht("Invalid value for dynamic directive argument (expected string or null): "+r,this)}return t}function _n(t,e){return"string"===typeof t?e+t:t}function bn(t){t._o=dn,t._n=g,t._s=v,t._l=sn,t._t=ln,t._q=I,t._i=z,t._m=pn,t._f=cn,t._k=hn,t._b=fn,t._v=Tt,t._e=Pt,t._u=xn,t._g=yn,t._d=mn,t._p=_n}function wn(t,e,r,o,a){var s,l=this,c=a.options;w(o,"_uid")?(s=Object.create(o),s._original=o):(s=o,o=o._original);var u=i(c._compiled),h=!u;this.data=t,this.props=e,this.children=r,this.parent=o,this.listeners=t.on||n,this.injections=tn(c.inject,o),this.slots=function(){return l.$slots||rn(t.scopedSlots,l.$slots=en(r,o)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return rn(t.scopedSlots,this.slots())}}),u&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=rn(t.scopedSlots,this.$slots)),c._scopeId?this._c=function(t,e,n,r){var i=En(s,t,e,n,r,h);return i&&!Array.isArray(i)&&(i.fnScopeId=c._scopeId,i.fnContext=o),i}:this._c=function(t,e,n,r){return En(s,t,e,n,r,h)}}function Sn(t,e,r,i,a){var s=t.options,l={},c=s.props;if(o(c))for(var u in c)l[u]=re(u,c,e||n);else o(r.attrs)&&Pn(l,r.attrs),o(r.props)&&Pn(l,r.props);var h=new wn(r,l,a,i,t),f=s.render.call(null,h._c,h);if(f instanceof St)return An(f,r,h.parent,s,h);if(Array.isArray(f)){for(var p=Je(f)||[],d=new Array(p.length),v=0;v<p.length;v++)d[v]=An(p[v],r,h.parent,s,h);return d}}function An(t,e,n,r,o){var i=kt(t);return i.fnContext=n,i.fnOptions=r,(i.devtoolsMeta=i.devtoolsMeta||{}).renderContext=o,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function Pn(t,e){for(var n in e)t[P(n)]=e[n]}bn(wn.prototype);var Tn={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;Tn.prepatch(n,n)}else{var r=t.componentInstance=$n(t,tr);r.$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var n=e.componentOptions,r=e.componentInstance=t.componentInstance;ir(r,n.propsData,n.listeners,e,n.children)},insert:function(t){var e=t.context,n=t.componentInstance;n._isMounted||(cr(n,"onServiceCreated"),cr(n,"onServiceAttached"),n._isMounted=!0,cr(n,"mounted")),t.data.keepAlive&&(e._isMounted?Sr(n):sr(n,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?lr(e,!0):e.$destroy())}},kn=Object.keys(Tn);function On(t,e,n,a,s){if(!r(t)){var c=n.$options._base;if(l(t)&&(t=c.extend(t)),"function"===typeof t){var u;if(r(t.cid)&&(u=t,t=Hn(u,c),void 0===t))return Un(u,e,n,a,s);e=e||{},Gr(t),o(e.model)&&Ln(t.options,e);var h=Ge(e,t,s,n);if(i(t.options.functional))return Sn(t,h,e,n,a);var f=e.on;if(e.on=e.nativeOn,i(t.options.abstract)){var p=e.slot;e={},p&&(e.slot=p)}Cn(e);var d=t.options.name||s,v=new St("vue-component-"+t.cid+(d?"-"+d:""),e,void 0,void 0,void 0,n,{Ctor:t,propsData:h,listeners:f,tag:s,children:a},u);return v}ht("Invalid Component definition: "+String(t),n)}}function $n(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},r=t.data.inlineTemplate;return o(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns),new t.componentOptions.Ctor(n)}function Cn(t){for(var e=t.hook||(t.hook={}),n=0;n<kn.length;n++){var r=kn[n],o=e[r],i=Tn[r];o===i||o&&o._merged||(e[r]=o?Mn(i,o):i)}}function Mn(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}function Ln(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.attrs||(e.attrs={}))[n]=e.model.value;var i=e.on||(e.on={}),a=i[r],s=e.model.callback;o(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(i[r]=[s].concat(a)):i[r]=s}var Dn=1,Fn=2;function En(t,e,n,r,o,a){return(Array.isArray(n)||s(n))&&(o=r,r=n,n=void 0),i(a)&&(o=Fn),Rn(t,e,n,r,o)}function Rn(t,e,n,r,i){if(o(n)&&o(n.__ob__))return ht("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",t),Pt();if(o(n)&&o(n.is)&&(e=n.is),!e)return Pt();var a,l,c;(o(n)&&o(n.key)&&!s(n.key)&&ht("Avoid using non-primitive value as key, use string/number value instead.",t),Array.isArray(r)&&"function"===typeof r[0]&&(n=n||{},n.scopedSlots={default:r[0]},r.length=0),i===Fn?r=Je(r):i===Dn&&(r=Xe(r)),"string"===typeof e)?(l=t.$vnode&&t.$vnode.ns||V.getTagNamespace(e),V.isReservedTag(e)?(o(n)&&o(n.nativeOn)&&ht("The .native modifier for v-on is only valid on components but it was used on <"+e+">.",t),a=new St(V.parsePlatformTagName(e),n,r,void 0,void 0,t)):a=n&&n.pre||!o(c=ne(t.$options,"components",e))?new St(e,n,r,void 0,void 0,t):On(c,n,t,r,e)):a=On(e,n,t,r);return Array.isArray(a)?a:o(a)?(o(l)&&jn(a,l),o(n)&&In(n),a):Pt()}function jn(t,e,n){if(t.ns=e,"foreignObject"===t.tag&&(e=void 0,n=!0),o(t.children))for(var a=0,s=t.children.length;a<s;a++){var l=t.children[a];o(l.tag)&&(r(l.ns)||i(n)&&"svg"!==l.tag)&&jn(l,e,n)}}function In(t){l(t.style)&&ze(t.style),l(t.class)&&ze(t.class)}function zn(t){t._vnode=null,t._staticTrees=null;var e=t.$options,r=t.$vnode=e._parentVnode,o=r&&r.context;t.$slots=en(e._renderChildren,o),t.$scopedSlots=n,t._c=function(e,n,r,o){return En(t,e,n,r,o,!1)},t.$createElement=function(e,n,r,o){return En(t,e,n,r,o,!0)};var i=r&&r.data;It(t,"$attrs",i&&i.attrs||n,(function(){!er&&ht("$attrs is readonly.",t)}),!0),It(t,"$listeners",e._parentListeners||n,(function(){!er&&ht("$listeners is readonly.",t)}),!0)}var Nn,Wn=null;function Bn(t){bn(t.prototype),t.prototype.$nextTick=function(t){return Oe(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,r=n.render,o=n._parentVnode;o&&(e.$scopedSlots=rn(o.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=o;try{Wn=e,t=r.call(e._renderProxy,e.$createElement)}catch(Ro){if(ve(Ro,e,"render"),e.$options.renderError)try{t=e.$options.renderError.call(e._renderProxy,e.$createElement,Ro)}catch(Ro){ve(Ro,e,"renderError"),t=e._vnode}else t=e._vnode}finally{Wn=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof St||(Array.isArray(t)&&ht("Multiple root nodes returned from render function. Render function should return a single root node.",e),t=Pt()),t.parent=o,t}}function Vn(t,e){return(t.__esModule||ut&&"Module"===t[Symbol.toStringTag])&&(t=t.default),l(t)?e.extend(t):t}function Un(t,e,n,r,o){var i=Pt();return i.asyncFactory=t,i.asyncMeta={data:e,context:n,children:r,tag:o},i}function Hn(t,e){if(i(t.error)&&o(t.errorComp))return t.errorComp;if(o(t.resolved))return t.resolved;var n=Wn;if(n&&o(t.owners)&&-1===t.owners.indexOf(n)&&t.owners.push(n),i(t.loading)&&o(t.loadingComp))return t.loadingComp;if(n&&!o(t.owners)){var a=t.owners=[n],s=!0,c=null,u=null;n.$on("hook:destroyed",(function(){return _(a,n)}));var h=function(t){for(var e=0,n=a.length;e<n;e++)a[e].$forceUpdate();t&&(a.length=0,null!==c&&(clearTimeout(c),c=null),null!==u&&(clearTimeout(u),u=null))},f=N((function(n){t.resolved=Vn(n,e),s?a.length=0:h(!0)})),p=N((function(e){ht("Failed to resolve async component: "+String(t)+(e?"\nReason: "+e:"")),o(t.errorComp)&&(t.error=!0,h(!0))})),v=t(f,p);return l(v)&&(d(v)?r(t.resolved)&&v.then(f,p):d(v.component)&&(v.component.then(f,p),o(v.error)&&(t.errorComp=Vn(v.error,e)),o(v.loading)&&(t.loadingComp=Vn(v.loading,e),0===v.delay?t.loading=!0:c=setTimeout((function(){c=null,r(t.resolved)&&r(t.error)&&(t.loading=!0,h(!1))}),v.delay||200)),o(v.timeout)&&(u=setTimeout((function(){u=null,r(t.resolved)&&p("timeout ("+v.timeout+"ms)")}),v.timeout)))),s=!1,t.loading?t.loadingComp:t.resolved}}function Gn(t){return t.isComment&&t.asyncFactory}function qn(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(o(n)&&(o(n.componentOptions)||Gn(n)))return n}}function Xn(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&Qn(t,e)}function Jn(t,e){Nn.$on(t,e)}function Yn(t,e){Nn.$off(t,e)}function Kn(t,e){var n=Nn;return function r(){var o=e.apply(null,arguments);null!==o&&n.$off(t,r)}}function Qn(t,e,n){Nn=t,Ue(e,n||{},Jn,Yn,Kn,t),Nn=void 0}function Zn(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(Array.isArray(t))for(var o=0,i=t.length;o<i;o++)r.$on(t[o],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,o=t.length;r<o;r++)n.$off(t[r],e);return n}var i,a=n._events[t];if(!a)return n;if(!e)return n._events[t]=null,n;var s=a.length;while(s--)if(i=a[s],i===e||i.fn===e){a.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this,n=t.toLowerCase();n!==t&&e._events[n]&&ft('Event "'+n+'" is emitted in component '+dt(e)+' but the handler is registered for "'+t+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+O(t)+'" instead of "'+t+'".');var r=e._events[t];if(r){r=r.length>1?L(r):r;for(var o=L(arguments,1),i='event handler for "'+t+'"',a=0,s=r.length;a<s;a++)ge(r[a],e,o,e,i)}return e}}var tr=null,er=!1;function nr(t){var e=tr;return tr=t,function(){tr=e}}function rr(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){while(n.$options.abstract&&n.$parent)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}function or(t){t.prototype._update=function(t,e){var n=this,r=n.$el,o=n._vnode,i=nr(n);n._vnode=t,n.$el=o?n.__patch__(o,t):n.__patch__(n.$el,t,e,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){var t=this;t._watcher&&t._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){cr(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||_(e.$children,t),t._watcher&&t._watcher.teardown();var n=t._watchers.length;while(n--)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),cr(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}function ir(t,e,r,o,i){er=!0;var a=o.data.scopedSlots,s=t.$scopedSlots,l=!!(a&&!a.$stable||s!==n&&!s.$stable||a&&t.$scopedSlots.$key!==a.$key),c=!!(i||t.$options._renderChildren||l);if(t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o),t.$options._renderChildren=i,t.$attrs=o.data.attrs||n,t.$listeners=r||n,e&&t.$options.props){Dt(!1);for(var u=t._props,h=t.$options._propKeys||[],f=0;f<h.length;f++){var p=h[f],d=t.$options.props;u[p]=re(p,d,e,t)}Dt(!0),t.$options.propsData=e}t._$updateProperties&&t._$updateProperties(t),r=r||n;var v=t.$options._parentListeners;t.$options._parentListeners=r,Qn(t,r,v),c&&(t.$slots=en(i,o.context),t.$forceUpdate()),er=!1}function ar(t){while(t&&(t=t.$parent))if(t._inactive)return!0;return!1}function sr(t,e){if(e){if(t._directInactive=!1,ar(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)sr(t.$children[n]);cr(t,"activated")}}function lr(t,e){if((!e||(t._directInactive=!0,!ar(t)))&&!t._inactive){t._inactive=!0;for(var n=0;n<t.$children.length;n++)lr(t.$children[n]);cr(t,"deactivated")}}function cr(t,e){bt();var n=t.$options[e],r=e+" hook";if(n)for(var o=0,i=n.length;o<i;o++)ge(n[o],t,null,t,r);t._hasHookEvent&&t.$emit("hook:"+e),wt()}var ur=100,hr=[],fr=[],pr={},dr={},vr=!1,gr=!1,yr=0;function xr(){yr=hr.length=fr.length=0,pr={},dr={},vr=gr=!1}var mr=Date.now;if(K&&!et){var _r=window.performance;_r&&"function"===typeof _r.now&&mr()>document.createEvent("Event").timeStamp&&(mr=function(){return _r.now()})}function br(){var t,e;for(mr(),gr=!0,hr.sort((function(t,e){return t.id-e.id})),yr=0;yr<hr.length;yr++)if(t=hr[yr],t.before&&t.before(),e=t.id,pr[e]=null,t.run(),null!=pr[e]&&(dr[e]=(dr[e]||0)+1,dr[e]>ur)){ht("You may have an infinite update loop "+(t.user?'in watcher with expression "'+t.expression+'"':"in a component render function."),t.vm);break}var n=fr.slice(),r=hr.slice();xr(),Ar(n),wr(r),st&&V.devtools&&st.emit("flush")}function wr(t){var e=t.length;while(e--){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&cr(r,"updated")}}function Sr(t){t._inactive=!1,fr.push(t)}function Ar(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,sr(t[e],!0)}function Pr(t){var e=t.id;if(null==pr[e]){if(pr[e]=!0,gr){var n=hr.length-1;while(n>yr&&hr[n].id>t.id)n--;hr.splice(n+1,0,t)}else hr.push(t);if(!vr){if(vr=!0,!V.async)return void br();Oe(br)}}}var Tr=0,kr=function(t,e,n,r,o){this.vm=t,o&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++Tr,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ct,this.newDepIds=new ct,this.expression=e.toString(),"function"===typeof e?this.getter=e:(this.getter=X(e),this.getter||(this.getter=E,ht('Failed watching path: "'+e+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',t))),this.value=this.lazy?void 0:this.get()};kr.prototype.get=function(){var t;bt(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(Ro){if(!this.user)throw Ro;ve(Ro,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ze(t),wt(),this.cleanupDeps()}return t},kr.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},kr.prototype.cleanupDeps=function(){var t=this.deps.length;while(t--){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},kr.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():Pr(this)},kr.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||l(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(Ro){ve(Ro,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},kr.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},kr.prototype.depend=function(){var t=this.deps.length;while(t--)this.deps[t].depend()},kr.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||_(this.vm._watchers,this);var t=this.deps.length;while(t--)this.deps[t].removeSub(this);this.active=!1}};var Or={enumerable:!0,configurable:!0,get:E,set:E};function $r(t,e,n){Or.get=function(){return this[e][n]},Or.set=function(t){this[e][n]=t},Object.defineProperty(t,n,Or)}function Cr(t){t._watchers=[];var e=t.$options;e.props&&Mr(t,e.props),e.methods&&zr(t,e.methods),e.data?Lr(t):jt(t._data={},!0),e.computed&&Er(t,e.computed),e.watch&&e.watch!==ot&&Nr(t,e.watch)}function Mr(t,e){var n=t.$options.propsData||{},r=t._props={},o=t.$options._propKeys=[],i=!t.$parent;i||Dt(!1);var a=function(a){o.push(a);var s=re(a,e,n,t),l=O(a);(m(l)||V.isReservedAttr(l))&&ht('"'+l+'" is a reserved attribute and cannot be used as component prop.',t),It(r,a,s,(function(){if(!i&&!er){if("mp-baidu"===t.mpHost)return;if("value"===a&&Array.isArray(t.$options.behaviors)&&-1!==t.$options.behaviors.indexOf("uni://form-field"))return;if(t._getFormData)return;var e=t.$parent;while(e){if(e.__next_tick_pending)return;e=e.$parent}ht("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+a+'"',t)}})),a in t||$r(t,"_props",a)};for(var s in e)a(s);Dt(!0)}function Lr(t){var e=t.$options.data;e=t._data="function"===typeof e?Dr(e,t):e||{},h(e)||(e={},ht("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",t));var n=Object.keys(e),r=t.$options.props,o=t.$options.methods,i=n.length;while(i--){var a=n[i];o&&w(o,a)&&ht('Method "'+a+'" has already been defined as a data property.',t),r&&w(r,a)?ht('The data property "'+a+'" is already declared as a prop. Use prop default value instead.',t):H(a)||$r(t,"_data",a)}jt(e,!0)}function Dr(t,e){bt();try{return t.call(e,e)}catch(Ro){return ve(Ro,e,"data()"),{}}finally{wt()}}var Fr={lazy:!0};function Er(t,e){var n=t._computedWatchers=Object.create(null),r=at();for(var o in e){var i=e[o],a="function"===typeof i?i:i.get;null==a&&ht('Getter is missing for computed property "'+o+'".',t),r||(n[o]=new kr(t,a||E,E,Fr)),o in t?o in t.$data?ht('The computed property "'+o+'" is already defined in data.',t):t.$options.props&&o in t.$options.props&&ht('The computed property "'+o+'" is already defined as a prop.',t):Rr(t,o,i)}}function Rr(t,e,n){var r=!at();"function"===typeof n?(Or.get=r?jr(e):Ir(n),Or.set=E):(Or.get=n.get?r&&!1!==n.cache?jr(e):Ir(n.get):E,Or.set=n.set||E),Or.set===E&&(Or.set=function(){ht('Computed property "'+e+'" was assigned to but it has no setter.',this)}),Object.defineProperty(t,e,Or)}function jr(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),_t.SharedObject.target&&e.depend(),e.value}}function Ir(t){return function(){return t.call(this,this)}}function zr(t,e){var n=t.$options.props;for(var r in e)"function"!==typeof e[r]&&ht('Method "'+r+'" has type "'+typeof e[r]+'" in the component definition. Did you reference the function correctly?',t),n&&w(n,r)&&ht('Method "'+r+'" has already been defined as a prop.',t),r in t&&H(r)&&ht('Method "'+r+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),t[r]="function"!==typeof e[r]?E:M(e[r],t)}function Nr(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)Wr(t,n,r[o]);else Wr(t,n,r)}}function Wr(t,e,n,r){return h(n)&&(r=n,n=n.handler),"string"===typeof n&&(n=t[n]),t.$watch(e,n,r)}function Br(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};e.set=function(){ht("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){ht("$props is readonly.",this)},Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=zt,t.prototype.$delete=Nt,t.prototype.$watch=function(t,e,n){var r=this;if(h(e))return Wr(r,t,e,n);n=n||{},n.user=!0;var o=new kr(r,t,e,n);if(n.immediate)try{e.call(r,o.value)}catch(i){ve(i,r,'callback for immediate watcher "'+o.expression+'"')}return function(){o.teardown()}}}var Vr=0;function Ur(t){t.prototype._init=function(t){var e,n,r=this;r._uid=Vr++,V.performance&&Re&&(e="vue-perf-start:"+r._uid,n="vue-perf-end:"+r._uid,Re(e)),r._isVue=!0,t&&t._isComponent?Hr(r,t):r.$options=ee(Gr(r.constructor),t||{},r),_e(r),r._self=r,rr(r),Xn(r),zn(r),cr(r,"beforeCreate"),!r._$fallback&&Ze(r),Cr(r),!r._$fallback&&Qe(r),!r._$fallback&&cr(r,"created"),V.performance&&Re&&(r._name=dt(r,!1),Re(n),je("vue "+r._name+" init",e,n)),r.$options.el&&r.$mount(r.$options.el)}}function Hr(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}function Gr(t){var e=t.options;if(t.super){var n=Gr(t.super),r=t.superOptions;if(n!==r){t.superOptions=n;var o=qr(t);o&&D(t.extendOptions,o),e=t.options=ee(n,t.extendOptions),e.name&&(e.components[e.name]=t)}}return e}function qr(t){var e,n=t.options,r=t.sealedOptions;for(var o in n)n[o]!==r[o]&&(e||(e={}),e[o]=n[o]);return e}function Xr(t){this instanceof Xr||ht("Vue is a constructor and should be called with the `new` keyword"),this._init(t)}function Jr(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=L(arguments,1);return n.unshift(this),"function"===typeof t.install?t.install.apply(t,n):"function"===typeof t&&t.apply(null,n),e.push(t),this}}function Yr(t){t.mixin=function(t){return this.options=ee(this.options,t),this}}function Kr(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,o=t._Ctor||(t._Ctor={});if(o[r])return o[r];var i=t.name||n.options.name;i&&Yt(i);var a=function(t){this._init(t)};return a.prototype=Object.create(n.prototype),a.prototype.constructor=a,a.cid=e++,a.options=ee(n.options,t),a["super"]=n,a.options.props&&Qr(a),a.options.computed&&Zr(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,W.forEach((function(t){a[t]=n[t]})),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=D({},a.options),o[r]=a,a}}function Qr(t){var e=t.options.props;for(var n in e)$r(t.prototype,"_props",n)}function Zr(t){var e=t.options.computed;for(var n in e)Rr(t.prototype,n,e[n])}function to(t){W.forEach((function(e){t[e]=function(t,n){return n?("component"===e&&Yt(t),"component"===e&&h(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"===typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}}))}function eo(t){return t&&(t.Ctor.options.name||t.tag)}function no(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"===typeof t?t.split(",").indexOf(e)>-1:!!f(t)&&t.test(e)}function ro(t,e){var n=t.cache,r=t.keys,o=t._vnode;for(var i in n){var a=n[i];if(a){var s=eo(a.componentOptions);s&&!e(s)&&oo(n,i,r,o)}}}function oo(t,e,n,r){var o=t[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),t[e]=null,_(n,e)}Ur(Xr),Br(Xr),Zn(Xr),or(Xr),Bn(Xr);var io=[String,RegExp,Array],ao={name:"keep-alive",abstract:!0,props:{include:io,exclude:io,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)oo(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",(function(e){ro(t,(function(t){return no(e,t)}))})),this.$watch("exclude",(function(e){ro(t,(function(t){return!no(e,t)}))}))},render:function(){var t=this.$slots.default,e=qn(t),n=e&&e.componentOptions;if(n){var r=eo(n),o=this,i=o.include,a=o.exclude;if(i&&(!r||!no(i,r))||a&&r&&no(a,r))return e;var s=this,l=s.cache,c=s.keys,u=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;l[u]?(e.componentInstance=l[u].componentInstance,_(c,u),c.push(u)):(l[u]=e,c.push(u),this.max&&c.length>parseInt(this.max)&&oo(l,c[0],c,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}},so={KeepAlive:ao};function lo(t){var e={get:function(){return V},set:function(){ht("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(t,"config",e),t.util={warn:ht,extend:D,mergeOptions:ee,defineReactive:It},t.set=zt,t.delete=Nt,t.nextTick=Oe,t.observable=function(t){return jt(t),t},t.options=Object.create(null),W.forEach((function(e){t.options[e+"s"]=Object.create(null)})),t.options._base=t,D(t.options.components,so),Jr(t),Yr(t),Kr(t),to(t)}lo(Xr),Object.defineProperty(Xr.prototype,"$isServer",{get:at}),Object.defineProperty(Xr.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Xr,"FunctionalRenderContext",{value:wn}),Xr.version="2.6.11";var co="[object Array]",uo="[object Object]";function ho(t,e){var n={};return fo(t,e),po(t,e,"",n),n}function fo(t,e){if(t!==e){var n=go(t),r=go(e);if(n==uo&&r==uo){if(Object.keys(t).length>=Object.keys(e).length)for(var o in e){var i=t[o];void 0===i?t[o]=null:fo(i,e[o])}}else n==co&&r==co&&t.length>=e.length&&e.forEach((function(e,n){fo(t[n],e)}))}}function po(t,e,n,r){if(t!==e){var o=go(t),i=go(e);if(o==uo)if(i!=uo||Object.keys(t).length<Object.keys(e).length)vo(r,n,t);else{var a=function(o){var i=t[o],a=e[o],s=go(i),l=go(a);if(s!=co&&s!=uo)i!=e[o]&&vo(r,(""==n?"":n+".")+o,i);else if(s==co)l!=co?vo(r,(""==n?"":n+".")+o,i):i.length<a.length?vo(r,(""==n?"":n+".")+o,i):i.forEach((function(t,e){po(t,a[e],(""==n?"":n+".")+o+"["+e+"]",r)}));else if(s==uo)if(l!=uo||Object.keys(i).length<Object.keys(a).length)vo(r,(""==n?"":n+".")+o,i);else for(var c in i)po(i[c],a[c],(""==n?"":n+".")+o+"."+c,r)};for(var s in t)a(s)}else o==co?i!=co?vo(r,n,t):t.length<e.length?vo(r,n,t):t.forEach((function(t,o){po(t,e[o],n+"["+o+"]",r)})):vo(r,n,t)}}function vo(t,e,n){t[e]=n}function go(t){return Object.prototype.toString.call(t)}function yo(t){if(t.__next_tick_callbacks&&t.__next_tick_callbacks.length){if(Object({NODE_ENV:"development",VUE_APP_PLATFORM:"mp-qq",BASE_URL:"/"}).VUE_APP_DEBUG){var e=t.$scope;console.log("["+ +new Date+"]["+(e.is||e.route)+"]["+t._uid+"]:flushCallbacks["+t.__next_tick_callbacks.length+"]")}var n=t.__next_tick_callbacks.slice(0);t.__next_tick_callbacks.length=0;for(var r=0;r<n.length;r++)n[r]()}}function xo(t){return hr.find((function(e){return t._watcher===e}))}function mo(t,e){if(!t.__next_tick_pending&&!xo(t)){if(Object({NODE_ENV:"development",VUE_APP_PLATFORM:"mp-qq",BASE_URL:"/"}).VUE_APP_DEBUG){var n=t.$scope;console.log("["+ +new Date+"]["+(n.is||n.route)+"]["+t._uid+"]:nextVueTick")}return Oe(e,t)}if(Object({NODE_ENV:"development",VUE_APP_PLATFORM:"mp-qq",BASE_URL:"/"}).VUE_APP_DEBUG){var r=t.$scope;console.log("["+ +new Date+"]["+(r.is||r.route)+"]["+t._uid+"]:nextMPTick")}var o;if(t.__next_tick_callbacks||(t.__next_tick_callbacks=[]),t.__next_tick_callbacks.push((function(){if(e)try{e.call(t)}catch(Ro){ve(Ro,t,"nextTick")}else o&&o(t)})),!e&&"undefined"!==typeof Promise)return new Promise((function(t){o=t}))}function _o(t){var e=Object.create(null),n=[].concat(Object.keys(t._data||{}),Object.keys(t._computedWatchers||{}));n.reduce((function(e,n){return e[n]=t[n],e}),e);var r=t.__secret_vfa_state__&&t.__secret_vfa_state__.rawBindings;return r&&Object.keys(r).forEach((function(n){e[n]=t[n]})),Object.assign(e,t.$mp.data||{}),Array.isArray(t.$options.behaviors)&&-1!==t.$options.behaviors.indexOf("uni://form-field")&&(e["name"]=t.name,e["value"]=t.value),JSON.parse(JSON.stringify(e))}var bo=function(t,e){var n=this;if(null!==e&&("page"===this.mpType||"component"===this.mpType)){var r=this.$scope,o=Object.create(null);try{o=_o(this)}catch(s){console.error(s)}o.__webviewId__=r.data.__webviewId__;var i=Object.create(null);Object.keys(o).forEach((function(t){i[t]=r.data[t]}));var a=!1===this.$shouldDiffData?o:ho(o,i);Object.keys(a).length?(Object({NODE_ENV:"development",VUE_APP_PLATFORM:"mp-qq",BASE_URL:"/"}).VUE_APP_DEBUG&&console.log("["+ +new Date+"]["+(r.is||r.route)+"]["+this._uid+"]差量更新",JSON.stringify(a)),this.__next_tick_pending=!0,r.setData(a,(function(){n.__next_tick_pending=!1,yo(n)}))):yo(this)}};function wo(){}function So(t,e,n){if(!t.mpType)return t;"app"===t.mpType&&(t.$options.render=wo),t.$options.render||(t.$options.render=wo,t.$options.template&&"#"!==t.$options.template.charAt(0)||t.$options.el||e?ht("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",t):ht("Failed to mount component: template or render function not defined.",t)),!t._$fallback&&cr(t,"beforeMount");var r=function(){t._update(t._render(),n)};return new kr(t,r,E,{before:function(){t._isMounted&&!t._isDestroyed&&cr(t,"beforeUpdate")}},!0),n=!1,t}function Ao(t,e){return o(t)||o(e)?Po(t,To(e)):""}function Po(t,e){return t?e?t+" "+e:t:e||""}function To(t){return Array.isArray(t)?ko(t):l(t)?Oo(t):"string"===typeof t?t:""}function ko(t){for(var e,n="",r=0,i=t.length;r<i;r++)o(e=To(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}function Oo(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}var $o=S((function(t){var e={},n=/;(?![^(]*\))/g,r=/:(.+)/;return t.split(n).forEach((function(t){if(t){var n=t.split(r);n.length>1&&(e[n[0].trim()]=n[1].trim())}})),e}));function Co(t){return Array.isArray(t)?F(t):"string"===typeof t?$o(t):t}var Mo=["createSelectorQuery","createIntersectionObserver","selectAllComponents","selectComponent"];function Lo(t,e){var n=e.split("."),r=n[0];return 0===r.indexOf("__$n")&&(r=parseInt(r.replace("__$n",""))),1===n.length?t[r]:Lo(t[r],n.slice(1).join("."))}function Do(t){t.config.errorHandler=function(e,n,r){t.util.warn("Error in "+r+': "'+e.toString()+'"',n),console.error(e);var o=getApp();o&&o.onError&&o.onError(e)};var e=t.prototype.$emit;t.prototype.$emit=function(t){return this.$scope&&t&&this.$scope["triggerEvent"](t,{__args__:L(arguments,1)}),e.apply(this,arguments)},t.prototype.$nextTick=function(t){return mo(this,t)},Mo.forEach((function(e){t.prototype[e]=function(t){return this.$scope&&this.$scope[e]?this.$scope[e](t):"undefined"!==typeof my?"createSelectorQuery"===e?my.createSelectorQuery(t):"createIntersectionObserver"===e?my.createIntersectionObserver(t):void 0:void 0}})),t.prototype.__init_provide=Qe,t.prototype.__init_injections=Ze,t.prototype.__call_hook=function(t,e){var n=this;bt();var r,o=n.$options[t],i=t+" hook";if(o)for(var a=0,s=o.length;a<s;a++)r=ge(o[a],n,e?[e]:null,n,i);return n._hasHookEvent&&n.$emit("hook:"+t,e),wt(),r},t.prototype.__set_model=function(t,e,n,r){Array.isArray(r)&&(-1!==r.indexOf("trim")&&(n=n.trim()),-1!==r.indexOf("number")&&(n=this._n(n))),t||(t=this),t[e]=n},t.prototype.__set_sync=function(t,e,n){t||(t=this),t[e]=n},t.prototype.__get_orig=function(t){return h(t)&&t["$orig"]||t},t.prototype.__get_value=function(t,e){return Lo(e||this,t)},t.prototype.__get_class=function(t,e){return Ao(e,t)},t.prototype.__get_style=function(t,e){if(!t&&!e)return"";var n=Co(t),r=e?D(e,n):n;return Object.keys(r).map((function(t){return O(t)+":"+r[t]})).join(";")},t.prototype.__map=function(t,e){var n,r,o,i,a;if(Array.isArray(t)){for(n=new Array(t.length),r=0,o=t.length;r<o;r++)n[r]=e(t[r],r);return n}if(l(t)){for(i=Object.keys(t),n=Object.create(null),r=0,o=i.length;r<o;r++)a=i[r],n[a]=e(t[a],a,r);return n}if("number"===typeof t){for(n=new Array(t),r=0,o=t;r<o;r++)n[r]=e(r,r);return n}return[]}}var Fo=["onLaunch","onShow","onHide","onUniNViewMessage","onPageNotFound","onThemeChange","onError","onUnhandledRejection","onLoad","onReady","onUnload","onPullDownRefresh","onReachBottom","onTabItemTap","onAddToFavorites","onShareTimeline","onShareAppMessage","onResize","onPageScroll","onNavigationBarButtonTap","onBackPress","onNavigationBarSearchInputChanged","onNavigationBarSearchInputConfirmed","onNavigationBarSearchInputClicked","onPageShow","onPageHide","onPageResize"];function Eo(t){var e=t.extend;t.extend=function(t){t=t||{};var n=t.methods;return n&&Object.keys(n).forEach((function(e){-1!==Fo.indexOf(e)&&(t[e]=n[e],delete n[e])})),e.call(this,t)};var n=t.config.optionMergeStrategies,r=n.created;Fo.forEach((function(t){n[t]=r})),t.prototype.__lifecycle_hooks__=Fo}Xr.prototype.__patch__=bo,Xr.prototype.$mount=function(t,e){return So(this,t,e)},Eo(Xr),Do(Xr),e["default"]=Xr}.call(this,n(/*! ./../../../../../webpack/buildin/global.js */3))},29:
/*!**********************************************************************************!*\
  !*** D:/g工作/zilv/code/defaultmoban/defaultmoban/components/u-charts/u-charts.js ***!
  \**********************************************************************************/
/*! no static exports found */function(t,e,n){"use strict";(function(e){var n,r={yAxisWidth:15,yAxisSplit:5,xAxisHeight:15,xAxisLineHeight:15,legendHeight:15,yAxisTitleWidth:15,padding:[10,10,10,10],pixelRatio:1,rotate:!1,columePadding:3,fontSize:13,dataPointShape:["circle","circle","circle","circle"],colors:["#1890ff","#2fc25b","#facc14","#f04864","#8543e0","#90ed7d"],pieChartLinePadding:15,pieChartTextPadding:5,xAxisTextPadding:3,titleColor:"#333333",titleFontSize:20,subtitleColor:"#999999",subtitleFontSize:15,toolTipPadding:3,toolTipBackground:"#000000",toolTipOpacity:.7,toolTipLineHeight:20,radarGridCount:3,radarLabelTextMargin:15,gaugeLabelTextMargin:15};n=Object.assign?Object.assign:function(t,e){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var n=Object(t),r=1;r<arguments.length;r++){var o=arguments[r];if(null!=o)for(var i in o)Object.prototype.hasOwnProperty.call(o,i)&&(n[i]=o[i])}return n};var o={toFixed:function(t,e){return e=e||2,this.isFloat(t)&&(t=t.toFixed(e)),t},isFloat:function(t){return t%1!==0},approximatelyEqual:function(t,e){return Math.abs(t-e)<1e-10},isSameSign:function(t,e){return Math.abs(t)===t&&Math.abs(e)===e||Math.abs(t)!==t&&Math.abs(e)!==e},isSameXCoordinateArea:function(t,e){return this.isSameSign(t.x,e.x)},isCollision:function(t,e){t.end={},t.end.x=t.start.x+t.width,t.end.y=t.start.y-t.height,e.end={},e.end.x=e.start.x+e.width,e.end.y=e.start.y-e.height;var n=e.start.x>t.end.x||e.end.x<t.start.x||e.end.y>t.start.y||e.start.y<t.end.y;return!n}};function i(t,e){var n=/^#?([a-f\d])([a-f\d])([a-f\d])$/i,r=t.replace(n,(function(t,e,n,r){return e+e+n+n+r+r})),o=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(r),i=parseInt(o[1],16),a=parseInt(o[2],16),s=parseInt(o[3],16);return"rgba("+i+","+a+","+s+","+e+")"}function a(t,e,n){if(isNaN(t))throw new Error("[uCharts] unvalid series data!");n=n||10,e=e||"upper";var r=1;while(n<1)n*=10,r*=10;t="upper"===e?Math.ceil(t*r):Math.floor(t*r);while(t%n!==0)"upper"===e?t++:t--;return t/r}function s(t,e,n,r){for(var o=[],i=0;i<t.length;i++){for(var a={data:[],name:e[i],color:n[i]},s=0,l=r.length;s<l;s++)if(s<t[i])a.data.push(null);else{for(var c=0,u=0;u<t[i];u++)c+=r[s-u][1];a.data.push(+(c/t[i]).toFixed(3))}o.push(a)}return o}function l(t,e,n,r){var o=r.width-r.area[1]-r.area[3],i=e.eachSpacing*(r.chartData.xAxisData.xAxisPoints.length-1),a=t;return t>=0?a=0:Math.abs(t)>=i-o&&(a=o-i),a}function c(t,e,n){function r(t){while(t<0)t+=2*Math.PI;while(t>2*Math.PI)t-=2*Math.PI;return t}return t=r(t),e=r(e),n=r(n),e>n&&(n+=2*Math.PI,t<e&&(t+=2*Math.PI)),t>=e&&t<=n}function u(t,e,n){var r=t,o=n-e,i=r+(n-o-r)/Math.sqrt(2);i*=-1;var a=(n-o)*(Math.sqrt(2)-1)-(n-o-r)/Math.sqrt(2);return{transX:i,transY:a}}function h(t,e){function n(t,e){return!(!t[e-1]||!t[e+1])&&(t[e].y>=Math.max(t[e-1].y,t[e+1].y)||t[e].y<=Math.min(t[e-1].y,t[e+1].y))}var r=.2,o=.2,i=null,a=null,s=null,l=null;if(e<1?(i=t[0].x+(t[1].x-t[0].x)*r,a=t[0].y+(t[1].y-t[0].y)*r):(i=t[e].x+(t[e+1].x-t[e-1].x)*r,a=t[e].y+(t[e+1].y-t[e-1].y)*r),e>t.length-3){var c=t.length-1;s=t[c].x-(t[c].x-t[c-1].x)*o,l=t[c].y-(t[c].y-t[c-1].y)*o}else s=t[e+1].x-(t[e+2].x-t[e].x)*o,l=t[e+1].y-(t[e+2].y-t[e].y)*o;return n(t,e+1)&&(l=t[e+1].y),n(t,e)&&(a=t[e].y),{ctrA:{x:i,y:a},ctrB:{x:s,y:l}}}function f(t,e,n){return{x:n.x+t,y:n.y-e}}function p(t,e){if(e)while(o.isCollision(t,e))t.start.x>0?t.start.y--:t.start.x<0?t.start.y++:t.start.y>0?t.start.y++:t.start.y--;return t}function d(t,e,n){var r=0;return t.map((function(t){if(t.color||(t.color=n.colors[r],r=(r+1)%n.colors.length),t.type||(t.type=e.type),"undefined"==typeof t.show&&(t.show=!0),t.type||(t.type=e.type),t.pointShape||(t.pointShape="circle"),!t.legendShape)switch(t.type){case"line":t.legendShape="line";break;case"column":t.legendShape="rect";break;case"area":t.legendShape="triangle";break;default:t.legendShape="circle"}return t}))}function v(t,e){var n=0,r=e-t;return n=r>=1e4?1e3:r>=1e3?100:r>=100?10:r>=10?5:r>=1?1:r>=.1?.1:r>=.01?.01:r>=.001?.001:r>=1e-4?1e-4:r>=1e-5?1e-5:1e-6,{minRange:a(t,"lower",n),maxRange:a(e,"upper",n)}}function g(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r.fontSize;t=String(t);t=t.split("");for(var n=0,o=0;o<t.length;o++){var i=t[o];/[a-zA-Z]/.test(i)?n+=7:/[0-9]/.test(i)?n+=5.5:/\./.test(i)?n+=2.7:/-/.test(i)?n+=3.25:/[\u4e00-\u9fa5]/.test(i)?n+=10:/\(|\)/.test(i)?n+=3.73:/\s/.test(i)?n+=2.5:/%/.test(i)?n+=8:n+=10}return n*e/10}function y(t){return t.reduce((function(t,e){return(t.data?t.data:t).concat(e.data)}),[])}function x(t,e){for(var n=new Array(e),r=0;r<n.length;r++)n[r]=0;for(var o=0;o<t.length;o++)for(r=0;r<n.length;r++)n[r]+=t[o].data[r];return t.reduce((function(t,e){return(t.data?t.data:t).concat(e.data).concat(n)}),[])}function m(t,e,n){var r,o;return t.clientX?e.rotate?(o=e.height-t.clientX*e.pixelRatio,r=(t.pageY-n.currentTarget.offsetTop-e.height/e.pixelRatio/2*(e.pixelRatio-1))*e.pixelRatio):(r=t.clientX*e.pixelRatio,o=(t.pageY-n.currentTarget.offsetTop-e.height/e.pixelRatio/2*(e.pixelRatio-1))*e.pixelRatio):e.rotate?(o=e.height-t.x*e.pixelRatio,r=t.y*e.pixelRatio):(r=t.x*e.pixelRatio,o=t.y*e.pixelRatio),{x:r,y:o}}function _(t,e){for(var n=[],r=0;r<t.length;r++){var o=t[r];if(null!==o.data[e]&&"undefined"!==typeof o.data[e]&&o.show){var i={};i.color=o.color,i.type=o.type,i.style=o.style,i.pointShape=o.pointShape,i.disableLegend=o.disableLegend,i.name=o.name,i.show=o.show,i.data=o.format?o.format(o.data[e]):o.data[e],n.push(i)}}return n}function b(t){var e=t.map((function(t){return g(t)}));return Math.max.apply(null,e)}function w(t){for(var e=2*Math.PI/t,n=[],r=0;r<t;r++)n.push(e*r);return n.map((function(t){return-1*t+Math.PI/2}))}function S(t,e,n,r){for(var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},i=t.map((function(t){return{text:o.format?o.format(t,r[n]):t.name+": "+t.data,color:t.color}})),a=[],s={x:0,y:0},l=0;l<e.length;l++){var c=e[l];"undefined"!==typeof c[n]&&null!==c[n]&&a.push(c[n])}for(var u=0;u<a.length;u++){var h=a[u];s.x=Math.round(h.x),s.y+=h.y}return s.y/=a.length,{textList:i,offset:s}}function A(t,e,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},i=t.map((function(t){return{text:o.format?o.format(t,r[n]):t.name+": "+t.data,color:t.color,disableLegend:!!t.disableLegend}}));i=i.filter((function(t){if(!0!==t.disableLegend)return t}));for(var a=[],s={x:0,y:0},l=0;l<e.length;l++){var c=e[l];"undefined"!==typeof c[n]&&null!==c[n]&&a.push(c[n])}for(var u=0;u<a.length;u++){var h=a[u];s.x=Math.round(h.x),s.y+=h.y}return s.y/=a.length,{textList:i,offset:s}}function P(t,e,n,r,o,i){arguments.length>6&&void 0!==arguments[6]&&arguments[6];var a=i.color.upFill,s=i.color.downFill,l=[a,a,s,a],c=[],u={text:o[r],color:null};c.push(u),e.map((function(e){0==r&&e.data[1]-e.data[0]<0?l[1]=s:(e.data[0]<t[r-1][1]&&(l[0]=s),e.data[1]<e.data[0]&&(l[1]=s),e.data[2]>t[r-1][1]&&(l[2]=a),e.data[3]<t[r-1][1]&&(l[3]=s));var n={text:"开盘："+e.data[0],color:l[0]},o={text:"收盘："+e.data[1],color:l[1]},i={text:"最低："+e.data[2],color:l[2]},u={text:"最高："+e.data[3],color:l[3]};c.push(n,o,i,u)}));for(var h=[],f={x:0,y:0},p=0;p<n.length;p++){var d=n[p];"undefined"!==typeof d[r]&&null!==d[r]&&h.push(d[r])}return f.x=Math.round(h[0][0].x),{textList:c,offset:f}}function T(t){for(var e=[],n=0;n<t.length;n++)1==t[n].show&&e.push(t[n]);return e}function k(t,e,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,i=-1,a=0;return"line"!=n.type&&"area"!=n.type||"justify"!=n.xAxis.boundaryGap||(a=n.chartData.eachSpacing/2),C(t,n,r)&&e.forEach((function(e,n){t.x+o+a>e&&(i=n)})),i}function O(t,e,n){var r=-1;if($(t,e.area)){for(var o=e.points,i=-1,a=0,s=o.length;a<s;a++)for(var l=o[a],c=0;c<l.length;c++){i+=1;var u=l[c]["area"];if(t.x>u[0]&&t.x<u[2]&&t.y>u[1]&&t.y<u[3]){r=i;break}}return r}return r}function $(t,e){return t.x>e.start.x&&t.x<e.end.x&&t.y>e.start.y&&t.y<e.end.y}function C(t,e,n){return t.x<e.width-e.area[1]+10&&t.x>e.area[3]-10&&t.y>e.area[0]&&t.y<e.height-e.area[2]}function M(t,e,n){var r=2*Math.PI/n,o=-1;if(R(t,e.center,e.radius)){var i=function(t){return t<0&&(t+=2*Math.PI),t>2*Math.PI&&(t-=2*Math.PI),t},a=Math.atan2(e.center.y-t.y,t.x-e.center.x);a*=-1,a<0&&(a+=2*Math.PI);var s=e.angleList.map((function(t){return t=i(-1*t),t}));s.forEach((function(t,e){var n=i(t-r/2),s=i(t+r/2);s<n&&(s+=2*Math.PI),(a>=n&&a<=s||a+2*Math.PI>=n&&a+2*Math.PI<=s)&&(o=e)}))}return o}function L(t,e){for(var n=-1,r=0,o=e.series.length;r<o;r++){var i=e.series[r];if(t.x>i.funnelArea[0]&&t.x<i.funnelArea[2]&&t.y>i.funnelArea[1]&&t.y<i.funnelArea[3]){n=r;break}}return n}function D(t,e){for(var n=-1,r=0,o=e.length;r<o;r++){var i=e[r];if(t.x>i.area[0]&&t.x<i.area[2]&&t.y>i.area[1]&&t.y<i.area[3]){n=r;break}}return n}function F(t,e){for(var n=-1,r=e.chartData.mapData,o=e.series,i=jt(t.y,t.x,r.bounds,r.scale,r.xoffset,r.yoffset),a=[i.x,i.y],s=0,l=o.length;s<l;s++){var c=o[s].geometry.coordinates;if(zt(a,c)){n=s;break}}return n}function E(t,e){var n=-1;if(R(t,e.center,e.radius)){var r=Math.atan2(e.center.y-t.y,t.x-e.center.x);r=-r;for(var o=0,i=e.series.length;o<i;o++){var a=e.series[o];if(c(r,a._start_,a._start_+2*a._proportion_*Math.PI)){n=o;break}}}return n}function R(t,e,n){return Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)<=Math.pow(n,2)}function j(t){var e=[],n=[];return t.forEach((function(t,r){null!==t?n.push(t):(n.length&&e.push(n),n=[])})),n.length&&e.push(n),e}function I(t,e,n,r){var o={area:{start:{x:0,y:0},end:{x:0,y:0},width:0,height:0,wholeWidth:0,wholeHeight:0},points:[],widthArr:[],heightArr:[]};if(!1===e.legend.show)return r.legendData=o,o;var i=e.legend.padding,a=e.legend.margin,s=e.legend.fontSize,l=15*e.pixelRatio,c=5*e.pixelRatio,u=Math.max(e.legend.lineHeight*e.pixelRatio,s);if("top"==e.legend.position||"bottom"==e.legend.position){for(var h=[],f=0,p=[],d=[],v=0;v<t.length;v++){var y=t[v],x=l+c+g(y.name||"undefined",s)+e.legend.itemGap;f+x>e.width-e.padding[1]-e.padding[3]?(h.push(d),p.push(f-e.legend.itemGap),f=x,d=[y]):(f+=x,d.push(y))}if(d.length){h.push(d),p.push(f-e.legend.itemGap),o.widthArr=p;var m=Math.max.apply(null,p);switch(e.legend.float){case"left":o.area.start.x=e.padding[3],o.area.end.x=e.padding[3]+2*i;break;case"right":o.area.start.x=e.width-e.padding[1]-m-2*i,o.area.end.x=e.width-e.padding[1];break;default:o.area.start.x=(e.width-m)/2-i,o.area.end.x=(e.width+m)/2+i}o.area.width=m+2*i,o.area.wholeWidth=m+2*i,o.area.height=h.length*u+2*i,o.area.wholeHeight=h.length*u+2*i+2*a,o.points=h}}else{var _=t.length,b=e.height-e.padding[0]-e.padding[2]-2*a-2*i,w=Math.min(Math.floor(b/u),_);switch(o.area.height=w*u+2*i,o.area.wholeHeight=w*u+2*i,e.legend.float){case"top":o.area.start.y=e.padding[0]+a,o.area.end.y=e.padding[0]+a+o.area.height;break;case"bottom":o.area.start.y=e.height-e.padding[2]-a-o.area.height,o.area.end.y=e.height-e.padding[2]-a;break;default:o.area.start.y=(e.height-o.area.height)/2,o.area.end.y=(e.height+o.area.height)/2}for(var S=_%w===0?_/w:Math.floor(_/w+1),A=[],P=0;P<S;P++){var T=t.slice(P*w,P*w+w);A.push(T)}if(o.points=A,A.length){for(var k=0;k<A.length;k++){for(var O=A[k],$=0,C=0;C<O.length;C++){var M=l+c+g(O[C].name||"undefined",s)+e.legend.itemGap;M>$&&($=M)}o.widthArr.push($),o.heightArr.push(O.length*u+2*i)}for(var L=0,D=0;D<o.widthArr.length;D++)L+=o.widthArr[D];o.area.width=L-e.legend.itemGap+2*i,o.area.wholeWidth=o.area.width+i}}switch(e.legend.position){case"top":o.area.start.y=e.padding[0]+a,o.area.end.y=e.padding[0]+a+o.area.height;break;case"bottom":o.area.start.y=e.height-e.padding[2]-o.area.height-a,o.area.end.y=e.height-e.padding[2]-a;break;case"left":o.area.start.x=e.padding[3],o.area.end.x=e.padding[3]+o.area.width;break;case"right":o.area.start.x=e.width-e.padding[1]-o.area.width,o.area.end.x=e.width-e.padding[1];break}return r.legendData=o,o}function z(t,e,n,r){var o={angle:0,xAxisHeight:n.xAxisHeight},i=t.map((function(t){return g(t)})),a=Math.max.apply(this,i);return 1==e.xAxis.rotateLabel&&a+2*n.xAxisTextPadding>r&&(o.angle=45*Math.PI/180,o.xAxisHeight=2*n.xAxisTextPadding+a*Math.sin(o.angle)),o}function N(t,e,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,a=o.extra.radar||{};a.max=a.max||0;for(var s=Math.max(a.max,Math.max.apply(null,y(r))),l=[],c=function(o){var a=r[o],c={};c.color=a.color,c.data=[],a.data.forEach((function(r,o){var a={};a.angle=t[o],a.proportion=r/s,a.position=f(n*a.proportion*i*Math.cos(a.angle),n*a.proportion*i*Math.sin(a.angle),e),c.data.push(a)})),l.push(c)},u=0;u<r.length;u++)c(u);return l}function W(t,e){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=0,o=0,i=0;i<t.length;i++){var a=t[i];a.data=null===a.data?0:a.data,r+=a.data}for(var s=0;s<t.length;s++){var l=t[s];l.data=null===l.data?0:l.data,l._proportion_=0===r?1/t.length*n:l.data/r*n,l._radius_=e}for(var c=0;c<t.length;c++){var u=t[c];u._start_=o,o+=2*u._proportion_*Math.PI}return t}function B(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;t=t.sort((function(t,e){return parseInt(e.data)-parseInt(t.data)}));for(var r=0;r<t.length;r++)t[r].radius=t[r].data/t[0].data*e*n,t[r]._proportion_=t[r].data/t[0].data;return t.reverse()}function V(t,e,n,r){for(var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,i=0,a=0,s=[],l=0;l<t.length;l++){var c=t[l];c.data=null===c.data?0:c.data,i+=c.data,s.push(c.data)}for(var u=Math.min.apply(null,s),h=Math.max.apply(null,s),f=r-n,p=0;p<t.length;p++){var d=t[p];d.data=null===d.data?0:d.data,0===i||"area"==e?(d._proportion_=d.data/i*o,d._rose_proportion_=1/t.length*o):(d._proportion_=d.data/i*o,d._rose_proportion_=d.data/i*o),d._radius_=n+f*((d.data-u)/(h-u))}for(var v=0;v<t.length;v++){var g=t[v];g._start_=a,a+=2*g._rose_proportion_*Math.PI}return t}function U(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;1==n&&(n=.999999);for(var r=0;r<t.length;r++){var o=t[r];o.data=null===o.data?0:o.data;var i=void 0;i="default"==e.type?e.endAngle<e.startAngle?2+e.endAngle-e.startAngle:e.startAngle-e.endAngle:2,o._proportion_=i*o.data*n+e.startAngle,o._proportion_>=2&&(o._proportion_=o._proportion_%2)}return t}function H(t,e,n){for(var r=e-n+1,o=e,i=0;i<t.length;i++)t[i].value=null===t[i].value?0:t[i].value,t[i]._startAngle_=o,t[i]._endAngle_=r*t[i].value+e,t[i]._endAngle_>=2&&(t[i]._endAngle_=t[i]._endAngle_%2),o=t[i]._endAngle_;return t}function G(t,e,n){for(var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,o=0;o<t.length;o++){var i=t[o];if(i.data=null===i.data?0:i.data,"auto"==n.pointer.color){for(var a=0;a<e.length;a++)if(i.data<=e[a].value){i.color=e[a].color;break}}else i.color=n.pointer.color;var s=n.startAngle-n.endAngle+1;i._endAngle_=s*i.data+n.startAngle,i._oldAngle_=n.oldAngle,n.oldAngle<n.endAngle&&(i._oldAngle_+=2),i.data>=n.oldData?i._proportion_=(i._endAngle_-i._oldAngle_)*r+n.oldAngle:i._proportion_=i._oldAngle_-(i._oldAngle_-i._endAngle_)*r,i._proportion_>=2&&(i._proportion_=i._proportion_%2)}return t}function q(t){t=W(t);for(var e=0,n=0;n<t.length;n++){var r=t[n],i=r.format?r.format(+r._proportion_.toFixed(2)):o.toFixed(100*r._proportion_)+"%";e=Math.max(e,g(i))}return e}function X(t,e,n,r,o,i){return t.map((function(t){return null===t?null:(t.width=Math.ceil((e-2*o.columePadding)/n),i.extra.column&&i.extra.column.width&&+i.extra.column.width>0&&(t.width=Math.min(t.width,+i.extra.column.width)),t.width<=0&&(t.width=1),t.x+=(r+.5-n/2)*t.width,t)}))}function J(t,e,n,r,o,i,a){return t.map((function(t){return null===t?null:(t.width=Math.ceil((e-2*o.columePadding)/2),i.extra.column&&i.extra.column.width&&+i.extra.column.width>0&&(t.width=Math.min(t.width,+i.extra.column.width)),r>0&&(t.width-=2*a),t)}))}function Y(t,e,n,r,o,i,a){return t.map((function(t,n){return null===t?null:(t.width=Math.ceil((e-2*o.columePadding)/2),i.extra.column&&i.extra.column.width&&+i.extra.column.width>0&&(t.width=Math.min(t.width,+i.extra.column.width)),t)}))}function K(t,e,n){n.yAxisWidth,n.yAxisTitleWidth;var r=e.width-e.area[1]-e.area[3],o=e.enableScroll?Math.min(e.xAxis.itemCount,t.length):t.length;("line"==e.type||"area"==e.type)&&o>1&&"justify"==e.xAxis.boundaryGap&&(o-=1);var i=r/o,a=[],s=e.area[3],l=e.width-e.area[1];return t.forEach((function(t,e){a.push(s+e*i)})),"justify"!==e.xAxis.boundaryGap&&(!0===e.enableScroll?a.push(s+t.length*i):a.push(l)),{xAxisPoints:a,startX:s,endX:l,eachSpacing:i}}function Q(t,e,n,r,o,i,a){var s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:1,l=[],c=i.height-i.area[0]-i.area[2];return t.forEach((function(t,a){if(null===t)l.push(null);else{var u=[];t.forEach((function(t,l){var h={};h.x=r[a]+Math.round(o/2);var f=t.value||t,p=c*(f-e)/(n-e);p*=s,h.y=i.height-Math.round(p)-i.area[2],u.push(h)})),l.push(u)}})),l}function Z(t,e,n,r,o,i,a){var s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:1,l="center";"line"!=i.type&&"area"!=i.type||(l=i.xAxis.boundaryGap);var c=[],u=i.height-i.area[0]-i.area[2];return t.forEach((function(t,a){if(null===t)c.push(null);else{var h={};h.color=t.color,h.x=r[a],"center"==l&&(h.x+=Math.round(o/2));var f=t;"object"===typeof t&&null!==t&&(f=t.value);var p=u*(f-e)/(n-e);p*=s,h.y=i.height-Math.round(p)-i.area[2],c.push(h)}})),c}function tt(t,e,n,r,o,i,a,s,l){var c=arguments.length>9&&void 0!==arguments[9]?arguments[9]:1,u=[],h=i.height-i.area[0]-i.area[2];return t.forEach((function(t,a){if(null===t)u.push(null);else{var f={};if(f.color=t.color,f.x=r[a]+Math.round(o/2),s>0){for(var p=0,d=0;d<=s;d++)p+=l[d].data[a];var v=p-t,g=h*(p-e)/(n-e),y=h*(v-e)/(n-e)}else p=t,g=h*(p-e)/(n-e),y=0;var x=y;g*=c,x*=c,f.y=i.height-Math.round(g)-i.area[2],f.y0=i.height-Math.round(x)-i.area[2],u.push(f)}})),u}function et(t,e,n,r){var o;o="stack"==r?x(t,e.categories.length):y(t);var i=[];o=o.filter((function(t){return"object"===typeof t&&null!==t?Array.isArray(t)?null!==t:null!==t.value:null!==t})),o.map((function(t){"object"===typeof t?Array.isArray(t)?t.map((function(t){i.push(t)})):i.push(t.value):i.push(t)}));var a=0,s=0;if(i.length>0&&(a=Math.min.apply(this,i),s=Math.max.apply(this,i)),"number"===typeof e.yAxis.min&&(a=Math.min(e.yAxis.min,a)),"number"===typeof e.yAxis.max&&(s=Math.max(e.yAxis.max,s)),a===s){var l=s||10;s+=l}for(var c=v(a,s),u=c.minRange,h=c.maxRange,f=[],p=(h-u)/n.yAxisSplit,d=0;d<=n.yAxisSplit;d++)f.push(u+p*d);return f.reverse()}function nt(t,e,r){var i=n({},{type:""},e.extra.column),a=et(t,e,r,i.type),s=r.yAxisWidth,l=e.yAxis.fontSize||r.fontSize,c=a.map((function(t){return t=o.toFixed(t,6),t=e.yAxis.format?e.yAxis.format(Number(t)):t,s=Math.max(s,g(t,l)+5),t}));return!0===e.yAxis.disabled&&(s=0),{rangesFormat:c,ranges:a,yAxisWidth:s}}function rt(t,e,n,r,o){var i=et(e,n,r),a=n.height-n.area[0]-n.area[2],s=i[0],l=i[i.length-1],c=n.padding[3],u=n.padding[1]+a,h=s-(s-l)*(t-c)/(u-c);return h=n.yAxis.format?n.yAxis.format(Number(h)):h,h}function ot(t,e,n,r){for(var o=r.height-r.area[0]-r.area[2],i=0;i<n.length;i++){var a=o*(n[i].value-t)/(e-t);n[i].y=r.height-Math.round(a)-r.area[2]}return n}function it(t,e){!0!==e.rotateLock?(t.translate(e.height,0),t.rotate(90*Math.PI/180)):!0!==e._rotate_&&(t.translate(e.height,0),t.rotate(90*Math.PI/180),e._rotate_=!0)}function at(t,e,n,r,o){r.beginPath(),r.setStrokeStyle("#ffffff"),r.setLineWidth(1*o.pixelRatio),r.setFillStyle(e),"diamond"===n?t.forEach((function(t,e){null!==t&&(r.moveTo(t.x,t.y-4.5),r.lineTo(t.x-4.5,t.y),r.lineTo(t.x,t.y+4.5),r.lineTo(t.x+4.5,t.y),r.lineTo(t.x,t.y-4.5))})):"circle"===n?t.forEach((function(t,e){null!==t&&(r.moveTo(t.x+3.5*o.pixelRatio,t.y),r.arc(t.x,t.y,4*o.pixelRatio,0,2*Math.PI,!1))})):"rect"===n?t.forEach((function(t,e){null!==t&&(r.moveTo(t.x-3.5,t.y-3.5),r.rect(t.x-3.5,t.y-3.5,7,7))})):"triangle"===n&&t.forEach((function(t,e){null!==t&&(r.moveTo(t.x,t.y-4.5),r.lineTo(t.x-4.5,t.y+4.5),r.lineTo(t.x+4.5,t.y+4.5),r.lineTo(t.x,t.y-4.5))})),r.closePath(),r.fill(),r.stroke()}function st(t,e,n,r){var o=t.title.fontSize||e.titleFontSize,i=t.subtitle.fontSize||e.subtitleFontSize,a=t.title.name||"",s=t.subtitle.name||"",l=t.title.color||e.titleColor,c=t.subtitle.color||e.subtitleColor,u=a?o:0,h=s?i:0,f=5;if(s){var p=g(s,i),d=r.x-p/2+(t.subtitle.offsetX||0),v=r.y+i/2+(t.subtitle.offsetY||0);a&&(v+=(u+f)/2),n.beginPath(),n.setFontSize(i),n.setFillStyle(c),n.fillText(s,d,v),n.closePath(),n.stroke()}if(a){var y=g(a,o),x=r.x-y/2+(t.title.offsetX||0),m=r.y+o/2+(t.title.offsetY||0);s&&(m-=(h+f)/2),n.beginPath(),n.setFontSize(o),n.setFillStyle(l),n.fillText(a,x,m),n.closePath(),n.stroke()}}function lt(t,e,n,r){var o=e.data;t.forEach((function(t,i){if(null!==t){r.beginPath(),r.setFontSize(e.textSize||n.fontSize),r.setFillStyle(e.textColor||"#666666");var a=o[i];"object"===typeof o[i]&&null!==o[i]&&(a=o[i].value);var s=e.format?e.format(a):a;r.fillText(String(s),t.x-g(s,e.textSize||n.fontSize)/2,t.y-2),r.closePath(),r.stroke()}}))}function ct(t,e,n,r,o,i){e-=t.width/2+o.gaugeLabelTextMargin;for(var a=t.startAngle-t.endAngle+1,s=a/t.splitLine.splitNumber,l=t.endNumber-t.startNumber,c=l/t.splitLine.splitNumber,u=t.startAngle,h=t.startNumber,f=0;f<t.splitLine.splitNumber+1;f++){var p={x:e*Math.cos(u*Math.PI),y:e*Math.sin(u*Math.PI)},d=t.labelFormat?t.labelFormat(h):h;p.x+=n.x-g(d)/2,p.y+=n.y;var v=p.x,y=p.y;i.beginPath(),i.setFontSize(o.fontSize),i.setFillStyle(t.labelColor||"#666666"),i.fillText(d,v,y+o.fontSize/2),i.closePath(),i.stroke(),u+=s,u>=2&&(u%=2),h+=c}}function ut(t,e,n,r,i,a){var s=r.extra.radar||{};e+=i.radarLabelTextMargin,t.forEach((function(t,l){var c={x:e*Math.cos(t),y:e*Math.sin(t)},u=f(c.x,c.y,n),h=u.x,p=u.y;o.approximatelyEqual(c.x,0)?h-=g(r.categories[l]||"")/2:c.x<0&&(h-=g(r.categories[l]||"")),a.beginPath(),a.setFontSize(i.fontSize),a.setFillStyle(s.labelColor||"#666666"),a.fillText(r.categories[l]||"",h,p+i.fontSize/2),a.closePath(),a.stroke()}))}function ht(t,e,n,r,i,a){for(var s=n.pieChartLinePadding,l=[],c=null,u=t.map((function(t){var e=t.format?t.format(+t._proportion_.toFixed(2)):o.toFixed(100*t._proportion_.toFixed(4))+"%";t._rose_proportion_&&(t._proportion_=t._rose_proportion_);var n=2*Math.PI-(t._start_+2*Math.PI*t._proportion_/2),r=t.color,i=t._radius_;return{arc:n,text:e,color:r,radius:i,textColor:t.textColor,textSize:t.textSize}})),h=0;h<u.length;h++){var d=u[h],v=Math.cos(d.arc)*(d.radius+s),y=Math.sin(d.arc)*(d.radius+s),x=Math.cos(d.arc)*d.radius,m=Math.sin(d.arc)*d.radius,_=v>=0?v+n.pieChartTextPadding:v-n.pieChartTextPadding,b=y,w=g(d.text),S=b;c&&o.isSameXCoordinateArea(c.start,{x:_})&&(S=_>0?Math.min(b,c.start.y):v<0?Math.max(b,c.start.y):b>0?Math.max(b,c.start.y):Math.min(b,c.start.y)),_<0&&(_-=w);var A={lineStart:{x:x,y:m},lineEnd:{x:v,y:y},start:{x:_,y:S},width:w,height:n.fontSize,text:d.text,color:d.color,textColor:d.textColor,textSize:d.textSize};c=p(A,c),l.push(c)}for(var P=0;P<l.length;P++){var T=l[P],k=f(T.lineStart.x,T.lineStart.y,a),O=f(T.lineEnd.x,T.lineEnd.y,a),$=f(T.start.x,T.start.y,a);r.setLineWidth(1*e.pixelRatio),r.setFontSize(n.fontSize),r.beginPath(),r.setStrokeStyle(T.color),r.setFillStyle(T.color),r.moveTo(k.x,k.y);var C=T.start.x<0?$.x+T.width:$.x,M=T.start.x<0?$.x-5:$.x+5;r.quadraticCurveTo(O.x,O.y,C,$.y),r.moveTo(k.x,k.y),r.stroke(),r.closePath(),r.beginPath(),r.moveTo($.x+T.width,$.y),r.arc(C,$.y,2,0,2*Math.PI),r.closePath(),r.fill(),r.beginPath(),r.setFontSize(T.textSize||n.fontSize),r.setFillStyle(T.textColor||"#666666"),r.fillText(T.text,M,$.y+3),r.closePath(),r.stroke(),r.closePath()}}function ft(t,e,n,r){var o=e.extra.tooltip||{};o.gridType=void 0==o.gridType?"solid":o.gridType,o.dashLength=void 0==o.dashLength?4:o.dashLength;var a=e.area[0],s=e.height-e.area[2];if("dash"==o.gridType&&r.setLineDash([o.dashLength,o.dashLength]),r.setStrokeStyle(o.gridColor||"#cccccc"),r.setLineWidth(1*e.pixelRatio),r.beginPath(),r.moveTo(t,a),r.lineTo(t,s),r.stroke(),r.setLineDash([]),o.xAxisLabel){var l=e.categories[e.tooltip.index];r.setFontSize(n.fontSize);var c=g(l,n.fontSize),u=t-.5*c,h=s;r.beginPath(),r.setFillStyle(i(o.labelBgColor||n.toolTipBackground,o.labelBgOpacity||n.toolTipOpacity)),r.setStrokeStyle(o.labelBgColor||n.toolTipBackground),r.setLineWidth(1*e.pixelRatio),r.rect(u-n.toolTipPadding,h,c+2*n.toolTipPadding,n.fontSize+2*n.toolTipPadding),r.closePath(),r.stroke(),r.fill(),r.beginPath(),r.setFontSize(n.fontSize),r.setFillStyle(o.labelFontColor||n.fontColor),r.fillText(String(l),u,h+n.toolTipPadding+n.fontSize),r.closePath(),r.stroke()}}function pt(t,e,r,o,a){for(var s=n({},{type:"solid",dashLength:4,data:[]},r.extra.markLine),l=r.area[3],c=r.width-r.padding[1],u=ot(t,e,s.data,r),h=0;h<u.length;h++){var f=n({},{lineColor:"#DE4A42",showLabel:!1,labelFontColor:"#666666",labelBgColor:"#DFE8FF",labelBgOpacity:.8,yAxisIndex:0},u[h]);if("dash"==s.type&&a.setLineDash([s.dashLength,s.dashLength]),a.setStrokeStyle(f.lineColor),a.setLineWidth(1*r.pixelRatio),a.beginPath(),a.moveTo(l,f.y),a.lineTo(c,f.y),a.stroke(),a.setLineDash([]),f.showLabel){var p=r.yAxis.format?r.yAxis.format(Number(f.value)):f.value;a.setFontSize(o.fontSize);var d=g(p,o.fontSize),v=r.padding[3]+o.yAxisTitleWidth-o.toolTipPadding,y=Math.max(r.area[3],d+2*o.toolTipPadding),x=y-v,m=v+(x-d)/2,_=f.y;a.setFillStyle(i(f.labelBgColor,f.labelBgOpacity)),a.setStrokeStyle(f.labelBgColor),a.setLineWidth(1*r.pixelRatio),a.beginPath(),a.rect(v,_-.5*o.fontSize-o.toolTipPadding,x,o.fontSize+2*o.toolTipPadding),a.closePath(),a.stroke(),a.fill(),a.beginPath(),a.setFontSize(o.fontSize),a.setFillStyle(f.labelFontColor),a.fillText(String(p),m,_+.5*o.fontSize),a.stroke()}}}function dt(t,e,r,o,a){var s=n({},{gridType:"solid",dashLength:4},t.extra.tooltip),l=t.area[3],c=t.width-t.padding[1];if("dash"==s.gridType&&r.setLineDash([s.dashLength,s.dashLength]),r.setStrokeStyle(s.gridColor||"#cccccc"),r.setLineWidth(1*t.pixelRatio),r.beginPath(),r.moveTo(l,t.tooltip.offset.y),r.lineTo(c,t.tooltip.offset.y),r.stroke(),r.setLineDash([]),s.yAxisLabel){var u=rt(t.tooltip.offset.y,t.series,t,e,o);r.setFontSize(e.fontSize);var h=g(u,e.fontSize),f=t.padding[3]+e.yAxisTitleWidth-e.toolTipPadding,p=Math.max(t.area[3],h+2*e.toolTipPadding),d=p-f,v=f+(d-h)/2,y=t.tooltip.offset.y;r.beginPath(),r.setFillStyle(i(s.labelBgColor||e.toolTipBackground,s.labelBgOpacity||e.toolTipOpacity)),r.setStrokeStyle(s.labelBgColor||e.toolTipBackground),r.setLineWidth(1*t.pixelRatio),r.rect(f,y-.5*e.fontSize-e.toolTipPadding,d,e.fontSize+2*e.toolTipPadding),r.closePath(),r.stroke(),r.fill(),r.beginPath(),r.setFontSize(e.fontSize),r.setFillStyle(s.labelFontColor||e.fontColor),r.fillText(u,v,y+.5*e.fontSize),r.closePath(),r.stroke()}}function vt(t,e,r,o,a){var s=n({},{activeBgColor:"#000000",activeBgOpacity:.08},e.extra.tooltip),l=e.area[0],c=e.height-e.area[2];o.beginPath(),o.setFillStyle(i(s.activeBgColor,s.activeBgOpacity)),o.rect(t-a/2,l,a,c-l),o.closePath(),o.fill()}function gt(t,e,r,o,a,s,l){var c=n({},{bgColor:"#000000",bgOpacity:.7,fontColor:"#FFFFFF"},r.extra.tooltip),u=4*r.pixelRatio,h=5*r.pixelRatio,f=8*r.pixelRatio,p=!1;"line"!=r.type&&"area"!=r.type&&"candle"!=r.type&&"mix"!=r.type||ft(r.tooltip.offset.x,r,o,a),e=n({x:0,y:0},e),e.y-=8*r.pixelRatio;var d=t.map((function(t){return g(t.text,o.fontSize)})),v=u+h+4*o.toolTipPadding+Math.max.apply(null,d),y=2*o.toolTipPadding+t.length*o.toolTipLineHeight;e.x-Math.abs(r._scrollDistance_)+f+v>r.width&&(p=!0),y+e.y>r.height&&(e.y=r.height-y),a.beginPath(),a.setFillStyle(i(c.bgColor||o.toolTipBackground,c.bgOpacity||o.toolTipOpacity)),p?(a.moveTo(e.x,e.y+10*r.pixelRatio),a.lineTo(e.x-f,e.y+10*r.pixelRatio-5*r.pixelRatio),a.lineTo(e.x-f,e.y),a.lineTo(e.x-f-Math.round(v),e.y),a.lineTo(e.x-f-Math.round(v),e.y+y),a.lineTo(e.x-f,e.y+y),a.lineTo(e.x-f,e.y+10*r.pixelRatio+5*r.pixelRatio),a.lineTo(e.x,e.y+10*r.pixelRatio)):(a.moveTo(e.x,e.y+10*r.pixelRatio),a.lineTo(e.x+f,e.y+10*r.pixelRatio-5*r.pixelRatio),a.lineTo(e.x+f,e.y),a.lineTo(e.x+f+Math.round(v),e.y),a.lineTo(e.x+f+Math.round(v),e.y+y),a.lineTo(e.x+f,e.y+y),a.lineTo(e.x+f,e.y+10*r.pixelRatio+5*r.pixelRatio),a.lineTo(e.x,e.y+10*r.pixelRatio)),a.closePath(),a.fill(),t.forEach((function(t,n){if(null!==t.color){a.beginPath(),a.setFillStyle(t.color);var r=e.x+f+2*o.toolTipPadding,i=e.y+(o.toolTipLineHeight-o.fontSize)/2+o.toolTipLineHeight*n+o.toolTipPadding+1;p&&(r=e.x-v-f+2*o.toolTipPadding),a.fillRect(r,i,u,o.fontSize),a.closePath()}})),t.forEach((function(t,n){var r=e.x+f+2*o.toolTipPadding+u+h;p&&(r=e.x-v-f+2*o.toolTipPadding+ +u+h);var i=e.y+(o.toolTipLineHeight-o.fontSize)/2+o.toolTipLineHeight*n+o.toolTipPadding;a.beginPath(),a.setFontSize(o.fontSize),a.setFillStyle(c.fontColor),a.fillText(t.text,r,i+o.fontSize),a.closePath(),a.stroke()}))}function yt(t,e,n,r){var o=n.xAxisHeight+(e.height-n.xAxisHeight-g(t))/2;r.save(),r.beginPath(),r.setFontSize(n.fontSize),r.setFillStyle(e.yAxis.titleFontColor||"#333333"),r.translate(0,e.height),r.rotate(-90*Math.PI/180),r.fillText(t,o,e.padding[3]+.5*n.fontSize),r.closePath(),r.stroke(),r.restore()}function xt(t,e,r,o){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,a=[].concat(e.chartData.yAxisData.ranges),s=e.chartData.xAxisData,l=s.xAxisPoints,c=s.eachSpacing,u=n({},{type:"group",width:c/2,meter:{border:4,fillColor:"#FFFFFF"}},e.extra.column),h=a.pop(),f=a.shift(),p=[];return o.save(),e._scrollDistance_&&0!==e._scrollDistance_&&!0===e.enableScroll&&o.translate(e._scrollDistance_,0),e.tooltip&&e.tooltip.textList&&e.tooltip.textList.length&&1===i&&vt(e.tooltip.offset.x,e,r,o,c),t.forEach((function(n,a){var s=n.data;switch(u.type){case"group":var d=Z(s,h,f,l,c,e,r,i),v=tt(s,h,f,l,c,e,r,a,t,i);p.push(v),d=X(d,c,t.length,a,r,e),d.forEach((function(t,r){if(null!==t){o.beginPath(),o.setStrokeStyle(t.color||n.color),o.setLineWidth(1),o.setFillStyle(t.color||n.color);var i=t.x-t.width/2;e.height,t.y,e.area[2];o.moveTo(i-1,t.y),o.lineTo(i+t.width-2,t.y),o.lineTo(i+t.width-2,e.height-e.area[2]),o.lineTo(i,e.height-e.area[2]),o.lineTo(i,t.y),o.closePath(),o.stroke(),o.fill()}}));break;case"stack":d=tt(s,h,f,l,c,e,r,a,t,i);p.push(d),d=Y(d,c,t.length,a,r,e,t),d.forEach((function(t,r){if(null!==t){o.beginPath(),o.setFillStyle(t.color||n.color);var i=t.x-t.width/2+1,s=e.height-t.y-e.area[2],l=e.height-t.y0-e.area[2];a>0&&(s-=l),o.moveTo(i,t.y),o.fillRect(i,t.y,t.width-2,s),o.closePath(),o.fill()}}));break;case"meter":d=Z(s,h,f,l,c,e,r,i);p.push(d),d=J(d,c,t.length,a,r,e,u.meter.border),0==a?d.forEach((function(t,r){if(null!==t){o.beginPath(),o.setFillStyle(u.meter.fillColor);var i=t.x-t.width/2,a=e.height-t.y-e.area[2];o.moveTo(i,t.y),o.fillRect(i,t.y,t.width,a),o.closePath(),o.fill(),u.meter.border>0&&(o.beginPath(),o.setStrokeStyle(n.color),o.setLineWidth(u.meter.border*e.pixelRatio),o.moveTo(i+.5*u.meter.border,t.y+a),o.lineTo(i+.5*u.meter.border,t.y+.5*u.meter.border),o.lineTo(i+t.width-.5*u.meter.border,t.y+.5*u.meter.border),o.lineTo(i+t.width-.5*u.meter.border,t.y+a),o.stroke())}})):d.forEach((function(t,r){if(null!==t){o.beginPath(),o.setFillStyle(t.color||n.color);var i=t.x-t.width/2,a=e.height-t.y-e.area[2];o.moveTo(i,t.y),o.fillRect(i,t.y,t.width,a),o.closePath(),o.fill()}}));break}})),!1!==e.dataLabel&&1===i&&t.forEach((function(n,a){var s=n.data;switch(u.type){case"group":var p=Z(s,h,f,l,c,e,r,i);p=X(p,c,t.length,a,r,e),lt(p,n,r,o);break;case"stack":p=tt(s,h,f,l,c,e,r,a,t,i);lt(p,n,r,o);break;case"meter":p=Z(s,h,f,l,c,e,r,i);lt(p,n,r,o);break}})),o.restore(),{xAxisPoints:l,calPoints:p,eachSpacing:c,minRange:h,maxRange:f}}function mt(t,e,r,o,i){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,s=n({},{color:{},average:{}},r.extra.candle);s.color=n({},{upLine:"#f04864",upFill:"#f04864",downLine:"#2fc25b",downFill:"#2fc25b"},s.color),s.average=n({},{show:!1,name:[],day:[],color:o.colors},s.average),r.extra.candle=s;var l=[].concat(r.chartData.yAxisData.ranges),c=r.chartData.xAxisData,u=c.xAxisPoints,f=c.eachSpacing,p=l.pop(),d=l.shift(),v=[];return i.save(),r._scrollDistance_&&0!==r._scrollDistance_&&!0===r.enableScroll&&i.translate(r._scrollDistance_,0),s.average.show&&e.forEach((function(t,e){var n=t.data,s=Z(n,p,d,u,f,r,o,a),l=j(s);l.forEach((function(e,n){i.beginPath(),i.setStrokeStyle(t.color),i.setLineWidth(1),1===e.length?(i.moveTo(e[0].x,e[0].y),i.arc(e[0].x,e[0].y,1,0,2*Math.PI)):(i.moveTo(e[0].x,e[0].y),e.forEach((function(t,n){if(n>0){var r=h(e,n-1);i.bezierCurveTo(r.ctrA.x,r.ctrA.y,r.ctrB.x,r.ctrB.y,t.x,t.y)}})),i.moveTo(e[0].x,e[0].y)),i.closePath(),i.stroke()}))})),t.forEach((function(t,e){var n=t.data,l=Q(n,p,d,u,f,r,o,a);v.push(l);var c=j(l);c=c[0],c.forEach((function(t,e){i.beginPath(),n[e][1]-n[e][0]>0?(i.setStrokeStyle(s.color.upLine),i.setFillStyle(s.color.upFill),i.setLineWidth(1*r.pixelRatio),i.moveTo(t[3].x,t[3].y),i.lineTo(t[1].x,t[1].y),i.lineTo(t[1].x-f/4,t[1].y),i.lineTo(t[0].x-f/4,t[0].y),i.lineTo(t[0].x,t[0].y),i.lineTo(t[2].x,t[2].y),i.lineTo(t[0].x,t[0].y),i.lineTo(t[0].x+f/4,t[0].y),i.lineTo(t[1].x+f/4,t[1].y),i.lineTo(t[1].x,t[1].y),i.moveTo(t[3].x,t[3].y)):(i.setStrokeStyle(s.color.downLine),i.setFillStyle(s.color.downFill),i.setLineWidth(1*r.pixelRatio),i.moveTo(t[3].x,t[3].y),i.lineTo(t[0].x,t[0].y),i.lineTo(t[0].x-f/4,t[0].y),i.lineTo(t[1].x-f/4,t[1].y),i.lineTo(t[1].x,t[1].y),i.lineTo(t[2].x,t[2].y),i.lineTo(t[1].x,t[1].y),i.lineTo(t[1].x+f/4,t[1].y),i.lineTo(t[0].x+f/4,t[0].y),i.lineTo(t[0].x,t[0].y),i.moveTo(t[3].x,t[3].y)),i.closePath(),i.fill(),i.stroke()}))})),i.restore(),{xAxisPoints:u,calPoints:v,eachSpacing:f,minRange:p,maxRange:d}}function _t(t,e,r,o){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,s=n({},{type:"straight",opacity:.2,addLine:!1,width:2},e.extra.area),l=[].concat(e.chartData.yAxisData.ranges),c=e.chartData.xAxisData,u=c.xAxisPoints,f=c.eachSpacing,p=l.pop(),d=l.shift(),v=e.height-e.area[2],g=[];return o.save(),e._scrollDistance_&&0!==e._scrollDistance_&&!0===e.enableScroll&&o.translate(e._scrollDistance_,0),t.forEach((function(t,n){var l=t.data,c=Z(l,p,d,u,f,e,r,a);g.push(c);for(var y=j(c),x=function(n){var r=y[n];if(o.beginPath(),o.setStrokeStyle(i(t.color,s.opacity)),o.setFillStyle(i(t.color,s.opacity)),o.setLineWidth(s.width*e.pixelRatio),r.length>1){var a=r[0],l=r[r.length-1];o.moveTo(a.x,a.y),"curve"===s.type?r.forEach((function(t,e){if(e>0){var n=h(r,e-1);o.bezierCurveTo(n.ctrA.x,n.ctrA.y,n.ctrB.x,n.ctrB.y,t.x,t.y)}})):r.forEach((function(t,e){e>0&&o.lineTo(t.x,t.y)})),o.lineTo(l.x,v),o.lineTo(a.x,v),o.lineTo(a.x,a.y)}else{var c=r[0];o.moveTo(c.x-f/2,c.y),o.lineTo(c.x+f/2,c.y),o.lineTo(c.x+f/2,v),o.lineTo(c.x-f/2,v),o.moveTo(c.x-f/2,c.y)}o.closePath(),o.fill(),s.addLine&&(o.beginPath(),o.setStrokeStyle(t.color),o.setLineWidth(s.width*e.pixelRatio),1===r.length?(o.moveTo(r[0].x,r[0].y),o.arc(r[0].x,r[0].y,1,0,2*Math.PI)):(o.moveTo(r[0].x,r[0].y),"curve"===s.type?r.forEach((function(t,e){if(e>0){var n=h(r,e-1);o.bezierCurveTo(n.ctrA.x,n.ctrA.y,n.ctrB.x,n.ctrB.y,t.x,t.y)}})):r.forEach((function(t,e){e>0&&o.lineTo(t.x,t.y)})),o.moveTo(r[0].x,r[0].y)),o.closePath(),o.stroke())},m=0;m<y.length;m++)x(m);if(!1!==e.dataPointShape){var _=r.dataPointShape[n%r.dataPointShape.length];at(c,t.color,_,o,e)}})),!1!==e.dataLabel&&1===a&&t.forEach((function(t,n){var i=t.data,s=Z(i,p,d,u,f,e,r,a);lt(s,t,r,o)})),o.restore(),{xAxisPoints:u,calPoints:g,eachSpacing:f,minRange:p,maxRange:d}}function bt(t,e,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,i=e.extra.line||{type:"straight",width:2};i.type=i.type?i.type:"straight",i.width=i.width?i.width:2;var a=[].concat(e.chartData.yAxisData.ranges),s=e.chartData.xAxisData,l=s.xAxisPoints,c=s.eachSpacing,u=a.pop(),f=a.shift(),p=[];return r.save(),e._scrollDistance_&&0!==e._scrollDistance_&&!0===e.enableScroll&&r.translate(e._scrollDistance_,0),t.forEach((function(t,a){var s=t.data,d=Z(s,u,f,l,c,e,n,o);p.push(d);var v=j(d);if(v.forEach((function(n,o){r.beginPath(),r.setStrokeStyle(t.color),r.setLineWidth(i.width*e.pixelRatio),1===n.length?(r.moveTo(n[0].x,n[0].y),r.arc(n[0].x,n[0].y,1,0,2*Math.PI)):(r.moveTo(n[0].x,n[0].y),"curve"===i.type?n.forEach((function(t,e){if(e>0){var o=h(n,e-1);r.bezierCurveTo(o.ctrA.x,o.ctrA.y,o.ctrB.x,o.ctrB.y,t.x,t.y)}})):n.forEach((function(t,e){e>0&&r.lineTo(t.x,t.y)})),r.moveTo(n[0].x,n[0].y)),r.closePath(),r.stroke()})),!1!==e.dataPointShape){var g=n.dataPointShape[a%n.dataPointShape.length];at(d,t.color,g,r,e)}})),!1!==e.dataLabel&&1===o&&t.forEach((function(t,i){var a=t.data,s=Z(a,u,f,l,c,e,n,o);lt(s,t,n,r)})),r.restore(),{xAxisPoints:l,calPoints:p,eachSpacing:c,minRange:u,maxRange:f}}function wt(t,e,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,a=[].concat(e.chartData.yAxisData.ranges),s=e.chartData.xAxisData,l=s.xAxisPoints,c=s.eachSpacing,u=a.pop(),f=a.shift(),p=e.height-e.area[2],d=[],v=0,g=0;if(t.forEach((function(t,e){"column"==t.type&&(g+=1)})),r.save(),e._scrollDistance_&&0!==e._scrollDistance_&&!0===e.enableScroll&&r.translate(e._scrollDistance_,0),t.forEach((function(t,a){var s=t.data,y=Z(s,u,f,l,c,e,n,o);if(d.push(y),"column"==t.type&&(y=X(y,c,g,v,n,e),y.forEach((function(n,o){if(null!==n){r.beginPath(),r.setStrokeStyle(n.color||t.color),r.setLineWidth(1),r.setFillStyle(n.color||t.color);var i=n.x-n.width/2;e.height,n.y,e.area[2];r.moveTo(i,n.y),r.moveTo(i-1,n.y),r.lineTo(i+n.width-2,n.y),r.lineTo(i+n.width-2,e.height-e.area[2]),r.lineTo(i,e.height-e.area[2]),r.lineTo(i,n.y),r.closePath(),r.stroke(),r.fill(),r.closePath(),r.fill()}})),v+=1),"area"==t.type)for(var x=j(y),m=function(n){var o=x[n];if(r.beginPath(),r.setStrokeStyle(t.color),r.setFillStyle(i(t.color,.2)),r.setLineWidth(2*e.pixelRatio),o.length>1){b=o[0];var a=o[o.length-1];r.moveTo(b.x,b.y),"curve"===t.style?o.forEach((function(t,e){if(e>0){var n=h(o,e-1);r.bezierCurveTo(n.ctrA.x,n.ctrA.y,n.ctrB.x,n.ctrB.y,t.x,t.y)}})):o.forEach((function(t,e){e>0&&r.lineTo(t.x,t.y)})),r.lineTo(a.x,p),r.lineTo(b.x,p),r.lineTo(b.x,b.y)}else{var s=o[0];r.moveTo(s.x-c/2,s.y),r.lineTo(s.x+c/2,s.y),r.lineTo(s.x+c/2,p),r.lineTo(s.x-c/2,p),r.moveTo(s.x-c/2,s.y)}r.closePath(),r.fill()},_=0;_<x.length;_++){var b;m(_)}if("line"==t.type){var w=j(y);w.forEach((function(n,o){r.beginPath(),r.setStrokeStyle(t.color),r.setLineWidth(2*e.pixelRatio),1===n.length?(r.moveTo(n[0].x,n[0].y),r.arc(n[0].x,n[0].y,1,0,2*Math.PI)):(r.moveTo(n[0].x,n[0].y),"curve"==t.style?n.forEach((function(t,e){if(e>0){var o=h(n,e-1);r.bezierCurveTo(o.ctrA.x,o.ctrA.y,o.ctrB.x,o.ctrB.y,t.x,t.y)}})):n.forEach((function(t,e){e>0&&r.lineTo(t.x,t.y)})),r.moveTo(n[0].x,n[0].y)),r.closePath(),r.stroke()}))}if("point"==t.type&&y.forEach((function(n,o){n&&(r.beginPath(),r.setFillStyle(t.color),r.setStrokeStyle("#FFFFFF"),r.setLineWidth(1*e.pixelRatio),r.moveTo(n.x+3.5*e.pixelRatio,n.y),r.arc(n.x,n.y,4*e.pixelRatio,0,2*Math.PI),r.closePath(),r.fill(),r.stroke())})),1==t.addPoint&&"column"!==t.type){var S=n.dataPointShape[a%n.dataPointShape.length];at(y,t.color,S,r,e)}})),!1!==e.dataLabel&&1===o){v=0;t.forEach((function(t,i){var a=t.data,s=Z(a,u,f,l,c,e,n,o);"column"!==t.type?lt(s,t,n,r):(s=X(s,c,g,v,n,e),lt(s,t,n,r),v+=1)}))}return r.restore(),{xAxisPoints:l,calPoints:d,eachSpacing:c,minRange:u,maxRange:f}}function St(t,e,n,r,o,i){var a=t.extra.tooltip||{};a.horizentalLine&&t.tooltip&&1===r&&("line"==t.type||"area"==t.type||"column"==t.type||"candle"==t.type||"mix"==t.type)&&dt(t,e,n,o,i),n.save(),t._scrollDistance_&&0!==t._scrollDistance_&&!0===t.enableScroll&&n.translate(t._scrollDistance_,0),t.tooltip&&t.tooltip.textList&&t.tooltip.textList.length&&1===r&&gt(t.tooltip.textList,t.tooltip.offset,t,e,n,o,i),n.restore()}function At(t,e,n,r){var o=e.chartData.xAxisData,i=o.xAxisPoints,a=o.startX,s=o.endX,l=o.eachSpacing,c="center";"line"!=e.type&&"area"!=e.type||(c=e.xAxis.boundaryGap);var h=e.height-e.area[2],f=e.area[0];if(e.enableScroll&&e.xAxis.scrollShow){var p=e.height-e.area[2]+n.xAxisHeight,d=s-a,v=l*(i.length-1),y=d*d/v,x=0;e._scrollDistance_&&(x=-e._scrollDistance_*d/v),r.beginPath(),r.setLineCap("round"),r.setLineWidth(6*e.pixelRatio),r.setStrokeStyle(e.xAxis.scrollBackgroundColor||"#EFEBEF"),r.moveTo(a,p),r.lineTo(s,p),r.stroke(),r.closePath(),r.beginPath(),r.setLineCap("round"),r.setLineWidth(6*e.pixelRatio),r.setStrokeStyle(e.xAxis.scrollColor||"#A6A6A6"),r.moveTo(a+x,p),r.lineTo(a+x+y,p),r.stroke(),r.closePath(),r.setLineCap("butt")}if(r.save(),e._scrollDistance_&&0!==e._scrollDistance_&&r.translate(e._scrollDistance_,0),!0!==e.xAxis.disableGrid&&(r.setStrokeStyle(e.xAxis.gridColor||"#cccccc"),r.setLineCap("butt"),r.setLineWidth(1*e.pixelRatio),"dash"==e.xAxis.gridType&&r.setLineDash([e.xAxis.dashLength,e.xAxis.dashLength]),"calibration"===e.xAxis.type?i.forEach((function(t,n){n>0&&(r.beginPath(),r.moveTo(t-l/2,h),r.lineTo(t-l/2,h+4*e.pixelRatio),r.closePath(),r.stroke())})):(e.xAxis.gridEval=e.xAxis.gridEval||1,i.forEach((function(t,n){n%e.xAxis.gridEval==0&&(r.beginPath(),r.moveTo(t,h),r.lineTo(t,f),r.stroke())}))),r.setLineDash([])),!0!==e.xAxis.disabled){e.width,e.padding[1],e.padding[3],n.yAxisWidth,n.yAxisTitleWidth;var m=t.length;e.xAxis.labelCount&&(m=e.xAxis.itemCount?Math.ceil(t.length/e.xAxis.itemCount*e.xAxis.labelCount):e.xAxis.labelCount,m-=1);for(var _=Math.ceil(t.length/m),b=[],w=t.length,S=0;S<w;S++)S%_!==0?b.push(""):b.push(t[S]);b[w-1]=t[w-1];var A=e.xAxis.fontSize||n.fontSize;0===n._xAxisTextAngle_?b.forEach((function(t,o){var a=-g(t,A)/2;"center"==c&&(a+=l/2),r.beginPath(),r.setFontSize(A),r.setFillStyle(e.xAxis.fontColor||"#666666"),r.fillText(t,i[o]+a,h+A+(n.xAxisHeight-A)/2),r.closePath(),r.stroke()})):b.forEach((function(t,o){r.save(),r.beginPath(),r.setFontSize(A),r.setFillStyle(e.xAxis.fontColor||"#666666");var a=g(t),s=-a;"center"==c&&(s+=l/2);var f=u(i[o]+l/2,h+A/2+5,e.height),p=f.transX,d=f.transY;r.rotate(-1*n._xAxisTextAngle_),r.translate(p,d),r.fillText(t,i[o]+s,h+A+5),r.closePath(),r.stroke(),r.restore()}))}r.restore()}function Pt(t,e,n,r){if(!0!==e.yAxis.disableGrid){for(var o=e.height-e.area[0]-e.area[2],i=o/n.yAxisSplit,a=e.area[3],s=e.chartData.xAxisData.xAxisPoints,l=e.chartData.xAxisData.eachSpacing,c=l*(s.length-1),u=a+c,h=[],f=0;f<n.yAxisSplit+1;f++)h.push(e.height-e.area[2]-i*f);r.save(),e._scrollDistance_&&0!==e._scrollDistance_&&r.translate(e._scrollDistance_,0),"dash"==e.yAxis.gridType&&r.setLineDash([e.yAxis.dashLength,e.yAxis.dashLength]),r.setStrokeStyle(e.yAxis.gridColor||"#cccccc"),r.setLineWidth(1*e.pixelRatio),h.forEach((function(t,e){r.beginPath(),r.moveTo(a,t),r.lineTo(u,t),r.stroke()})),r.setLineDash([]),r.restore()}}function Tt(t,e,n,r){if(!0!==e.yAxis.disabled){var o=e.chartData.yAxisData.rangesFormat,i=e.height-e.area[0]-e.area[2],a=Math.floor(i/n.yAxisSplit),s=e.area[3],l=e.width-e.area[1],c=e.height-e.area[2],u=c+n.xAxisHeight;e.xAxis.scrollShow&&(u-=3*e.pixelRatio),r.beginPath(),r.setFillStyle(e.background||"#ffffff"),e._scrollDistance_<0&&r.fillRect(0,0,s,u),1==e.enableScroll&&r.fillRect(l,0,e.width,u),r.closePath(),r.stroke();for(var h=[],f=0;f<=n.yAxisSplit;f++)h.push(e.area[0]+a*f);var p=e.yAxis.fontSize||n.fontSize;o.forEach((function(t,o){var i=h[o]?h[o]:c;r.beginPath(),r.setFontSize(p),r.setFillStyle(e.yAxis.fontColor||"#666666"),r.fillText(String(t),e.area[3]-n.yAxisWidth,i+p/2),r.closePath(),r.stroke()})),e.yAxis.title&&yt(e.yAxis.title,e,n,r)}}function kt(t,e,n,r,o){if(!1!==e.legend.show){var i=o.legendData,a=i.points,s=i.area,l=e.legend.padding,c=e.legend.fontSize,u=15*e.pixelRatio,h=5*e.pixelRatio,f=e.legend.itemGap,p=Math.max(e.legend.lineHeight*e.pixelRatio,c);r.beginPath(),r.setLineWidth(e.legend.borderWidth),r.setStrokeStyle(e.legend.borderColor),r.setFillStyle(e.legend.backgroundColor),r.moveTo(s.start.x,s.start.y),r.rect(s.start.x,s.start.y,s.width,s.height),r.closePath(),r.fill(),r.stroke(),a.forEach((function(t,o){var a=0,d=0;a=i.widthArr[o],d=i.heightArr[o];var v=0,y=0;"top"==e.legend.position||"bottom"==e.legend.position?(v=s.start.x+(s.width-a)/2,y=s.start.y+l+o*p):(a=0==o?0:i.widthArr[o-1],v=s.start.x+l+a,y=s.start.y+l+(s.height-d)/2),r.setFontSize(n.fontSize);for(var x=0;x<t.length;x++){var m=t[x];switch(m.area=[0,0,0,0],m.area[0]=v,m.area[1]=y,m.area[3]=y+p,r.beginPath(),r.setLineWidth(1*e.pixelRatio),r.setStrokeStyle(m.show?m.color:e.legend.hiddenColor),r.setFillStyle(m.show?m.color:e.legend.hiddenColor),m.legendShape){case"line":r.moveTo(v,y+.5*p-2*e.pixelRatio),r.fillRect(v,y+.5*p-2*e.pixelRatio,15*e.pixelRatio,4*e.pixelRatio);break;case"triangle":r.moveTo(v+7.5*e.pixelRatio,y+.5*p-5*e.pixelRatio),r.lineTo(v+2.5*e.pixelRatio,y+.5*p+5*e.pixelRatio),r.lineTo(v+12.5*e.pixelRatio,y+.5*p+5*e.pixelRatio),r.lineTo(v+7.5*e.pixelRatio,y+.5*p-5*e.pixelRatio);break;case"diamond":r.moveTo(v+7.5*e.pixelRatio,y+.5*p-5*e.pixelRatio),r.lineTo(v+2.5*e.pixelRatio,y+.5*p),r.lineTo(v+7.5*e.pixelRatio,y+.5*p+5*e.pixelRatio),r.lineTo(v+12.5*e.pixelRatio,y+.5*p),r.lineTo(v+7.5*e.pixelRatio,y+.5*p-5*e.pixelRatio);break;case"circle":r.moveTo(v+7.5*e.pixelRatio,y+.5*p),r.arc(v+7.5*e.pixelRatio,y+.5*p,5*e.pixelRatio,0,2*Math.PI);break;case"rect":r.moveTo(v,y+.5*p-5*e.pixelRatio),r.fillRect(v,y+.5*p-5*e.pixelRatio,15*e.pixelRatio,10*e.pixelRatio);break;default:r.moveTo(v,y+.5*p-5*e.pixelRatio),r.fillRect(v,y+.5*p-5*e.pixelRatio,15*e.pixelRatio,10*e.pixelRatio)}r.closePath(),r.fill(),r.stroke(),v+=u+h;var _=.5*p+.5*c-2;r.beginPath(),r.setFontSize(c),r.setFillStyle(m.show?e.legend.fontColor:e.legend.hiddenColor),r.fillText(m.name,v,y+_),r.closePath(),r.stroke(),"top"==e.legend.position||"bottom"==e.legend.position?(v+=g(m.name,c)+f,m.area[2]=v):(m.area[2]=v+g(m.name,c)+f,v-=u+h,y+=p)}}))}}function Ot(t,e,r,o){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,s=n({},{activeOpacity:.5,activeRadius:10*e.pixelRatio,offsetAngle:0,labelWidth:15*e.pixelRatio,ringWidth:0,border:!1,borderWidth:2,borderColor:"#FFFFFF"},e.extra.pie),l={x:e.area[3]+(e.width-e.area[1]-e.area[3])/2,y:e.area[0]+(e.height-e.area[0]-e.area[2])/2};0==r.pieChartLinePadding&&(r.pieChartLinePadding=s.activeRadius);var c=Math.min((e.width-e.area[1]-e.area[3])/2-r.pieChartLinePadding-r.pieChartTextPadding-r._pieTextMaxLength_,(e.height-e.area[0]-e.area[2])/2-r.pieChartLinePadding-r.pieChartTextPadding);t=W(t,c,a);var u=s.activeRadius;if(t=t.map((function(t){return t._start_+=s.offsetAngle*Math.PI/180,t})),t.forEach((function(t,n){e.tooltip&&e.tooltip.index==n&&(o.beginPath(),o.setFillStyle(i(t.color,e.extra.pie.activeOpacity||.5)),o.moveTo(l.x,l.y),o.arc(l.x,l.y,t._radius_+u,t._start_,t._start_+2*t._proportion_*Math.PI),o.closePath(),o.fill()),o.beginPath(),o.setLineWidth(s.borderWidth*e.pixelRatio),o.lineJoin="round",o.setStrokeStyle(s.borderColor),o.setFillStyle(t.color),o.moveTo(l.x,l.y),o.arc(l.x,l.y,t._radius_,t._start_,t._start_+2*t._proportion_*Math.PI),o.closePath(),o.fill(),1==s.border&&o.stroke()})),"ring"===e.type){var h=.6*c;"number"===typeof e.extra.pie.ringWidth&&e.extra.pie.ringWidth>0&&(h=Math.max(0,c-e.extra.pie.ringWidth)),o.beginPath(),o.setFillStyle(e.background||"#ffffff"),o.moveTo(l.x,l.y),o.arc(l.x,l.y,h,0,2*Math.PI),o.closePath(),o.fill()}if(!1!==e.dataLabel&&1===a){for(var f=!1,p=0,d=t.length;p<d;p++)if(t[p].data>0){f=!0;break}f&&ht(t,e,r,o,c,l)}return 1===a&&"ring"===e.type&&st(e,r,o,l),{center:l,radius:c,series:t}}function $t(t,e,r,o){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,s=n({},{type:"area",activeOpacity:.5,activeRadius:10*e.pixelRatio,offsetAngle:0,labelWidth:15*e.pixelRatio,border:!1,borderWidth:2,borderColor:"#FFFFFF"},e.extra.rose);0==r.pieChartLinePadding&&(r.pieChartLinePadding=s.activeRadius);var l={x:e.area[3]+(e.width-e.area[1]-e.area[3])/2,y:e.area[0]+(e.height-e.area[0]-e.area[2])/2},c=Math.min((e.width-e.area[1]-e.area[3])/2-r.pieChartLinePadding-r.pieChartTextPadding-r._pieTextMaxLength_,(e.height-e.area[0]-e.area[2])/2-r.pieChartLinePadding-r.pieChartTextPadding),u=s.minRadius||.5*c;t=V(t,s.type,u,c,a);var h=s.activeRadius;if(t=t.map((function(t){return t._start_+=(s.offsetAngle||0)*Math.PI/180,t})),t.forEach((function(t,n){e.tooltip&&e.tooltip.index==n&&(o.beginPath(),o.setFillStyle(i(t.color,s.activeOpacity||.5)),o.moveTo(l.x,l.y),o.arc(l.x,l.y,h+t._radius_,t._start_,t._start_+2*t._rose_proportion_*Math.PI),o.closePath(),o.fill()),o.beginPath(),o.setLineWidth(s.borderWidth*e.pixelRatio),o.lineJoin="round",o.setStrokeStyle(s.borderColor),o.setFillStyle(t.color),o.moveTo(l.x,l.y),o.arc(l.x,l.y,t._radius_,t._start_,t._start_+2*t._rose_proportion_*Math.PI),o.closePath(),o.fill(),1==s.border&&o.stroke()})),!1!==e.dataLabel&&1===a){for(var f=!1,p=0,d=t.length;p<d;p++)if(t[p].data>0){f=!0;break}f&&ht(t,e,r,o,c,l)}return{center:l,radius:c,series:t}}function Ct(t,e,r,o){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,a=n({},{startAngle:.75,endAngle:.25,type:"default",width:12*e.pixelRatio},e.extra.arcbar);t=U(t,a,i);var s={x:e.width/2,y:e.height/2},l=Math.min(s.x,s.y);l-=5*e.pixelRatio,l-=a.width/2,o.setLineWidth(a.width),o.setStrokeStyle(a.backgroundColor||"#E9E9E9"),o.setLineCap("round"),o.beginPath(),"default"==a.type?o.arc(s.x,s.y,l,a.startAngle*Math.PI,a.endAngle*Math.PI,!1):o.arc(s.x,s.y,l,0,2*Math.PI,!1),o.stroke();for(var c=0;c<t.length;c++){var u=t[c];o.setLineWidth(a.width),o.setStrokeStyle(u.color),o.setLineCap("round"),o.beginPath(),o.arc(s.x,s.y,l,a.startAngle*Math.PI,u._proportion_*Math.PI,!1),o.stroke()}return st(e,r,o,s),{center:s,radius:l,series:t}}function Mt(t,e,r,o,i){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,s=n({},{startAngle:.75,endAngle:.25,width:15,splitLine:{fixRadius:0,splitNumber:10,width:15,color:"#FFFFFF",childNumber:5,childWidth:5},pointer:{width:15,color:"auto"}},r.extra.gauge);void 0==s.oldAngle&&(s.oldAngle=s.startAngle),void 0==s.oldData&&(s.oldData=0),t=H(t,s.startAngle,s.endAngle);var l={x:r.width/2,y:r.height/2},c=Math.min(l.x,l.y);c-=5*r.pixelRatio,c-=s.width/2;var u=c-s.width;i.setLineWidth(s.width),i.setLineCap("butt");for(var h=0;h<t.length;h++){var f=t[h];i.beginPath(),i.setStrokeStyle(f.color),i.arc(l.x,l.y,c,f._startAngle_*Math.PI,f._endAngle_*Math.PI,!1),i.stroke()}i.save();var p=s.startAngle-s.endAngle+1,d=p/s.splitLine.splitNumber,v=p/s.splitLine.splitNumber/s.splitLine.childNumber,g=-c-.5*s.width-s.splitLine.fixRadius,y=-c-.5*s.width-s.splitLine.fixRadius+s.splitLine.width,x=-c-.5*s.width-s.splitLine.fixRadius+s.splitLine.childWidth;i.translate(l.x,l.y),i.rotate((s.startAngle-1)*Math.PI);for(var m=0;m<s.splitLine.splitNumber+1;m++)i.beginPath(),i.setStrokeStyle(s.splitLine.color),i.setLineWidth(2*r.pixelRatio),i.moveTo(g,0),i.lineTo(y,0),i.stroke(),i.rotate(d*Math.PI);i.restore(),i.save(),i.translate(l.x,l.y),i.rotate((s.startAngle-1)*Math.PI);for(var _=0;_<s.splitLine.splitNumber*s.splitLine.childNumber+1;_++)i.beginPath(),i.setStrokeStyle(s.splitLine.color),i.setLineWidth(1*r.pixelRatio),i.moveTo(g,0),i.lineTo(x,0),i.stroke(),i.rotate(v*Math.PI);i.restore(),e=G(e,t,s,a);for(var b=0;b<e.length;b++){var w=e[b];i.save(),i.translate(l.x,l.y),i.rotate((w._proportion_-1)*Math.PI),i.beginPath(),i.setFillStyle(w.color),i.moveTo(s.pointer.width,0),i.lineTo(0,-s.pointer.width/2),i.lineTo(-u,0),i.lineTo(0,s.pointer.width/2),i.lineTo(s.pointer.width,0),i.closePath(),i.fill(),i.beginPath(),i.setFillStyle("#FFFFFF"),i.arc(0,0,s.pointer.width/6,0,2*Math.PI,!1),i.fill(),i.restore()}return!1!==r.dataLabel&&ct(s,c,l,r,o,i),st(r,o,i,l),1===a&&"gauge"===r.type&&(r.extra.gauge.oldAngle=e[0]._proportion_,r.extra.gauge.oldData=e[0].data),{center:l,radius:c,innerRadius:u,categories:t,totalAngle:p}}function Lt(t,e,r,o){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,s=n({},{gridColor:"#cccccc",labelColor:"#666666",opacity:.2},e.extra.radar),l=w(e.categories.length),c={x:e.area[3]+(e.width-e.area[1]-e.area[3])/2,y:e.area[0]+(e.height-e.area[0]-e.area[2])/2},u=Math.min(c.x-(b(e.categories)+r.radarLabelTextMargin),c.y-r.radarLabelTextMargin);u-=e.padding[1],o.beginPath(),o.setLineWidth(1*e.pixelRatio),o.setStrokeStyle(s.gridColor),l.forEach((function(t){var e=f(u*Math.cos(t),u*Math.sin(t),c);o.moveTo(c.x,c.y),o.lineTo(e.x,e.y)})),o.stroke(),o.closePath();for(var h=function(t){var n={};o.beginPath(),o.setLineWidth(1*e.pixelRatio),o.setStrokeStyle(s.gridColor),l.forEach((function(e,i){var a=f(u/r.radarGridCount*t*Math.cos(e),u/r.radarGridCount*t*Math.sin(e),c);0===i?(n=a,o.moveTo(a.x,a.y)):o.lineTo(a.x,a.y)})),o.lineTo(n.x,n.y),o.stroke(),o.closePath()},p=1;p<=r.radarGridCount;p++)h(p);var d=N(l,c,u,t,e,a);return d.forEach((function(t,n){if(o.beginPath(),o.setFillStyle(i(t.color,s.opacity)),t.data.forEach((function(t,e){0===e?o.moveTo(t.position.x,t.position.y):o.lineTo(t.position.x,t.position.y)})),o.closePath(),o.fill(),!1!==e.dataPointShape){var a=r.dataPointShape[n%r.dataPointShape.length],l=t.data.map((function(t){return t.position}));at(l,t.color,a,o,e)}})),ut(l,u,c,e,r,o),{center:c,radius:u,angleList:l}}function Dt(t,e,n){n=0==n?1:n;for(var r=[],o=0;o<n;o++)r[o]=Math.random();return Math.floor(r.reduce((function(t,e){return t+e}))/n*(e-t))+t}function Ft(t,e,n,r){for(var o=!1,i=0;i<e.length;i++)if(e[i].area){if(!(t[3]<e[i].area[1]||t[0]>e[i].area[2]||t[1]>e[i].area[3]||t[2]<e[i].area[0])){o=!0;break}if(t[0]<0||t[1]<0||t[2]>n||t[3]>r){o=!0;break}o=!1}return o}function Et(t){var e,n={};n.xMin=180,n.xMax=0,n.yMin=90,n.yMax=0;for(var r=0;r<t.length;r++)for(var o=t[r].geometry.coordinates,i=0;i<o.length;i++){e=o[i],1==e.length&&(e=e[0]);for(var a=0;a<e.length;a++){var s=e[a][0],l=e[a][1],c={x:s,y:l};n.xMin=n.xMin<c.x?n.xMin:c.x,n.xMax=n.xMax>c.x?n.xMax:c.x,n.yMin=n.yMin<c.y?n.yMin:c.y,n.yMax=n.yMax>c.y?n.yMax:c.y}}return n}function Rt(t,e,n,r,o,i){return{x:(e-n.xMin)*r+o,y:(n.yMax-t)*r+i}}function jt(t,e,n,r,o,i){return{x:(e-o)/r+n.xMin,y:n.yMax-(t-i)/r}}function It(t,e,n){if(e[1]==n[1])return!1;if(e[1]>t[1]&&n[1]>t[1])return!1;if(e[1]<t[1]&&n[1]<t[1])return!1;if(e[1]==t[1]&&n[1]>t[1])return!1;if(n[1]==t[1]&&e[1]>t[1])return!1;if(e[0]<t[0]&&n[1]<t[1])return!1;var r=n[0]-(n[0]-e[0])*(n[1]-t[1])/(n[1]-e[1]);return!(r<t[0])}function zt(t,e){for(var n=0,r=0;r<e.length;r++){var o=e[r][0];1==e.length&&(o=e[r][0]);for(var i=0;i<o.length-1;i++){var a=o[i],s=o[i+1];It(t,a,s)&&(n+=1)}}return n%2==1}function Nt(t,e,r,o){var a,s,l=n({},{border:!0,borderWidth:1,borderColor:"#666666",fillOpacity:.6,activeBorderColor:"#f04864",activeFillColor:"#facc14",activeFillOpacity:1},e.extra.map),c=t,u=Et(c),h=e.width/Math.abs(u.xMax-u.xMin),f=e.height/Math.abs(u.yMax-u.yMin),p=h<f?h:f,d=e.width/2-Math.abs(u.xMax-u.xMin)/2*p,v=e.height/2-Math.abs(u.yMax-u.yMin)/2*p;o.beginPath(),o.clearRect(0,0,e.width,e.height),o.setFillStyle(e.background||"#FFFFFF"),o.rect(0,0,e.width,e.height),o.fill();for(var y=0;y<c.length;y++){o.beginPath(),o.setLineWidth(l.borderWidth*e.pixelRatio),o.setStrokeStyle(l.borderColor),o.setFillStyle(i(t[y].color,l.fillOpacity)),e.tooltip&&e.tooltip.index==y&&(o.setStrokeStyle(l.activeBorderColor),o.setFillStyle(i(l.activeFillColor,l.activeFillOpacity)));for(var x=c[y].geometry.coordinates,m=0;m<x.length;m++){a=x[m],1==a.length&&(a=a[0]);for(var _=0;_<a.length;_++)s=Rt(a[_][1],a[_][0],u,p,d,v),0===_?(o.beginPath(),o.moveTo(s.x,s.y)):o.lineTo(s.x,s.y);o.fill(),1==l.border&&o.stroke()}if(1==e.dataLabel){var b=c[y].properties.centroid;if(b){s=Rt(b[1],b[0],u,p,d,v);var w=c[y].textSize||r.fontSize,S=c[y].properties.name;o.beginPath(),o.setFontSize(w),o.setFillStyle(c[y].textColor||"#666666"),o.fillText(S,s.x-g(S,w)/2,s.y+w/2),o.closePath(),o.stroke()}}}e.chartData.mapData={bounds:u,scale:p,xoffset:d,yoffset:v},St(e,r,o,1),o.draw()}function Wt(t,e){var n=t.series.sort((function(t,e){return parseInt(e.textSize)-parseInt(t.textSize)}));switch(e){case"normal":for(var r=0;r<n.length;r++){var o=n[r].name,i=n[r].textSize,a=g(o,i),s=void 0,l=void 0,c=void 0,u=0;while(1){u++,s=Dt(-t.width/2,t.width/2,5)-a/2,l=Dt(-t.height/2,t.height/2,5)+i/2,c=[s-5+t.width/2,l-5-i+t.height/2,s+a+5+t.width/2,l+5+t.height/2];var h=Ft(c,n,t.width,t.height);if(!h)break;if(1e3==u){c=[-100,-100,-100,-100];break}}n[r].area=c}break;case"vertical":for(var f=function(){return Math.random()>.7},p=0;p<n.length;p++){var d=n[p].name,v=n[p].textSize,y=g(d,v),x=f(),m=void 0,_=void 0,b=void 0,w=void 0,S=0;while(1){S++;var A=void 0;if(x?(m=Dt(-t.width/2,t.width/2,5)-y/2,_=Dt(-t.height/2,t.height/2,5)+v/2,b=[_-5-y+t.width/2,-m-5+t.height/2,_+5+t.width/2,-m+v+5+t.height/2],w=[t.width-(t.width/2-t.height/2)-(-m+v+5+t.height/2)-5,t.height/2-t.width/2+(_-5-y+t.width/2)-5,t.width-(t.width/2-t.height/2)-(-m+v+5+t.height/2)+v,t.height/2-t.width/2+(_-5-y+t.width/2)+y+5],A=Ft(w,n,t.height,t.width)):(m=Dt(-t.width/2,t.width/2,5)-y/2,_=Dt(-t.height/2,t.height/2,5)+v/2,b=[m-5+t.width/2,_-5-v+t.height/2,m+y+5+t.width/2,_+5+t.height/2],A=Ft(b,n,t.width,t.height)),!A)break;if(1e3==S){b=[-1e3,-1e3,-1e3,-1e3];break}}x?(n[p].area=w,n[p].areav=b):n[p].area=b,n[p].rotate=x}break}return n}function Bt(t,e,r,o){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1;n({},{type:"normal",autoColors:!0},e.extra.word);o.beginPath(),o.setFillStyle(e.background||"#FFFFFF"),o.rect(0,0,e.width,e.height),o.fill(),o.save();var a=e.chartData.wordCloudData;o.translate(e.width/2,e.height/2);for(var s=0;s<a.length;s++){o.save(),a[s].rotate&&o.rotate(90*Math.PI/180);var l=a[s].name,c=a[s].textSize,u=g(l,c);o.beginPath(),o.setStrokeStyle(a[s].color),o.setFillStyle(a[s].color),o.setFontSize(c),a[s].rotate?a[s].areav[0]>0&&(e.tooltip&&e.tooltip.index==s?o.strokeText(l,(a[s].areav[0]+5-e.width/2)*i-u*(1-i)/2,(a[s].areav[1]+5+c-e.height/2)*i):o.fillText(l,(a[s].areav[0]+5-e.width/2)*i-u*(1-i)/2,(a[s].areav[1]+5+c-e.height/2)*i)):a[s].area[0]>0&&(e.tooltip&&e.tooltip.index==s?o.strokeText(l,(a[s].area[0]+5-e.width/2)*i-u*(1-i)/2,(a[s].area[1]+5+c-e.height/2)*i):o.fillText(l,(a[s].area[0]+5-e.width/2)*i-u*(1-i)/2,(a[s].area[1]+5+c-e.height/2)*i)),o.stroke(),o.restore()}o.restore()}function Vt(t,e,r,o){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,s=n({},{activeWidth:10,activeOpacity:.3,border:!1,borderWidth:2,borderColor:"#FFFFFF",fillOpacity:1,labelAlign:"right"},e.extra.funnel),l=(e.height-e.area[0]-e.area[2])/t.length,c={x:e.area[3]+(e.width-e.area[1]-e.area[3])/2,y:e.height-e.area[2]},u=s.activeWidth,h=Math.min((e.width-e.area[1]-e.area[3])/2-u,(e.height-e.area[0]-e.area[2])/2-u);t=B(t,h,a),o.save(),o.translate(c.x,c.y);for(var f=0;f<t.length;f++)0==f?(e.tooltip&&e.tooltip.index==f&&(o.beginPath(),o.setFillStyle(i(t[f].color,s.activeOpacity)),o.moveTo(-u,0),o.lineTo(-t[f].radius-u,-l),o.lineTo(t[f].radius+u,-l),o.lineTo(u,0),o.lineTo(-u,0),o.closePath(),o.fill()),t[f].funnelArea=[c.x-t[f].radius,c.y-l,c.x+t[f].radius,c.y],o.beginPath(),o.setLineWidth(s.borderWidth*e.pixelRatio),o.setStrokeStyle(s.borderColor),o.setFillStyle(i(t[f].color,s.fillOpacity)),o.moveTo(0,0),o.lineTo(-t[f].radius,-l),o.lineTo(t[f].radius,-l),o.lineTo(0,0),o.closePath(),o.fill(),1==s.border&&o.stroke()):(e.tooltip&&e.tooltip.index==f&&(o.beginPath(),o.setFillStyle(i(t[f].color,s.activeOpacity)),o.moveTo(0,0),o.lineTo(-t[f-1].radius-u,0),o.lineTo(-t[f].radius-u,-l),o.lineTo(t[f].radius+u,-l),o.lineTo(t[f-1].radius+u,0),o.lineTo(0,0),o.closePath(),o.fill(),o.closePath(),o.fill()),t[f].funnelArea=[c.x-t[f].radius,c.y-l*(f+1),c.x+t[f].radius,c.y-l*f],o.beginPath(),o.setLineWidth(s.borderWidth*e.pixelRatio),o.setStrokeStyle(s.borderColor),o.setFillStyle(i(t[f].color,s.fillOpacity)),o.moveTo(0,0),o.lineTo(-t[f-1].radius,0),o.lineTo(-t[f].radius,-l),o.lineTo(t[f].radius,-l),o.lineTo(t[f-1].radius,0),o.lineTo(0,0),o.closePath(),o.fill(),1==s.border&&o.stroke()),o.translate(0,-l);return o.restore(),!1!==e.dataLabel&&1===a&&Ut(t,e,o,l,s.labelAlign,u,c),{center:c,radius:h,series:t}}function Ut(t,e,n,r,i,a,s){for(var l=0;l<t.length;l++){var c=t[l],u=void 0,h=void 0,f=void 0,p=void 0,d=c.format?c.format(+c._proportion_.toFixed(2)):o.toFixed(100*c._proportion_)+"%";"right"==i?(u=0==l?(c.funnelArea[2]+s.x)/2:(c.funnelArea[2]+t[l-1].funnelArea[2])/2,h=u+2*a,f=c.funnelArea[1]+r/2,p=c.textSize||e.fontSize,n.setLineWidth(1*e.pixelRatio),n.setStrokeStyle(c.color),n.setFillStyle(c.color),n.beginPath(),n.moveTo(u,f),n.lineTo(h,f),n.stroke(),n.closePath(),n.beginPath(),n.moveTo(h,f),n.arc(h,f,2,0,2*Math.PI),n.closePath(),n.fill(),n.beginPath(),n.setFontSize(p),n.setFillStyle(c.textColor||"#666666"),n.fillText(d,h+5,f+p/2-2),n.closePath(),n.stroke(),n.closePath()):(u=0==l?(c.funnelArea[0]+s.x)/2:(c.funnelArea[0]+t[l-1].funnelArea[0])/2,h=u-2*a,f=c.funnelArea[1]+r/2,p=c.textSize||e.fontSize,n.setLineWidth(1*e.pixelRatio),n.setStrokeStyle(c.color),n.setFillStyle(c.color),n.beginPath(),n.moveTo(u,f),n.lineTo(h,f),n.stroke(),n.closePath(),n.beginPath(),n.moveTo(h,f),n.arc(h,f,2,0,2*Math.PI),n.closePath(),n.fill(),n.beginPath(),n.setFontSize(p),n.setFillStyle(c.textColor||"#666666"),n.fillText(d,h-5-g(d),f+p/2-2),n.closePath(),n.stroke(),n.closePath())}}function Ht(t,e){e.draw()}var Gt={easeIn:function(t){return Math.pow(t,3)},easeOut:function(t){return Math.pow(t-1,3)+1},easeInOut:function(t){return(t/=.5)<1?.5*Math.pow(t,3):.5*(Math.pow(t-2,3)+2)},linear:function(t){return t}};function qt(t){this.isStop=!1,t.duration="undefined"===typeof t.duration?1e3:t.duration,t.timing=t.timing||"linear";var e=17;function n(){return"undefined"!==typeof setTimeout?function(t,e){setTimeout((function(){var e=+new Date;t(e)}),e)}:"undefined"!==typeof requestAnimationFrame?requestAnimationFrame:function(t){t(null)}}var r=n(),o=null,i=function(n){if(null===n||!0===this.isStop)return t.onProcess&&t.onProcess(1),void(t.onAnimationFinish&&t.onAnimationFinish());if(null===o&&(o=n),n-o<t.duration){var a=(n-o)/t.duration,s=Gt[t.timing];a=s(a),t.onProcess&&t.onProcess(a),r(i,e)}else t.onProcess&&t.onProcess(1),t.onAnimationFinish&&t.onAnimationFinish()};i=i.bind(this),r(i,e)}function Xt(t,e,r,o){var i=this,a=e.series,l=e.categories;a=d(a,e,r);var c=e.animation?e.duration:0;this.animationInstance&&this.animationInstance.stop();var u=null;if("candle"==t){var h=n({},e.extra.candle.average);h.show?(u=s(h.day,h.name,h.color,a[0].data),u=d(u,e,r),e.seriesMA=u):u=e.seriesMA?e.seriesMA=d(e.seriesMA,e,r):a}else u=a;e._series_=a=T(a),e.area=new Array(4);for(var f=0;f<4;f++)e.area[f]=e.padding[f];var p=I(u,e,r,e.chartData),v=p.area.wholeHeight,g=p.area.wholeWidth;switch(r.legendHeight=v,e.legend.position){case"top":e.area[0]+=v;break;case"bottom":e.area[2]+=v;break;case"left":e.area[3]+=g;break;case"right":e.area[1]+=g;break}var y={},x=0;if("line"===e.type||"column"===e.type||"area"===e.type||"mix"===e.type||"candle"===e.type?(y=nt(a,e,r),x=y.yAxisWidth,r.yAxisWidth=x,e.area[3]+=x):r.yAxisWidth=x,e.chartData.yAxisData=y,e.categories&&e.categories.length){e.chartData.xAxisData=K(e.categories,e,r);var m=z(e.categories,e,r,e.chartData.xAxisData.eachSpacing),_=m.xAxisHeight,b=m.angle;r.xAxisHeight=_,r._xAxisTextAngle_=b,e.area[2]+=_,e.chartData.categoriesData=m}if(e.enableScroll&&"right"==e.xAxis.scrollAlign&&void 0===e._scrollDistance_){var w=0,S=e.chartData.xAxisData.xAxisPoints,A=e.chartData.xAxisData.startX,P=e.chartData.xAxisData.endX,k=e.chartData.xAxisData.eachSpacing,O=k*(S.length-1),$=P-A;w=$-O,i.scrollOption={currentOffset:w,startTouchX:w,distance:0,lastMoveTime:0},e._scrollDistance_=w}switch("pie"!==t&&"ring"!==t&&"rose"!==t||(r._pieTextMaxLength_=!1===e.dataLabel?0:q(u)),t){case"word":var C=n({},{type:"normal",autoColors:!0},e.extra.word);1!=e.updateData&&void 0!=e.updateData||(e.chartData.wordCloudData=Wt(e,C.type)),this.animationInstance=new qt({timing:"easeInOut",duration:c,onProcess:function(t){o.clearRect(0,0,e.width,e.height),e.rotate&&it(o,e),Bt(a,e,r,o,t),Ht(e,o)},onAnimationFinish:function(){i.event.trigger("renderComplete")}});break;case"map":o.clearRect(0,0,e.width,e.height),Nt(a,e,r,o);break;case"funnel":this.animationInstance=new qt({timing:"easeInOut",duration:c,onProcess:function(t){o.clearRect(0,0,e.width,e.height),e.rotate&&it(o,e),e.chartData.funnelData=Vt(a,e,r,o,t),kt(e.series,e,r,o,e.chartData),St(e,r,o,t),Ht(e,o)},onAnimationFinish:function(){i.event.trigger("renderComplete")}});break;case"line":this.animationInstance=new qt({timing:"easeIn",duration:c,onProcess:function(t){o.clearRect(0,0,e.width,e.height),e.rotate&&it(o,e),Pt(l,e,r,o),At(l,e,r,o);var n=bt(a,e,r,o,t),i=n.xAxisPoints,s=n.calPoints,c=n.eachSpacing,u=n.minRange,h=n.maxRange;e.chartData.xAxisPoints=i,e.chartData.calPoints=s,e.chartData.eachSpacing=c,Tt(a,e,r,o),!1!==e.enableMarkLine&&1===t&&pt(u,h,e,r,o),kt(e.series,e,r,o,e.chartData),St(e,r,o,t,c,i),Ht(e,o)},onAnimationFinish:function(){i.event.trigger("renderComplete")}});break;case"mix":this.animationInstance=new qt({timing:"easeIn",duration:c,onProcess:function(t){o.clearRect(0,0,e.width,e.height),e.rotate&&it(o,e),Pt(l,e,r,o),At(l,e,r,o);var n=wt(a,e,r,o,t),i=n.xAxisPoints,s=n.calPoints,c=n.eachSpacing,u=n.minRange,h=n.maxRange;e.chartData.xAxisPoints=i,e.chartData.calPoints=s,e.chartData.eachSpacing=c,Tt(a,e,r,o),!1!==e.enableMarkLine&&1===t&&pt(u,h,e,r,o),kt(e.series,e,r,o,e.chartData),St(e,r,o,t,c,i),Ht(e,o)},onAnimationFinish:function(){i.event.trigger("renderComplete")}});break;case"column":this.animationInstance=new qt({timing:"easeIn",duration:c,onProcess:function(t){o.clearRect(0,0,e.width,e.height),e.rotate&&it(o,e),Pt(l,e,r,o),At(l,e,r,o);var n=xt(a,e,r,o,t),i=n.xAxisPoints,s=n.calPoints,c=n.eachSpacing,u=n.minRange,h=n.maxRange;e.chartData.xAxisPoints=i,e.chartData.calPoints=s,e.chartData.eachSpacing=c,Tt(a,e,r,o),!1!==e.enableMarkLine&&1===t&&pt(u,h,e,r,o),kt(e.series,e,r,o,e.chartData),St(e,r,o,t,c,i),Ht(e,o)},onAnimationFinish:function(){i.event.trigger("renderComplete")}});break;case"area":this.animationInstance=new qt({timing:"easeIn",duration:c,onProcess:function(t){o.clearRect(0,0,e.width,e.height),e.rotate&&it(o,e),Pt(l,e,r,o),At(l,e,r,o);var n=_t(a,e,r,o,t),i=n.xAxisPoints,s=n.calPoints,c=n.eachSpacing,u=n.minRange,h=n.maxRange;e.chartData.xAxisPoints=i,e.chartData.calPoints=s,e.chartData.eachSpacing=c,Tt(a,e,r,o),!1!==e.enableMarkLine&&1===t&&pt(u,h,e,r,o),kt(e.series,e,r,o,e.chartData),St(e,r,o,t,c,i),Ht(e,o)},onAnimationFinish:function(){i.event.trigger("renderComplete")}});break;case"ring":case"pie":this.animationInstance=new qt({timing:"easeInOut",duration:c,onProcess:function(t){o.clearRect(0,0,e.width,e.height),e.rotate&&it(o,e),e.chartData.pieData=Ot(a,e,r,o,t),kt(e.series,e,r,o,e.chartData),St(e,r,o,t),Ht(e,o)},onAnimationFinish:function(){i.event.trigger("renderComplete")}});break;case"rose":this.animationInstance=new qt({timing:"easeInOut",duration:c,onProcess:function(t){o.clearRect(0,0,e.width,e.height),e.rotate&&it(o,e),e.chartData.pieData=$t(a,e,r,o,t),kt(e.series,e,r,o,e.chartData),St(e,r,o,t),Ht(e,o)},onAnimationFinish:function(){i.event.trigger("renderComplete")}});break;case"radar":this.animationInstance=new qt({timing:"easeInOut",duration:c,onProcess:function(t){o.clearRect(0,0,e.width,e.height),e.rotate&&it(o,e),e.chartData.radarData=Lt(a,e,r,o,t),kt(e.series,e,r,o,e.chartData),St(e,r,o,t),Ht(e,o)},onAnimationFinish:function(){i.event.trigger("renderComplete")}});break;case"arcbar":this.animationInstance=new qt({timing:"easeInOut",duration:c,onProcess:function(t){o.clearRect(0,0,e.width,e.height),e.rotate&&it(o,e),e.chartData.arcbarData=Ct(a,e,r,o,t),Ht(e,o)},onAnimationFinish:function(){i.event.trigger("renderComplete")}});break;case"gauge":this.animationInstance=new qt({timing:"easeInOut",duration:c,onProcess:function(t){o.clearRect(0,0,e.width,e.height),e.rotate&&it(o,e),e.chartData.gaugeData=Mt(l,a,e,r,o,t),Ht(e,o)},onAnimationFinish:function(){i.event.trigger("renderComplete")}});break;case"candle":this.animationInstance=new qt({timing:"easeIn",duration:c,onProcess:function(t){o.clearRect(0,0,e.width,e.height),e.rotate&&it(o,e),Pt(l,e,r,o),At(l,e,r,o);var n=mt(a,u,e,r,o,t),i=n.xAxisPoints,s=n.calPoints,c=n.eachSpacing,h=n.minRange,f=n.maxRange;e.chartData.xAxisPoints=i,e.chartData.calPoints=s,e.chartData.eachSpacing=c,Tt(a,e,r,o),!1!==e.enableMarkLine&&1===t&&pt(h,f,e,r,o),kt(u||e.series,e,r,o,e.chartData),St(e,r,o,t,c,i),Ht(e,o)},onAnimationFinish:function(){i.event.trigger("renderComplete")}});break}}function Jt(){this.events={}}qt.prototype.stop=function(){this.isStop=!0},Jt.prototype.addEventListener=function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)},Jt.prototype.trigger=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=e[0],o=e.slice(1);this.events[r]&&this.events[r].forEach((function(t){try{t.apply(null,o)}catch(e){console.error(e)}}))};var Yt=function(t){t.pixelRatio=t.pixelRatio?t.pixelRatio:1,t.fontSize=t.fontSize?t.fontSize*t.pixelRatio:13*t.pixelRatio,t.title=n({},t.title),t.subtitle=n({},t.subtitle),t.duration=t.duration?t.duration:1e3,t.yAxis=n({},{gridType:"solid",dashLength:4*t.pixelRatio},t.yAxis),t.xAxis=n({},{rotateLabel:!1,type:"calibration",gridType:"solid",dashLength:4*t.pixelRatio,scrollAlign:"left",boundaryGap:"center"},t.xAxis),t.legend=n({},{show:!0,position:"bottom",float:"center",backgroundColor:"rgba(0,0,0,0)",borderColor:"rgba(0,0,0,0)",borderWidth:0,padding:5,margin:5,itemGap:10,fontSize:t.fontSize,lineHeight:t.fontSize,fontColor:"#333333",format:{},hiddenColor:"#CECECE"},t.legend),t.legend.borderWidth=t.legend.borderWidth*t.pixelRatio,t.legend.itemGap=t.legend.itemGap*t.pixelRatio,t.legend.padding=t.legend.padding*t.pixelRatio,t.legend.margin=t.legend.margin*t.pixelRatio,t.extra=n({},t.extra),t.rotate=!!t.rotate,t.animation=!!t.animation;var o=JSON.parse(JSON.stringify(r));if(o.colors=t.colors?t.colors:o.colors,o.yAxisTitleWidth=!0!==t.yAxis.disabled&&t.yAxis.title?o.yAxisTitleWidth:0,"pie"!=t.type&&"ring"!=t.type||(o.pieChartLinePadding=!1===t.dataLabel?0:t.extra.pie.labelWidth*t.pixelRatio||o.pieChartLinePadding*t.pixelRatio),"rose"==t.type&&(o.pieChartLinePadding=!1===t.dataLabel?0:t.extra.rose.labelWidth*t.pixelRatio||o.pieChartLinePadding*t.pixelRatio),o.pieChartTextPadding=!1===t.dataLabel?0:o.pieChartTextPadding*t.pixelRatio,o.yAxisSplit=t.yAxis.splitNumber?t.yAxis.splitNumber:r.yAxisSplit,o.rotate=t.rotate,t.rotate){var i=t.width,a=t.height;t.width=a,t.height=i}t.padding=t.padding?t.padding:o.padding;for(var s=0;s<4;s++)t.padding[s]*=t.pixelRatio;o.yAxisWidth=r.yAxisWidth*t.pixelRatio,o.xAxisHeight=r.xAxisHeight*t.pixelRatio,t.enableScroll&&t.xAxis.scrollShow&&(o.xAxisHeight+=6*t.pixelRatio),o.xAxisLineHeight=r.xAxisLineHeight*t.pixelRatio,o.legendHeight=r.legendHeight*t.pixelRatio,o.fontSize=t.fontSize,o.titleFontSize=r.titleFontSize*t.pixelRatio,o.subtitleFontSize=r.subtitleFontSize*t.pixelRatio,o.toolTipPadding=r.toolTipPadding*t.pixelRatio,o.toolTipLineHeight=r.toolTipLineHeight*t.pixelRatio,o.columePadding=r.columePadding*t.pixelRatio,t.$this=t.$this?t.$this:this,this.context=e.createCanvasContext(t.canvasId,t.$this),t.chartData={},this.event=new Jt,this.scrollOption={currentOffset:0,startTouchX:0,distance:0,lastMoveTime:0},this.opts=t,this.config=o,Xt.call(this,t.type,t,o,this.context)};Yt.prototype.updateData=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.opts=n({},this.opts,t),this.opts.updateData=!0;var e=t.scrollPosition||"current";switch(e){case"current":this.opts._scrollDistance_=this.scrollOption.currentOffset;break;case"left":this.opts._scrollDistance_=0,this.scrollOption={currentOffset:0,startTouchX:0,distance:0,lastMoveTime:0};break;case"right":var r=nt(this.opts.series,this.opts,this.config),o=r.yAxisWidth;this.config.yAxisWidth=o;var i=0,a=K(this.opts.categories,this.opts,this.config),s=a.xAxisPoints,l=a.startX,c=a.endX,u=a.eachSpacing,h=u*(s.length-1),f=c-l;i=f-h,this.scrollOption={currentOffset:i,startTouchX:i,distance:0,lastMoveTime:0},this.opts._scrollDistance_=i;break}Xt.call(this,this.opts.type,this.opts,this.config,this.context)},Yt.prototype.zoom=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.opts.xAxis.itemCount;if(!0===this.opts.enableScroll){var e=Math.round(Math.abs(this.scrollOption.currentOffset)/this.opts.chartData.eachSpacing)+Math.round(this.opts.xAxis.itemCount/2);this.opts.animation=!1,this.opts.xAxis.itemCount=t.itemCount;var n=nt(this.opts.series,this.opts,this.config),r=n.yAxisWidth;this.config.yAxisWidth=r;var o=0,i=K(this.opts.categories,this.opts,this.config),a=i.xAxisPoints,s=i.startX,l=i.endX,c=i.eachSpacing,u=c*e,h=l-s,f=h-c*(a.length-1);o=h/2-u,o>0&&(o=0),o<f&&(o=f),this.scrollOption={currentOffset:o,startTouchX:o,distance:0,lastMoveTime:0},this.opts._scrollDistance_=o,Xt.call(this,this.opts.type,this.opts,this.config,this.context)}else console.log("请启用滚动条后使用！")},Yt.prototype.stopAnimation=function(){this.animationInstance&&this.animationInstance.stop()},Yt.prototype.addEventListener=function(t,e){this.event.addEventListener(t,e)},Yt.prototype.getCurrentDataIndex=function(t){var e=null;if(e=t.changedTouches?t.changedTouches[0]:t.mp.changedTouches[0],e){var n=m(e,this.opts,t);return"pie"===this.opts.type||"ring"===this.opts.type||"rose"===this.opts.type?E({x:n.x,y:n.y},this.opts.chartData.pieData):"radar"===this.opts.type?M({x:n.x,y:n.y},this.opts.chartData.radarData,this.opts.categories.length):"funnel"===this.opts.type?L({x:n.x,y:n.y},this.opts.chartData.funnelData):"map"===this.opts.type?F({x:n.x,y:n.y},this.opts):"word"===this.opts.type?D({x:n.x,y:n.y},this.opts.chartData.wordCloudData):k({x:n.x,y:n.y},this.opts.chartData.xAxisPoints,this.opts,this.config,Math.abs(this.scrollOption.currentOffset))}return-1},Yt.prototype.getLegendDataIndex=function(t){var e=null;if(e=t.changedTouches?t.changedTouches[0]:t.mp.changedTouches[0],e){var n=m(e,this.opts,t);return O({x:n.x,y:n.y},this.opts.chartData.legendData)}return-1},Yt.prototype.touchLegend=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=null;if(n=t.changedTouches?t.changedTouches[0]:t.mp.changedTouches[0],n){m(n,this.opts,t);var r=this.getLegendDataIndex(t);r>=0&&(this.opts.series[r].show=!this.opts.series[r].show,this.opts.animation=!!e.animation,Xt.call(this,this.opts.type,this.opts,this.config,this.context))}},Yt.prototype.showToolTip=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=null;r=t.changedTouches?t.changedTouches[0]:t.mp.changedTouches[0],r||console.log("touchError");var o=m(r,this.opts,t),i=this.scrollOption.currentOffset,a=n({},this.opts,{_scrollDistance_:i,animation:!1});if("line"===this.opts.type||"area"===this.opts.type||"column"===this.opts.type){var s=this.getCurrentDataIndex(t);if(s>-1){var l=_(this.opts.series,s);if(0!==l.length){var c=S(l,this.opts.chartData.calPoints,s,this.opts.categories,e),u=c.textList,h=c.offset;h.y=o.y,a.tooltip={textList:u,offset:h,option:e,index:s}}}Xt.call(this,a.type,a,this.config,this.context)}if("mix"===this.opts.type){s=this.getCurrentDataIndex(t);if(s>-1){i=this.scrollOption.currentOffset,a=n({},this.opts,{_scrollDistance_:i,animation:!1}),l=_(this.opts.series,s);if(0!==l.length){var f=A(l,this.opts.chartData.calPoints,s,this.opts.categories,e);u=f.textList,h=f.offset;h.y=o.y,a.tooltip={textList:u,offset:h,option:e,index:s}}}Xt.call(this,a.type,a,this.config,this.context)}if("candle"===this.opts.type){s=this.getCurrentDataIndex(t);if(s>-1){i=this.scrollOption.currentOffset,a=n({},this.opts,{_scrollDistance_:i,animation:!1}),l=_(this.opts.series,s);if(0!==l.length){c=P(this.opts.series[0].data,l,this.opts.chartData.calPoints,s,this.opts.categories,this.opts.extra.candle,e),u=c.textList,h=c.offset;h.y=o.y,a.tooltip={textList:u,offset:h,option:e,index:s}}}Xt.call(this,a.type,a,this.config,this.context)}if("pie"===this.opts.type||"ring"===this.opts.type||"rose"===this.opts.type||"funnel"===this.opts.type){s=this.getCurrentDataIndex(t);if(s>-1){i=this.scrollOption.currentOffset,a=n({},this.opts,{_scrollDistance_:i,animation:!1}),l=this.opts._series_[s],u=[{text:e.format?e.format(l):l.name+": "+l.data,color:l.color}],h={x:o.x,y:o.y};a.tooltip={textList:u,offset:h,option:e,index:s}}Xt.call(this,a.type,a,this.config,this.context)}if("map"===this.opts.type||"word"===this.opts.type){s=this.getCurrentDataIndex(t);if(s>-1){i=this.scrollOption.currentOffset,a=n({},this.opts,{_scrollDistance_:i,animation:!1}),l=this.opts._series_[s],u=[{text:e.format?e.format(l):l.properties.name,color:l.color}],h={x:o.x,y:o.y};a.tooltip={textList:u,offset:h,option:e,index:s}}a.updateData=!1,Xt.call(this,a.type,a,this.config,this.context)}if("radar"===this.opts.type){s=this.getCurrentDataIndex(t);if(s>-1){i=this.scrollOption.currentOffset,a=n({},this.opts,{_scrollDistance_:i,animation:!1}),l=_(this.opts.series,s);if(0!==l.length){u=l.map((function(t){return{text:e.format?e.format(t):t.name+": "+t.data,color:t.color}})),h={x:o.x,y:o.y};a.tooltip={textList:u,offset:h,option:e,index:s}}}Xt.call(this,a.type,a,this.config,this.context)}},Yt.prototype.translate=function(t){this.scrollOption={currentOffset:t,startTouchX:t,distance:0,lastMoveTime:0};var e=n({},this.opts,{_scrollDistance_:t,animation:!1});Xt.call(this,this.opts.type,e,this.config,this.context)},Yt.prototype.scrollStart=function(t){var e=null;e=t.changedTouches?t.changedTouches[0]:t.mp.changedTouches[0];var n=m(e,this.opts,t);e&&!0===this.opts.enableScroll&&(this.scrollOption.startTouchX=n.x)},Yt.prototype.scroll=function(t){0===this.scrollOption.lastMoveTime&&(this.scrollOption.lastMoveTime=Date.now());var e=this.opts.extra.touchMoveLimit||20,r=Date.now(),o=r-this.scrollOption.lastMoveTime;if(!(o<Math.floor(1e3/e))){this.scrollOption.lastMoveTime=r;var i=null;if(i=t.changedTouches?t.changedTouches[0]:t.mp.changedTouches[0],i&&!0===this.opts.enableScroll){var a,s=m(i,this.opts,t);a=s.x-this.scrollOption.startTouchX;var c=this.scrollOption.currentOffset,u=l(c+a,this.opts.chartData,this.config,this.opts);this.scrollOption.distance=a=u-c;var h=n({},this.opts,{_scrollDistance_:c+a,animation:!1});return Xt.call(this,h.type,h,this.config,this.context),c+a}}},Yt.prototype.scrollEnd=function(t){if(!0===this.opts.enableScroll){var e=this.scrollOption,n=e.currentOffset,r=e.distance;this.scrollOption.currentOffset=n+r,this.scrollOption.distance=0}},"object"===typeof t.exports&&(t.exports=Yt)}).call(this,n(/*! ./node_modules/@dcloudio/uni-mp-qq/dist/index.js */1)["default"])},3:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(r){"object"===typeof window&&(n=window)}t.exports=n},4:
/*!*************************************************************!*\
  !*** D:/g工作/zilv/code/defaultmoban/defaultmoban/pages.json ***!
  \*************************************************************/
/*! no static exports found */function(t,e){},8:
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */function(t,e,n){"use strict";function r(t,e,n,r,o,i,a,s,l,c){var u,h="function"===typeof t?t.options:t;if(l){h.components||(h.components={});var f=Object.prototype.hasOwnProperty;for(var p in l)f.call(l,p)&&!f.call(h.components,p)&&(h.components[p]=l[p])}if(c&&((c.beforeCreate||(c.beforeCreate=[])).unshift((function(){this[c.__module]=this})),(h.mixins||(h.mixins=[])).push(c)),e&&(h.render=e,h.staticRenderFns=n,h._compiled=!0),r&&(h.functional=!0),i&&(h._scopeId="data-v-"+i),a?(u=function(t){t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,t||"undefined"===typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},h._ssrRegister=u):o&&(u=s?function(){o.call(this,this.$root.$options.shadowRoot)}:o),u)if(h.functional){h._injectStyles=u;var d=h.render;h.render=function(t,e){return u.call(e),d(t,e)}}else{var v=h.beforeCreate;h.beforeCreate=v?[].concat(v,u):[u]}return{exports:t,options:h}}n.r(e),n.d(e,"default",(function(){return r}))},9:
/*!****************************************************************!*\
  !*** D:/g工作/zilv/code/defaultmoban/defaultmoban/common/api.js ***!
  \****************************************************************/
/*! no static exports found */function(t,e,n){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=a(n(/*! ./node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/regenerator */10)),o=a(n(/*! @/store */13)),i=void 0;function a(t){return t&&t.__esModule?t:{default:t}}function s(t,e,n,r,o,i,a){try{var s=t[i](a),l=s.value}catch(c){return void n(c)}s.done?e(l):Promise.resolve(l).then(r,o)}function l(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){s(i,r,o,a,l,"next",t)}function l(t){s(i,r,o,a,l,"throw",t)}a(void 0)}))}}var c="https://task.vsclouds.com/",u={cTaskType:c+"type/create",dTaskType:c+"type/delete",rTaskType:c+"type/list",cTask:c+"job/create",uTask:c+"job/update",dTask:c+"job/delete",TaskList:c+"job/list",TaskEnd:c+"job/end",ranklist:c+"rank/list",uniLogin:c+"public/weixin/mp/common/user/login/wx",visitLogin:c+"public/weixin/mp/common/tourist/login/wx",userInfo:c+"weixin/mp/common/user/info",editName:c+"common/c/user/update",exp:c+"user/experience/cumulative",star:c+"star/adjust/create",starhistory:c+"star/adjust/history",creward:c+"star/exchange/create",ureward:c+"star/exchange/update",rewardList:c+"star/exchange/list",rewardOk:c+"star/exchange/exchange",rewardDelete:c+"star/exchange/delete",charts:c+"job/uchart",signin:c+"sign/in",notice:c+"announcement/current",signget:c+"sign/get",signclear:c+"sign/clear",userclear:c+"user/experience/clear",cjList:c+"achievement/user/list",cjRequest:c+"achievement/user/check"},h=["胜","三","十","百","千","初","传","应","秒","稳","坚","恒","精"],f=function(t){var e=[{title:"旗开得胜",icon:"胜"},{title:"三阳开泰",icon:"三"},{title:"十全十美",icon:"十"},{title:"百尺竿头",icon:"百"},{title:"千锤百炼",icon:"千"},{title:"初出茅庐",icon:"初"},{title:"十口相传",icon:"传"},{title:"一呼百应",icon:"应"},{title:"争分夺秒",icon:"秒"},{title:"高枕无忧",icon:"稳"},{title:"坚持不懈",icon:"坚"},{title:"持之以恒",icon:"恒"},{title:"精益求精",icon:"精"}],n="";return e.forEach((function(e,r,o){t==e.title&&(n=e.icon)})),n},p={ctask:10,endtask:30,signin:10,share:50},d=function(){var t=new Date,e=t.getDay();return 0==e?7:e},v={qt:"青铜学渣",by:"白银学民",hj:"黄金学霸",bj:"铂金学帝",zs:"钻石学仙",xs:"学神"},g=function(t){return t>=1&&t<=2?v.qt:t>=3&&t<=4?v.by:t>=5&&t<=6?v.hj:t>=7&&t<=8?v.bj:t>=9&&t<=10?v.zs:t>10?v.xs:void 0},y=function(e,n){return new Promise((function(r,o){t.request({url:e,method:"GET",data:n,timeout:12e3,header:{"content-type":"application/json",token:t.getStorageSync("token")},success:function(e){console.log(e),200==e.statusCode||401==e.statusCode?r(e.data):(404==e.statusCode?t.showToast({title:"访问资源错误",icon:"none",duration:1e3}):t.showToast({title:e.data.message,icon:"none",duration:1e3}),setTimeout((function(){t.switchTab({url:"/pages/rwlist/rwlist"})}),1e3))},fail:function(t){console.log(t),o(t)}})}))},x=function(e,n){return new Promise((function(r,o){t.request({url:e,method:"POST",data:n,timeout:12e3,header:{"content-type":"application/json",token:t.getStorageSync("token")},success:function(t){console.log(t),r(t.data)},fail:function(t){console.log(t),o(t)}})}))},m=function(t){return"true"==t||"false"!=t&&("undefined"==t||void 0)},_=function(){var e=l(r.default.mark((function e(){var n,i;return r.default.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,y(u.userInfo);case 2:if(n=e.sent,!O(n)){e.next=18;break}return i=parseInt(n.data.userLevelInfo.currentExperience/n.data.userLevelInfo.totalExperienceForCurrentLevel*100),t.getStorageSync("level")&&(n.data.userLevelInfo.level==t.getStorageSync("level")?o.default.commit("levelUpdata",!1):o.default.commit("levelUpdata",!0)),t.getStorageSync("honor")&&(g(n.data.userLevelInfo.level)==t.getStorageSync("honor")?o.default.commit("honorUpdata",!1):o.default.commit("honorUpdata",!0)),t.setStorage({key:"level",data:n.data.userLevelInfo.level}),o.default.commit("changeLevel",n.data.userLevelInfo.level),t.setStorage({key:"honor",data:g(n.data.userLevelInfo.level)}),o.default.commit("changeHonor",g(n.data.userLevelInfo.level)),t.setStorage({key:"progress",data:i}),o.default.commit("changeProgress",i),t.setStorage({key:"starNum",data:n.data.starSummary.currentCount}),o.default.commit("changeStar",n.data.starSummary.currentCount),e.abrupt("return",!0);case 18:return t.showModal({title:"用户信息获取失败",content:t.getStorageSync("token")?t.getStorageSync("token"):"no token",success:function(t){t.confirm?(console.log(n),console.log("用户点击确定")):t.cancel&&console.log("用户点击取消")}}),e.abrupt("return",!1);case 20:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),b=function(){var t=l(r.default.mark((function t(e,n){var o,i;return r.default.wrap((function(t){while(1)switch(t.prev=t.next){case 0:return o={experience:e},t.next=3,x(u.exp,o);case 3:i=t.sent,O(i)&&0==i.resultCode&&(console.log(i),n||_());case 5:case"end":return t.stop()}}),t)})));return function(e,n){return t.apply(this,arguments)}}(),w=function(){var t=l(r.default.mark((function t(e){var n;return r.default.wrap((function(t){while(1)switch(t.prev=t.next){case 0:return t.next=2,x(u.cjRequest,e);case 2:if(n=t.sent,!O(n)){t.next=8;break}if(console.log("成就返回结果"),console.log(n),0!=n.resultCode){t.next=8;break}return t.abrupt("return",n);case 8:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),S=function(){var t=l(r.default.mark((function t(e,n,o){var i,a;return r.default.wrap((function(t){while(1)switch(t.prev=t.next){case 0:return i={adjustCount:e,reason:n},t.next=3,x(u.star,i);case 3:a=t.sent,O(a)&&0==a.resultCode&&(console.log(a),o||_());case 5:case"end":return t.stop()}}),t)})));return function(e,n,r){return t.apply(this,arguments)}}(),A=function(){return new Promise((function(e,n){t.showLoading({title:"加载中...",mask:!0,success:function(t){e(t)},fail:function(t){n(t)}})}))},P=function(){return new Promise((function(e){t.hideLoading(),e()}))},T=function(t){return 0==t};function k(t){return t.replace(/(^\s*)|(\s*$)/g,"")}var O=function(e,n){if(T(e.resultCode))return!0;if(4001==e.resultCode){var r={url:n},o=$(r);console.log("/pages/login/login?"+o),t.redirectTo({url:"/pages/login/login?"+o})}87014!=e.resultCode&&7001!=e.resultCode||t.showToast({title:e.message,icon:"none",duration:1500}),console.log("reshook"),console.log(e),console.log(n),console.log(i)},$=function(t){var e=Object.keys(t).map((function(e){return encodeURIComponent(e)+"="+encodeURIComponent(t[e])})).join("&");return e},C=function(t){if(t>3600){var e=parseInt(t/3600),n=parseInt((t-3600*e)/60),r=t-3600*e-60*n;return e+"小时"+n+"分钟"+r+"秒"}var o=parseInt(t/60),i=t-60*o;return(0==o?"":o+"分钟")+i+"秒"};function M(t){return t=t.toString(),t[1]?t:"0"+t}var L=function(t){var e=t.getFullYear(),n=t.getMonth()+1,r=t.getDate();return[e,n,r].map(M).join("-")},D={encodeData:$,getData:y,postData:x,webapi:u,honor:v,reshook:O,showLoading:A,hideLoading:P,formatTime:L,getUserinfo:_,trim:k,secToTime:C,addExp:b,starAdjust:S,expval:p,getWeekDay:d,expTitle:g,honorTitle:h,cjCheck:w,strbool:m,honorCorres:f};e.default=D}).call(this,n(/*! ./node_modules/@dcloudio/uni-mp-qq/dist/index.js */1)["default"])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGRjbG91ZGlvL3VuaS1tcC1xcS9kaXN0L2luZGV4LmpzP2E4MjEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2dWUvYmFiZWwtcHJlc2V0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanM/NDc5NSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLW1vZHVsZS5qcz9iYmRkIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanM/OTZjZiIsInVuaS1hcHA6Ly8vc3RvcmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZXgvZGlzdC92dWV4LmVzbS5qcz8yZjYyIiwidW5pLWFwcDovLy9jb21wb25lbnRzL3VuaS1zd2lwZS1hY3Rpb24taXRlbS9tcG90aGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZGNsb3VkaW8vdnVlLWNsaS1wbHVnaW4tdW5pL3BhY2thZ2VzL21wLXZ1ZS9kaXN0L21wLnJ1bnRpbWUuZXNtLmpzPzY2ZmQiLCJ1bmktYXBwOi8vL2NvbXBvbmVudHMvdS1jaGFydHMvdS1jaGFydHMuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcz9jZDAwIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZGNsb3VkaW8vdnVlLWNsaS1wbHVnaW4tdW5pL3BhY2thZ2VzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcz9mMGM1IiwidW5pLWFwcDovLy9jb21tb24vYXBpLmpzIl0sIm5hbWVzIjpbIl90b1N0cmluZyIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiaGFzT3duUHJvcGVydHkiLCJpc0ZuIiwiZm4iLCJpc1N0ciIsInN0ciIsImlzUGxhaW5PYmplY3QiLCJvYmoiLCJjYWxsIiwiaGFzT3duIiwia2V5Iiwibm9vcCIsImNhY2hlZCIsImNhY2hlIiwiY3JlYXRlIiwiaGl0IiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwicmVwbGFjZSIsIl8iLCJjIiwidG9VcHBlckNhc2UiLCJIT09LUyIsImdsb2JhbEludGVyY2VwdG9ycyIsInNjb3BlZEludGVyY2VwdG9ycyIsIm1lcmdlSG9vayIsInBhcmVudFZhbCIsImNoaWxkVmFsIiwicmVzIiwiY29uY2F0IiwiQXJyYXkiLCJpc0FycmF5IiwiZGVkdXBlSG9va3MiLCJob29rcyIsImkiLCJsZW5ndGgiLCJpbmRleE9mIiwicHVzaCIsInJlbW92ZUhvb2siLCJob29rIiwiaW5kZXgiLCJzcGxpY2UiLCJtZXJnZUludGVyY2VwdG9ySG9vayIsImludGVyY2VwdG9yIiwib3B0aW9uIiwia2V5cyIsImZvckVhY2giLCJyZW1vdmVJbnRlcmNlcHRvckhvb2siLCJhZGRJbnRlcmNlcHRvciIsIm1ldGhvZCIsInJlbW92ZUludGVyY2VwdG9yIiwid3JhcHBlckhvb2siLCJkYXRhIiwiaXNQcm9taXNlIiwidGhlbiIsInF1ZXVlIiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiY2FsbGJhY2siLCJ3cmFwcGVyT3B0aW9ucyIsIm9wdGlvbnMiLCJuYW1lIiwib2xkQ2FsbGJhY2siLCJ3cmFwcGVyUmV0dXJuVmFsdWUiLCJyZXR1cm5WYWx1ZSIsInJldHVyblZhbHVlSG9va3MiLCJnZXRBcGlJbnRlcmNlcHRvckhvb2tzIiwic2xpY2UiLCJzY29wZWRJbnRlcmNlcHRvciIsImludm9rZUFwaSIsImFwaSIsInBhcmFtcyIsImludm9rZSIsInByb21pc2VJbnRlcmNlcHRvciIsImNhdGNoIiwiU1lOQ19BUElfUkUiLCJDT05URVhUX0FQSV9SRSIsIkNPTlRFWFRfQVBJX1JFX0VYQyIsIkFTWU5DX0FQSSIsIkNBTExCQUNLX0FQSV9SRSIsImlzQ29udGV4dEFwaSIsInRlc3QiLCJpc1N5bmNBcGkiLCJpc0NhbGxiYWNrQXBpIiwiaGFuZGxlUHJvbWlzZSIsImVyciIsInNob3VsZFByb21pc2UiLCJwcm9taXNpZnkiLCJzdWNjZXNzIiwiZmFpbCIsImNvbXBsZXRlIiwicmVqZWN0IiwiYXNzaWduIiwiZmluYWxseSIsInRoaXMiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwicmVhc29uIiwiRVBTIiwiQkFTRV9ERVZJQ0VfV0lEVEgiLCJpc0lPUyIsImRldmljZVdpZHRoIiwiZGV2aWNlRFBSIiwiY2hlY2tEZXZpY2VXaWR0aCIsInd4IiwiZ2V0U3lzdGVtSW5mb1N5bmMiLCJwbGF0Zm9ybSIsInBpeGVsUmF0aW8iLCJ3aW5kb3dXaWR0aCIsInVweDJweCIsIm51bWJlciIsIm5ld0RldmljZVdpZHRoIiwiTnVtYmVyIiwicmVzdWx0IiwiTWF0aCIsImZsb29yIiwiaW50ZXJjZXB0b3JzIiwiYmFzZUFwaSIsImZyZWV6ZSIsIl9fcHJvdG9fXyIsInByZXZpZXdJbWFnZSIsImFyZ3MiLCJmcm9tQXJncyIsImN1cnJlbnRJbmRleCIsInBhcnNlSW50IiwiY3VycmVudCIsImlzTmFOIiwidXJscyIsImxlbiIsImZpbHRlciIsIml0ZW0iLCJpbmRpY2F0b3IiLCJsb29wIiwicHJvdG9jb2xzIiwidG9kb3MiLCJjYW5JVXNlcyIsIkNBTExCQUNLUyIsInByb2Nlc3NDYWxsYmFjayIsIm1ldGhvZE5hbWUiLCJwcm9jZXNzUmV0dXJuVmFsdWUiLCJwcm9jZXNzQXJncyIsImFyZ3NPcHRpb24iLCJrZWVwRnJvbUFyZ3MiLCJ0b0FyZ3MiLCJrZXlPcHRpb24iLCJjb25zb2xlIiwid2FybiIsImtlZXBSZXR1cm5WYWx1ZSIsIndyYXBwZXIiLCJwcm90b2NvbCIsImFyZzEiLCJhcmcyIiwiYXBwbHkiLCJlcnJvciIsInRvZG9BcGlzIiwiVE9ET1MiLCJjcmVhdGVUb2RvQXBpIiwiZXJyTXNnIiwicHJvdmlkZXJzIiwib2F1dGgiLCJzaGFyZSIsInBheW1lbnQiLCJnZXRQcm92aWRlciIsInNlcnZpY2UiLCJwcm92aWRlciIsImV4dHJhQXBpIiwiZ2V0RW1pdHRlciIsIkVtaXR0ZXIiLCJWdWUiLCJjdHgiLCIkb24iLCJhcmd1bWVudHMiLCIkb2ZmIiwiJG9uY2UiLCIkZW1pdCIsImV2ZW50QXBpIiwiTVBQYWdlIiwiUGFnZSIsIk1QQ29tcG9uZW50IiwiQ29tcG9uZW50IiwiY3VzdG9taXplUkUiLCJjdXN0b21pemUiLCJpbml0VHJpZ2dlckV2ZW50IiwibXBJbnN0YW5jZSIsIm9sZFRyaWdnZXJFdmVudCIsInRyaWdnZXJFdmVudCIsImV2ZW50IiwiaW5pdEhvb2siLCJvbGRIb29rIiwiUEFHRV9FVkVOVF9IT09LUyIsImluaXRNb2NrcyIsInZtIiwibW9ja3MiLCIkbXAiLCJtcFR5cGUiLCJtb2NrIiwiaGFzSG9vayIsInZ1ZU9wdGlvbnMiLCJkZWZhdWx0IiwiZXh0ZW5kT3B0aW9ucyIsInN1cGVyIiwibWl4aW5zIiwiZmluZCIsIm1peGluIiwiaW5pdEhvb2tzIiwibXBPcHRpb25zIiwiJHZtIiwiX19jYWxsX2hvb2siLCJpbml0VnVlQ29tcG9uZW50IiwiVnVlQ29tcG9uZW50IiwiZXh0ZW5kIiwiaW5pdFNsb3RzIiwidnVlU2xvdHMiLCIkc2xvdHMiLCJzbG90TmFtZSIsIiRzY29wZWRTbG90cyIsImluaXRWdWVJZHMiLCJ2dWVJZHMiLCJzcGxpdCIsIl8kdnVlSWQiLCJfJHZ1ZVBpZCIsImluaXREYXRhIiwiY29udGV4dCIsIm1ldGhvZHMiLCJlIiwicHJvY2VzcyIsIlZVRV9BUFBfREVCVUciLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJfX2xpZmVjeWNsZV9ob29rc19fIiwiUFJPUF9UWVBFUyIsIlN0cmluZyIsIkJvb2xlYW4iLCJjcmVhdGVPYnNlcnZlciIsIm5ld1ZhbCIsIm9sZFZhbCIsImluaXRCZWhhdmlvcnMiLCJpbml0QmVoYXZpb3IiLCJ2dWVCZWhhdmlvcnMiLCJiZWhhdmlvcnMiLCJ2dWVFeHRlbmRzIiwiZXh0ZW5kcyIsInZ1ZU1peGlucyIsInZ1ZVByb3BzIiwicHJvcHMiLCJiZWhhdmlvciIsInR5cGUiLCJEYXRlIiwicHJvcGVydGllcyIsImluaXRQcm9wZXJ0aWVzIiwidnVlTWl4aW4iLCJwYXJzZVByb3BUeXBlIiwiZGVmYXVsdFZhbHVlIiwiZmlsZSIsImlzQmVoYXZpb3IiLCJ2dWVJZCIsImdlbmVyaWMiLCJvYnNlcnZlciIsInNldERhdGEiLCJvcHRzIiwid3JhcHBlciQxIiwibXAiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInRhcmdldCIsImRldGFpbCIsIm1hcmtlcklkIiwiZ2V0RXh0cmFWYWx1ZSIsImRhdGFQYXRoc0FycmF5IiwiZGF0YVBhdGhBcnJheSIsImRhdGFQYXRoIiwidkZvciIsInByb3BQYXRoIiwidmFsdWVQYXRoIiwiaXNJbnRlZ2VyIiwic3Vic3RyIiwiX19nZXRfdmFsdWUiLCJ2Rm9ySXRlbSIsInZGb3JLZXkiLCJwcm9jZXNzRXZlbnRFeHRyYSIsImV4dHJhIiwiZXh0cmFPYmoiLCJfX2FyZ3NfXyIsImdldE9iakJ5QXJyYXkiLCJhcnIiLCJlbGVtZW50IiwicHJvY2Vzc0V2ZW50QXJncyIsImlzQ3VzdG9tIiwiaXNDdXN0b21NUEV2ZW50IiwiY3VycmVudFRhcmdldCIsImRhdGFzZXQiLCJjb21UeXBlIiwicmV0IiwiYXJnIiwiT05DRSIsIkNVU1RPTSIsImlzTWF0Y2hFdmVudFR5cGUiLCJldmVudFR5cGUiLCJvcHRUeXBlIiwiZ2V0Q29udGV4dFZtIiwiJHBhcmVudCIsIiRvcHRpb25zIiwiJHNjb3BlIiwiaGFuZGxlRXZlbnQiLCJldmVudE9wdHMiLCJldmVudE9wdCIsImV2ZW50c0FycmF5IiwiY2hhckF0IiwiaXNPbmNlIiwiZXZlbnRBcnJheSIsImhhbmRsZXJDdHgiLCJoYW5kbGVyIiwiRXJyb3IiLCJvbmNlIiwicGFyc2VCYXNlQXBwIiwiaW5pdFJlZnMiLCJzdG9yZSIsIiRzdG9yZSIsIm1wSG9zdCIsImJlZm9yZUNyZWF0ZSIsImFwcE9wdGlvbnMiLCJvbkxhdW5jaCIsImNhbklVc2UiLCJhcHAiLCJnbG9iYWxEYXRhIiwiX2lzTW91bnRlZCIsImZpbmRWbUJ5VnVlSWQiLCJ2dWVQaWQiLCJwYXJlbnRWbSIsIiRjaGlsZHJlbiIsImNoaWxkVm0iLCJCZWhhdmlvciIsImlzUGFnZSIsInJvdXRlIiwiaW5pdFJlbGF0aW9uIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCIkcmVmcyIsImNvbXBvbmVudHMiLCJzZWxlY3RBbGxDb21wb25lbnRzIiwiY29tcG9uZW50IiwicmVmIiwiZm9yQ29tcG9uZW50cyIsImhhbmRsZUxpbmsiLCJwYXJlbnQiLCJwYXJzZUFwcCIsInBhcnNlQXBwJDEiLCJjcmVhdGVBcHAiLCJBcHAiLCJwYXJzZUJhc2VDb21wb25lbnQiLCJ2dWVDb21wb25lbnRPcHRpb25zIiwibXVsdGlwbGVTbG90cyIsImFkZEdsb2JhbENsYXNzIiwiY29tcG9uZW50T3B0aW9ucyIsIl9fZmlsZSIsImxpZmV0aW1lcyIsImF0dGFjaGVkIiwicHJvcHNEYXRhIiwiJG1vdW50IiwicmVhZHkiLCJkZXRhY2hlZCIsIiRkZXN0cm95IiwicGFnZUxpZmV0aW1lcyIsInNob3ciLCJoaWRlIiwicmVzaXplIiwic2l6ZSIsIl9fbCIsIl9fZSIsImV4dGVybmFsQ2xhc3NlcyIsInd4c0NhbGxNZXRob2RzIiwiY2FsbE1ldGhvZCIsInBhcnNlQ29tcG9uZW50IiwicGFyc2VDb21wb25lbnQkMSIsImhvb2tzJDEiLCJwYXJzZUJhc2VQYWdlIiwidnVlUGFnZU9wdGlvbnMiLCJwYWdlT3B0aW9ucyIsIm9uTG9hZCIsInF1ZXJ5IiwicGFyc2VQYWdlIiwicGFyc2VQYWdlJDEiLCJjcmVhdGVQYWdlIiwiY3JlYXRlQ29tcG9uZW50IiwidG9kb0FwaSIsImNhbklVc2VBcGkiLCJhcGlOYW1lIiwidW5pIiwiUHJveHkiLCJzZXQiLCJ1bmkkMSIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiZyIsInNlbGYiLCJGdW5jdGlvbiIsImhhZFJ1bnRpbWUiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwib2xkUnVudGltZSIsInVuZGVmaW5lZCIsImdsb2JhbCIsIk9wIiwiJFN5bWJvbCIsIlN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiaXRlcmF0b3IiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJpbk1vZHVsZSIsInJ1bnRpbWUiLCJ3cmFwIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkdlbmVyYXRvciIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsImF3cmFwIiwiX19hd2FpdCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJhc3luYyIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJpdGVyIiwibmV4dCIsImRvbmUiLCJvYmplY3QiLCJyZXZlcnNlIiwicG9wIiwiQ29udGV4dCIsInJlc2V0Iiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJzZW50IiwiX3NlbnQiLCJkZWxlZ2F0ZSIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5Iiwic3RvcCIsInJvb3RFbnRyeSIsInJvb3RSZWNvcmQiLCJjb21wbGV0aW9uIiwicnZhbCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwicmVjb3JkIiwiZW50cnkiLCJ0cnlMb2MiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhYnJ1cHQiLCJmaW5hbGx5RW50cnkiLCJhZnRlckxvYyIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJpdGVyYWJsZSIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHJvdG9HZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJfaW52b2tlIiwibWFrZUludm9rZU1ldGhvZCIsInRyeUNhdGNoIiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiZW5xdWV1ZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwic3RhdGUiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwicmV0dXJuIiwiVHlwZUVycm9yIiwiaW5mbyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJpdGVyYXRvck1ldGhvZCIsInVzZSIsIlZ1ZXgiLCJTdG9yZSIsImhhc0xvZ2luIiwibG9naW5Qcm92aWRlciIsInVzZXJJbmZvIiwiYXZhdGFyIiwibmlja25hbWUiLCJ0b2tlbiIsImhvbm9yIiwidXNlcmlkIiwibGV2ZWwiLCJwcm9ncmVzcyIsInN0YXJOdW0iLCJjak51bSIsImxldmVsdXBkYXRhIiwiaG9ub3J1cGRhdGEiLCJvcGVuaWQiLCJ0ZXN0dnVleCIsImNvbG9ySW5kZXgiLCJzaWduTGlzdCIsImNvbG9yTGlzdCIsIm11dGF0aW9ucyIsImxvZ2luIiwid2VpQ2hhdEF1dGhVc2VyIiwiYXZhdGFyVXJsIiwibmlja05hbWUiLCJzdG9yZ2VOYW1lIiwic3RvcmdlVmFsIiwidXNlcklkIiwic2V0U3RvcmFnZVN5bmMiLCJsb2ciLCJsb2dvdXQiLCJhZGRMZXZlbCIsIm51bSIsImxldmVsVXBkYXRhIiwiaXNVcGRhdGEiLCJob25vclVwZGF0YSIsImNoYW5nZUxldmVsIiwiY2hhbmdlUHJvZ3Jlc3MiLCJjaGFuZ2VTdGFyIiwic3RhciIsImNoYW5nZXByb2dyZXNzIiwiY2hhbmdlSG9ub3IiLCJjaGFuZ2VDaiIsImNqIiwiY2hhbmdOYW1lIiwiY2hhbmdlc2lnbkxpc3QiLCJsaXN0Iiwic2V0T3BlbmlkIiwic2V0VGVzdFRydWUiLCJzZXRUZXN0RmFsc2UiLCJzZXRDb2xvckluZGV4IiwiZ2V0dGVycyIsImN1cnJlbnRDb2xvciIsImFjdGlvbnMiLCJnZXRVc2VyT3BlbklkIiwiY29tbWl0Iiwic2V0VGltZW91dCIsImFwcGx5TWl4aW4iLCJ2ZXJzaW9uIiwidnVleEluaXQiLCJfaW5pdCIsImluaXQiLCJkZXZ0b29sSG9vayIsIndpbmRvdyIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJkZXZ0b29sUGx1Z2luIiwiX2RldnRvb2xIb29rIiwiZW1pdCIsIm9uIiwidGFyZ2V0U3RhdGUiLCJyZXBsYWNlU3RhdGUiLCJzdWJzY3JpYmUiLCJtdXRhdGlvbiIsImZvckVhY2hWYWx1ZSIsImlzT2JqZWN0IiwidmFsIiwiYXNzZXJ0IiwiY29uZGl0aW9uIiwibXNnIiwiTW9kdWxlIiwicmF3TW9kdWxlIiwiX2NoaWxkcmVuIiwiX3Jhd01vZHVsZSIsInJhd1N0YXRlIiwicHJvdG90eXBlQWNjZXNzb3JzJDEiLCJuYW1lc3BhY2VkIiwiY29uZmlndXJhYmxlIiwiYWRkQ2hpbGQiLCJyZW1vdmVDaGlsZCIsImdldENoaWxkIiwidXBkYXRlIiwiZm9yRWFjaENoaWxkIiwiZm9yRWFjaEdldHRlciIsImZvckVhY2hBY3Rpb24iLCJmb3JFYWNoTXV0YXRpb24iLCJkZWZpbmVQcm9wZXJ0aWVzIiwiTW9kdWxlQ29sbGVjdGlvbiIsInJhd1Jvb3RNb2R1bGUiLCJyZWdpc3RlciIsInBhdGgiLCJ0YXJnZXRNb2R1bGUiLCJuZXdNb2R1bGUiLCJhc3NlcnRSYXdNb2R1bGUiLCJtb2R1bGVzIiwicmVkdWNlIiwicm9vdCIsImdldE5hbWVzcGFjZSIsIm5hbWVzcGFjZSIsInRoaXMkMSIsInJhd0NoaWxkTW9kdWxlIiwidW5yZWdpc3RlciIsImZ1bmN0aW9uQXNzZXJ0IiwiZXhwZWN0ZWQiLCJvYmplY3RBc3NlcnQiLCJhc3NlcnRUeXBlcyIsImFzc2VydE9wdGlvbnMiLCJtYWtlQXNzZXJ0aW9uTWVzc2FnZSIsImJ1ZiIsImpvaW4iLCJpbnN0YWxsIiwicGx1Z2lucyIsInN0cmljdCIsIl9jb21taXR0aW5nIiwiX2FjdGlvbnMiLCJfYWN0aW9uU3Vic2NyaWJlcnMiLCJfbXV0YXRpb25zIiwiX3dyYXBwZWRHZXR0ZXJzIiwiX21vZHVsZXMiLCJfbW9kdWxlc05hbWVzcGFjZU1hcCIsIl9zdWJzY3JpYmVycyIsIl93YXRjaGVyVk0iLCJkaXNwYXRjaCIsInBheWxvYWQiLCJpbnN0YWxsTW9kdWxlIiwicmVzZXRTdG9yZVZNIiwicGx1Z2luIiwiY29uZmlnIiwiZGV2dG9vbHMiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJnZW5lcmljU3Vic2NyaWJlIiwic3VicyIsInJlc2V0U3RvcmUiLCJob3QiLCJvbGRWbSIsIl92bSIsIndyYXBwZWRHZXR0ZXJzIiwiY29tcHV0ZWQiLCJlbnVtZXJhYmxlIiwic2lsZW50IiwiJCRzdGF0ZSIsImVuYWJsZVN0cmljdE1vZGUiLCJfd2l0aENvbW1pdCIsIl9kYXRhIiwibmV4dFRpY2siLCJyb290U3RhdGUiLCJpc1Jvb3QiLCJwYXJlbnRTdGF0ZSIsImdldE5lc3RlZFN0YXRlIiwibW9kdWxlTmFtZSIsImxvY2FsIiwibWFrZUxvY2FsQ29udGV4dCIsIm5hbWVzcGFjZWRUeXBlIiwicmVnaXN0ZXJNdXRhdGlvbiIsImFjdGlvbiIsInJlZ2lzdGVyQWN0aW9uIiwiZ2V0dGVyIiwicmVnaXN0ZXJHZXR0ZXIiLCJjaGlsZCIsIm5vTmFtZXNwYWNlIiwiX3R5cGUiLCJfcGF5bG9hZCIsIl9vcHRpb25zIiwidW5pZnlPYmplY3RTdHlsZSIsIm1ha2VMb2NhbEdldHRlcnMiLCJnZXR0ZXJzUHJveHkiLCJzcGxpdFBvcyIsImxvY2FsVHlwZSIsImNiIiwicm9vdEdldHRlcnMiLCJyYXdHZXR0ZXIiLCIkd2F0Y2giLCJkZWVwIiwic3luYyIsIl9WdWUiLCJ2Iiwic3ViIiwiYWxsIiwibWFwIiwic3Vic2NyaWJlQWN0aW9uIiwid2F0Y2giLCJyZWdpc3Rlck1vZHVsZSIsInByZXNlcnZlU3RhdGUiLCJ1bnJlZ2lzdGVyTW9kdWxlIiwiZGVsZXRlIiwiaG90VXBkYXRlIiwibmV3T3B0aW9ucyIsImNvbW1pdHRpbmciLCJtYXBTdGF0ZSIsIm5vcm1hbGl6ZU5hbWVzcGFjZSIsInN0YXRlcyIsIm5vcm1hbGl6ZU1hcCIsImdldE1vZHVsZUJ5TmFtZXNwYWNlIiwidnVleCIsIm1hcE11dGF0aW9ucyIsIm1hcEdldHRlcnMiLCJtYXBBY3Rpb25zIiwiY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMiLCJiaW5kIiwiaGVscGVyIiwiaW5kZXhfZXNtIiwidW5pU2hvdyIsImxlZnQiLCJtb3ZlTGVmdCIsInBvc2l0aW9uIiwiYXV0b0Nsb3NlIiwib3BlbiIsImNsb3NlIiwibW91bnRlZCIsInN3aXBlYWN0aW9uIiwiY2hpbGRyZW4iLCJnZXRTZWxlY3RvclF1ZXJ5IiwiYmVmb3JlRGVzdG95Iiwib25DbGljayIsImNvbnRlbnQiLCJ0b3VjaHN0YXJ0IiwicGFnZVgiLCJ0b3VjaGVzIiwiZGlzYWJsZWQiLCJjbG9zZU90aGVyIiwid2lkdGgiLCJpc29wZW4iLCJvcGVubGVmdCIsImJ1dHRvbiIsInRvdWNobW92ZSIsInNldFBvc2l0aW9uIiwidG91Y2hlbmQiLCJtb3ZlIiwieCIsInkiLCJzZXRWYWx1ZSIsIm1heCIsIm1pbiIsInZpZXdzIiwiY3JlYXRlU2VsZWN0b3JRdWVyeSIsImluIiwic2VsZWN0QWxsIiwiYm91bmRpbmdDbGllbnRSZWN0IiwiZXhlYyIsImVtcHR5T2JqZWN0IiwiaXNVbmRlZiIsImlzRGVmIiwiaXNUcnVlIiwiaXNGYWxzZSIsImlzUHJpbWl0aXZlIiwidG9SYXdUeXBlIiwiaXNSZWdFeHAiLCJpc1ZhbGlkQXJyYXlJbmRleCIsIm4iLCJwYXJzZUZsb2F0IiwiaXNGaW5pdGUiLCJ0b051bWJlciIsIm1ha2VNYXAiLCJleHBlY3RzTG93ZXJDYXNlIiwidG9Mb3dlckNhc2UiLCJpc0J1aWx0SW5UYWciLCJpc1Jlc2VydmVkQXR0cmlidXRlIiwicmVtb3ZlIiwiY2FwaXRhbGl6ZSIsImh5cGhlbmF0ZVJFIiwiaHlwaGVuYXRlIiwicG9seWZpbGxCaW5kIiwiYm91bmRGbiIsImEiLCJsIiwiX2xlbmd0aCIsIm5hdGl2ZUJpbmQiLCJ0b0FycmF5Iiwic3RhcnQiLCJ0byIsIl9mcm9tIiwidG9PYmplY3QiLCJiIiwibm8iLCJpZGVudGl0eSIsImxvb3NlRXF1YWwiLCJpc09iamVjdEEiLCJpc09iamVjdEIiLCJpc0FycmF5QSIsImlzQXJyYXlCIiwiZXZlcnkiLCJnZXRUaW1lIiwia2V5c0EiLCJrZXlzQiIsImxvb3NlSW5kZXhPZiIsImNhbGxlZCIsIkFTU0VUX1RZUEVTIiwiTElGRUNZQ0xFX0hPT0tTIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwicHJvZHVjdGlvblRpcCIsInBlcmZvcm1hbmNlIiwiZXJyb3JIYW5kbGVyIiwid2FybkhhbmRsZXIiLCJpZ25vcmVkRWxlbWVudHMiLCJrZXlDb2RlcyIsImlzUmVzZXJ2ZWRUYWciLCJpc1Jlc2VydmVkQXR0ciIsImlzVW5rbm93bkVsZW1lbnQiLCJnZXRUYWdOYW1lc3BhY2UiLCJwYXJzZVBsYXRmb3JtVGFnTmFtZSIsIm11c3RVc2VQcm9wIiwiX2xpZmVjeWNsZUhvb2tzIiwidW5pY29kZVJlZ0V4cCIsImlzUmVzZXJ2ZWQiLCJjaGFyQ29kZUF0IiwiZGVmIiwid3JpdGFibGUiLCJiYWlsUkUiLCJSZWdFeHAiLCJwYXJzZVBhdGgiLCJzZWdtZW50cyIsIl9pc1NlcnZlciIsImhhc1Byb3RvIiwiaW5Ccm93c2VyIiwiaW5XZWV4IiwiV1hFbnZpcm9ubWVudCIsIndlZXhQbGF0Zm9ybSIsIlVBIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaXNJRSIsImlzRWRnZSIsIm5hdGl2ZVdhdGNoIiwibWF0Y2giLCJhZGRFdmVudExpc3RlbmVyIiwiaXNTZXJ2ZXJSZW5kZXJpbmciLCJlbnYiLCJWVUVfRU5WIiwiaXNOYXRpdmUiLCJDdG9yIiwiX1NldCIsImhhc1N5bWJvbCIsIlJlZmxlY3QiLCJvd25LZXlzIiwiU2V0IiwiaGFzIiwiYWRkIiwiY2xlYXIiLCJ0aXAiLCJnZW5lcmF0ZUNvbXBvbmVudFRyYWNlIiwiZm9ybWF0Q29tcG9uZW50TmFtZSIsImhhc0NvbnNvbGUiLCJjbGFzc2lmeVJFIiwiY2xhc3NpZnkiLCJ0cmFjZSIsImluY2x1ZGVGaWxlIiwiJHJvb3QiLCJjaWQiLCJfaXNWdWUiLCJfY29tcG9uZW50VGFnIiwicmVwZWF0IiwidHJlZSIsImN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSIsImxhc3QiLCJ1aWQiLCJEZXAiLCJpZCIsInB1c2hUYXJnZXQiLCJTaGFyZWRPYmplY3QiLCJ0YXJnZXRTdGFjayIsInBvcFRhcmdldCIsImFkZFN1YiIsInJlbW92ZVN1YiIsImRlcGVuZCIsImFkZERlcCIsIm5vdGlmeSIsInNvcnQiLCJWTm9kZSIsInRhZyIsInRleHQiLCJlbG0iLCJhc3luY0ZhY3RvcnkiLCJucyIsImZuQ29udGV4dCIsImZuT3B0aW9ucyIsImZuU2NvcGVJZCIsImNvbXBvbmVudEluc3RhbmNlIiwicmF3IiwiaXNTdGF0aWMiLCJpc1Jvb3RJbnNlcnQiLCJpc0NvbW1lbnQiLCJpc0Nsb25lZCIsImFzeW5jTWV0YSIsImlzQXN5bmNQbGFjZWhvbGRlciIsImNyZWF0ZUVtcHR5Vk5vZGUiLCJub2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsIm1ldGhvZHNUb1BhdGNoIiwib3JpZ2luYWwiLCJpbnNlcnRlZCIsIm9iIiwiX19vYl9fIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwiYXJyYXlLZXlzIiwic2hvdWxkT2JzZXJ2ZSIsInRvZ2dsZU9ic2VydmluZyIsIk9ic2VydmVyIiwidm1Db3VudCIsImNvcHlBdWdtZW50IiwicHJvdG9BdWdtZW50Iiwid2FsayIsInNyYyIsIm9ic2VydmUiLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiZGVmaW5lUmVhY3RpdmUkJDEiLCJjdXN0b21TZXR0ZXIiLCJzaGFsbG93IiwicHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJzZXR0ZXIiLCJjaGlsZE9iIiwiZGVwZW5kQXJyYXkiLCJkZWwiLCJpdGVtcyIsInN0cmF0cyIsIm1lcmdlRGF0YSIsImZyb20iLCJ0b1ZhbCIsImZyb21WYWwiLCJtZXJnZURhdGFPckZuIiwiaW5zdGFuY2VEYXRhIiwiZGVmYXVsdERhdGEiLCJtZXJnZUFzc2V0cyIsImFzc2VydE9iamVjdFR5cGUiLCJlbCIsImRlZmF1bHRTdHJhdCIsImtleSQxIiwiaW5qZWN0IiwicHJvdmlkZSIsImNoZWNrQ29tcG9uZW50cyIsInZhbGlkYXRlQ29tcG9uZW50TmFtZSIsIm5vcm1hbGl6ZVByb3BzIiwibm9ybWFsaXplSW5qZWN0Iiwibm9ybWFsaXplZCIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMiLCJkaXJzIiwiZGlyZWN0aXZlcyIsImRlZiQkMSIsIm1lcmdlT3B0aW9ucyIsIl9iYXNlIiwibWVyZ2VGaWVsZCIsInN0cmF0IiwicmVzb2x2ZUFzc2V0Iiwid2Fybk1pc3NpbmciLCJhc3NldHMiLCJjYW1lbGl6ZWRJZCIsIlBhc2NhbENhc2VJZCIsInZhbGlkYXRlUHJvcCIsInByb3BPcHRpb25zIiwicHJvcCIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsInN0cmluZ0luZGV4IiwiZ2V0UHJvcERlZmF1bHRWYWx1ZSIsInByZXZTaG91bGRPYnNlcnZlIiwiYXNzZXJ0UHJvcCIsIl9wcm9wcyIsImdldFR5cGUiLCJyZXF1aXJlZCIsInZhbGlkIiwiZXhwZWN0ZWRUeXBlcyIsImFzc2VydGVkVHlwZSIsImFzc2VydFR5cGUiLCJleHBlY3RlZFR5cGUiLCJ2YWxpZGF0b3IiLCJnZXRJbnZhbGlkVHlwZU1lc3NhZ2UiLCJzaW1wbGVDaGVja1JFIiwidCIsImlzU2FtZVR5cGUiLCJtZXNzYWdlIiwicmVjZWl2ZWRUeXBlIiwiZXhwZWN0ZWRWYWx1ZSIsInN0eWxlVmFsdWUiLCJyZWNlaXZlZFZhbHVlIiwiaXNFeHBsaWNhYmxlIiwiaXNCb29sZWFuIiwiZXhwbGljaXRUeXBlcyIsInNvbWUiLCJlbGVtIiwiaGFuZGxlRXJyb3IiLCJjdXIiLCJlcnJvckNhcHR1cmVkIiwiY2FwdHVyZSIsImdsb2JhbEhhbmRsZUVycm9yIiwiaW52b2tlV2l0aEVycm9ySGFuZGxpbmciLCJfaGFuZGxlZCIsImxvZ0Vycm9yIiwidGltZXJGdW5jIiwiaW5pdFByb3h5IiwiY2FsbGJhY2tzIiwicGVuZGluZyIsImZsdXNoQ2FsbGJhY2tzIiwiY29waWVzIiwicCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJzZXRJbW1lZGlhdGUiLCJjb3VudGVyIiwidGV4dE5vZGUiLCJkb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwiY2hhcmFjdGVyRGF0YSIsIl9yZXNvbHZlIiwiYWxsb3dlZEdsb2JhbHMiLCJ3YXJuTm9uUHJlc2VudCIsIndhcm5SZXNlcnZlZFByZWZpeCIsImhhc1Byb3h5IiwiaXNCdWlsdEluTW9kaWZpZXIiLCJoYXNIYW5kbGVyIiwiaXNBbGxvd2VkIiwiJGRhdGEiLCJnZXRIYW5kbGVyIiwiaGFuZGxlcnMiLCJyZW5kZXIiLCJfd2l0aFN0cmlwcGVkIiwiX3JlbmRlclByb3h5IiwibWVhc3VyZSIsInNlZW5PYmplY3RzIiwidHJhdmVyc2UiLCJfdHJhdmVyc2UiLCJzZWVuIiwiaXNBIiwiaXNGcm96ZW4iLCJkZXBJZCIsInBlcmYiLCJjbGVhck1hcmtzIiwiY2xlYXJNZWFzdXJlcyIsInN0YXJ0VGFnIiwiZW5kVGFnIiwibm9ybWFsaXplRXZlbnQiLCJwYXNzaXZlIiwib25jZSQkMSIsImNyZWF0ZUZuSW52b2tlciIsImZucyIsImludm9rZXIiLCJhcmd1bWVudHMkMSIsInVwZGF0ZUxpc3RlbmVycyIsIm9sZE9uIiwicmVtb3ZlJCQxIiwiY3JlYXRlT25jZUhhbmRsZXIiLCJvbGQiLCJleHRyYWN0UHJvcGVydGllc0Zyb21WTm9kZURhdGEiLCJhdHRycyIsImFsdEtleSIsImNoZWNrUHJvcCIsImV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEiLCJrZXlJbkxvd2VyQ2FzZSIsImhhc2giLCJwcmVzZXJ2ZSIsInNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVBcnJheUNoaWxkcmVuIiwiaXNUZXh0Tm9kZSIsIm5lc3RlZEluZGV4IiwibGFzdEluZGV4Iiwic2hpZnQiLCJfaXNWTGlzdCIsImluaXRQcm92aWRlIiwiX3Byb3ZpZGVkIiwiaW5pdEluamVjdGlvbnMiLCJyZXNvbHZlSW5qZWN0IiwicHJvdmlkZUtleSIsInNvdXJjZSIsInByb3ZpZGVEZWZhdWx0IiwicmVzb2x2ZVNsb3RzIiwic2xvdHMiLCJzbG90IiwibmFtZSQxIiwiaXNXaGl0ZXNwYWNlIiwibm9ybWFsaXplU2NvcGVkU2xvdHMiLCJub3JtYWxTbG90cyIsInByZXZTbG90cyIsImhhc05vcm1hbFNsb3RzIiwiaXNTdGFibGUiLCIkc3RhYmxlIiwiJGtleSIsIl9ub3JtYWxpemVkIiwiJGhhc05vcm1hbCIsIm5vcm1hbGl6ZVNjb3BlZFNsb3QiLCJrZXkkMiIsInByb3h5Tm9ybWFsU2xvdCIsInByb3h5IiwicmVuZGVyTGlzdCIsInJlbmRlclNsb3QiLCJmYWxsYmFjayIsImJpbmRPYmplY3QiLCJub2RlcyIsInNjb3BlZFNsb3RGbiIsIl9pIiwiJGNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlRmlsdGVyIiwiaXNLZXlOb3RNYXRjaCIsImV4cGVjdCIsImFjdHVhbCIsImNoZWNrS2V5Q29kZXMiLCJldmVudEtleUNvZGUiLCJidWlsdEluS2V5Q29kZSIsImV2ZW50S2V5TmFtZSIsImJ1aWx0SW5LZXlOYW1lIiwibWFwcGVkS2V5Q29kZSIsImJpbmRPYmplY3RQcm9wcyIsImFzUHJvcCIsImlzU3luYyIsImRvbVByb3BzIiwiY2FtZWxpemVkS2V5IiwiaHlwaGVuYXRlZEtleSIsIiRldmVudCIsInJlbmRlclN0YXRpYyIsImlzSW5Gb3IiLCJfc3RhdGljVHJlZXMiLCJzdGF0aWNSZW5kZXJGbnMiLCJtYXJrU3RhdGljIiwibWFya09uY2UiLCJtYXJrU3RhdGljTm9kZSIsImJpbmRPYmplY3RMaXN0ZW5lcnMiLCJleGlzdGluZyIsIm91cnMiLCJyZXNvbHZlU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljS2V5cyIsImNvbnRlbnRIYXNoS2V5IiwiYmluZER5bmFtaWNLZXlzIiwiYmFzZU9iaiIsInByZXBlbmRNb2RpZmllciIsInN5bWJvbCIsImluc3RhbGxSZW5kZXJIZWxwZXJzIiwiX28iLCJfbiIsIl9zIiwiX2wiLCJfdCIsIl9xIiwiX20iLCJfZiIsIl9rIiwiX2IiLCJfdiIsIl9lIiwiX3UiLCJfZyIsIl9kIiwiX3AiLCJGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCIsImNvbnRleHRWbSIsIl9vcmlnaW5hbCIsImlzQ29tcGlsZWQiLCJfY29tcGlsZWQiLCJuZWVkTm9ybWFsaXphdGlvbiIsImxpc3RlbmVycyIsImluamVjdGlvbnMiLCJzY29wZWRTbG90cyIsIl9zY29wZUlkIiwiX2MiLCJkIiwiY3JlYXRlRWxlbWVudCIsImNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQiLCJtZXJnZVByb3BzIiwicmVuZGVyQ29udGV4dCIsImNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQiLCJ2bm9kZXMiLCJjbG9uZSIsImRldnRvb2xzTWV0YSIsImNvbXBvbmVudFZOb2RlSG9va3MiLCJoeWRyYXRpbmciLCJfaXNEZXN0cm95ZWQiLCJrZWVwQWxpdmUiLCJtb3VudGVkTm9kZSIsInByZXBhdGNoIiwiY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSIsImFjdGl2ZUluc3RhbmNlIiwib2xkVm5vZGUiLCJ1cGRhdGVDaGlsZENvbXBvbmVudCIsImluc2VydCIsImNhbGxIb29rIiwicXVldWVBY3RpdmF0ZWRDb21wb25lbnQiLCJhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGVzdHJveSIsImRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImhvb2tzVG9NZXJnZSIsImJhc2VDdG9yIiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50IiwiY3JlYXRlQXN5bmNQbGFjZWhvbGRlciIsInJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMiLCJtb2RlbCIsInRyYW5zZm9ybU1vZGVsIiwiZnVuY3Rpb25hbCIsIm5hdGl2ZU9uIiwiYWJzdHJhY3QiLCJpbnN0YWxsQ29tcG9uZW50SG9va3MiLCJfaXNDb21wb25lbnQiLCJfcGFyZW50Vm5vZGUiLCJpbmxpbmVUZW1wbGF0ZSIsInRvTWVyZ2UiLCJfbWVyZ2VkIiwibWVyZ2VIb29rJDEiLCJmMSIsImYyIiwibWVyZ2VkIiwiU0lNUExFX05PUk1BTElaRSIsIkFMV0FZU19OT1JNQUxJWkUiLCJub3JtYWxpemF0aW9uVHlwZSIsImFsd2F5c05vcm1hbGl6ZSIsIl9jcmVhdGVFbGVtZW50IiwiaXMiLCIkdm5vZGUiLCJwcmUiLCJhcHBseU5TIiwicmVnaXN0ZXJEZWVwQmluZGluZ3MiLCJmb3JjZSIsInN0eWxlIiwiY2xhc3MiLCJpbml0UmVuZGVyIiwiX3Zub2RlIiwicGFyZW50Vm5vZGUiLCJfcmVuZGVyQ2hpbGRyZW4iLCJwYXJlbnREYXRhIiwiaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50IiwiX3BhcmVudExpc3RlbmVycyIsImN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsInJlbmRlck1peGluIiwiJG5leHRUaWNrIiwiX3JlbmRlciIsInJlbmRlckVycm9yIiwiZW5zdXJlQ3RvciIsImNvbXAiLCJiYXNlIiwiX19lc01vZHVsZSIsImZhY3RvcnkiLCJlcnJvckNvbXAiLCJyZXNvbHZlZCIsIm93bmVyIiwib3duZXJzIiwibG9hZGluZyIsImxvYWRpbmdDb21wIiwidGltZXJMb2FkaW5nIiwidGltZXJUaW1lb3V0IiwiZm9yY2VSZW5kZXIiLCJyZW5kZXJDb21wbGV0ZWQiLCIkZm9yY2VVcGRhdGUiLCJjbGVhclRpbWVvdXQiLCJkZWxheSIsInRpbWVvdXQiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwiaW5pdEV2ZW50cyIsIl9ldmVudHMiLCJfaGFzSG9va0V2ZW50IiwidXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIiwicmVtb3ZlJDEiLCJfdGFyZ2V0Iiwib25jZUhhbmRsZXIiLCJvbGRMaXN0ZW5lcnMiLCJldmVudHNNaXhpbiIsImhvb2tSRSIsImkkMSIsImNicyIsImxvd2VyQ2FzZUV2ZW50Iiwic2V0QWN0aXZlSW5zdGFuY2UiLCJwcmV2QWN0aXZlSW5zdGFuY2UiLCJpbml0TGlmZWN5Y2xlIiwiX3dhdGNoZXIiLCJfaW5hY3RpdmUiLCJfZGlyZWN0SW5hY3RpdmUiLCJfaXNCZWluZ0Rlc3Ryb3llZCIsImxpZmVjeWNsZU1peGluIiwiX3VwZGF0ZSIsInByZXZFbCIsIiRlbCIsInByZXZWbm9kZSIsInJlc3RvcmVBY3RpdmVJbnN0YW5jZSIsIl9fcGF0Y2hfXyIsIl9fdnVlX18iLCJ0ZWFyZG93biIsIl93YXRjaGVycyIsInJlbmRlckNoaWxkcmVuIiwibmV3U2NvcGVkU2xvdHMiLCJvbGRTY29wZWRTbG90cyIsImhhc0R5bmFtaWNTY29wZWRTbG90IiwibmVlZHNGb3JjZVVwZGF0ZSIsIiRhdHRycyIsIiRsaXN0ZW5lcnMiLCJwcm9wS2V5cyIsIl9wcm9wS2V5cyIsIl8kdXBkYXRlUHJvcGVydGllcyIsImlzSW5JbmFjdGl2ZVRyZWUiLCJkaXJlY3QiLCJqIiwiTUFYX1VQREFURV9DT1VOVCIsImFjdGl2YXRlZENoaWxkcmVuIiwiY2lyY3VsYXIiLCJ3YWl0aW5nIiwiZmx1c2hpbmciLCJyZXNldFNjaGVkdWxlclN0YXRlIiwiZ2V0Tm93Iiwibm93IiwiY3JlYXRlRXZlbnQiLCJ0aW1lU3RhbXAiLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsImJlZm9yZSIsInJ1biIsInVzZXIiLCJhY3RpdmF0ZWRRdWV1ZSIsInVwZGF0ZWRRdWV1ZSIsImNhbGxBY3RpdmF0ZWRIb29rcyIsImNhbGxVcGRhdGVkSG9va3MiLCJxdWV1ZVdhdGNoZXIiLCJ1aWQkMiIsIldhdGNoZXIiLCJleHBPckZuIiwiaXNSZW5kZXJXYXRjaGVyIiwibGF6eSIsImFjdGl2ZSIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJleHByZXNzaW9uIiwiY2xlYW51cERlcHMiLCJ0bXAiLCJvbGRWYWx1ZSIsImV2YWx1YXRlIiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwic291cmNlS2V5IiwiaW5pdFN0YXRlIiwiaW5pdFByb3BzIiwiaW5pdE1ldGhvZHMiLCJpbml0Q29tcHV0ZWQiLCJpbml0V2F0Y2giLCJwcm9wc09wdGlvbnMiLCJfZ2V0Rm9ybURhdGEiLCJfX25leHRfdGlja19wZW5kaW5nIiwiZ2V0RGF0YSIsImNvbXB1dGVkV2F0Y2hlck9wdGlvbnMiLCJ3YXRjaGVycyIsIl9jb21wdXRlZFdhdGNoZXJzIiwiaXNTU1IiLCJ1c2VyRGVmIiwiZGVmaW5lQ29tcHV0ZWQiLCJzaG91bGRDYWNoZSIsImNyZWF0ZUNvbXB1dGVkR2V0dGVyIiwiY3JlYXRlR2V0dGVySW52b2tlciIsImNyZWF0ZVdhdGNoZXIiLCJzdGF0ZU1peGluIiwiZGF0YURlZiIsInByb3BzRGVmIiwiJHNldCIsIiRkZWxldGUiLCJpbW1lZGlhdGUiLCJ1aWQkMyIsImluaXRNaXhpbiIsIl91aWQiLCJpbml0SW50ZXJuYWxDb21wb25lbnQiLCJfc2VsZiIsIl8kZmFsbGJhY2siLCJfbmFtZSIsInZub2RlQ29tcG9uZW50T3B0aW9ucyIsInN1cGVyT3B0aW9ucyIsImNhY2hlZFN1cGVyT3B0aW9ucyIsIm1vZGlmaWVkT3B0aW9ucyIsInJlc29sdmVNb2RpZmllZE9wdGlvbnMiLCJtb2RpZmllZCIsImxhdGVzdCIsInNlYWxlZCIsInNlYWxlZE9wdGlvbnMiLCJpbml0VXNlIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwidW5zaGlmdCIsImluaXRNaXhpbiQxIiwiaW5pdEV4dGVuZCIsIlN1cGVyIiwiU3VwZXJJZCIsImNhY2hlZEN0b3JzIiwiX0N0b3IiLCJTdWIiLCJpbml0UHJvcHMkMSIsImluaXRDb21wdXRlZCQxIiwiQ29tcCIsImluaXRBc3NldFJlZ2lzdGVycyIsImRlZmluaXRpb24iLCJnZXRDb21wb25lbnROYW1lIiwibWF0Y2hlcyIsInBhdHRlcm4iLCJwcnVuZUNhY2hlIiwia2VlcEFsaXZlSW5zdGFuY2UiLCJjYWNoZWROb2RlIiwicHJ1bmVDYWNoZUVudHJ5IiwiY2FjaGVkJCQxIiwicGF0dGVyblR5cGVzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJjcmVhdGVkIiwiZGVzdHJveWVkIiwicmVmJDEiLCJidWlsdEluQ29tcG9uZW50cyIsImluaXRHbG9iYWxBUEkiLCJjb25maWdEZWYiLCJ1dGlsIiwiZGVmaW5lUmVhY3RpdmUiLCJvYnNlcnZhYmxlIiwic3NyQ29udGV4dCIsIkFSUkFZVFlQRSIsIk9CSkVDVFRZUEUiLCJkaWZmIiwic3luY0tleXMiLCJfZGlmZiIsInJvb3RDdXJyZW50VHlwZSIsInJvb3RQcmVUeXBlIiwiY3VycmVudFZhbHVlIiwic2V0UmVzdWx0IiwicHJlVmFsdWUiLCJjdXJyZW50VHlwZSIsInByZVR5cGUiLCJzdWJLZXkiLCJrIiwiZmx1c2hDYWxsYmFja3MkMSIsIl9fbmV4dF90aWNrX2NhbGxiYWNrcyIsImhhc1JlbmRlcldhdGNoZXIiLCJuZXh0VGljayQxIiwibXBJbnN0YW5jZSQxIiwiY2xvbmVXaXRoRGF0YSIsImRhdGFLZXlzIiwicmF3QmluZGluZ3MiLCJfX3NlY3JldF92ZmFfc3RhdGVfXyIsInBhdGNoIiwiX193ZWJ2aWV3SWRfXyIsIm1wRGF0YSIsImRpZmZEYXRhIiwiJHNob3VsZERpZmZEYXRhIiwiY3JlYXRlRW1wdHlSZW5kZXIiLCJtb3VudENvbXBvbmVudCQxIiwidGVtcGxhdGUiLCJ1cGRhdGVDb21wb25lbnQiLCJyZW5kZXJDbGFzcyIsInN0YXRpY0NsYXNzIiwiZHluYW1pY0NsYXNzIiwic3RyaW5naWZ5Q2xhc3MiLCJzdHJpbmdpZnlBcnJheSIsInN0cmluZ2lmeU9iamVjdCIsInN0cmluZ2lmaWVkIiwicGFyc2VTdHlsZVRleHQiLCJjc3NUZXh0IiwibGlzdERlbGltaXRlciIsInByb3BlcnR5RGVsaW1pdGVyIiwidHJpbSIsIm5vcm1hbGl6ZVN0eWxlQmluZGluZyIsImJpbmRpbmdTdHlsZSIsIk1QX01FVEhPRFMiLCJnZXRUYXJnZXQiLCJwYXJ0cyIsImludGVybmFsTWl4aW4iLCJnZXRBcHAiLCJvbkVycm9yIiwib2xkRW1pdCIsIm15IiwiY3JlYXRlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJfX2luaXRfcHJvdmlkZSIsIl9faW5pdF9pbmplY3Rpb25zIiwiX19zZXRfbW9kZWwiLCJtb2RpZmllcnMiLCJfX3NldF9zeW5jIiwiX19nZXRfb3JpZyIsIl9fZ2V0X2NsYXNzIiwiX19nZXRfc3R5bGUiLCJkeW5hbWljU3R5bGUiLCJzdGF0aWNTdHlsZSIsImR5bmFtaWNTdHlsZU9iaiIsInN0eWxlT2JqIiwiX19tYXAiLCJpdGVyYXRlZSIsIkxJRkVDWUNMRV9IT09LUyQxIiwibGlmZWN5Y2xlTWl4aW4kMSIsIm9sZEV4dGVuZCIsInN0cmF0ZWdpZXMiLCJ5QXhpc1dpZHRoIiwieUF4aXNTcGxpdCIsInhBeGlzSGVpZ2h0IiwieEF4aXNMaW5lSGVpZ2h0IiwibGVnZW5kSGVpZ2h0IiwieUF4aXNUaXRsZVdpZHRoIiwicGFkZGluZyIsInJvdGF0ZSIsImNvbHVtZVBhZGRpbmciLCJmb250U2l6ZSIsImRhdGFQb2ludFNoYXBlIiwiY29sb3JzIiwicGllQ2hhcnRMaW5lUGFkZGluZyIsInBpZUNoYXJ0VGV4dFBhZGRpbmciLCJ4QXhpc1RleHRQYWRkaW5nIiwidGl0bGVDb2xvciIsInRpdGxlRm9udFNpemUiLCJzdWJ0aXRsZUNvbG9yIiwic3VidGl0bGVGb250U2l6ZSIsInRvb2xUaXBQYWRkaW5nIiwidG9vbFRpcEJhY2tncm91bmQiLCJ0b29sVGlwT3BhY2l0eSIsInRvb2xUaXBMaW5lSGVpZ2h0IiwicmFkYXJHcmlkQ291bnQiLCJyYWRhckxhYmVsVGV4dE1hcmdpbiIsImdhdWdlTGFiZWxUZXh0TWFyZ2luIiwidmFyQXJncyIsIm5leHRTb3VyY2UiLCJuZXh0S2V5IiwidG9GaXhlZCIsImxpbWl0IiwiaXNGbG9hdCIsImFwcHJveGltYXRlbHlFcXVhbCIsIm51bTEiLCJudW0yIiwiYWJzIiwiaXNTYW1lU2lnbiIsImlzU2FtZVhDb29yZGluYXRlQXJlYSIsInAxIiwicDIiLCJpc0NvbGxpc2lvbiIsIm9iajEiLCJvYmoyIiwiZW5kIiwiaGVpZ2h0IiwiZmxhZyIsImhleFRvUmdiIiwiaGV4VmFsdWUiLCJvcGMiLCJyZ3giLCJoZXgiLCJtIiwiciIsInJnYiIsImZpbmRSYW5nZSIsIm11bHRpcGxlIiwiY2VpbCIsImNhbENhbmRsZU1BIiwiZGF5QXJyIiwibmFtZUFyciIsImNvbG9yQXJyIiwia2RhdGEiLCJzZXJpZXNUZW1wIiwic2VyaWVzSXRlbSIsImNvbG9yIiwic3VtIiwiY2FsVmFsaWREaXN0YW5jZSIsImRpc3RhbmNlIiwiY2hhcnREYXRhIiwiZGF0YUNoYXJ0QXJlYVdpZHRoIiwiYXJlYSIsImRhdGFDaGFydFdpZHRoIiwiZWFjaFNwYWNpbmciLCJ4QXhpc0RhdGEiLCJ4QXhpc1BvaW50cyIsInZhbGlkRGlzdGFuY2UiLCJpc0luQW5nbGVSYW5nZSIsImFuZ2xlIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwiYWRqdXN0IiwiUEkiLCJjYWxSb3RhdGVUcmFuc2xhdGUiLCJoIiwieHYiLCJ5diIsInRyYW5zWCIsInNxcnQiLCJ0cmFuc1kiLCJjcmVhdGVDdXJ2ZUNvbnRyb2xQb2ludHMiLCJwb2ludHMiLCJpc05vdE1pZGRsZVBvaW50IiwicEF4IiwicEF5IiwicEJ4IiwicEJ5IiwiY3RyQSIsImN0ckIiLCJjb252ZXJ0Q29vcmRpbmF0ZU9yaWdpbiIsImNlbnRlciIsImF2b2lkQ29sbGlzaW9uIiwiZmlsbFNlcmllcyIsInNlcmllcyIsInBvaW50U2hhcGUiLCJsZWdlbmRTaGFwZSIsImdldERhdGFSYW5nZSIsIm1pbkRhdGEiLCJtYXhEYXRhIiwicmFuZ2UiLCJtaW5SYW5nZSIsIm1heFJhbmdlIiwibWVhc3VyZVRleHQiLCJkYXRhQ29tYmluZSIsImRhdGFDb21iaW5lU3RhY2siLCJnZXRUb3VjaGVzIiwiY2xpZW50WCIsInBhZ2VZIiwib2Zmc2V0VG9wIiwiZ2V0U2VyaWVzRGF0YUl0ZW0iLCJkaXNhYmxlTGVnZW5kIiwiZm9ybWF0IiwiZ2V0TWF4VGV4dExpc3RMZW5ndGgiLCJsZW5ndGhMaXN0IiwiZ2V0UmFkYXJDb29yZGluYXRlU2VyaWVzIiwiZWFjaEFuZ2xlIiwiQ29vcmRpbmF0ZVNlcmllcyIsImdldFRvb2xUaXBEYXRhIiwic2VyaWVzRGF0YSIsImNhbFBvaW50cyIsImNhdGVnb3JpZXMiLCJ0ZXh0TGlzdCIsInZhbGlkQ2FsUG9pbnRzIiwib2Zmc2V0Iiwicm91bmQiLCJnZXRNaXhUb29sVGlwRGF0YSIsImdldENhbmRsZVRvb2xUaXBEYXRhIiwidXBDb2xvciIsInVwRmlsbCIsImRvd25Db2xvciIsImRvd25GaWxsIiwidGV4dDAiLCJ0ZXh0MSIsInRleHQyIiwidGV4dDMiLCJ0ZXh0NCIsImZpbHRlclNlcmllcyIsInRlbXBTZXJpZXMiLCJmaW5kQ3VycmVudEluZGV4IiwiY3VycmVudFBvaW50cyIsInNwYWNpbmciLCJ4QXhpcyIsImJvdW5kYXJ5R2FwIiwiaXNJbkV4YWN0Q2hhcnRBcmVhIiwiZmluZExlZ2VuZEluZGV4IiwibGVnZW5kRGF0YSIsImlzSW5FeGFjdExlZ2VuZEFyZWEiLCJmaW5kUmFkYXJDaGFydEN1cnJlbnRJbmRleCIsInJhZGFyRGF0YSIsImNvdW50IiwiZWFjaEFuZ2xlQXJlYSIsImlzSW5FeGFjdFBpZUNoYXJ0QXJlYSIsInJhZGl1cyIsImZpeEFuZ2xlIiwiYXRhbjIiLCJhbmdsZUxpc3QiLCJyYW5nZVN0YXJ0IiwicmFuZ2VFbmQiLCJmaW5kRnVubmVsQ2hhcnRDdXJyZW50SW5kZXgiLCJmdW5uZWxEYXRhIiwiZnVubmVsQXJlYSIsImZpbmRXb3JkQ2hhcnRDdXJyZW50SW5kZXgiLCJ3b3JkRGF0YSIsImZpbmRNYXBDaGFydEN1cnJlbnRJbmRleCIsImNEYXRhIiwibWFwRGF0YSIsInBvaW50VG9Db29yZGluYXRlIiwiYm91bmRzIiwic2NhbGUiLCJ4b2Zmc2V0IiwieW9mZnNldCIsInBvaSIsImdlb21ldHJ5IiwiY29vcmRpbmF0ZXMiLCJpc1BvaVdpdGhpblBvbHkiLCJmaW5kUGllQ2hhcnRDdXJyZW50SW5kZXgiLCJwaWVEYXRhIiwiX3N0YXJ0XyIsIl9wcm9wb3J0aW9uXyIsInBvdyIsInNwbGl0UG9pbnRzIiwibmV3UG9pbnRzIiwiY2FsTGVnZW5kRGF0YSIsIndob2xlV2lkdGgiLCJ3aG9sZUhlaWdodCIsIndpZHRoQXJyIiwiaGVpZ2h0QXJyIiwibGVnZW5kIiwibWFyZ2luIiwic2hhcGVXaWR0aCIsInNoYXBlUmlnaHQiLCJsaW5lSGVpZ2h0IiwibGVnZW5kTGlzdCIsIndpZHRoQ291bnQiLCJ3aWR0aENvdW50QXJyIiwiY3VycmVudFJvdyIsIml0ZW1XaWR0aCIsIml0ZW1HYXAiLCJsZWdlbmRXaWR0aCIsImZsb2F0IiwibWF4SGVpZ2h0IiwibWF4TGVuZ3RoIiwibGluZU51bSIsInRlbXAiLCJtYXhXaWR0aCIsImNhbENhdGVnb3JpZXNEYXRhIiwiY2F0ZWdvcmllc1RleHRMZW50aCIsIm1heFRleHRMZW5ndGgiLCJyb3RhdGVMYWJlbCIsInNpbiIsImdldFJhZGFyRGF0YVBvaW50cyIsInJhZGFyT3B0aW9uIiwicmFkYXIiLCJlYWNoIiwibGlzdEl0ZW0iLCJwcm9wb3J0aW9uIiwiY29zIiwiZ2V0UGllRGF0YVBvaW50cyIsIl9yYWRpdXNfIiwiZ2V0RnVubmVsRGF0YVBvaW50cyIsImdldFJvc2VEYXRhUG9pbnRzIiwibWluUmFkaXVzIiwiZGF0YUFyciIsInJhZGl1c0xlbmd0aCIsIl9yb3NlX3Byb3BvcnRpb25fIiwiZ2V0QXJjYmFyRGF0YVBvaW50cyIsImFyY2Jhck9wdGlvbiIsInRvdGFsQW5nbGUiLCJnZXRHYXVnZUF4aXNQb2ludHMiLCJ0ZW1wU3RhcnRBbmdsZSIsIl9zdGFydEFuZ2xlXyIsIl9lbmRBbmdsZV8iLCJnZXRHYXVnZURhdGFQb2ludHMiLCJnYXVnZU9wdGlvbiIsInBvaW50ZXIiLCJfb2xkQW5nbGVfIiwib2xkQW5nbGUiLCJvbGREYXRhIiwiZ2V0UGllVGV4dE1heExlbmd0aCIsImZpeENvbHVtZURhdGEiLCJjb2x1bW5MZW4iLCJjb2x1bW4iLCJmaXhDb2x1bWVNZXRlckRhdGEiLCJib3JkZXIiLCJmaXhDb2x1bWVTdGFja0RhdGEiLCJpbmRleG4iLCJnZXRYQXhpc1BvaW50cyIsInNwYWNpbmdWYWxpZCIsImRhdGFDb3VudCIsImVuYWJsZVNjcm9sbCIsIml0ZW1Db3VudCIsInN0YXJ0WCIsImVuZFgiLCJnZXRDYW5kbGVEYXRhUG9pbnRzIiwidmFsaWRIZWlnaHQiLCJjUG9pbnRzIiwiaW5kZXhzIiwicG9pbnQiLCJnZXREYXRhUG9pbnRzIiwiZ2V0U3RhY2tEYXRhUG9pbnRzIiwic2VyaWVzSW5kZXgiLCJzdGFja1NlcmllcyIsInZhbHVlMCIsImhlaWdodDAiLCJoZWlnaHRjIiwieTAiLCJnZXRZQXhpc1RleHRMaXN0Iiwic3RhY2siLCJzb3J0ZWQiLCJzdWJpdGVtIiwieUF4aXMiLCJyYW5nZVNwYW4iLCJkYXRhUmFuZ2UiLCJlYWNoUmFuZ2UiLCJjYWxZQXhpc0RhdGEiLCJjb2x1bW5zdHlsZSIsInJhbmdlcyIsInlBeGlzRm9udFNpemUiLCJyYW5nZXNGb3JtYXQiLCJjYWxUb29sdGlwWUF4aXNEYXRhIiwibWF4VmFsIiwibWluVmFsIiwibWluQXhpcyIsIm1heEF4aXMiLCJjYWxNYXJrTGluZURhdGEiLCJjb250ZXh0Um90YXRlIiwicm90YXRlTG9jayIsInRyYW5zbGF0ZSIsIl9yb3RhdGVfIiwiZHJhd1BvaW50U2hhcGUiLCJzaGFwZSIsImJlZ2luUGF0aCIsInNldFN0cm9rZVN0eWxlIiwic2V0TGluZVdpZHRoIiwic2V0RmlsbFN0eWxlIiwibW92ZVRvIiwibGluZVRvIiwiYXJjIiwicmVjdCIsImNsb3NlUGF0aCIsImZpbGwiLCJzdHJva2UiLCJkcmF3UmluZ1RpdGxlIiwidGl0bGVmb250U2l6ZSIsInRpdGxlIiwic3VidGl0bGVmb250U2l6ZSIsInN1YnRpdGxlIiwidGl0bGVGb250Q29sb3IiLCJzdWJ0aXRsZUZvbnRDb2xvciIsInRpdGxlSGVpZ2h0Iiwic3VidGl0bGVIZWlnaHQiLCJ0ZXh0V2lkdGgiLCJvZmZzZXRYIiwic3RhcnRZIiwib2Zmc2V0WSIsInNldEZvbnRTaXplIiwiZmlsbFRleHQiLCJfdGV4dFdpZHRoIiwiX3N0YXJ0WCIsIl9zdGFydFkiLCJkcmF3UG9pbnRUZXh0IiwidGV4dFNpemUiLCJ0ZXh0Q29sb3IiLCJmb3JtYXRWYWwiLCJkcmF3R2F1Z2VMYWJlbCIsImNlbnRlclBvc2l0aW9uIiwic3BsaXRBbmdsZSIsInNwbGl0TGluZSIsInNwbGl0TnVtYmVyIiwidG90YWxOdW1iZXIiLCJlbmROdW1iZXIiLCJzdGFydE51bWJlciIsIm5vd0FuZ2xlIiwibm93TnVtYmVyIiwicG9zIiwibGFiZWxUZXh0IiwibGFiZWxGb3JtYXQiLCJsYWJlbENvbG9yIiwiZHJhd1JhZGFyTGFiZWwiLCJwb3NSZWxhdGl2ZUNhbnZhcyIsImRyYXdQaWVUZXh0IiwibGluZVJhZGl1cyIsInRleHRPYmplY3RDb2xsZWN0aW9uIiwibGFzdFRleHRPYmplY3QiLCJzZXJpZXNDb252ZXJ0Iiwib3JnaW5YMSIsIm9yZ2luWTEiLCJvcmdpblgyIiwib3JnaW5ZMiIsIm9yZ2luWDMiLCJvcmdpblkzIiwidGV4dE9iamVjdCIsImxpbmVTdGFydCIsImxpbmVFbmQiLCJsaW5lU3RhcnRQb2lzdGlvbiIsImxpbmVFbmRQb2lzdGlvbiIsInRleHRQb3NpdGlvbiIsImN1cnZlU3RhcnRYIiwidGV4dFN0YXJ0WCIsInF1YWRyYXRpY0N1cnZlVG8iLCJkcmF3VG9vbFRpcFNwbGl0TGluZSIsInRvb2xUaXBPcHRpb24iLCJ0b29sdGlwIiwiZ3JpZFR5cGUiLCJkYXNoTGVuZ3RoIiwiZW5kWSIsInNldExpbmVEYXNoIiwiZ3JpZENvbG9yIiwieEF4aXNMYWJlbCIsInRleHRYIiwidGV4dFkiLCJsYWJlbEJnQ29sb3IiLCJsYWJlbEJnT3BhY2l0eSIsImxhYmVsRm9udENvbG9yIiwiZm9udENvbG9yIiwiZHJhd01hcmtMaW5lIiwibWFya0xpbmVPcHRpb24iLCJtYXJrTGluZSIsImxpbmVDb2xvciIsInNob3dMYWJlbCIsInlBeGlzSW5kZXgiLCJiZ1N0YXJ0WCIsImJnRW5kWCIsImJnV2lkdGgiLCJkcmF3VG9vbFRpcEhvcml6ZW50YWxMaW5lIiwieUF4aXNMYWJlbCIsImRyYXdUb29sVGlwU3BsaXRBcmVhIiwiYWN0aXZlQmdDb2xvciIsImFjdGl2ZUJnT3BhY2l0eSIsImRyYXdUb29sVGlwIiwiYmdDb2xvciIsImJnT3BhY2l0eSIsImxlZ2VuZE1hcmdpblJpZ2h0IiwiYXJyb3dXaWR0aCIsImlzT3ZlclJpZ2h0Qm9yZGVyIiwidG9vbFRpcFdpZHRoIiwidG9vbFRpcEhlaWdodCIsIl9zY3JvbGxEaXN0YW5jZV8iLCJmaWxsUmVjdCIsImRyYXdZQXhpc1RpdGxlIiwic2F2ZSIsInJlc3RvcmUiLCJkcmF3Q29sdW1uRGF0YVBvaW50cyIsInlBeGlzRGF0YSIsImNvbHVtbk9wdGlvbiIsIm1ldGVyIiwiZmlsbENvbG9yIiwiZWFjaFNlcmllcyIsInRvb2x0aXBQb2ludHMiLCJkYXRhTGFiZWwiLCJkcmF3Q2FuZGxlRGF0YVBvaW50cyIsInNlcmllc01BIiwiY2FuZGxlT3B0aW9uIiwiYXZlcmFnZSIsImNhbmRsZSIsInVwTGluZSIsImRvd25MaW5lIiwiZGF5Iiwic3BsaXRQb2ludExpc3QiLCJjdHJsUG9pbnQiLCJiZXppZXJDdXJ2ZVRvIiwiZHJhd0FyZWFEYXRhUG9pbnRzIiwiYXJlYU9wdGlvbiIsIm9wYWNpdHkiLCJhZGRMaW5lIiwiZmlyc3RQb2ludCIsImxhc3RQb2ludCIsImRyYXdMaW5lRGF0YVBvaW50cyIsImxpbmVPcHRpb24iLCJsaW5lIiwiZHJhd01peERhdGFQb2ludHMiLCJjb2x1bW5JbmRleCIsImNvbHVtbkxlbmd0aCIsInBvaW50c2EiLCJhZGRQb2ludCIsImRyYXdUb29sVGlwQnJpZGdlIiwiaG9yaXplbnRhbExpbmUiLCJkcmF3WEF4aXMiLCJzY3JvbGxTaG93Iiwic2Nyb2xsWSIsInNjcm9sbFNjcmVlbldpZHRoIiwic2Nyb2xsVG90YWxXaWR0aCIsInNjcm9sbFdpZHRoIiwic2Nyb2xsTGVmdCIsInNldExpbmVDYXAiLCJzY3JvbGxCYWNrZ3JvdW5kQ29sb3IiLCJzY3JvbGxDb2xvciIsImRpc2FibGVHcmlkIiwiZ3JpZEV2YWwiLCJtYXhYQXhpc0xpc3RMZW5ndGgiLCJsYWJlbENvdW50IiwicmF0aW8iLCJuZXdDYXRlZ29yaWVzIiwiY2dMZW5ndGgiLCJ4QXhpc0ZvbnRTaXplIiwiX3hBeGlzVGV4dEFuZ2xlXyIsIl9jYWxSb3RhdGVUcmFuc2xhdGUiLCJkcmF3WUF4aXNHcmlkIiwieEF4aXNlYWNoU3BhY2luZyIsIlRvdGFsV2lkdGgiLCJkcmF3WUF4aXMiLCJmaWxsRW5kWSIsImJhY2tncm91bmQiLCJkcmF3TGVnZW5kIiwibGVnZW5kQXJlYSIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiLCJpdGVtTGlzdCIsImxpc3RJbmRleCIsImhpZGRlbkNvbG9yIiwiZm9udFRyYW5zIiwiZHJhd1BpZURhdGFQb2ludHMiLCJwaWVPcHRpb24iLCJhY3RpdmVPcGFjaXR5IiwiYWN0aXZlUmFkaXVzIiwib2Zmc2V0QW5nbGUiLCJsYWJlbFdpZHRoIiwicmluZ1dpZHRoIiwicGllIiwiX3BpZVRleHRNYXhMZW5ndGhfIiwibGluZUpvaW4iLCJpbm5lclBpZVdpZHRoIiwiZHJhd1Jvc2VEYXRhUG9pbnRzIiwicm9zZU9wdGlvbiIsInJvc2UiLCJkcmF3QXJjYmFyRGF0YVBvaW50cyIsImFyY2JhciIsImRyYXdHYXVnZURhdGFQb2ludHMiLCJmaXhSYWRpdXMiLCJjaGlsZE51bWJlciIsImNoaWxkV2lkdGgiLCJnYXVnZSIsImlubmVyUmFkaXVzIiwiZWFjaENhdGVnb3JpZXMiLCJjaGlsZEFuZ2xlIiwiY2hpbGRlbmRYIiwiZHJhd1JhZGFyRGF0YVBvaW50cyIsImNvb3JkaW5hdGVBbmdsZSIsIl9sb29wIiwic3RhcnRQb3MiLCJyYWRhckRhdGFQb2ludHMiLCJub3JtYWxJbnQiLCJyYW5kb20iLCJjb2xsaXNpb25OZXciLCJpc0luIiwiZ2V0Qm91bmRpbmdCb3giLCJjb29yZHMiLCJ4TWluIiwieE1heCIsInlNaW4iLCJ5TWF4IiwiY29vcmRhIiwibG9uZ2l0dWRlIiwibGF0aXR1ZGUiLCJjb29yZGluYXRlVG9Qb2ludCIsInBvaW50WSIsInBvaW50WCIsImlzUmF5SW50ZXJzZWN0c1NlZ21lbnQiLCJzX3BvaSIsImVfcG9pIiwieHNlZyIsInBvbHkiLCJzaW5zYyIsImVwb2x5IiwiZHJhd01hcERhdGFQb2ludHMiLCJtYXBPcHRpb24iLCJmaWxsT3BhY2l0eSIsImFjdGl2ZUJvcmRlckNvbG9yIiwiYWN0aXZlRmlsbENvbG9yIiwiYWN0aXZlRmlsbE9wYWNpdHkiLCJ4U2NhbGUiLCJ5U2NhbGUiLCJjbGVhclJlY3QiLCJjZW50ZXJQb2ludCIsImNlbnRyb2lkIiwiZHJhdyIsImdldFdvcmRDbG91ZFBvaW50IiwidEhlaWdodCIsInRXaWR0aCIsImJyZWFrbnVtIiwiU3BpbiIsImlzU3BpbiIsImFyZWF2IiwiZHJhd1dvcmRDbG91ZERhdGFQb2ludHMiLCJhdXRvQ29sb3JzIiwid29yZCIsIndvcmRDbG91ZERhdGEiLCJzdHJva2VUZXh0IiwiZHJhd0Z1bm5lbERhdGFQb2ludHMiLCJmdW5uZWxPcHRpb24iLCJhY3RpdmVXaWR0aCIsImxhYmVsQWxpZ24iLCJmdW5uZWwiLCJkcmF3RnVubmVsVGV4dCIsImRyYXdDYW52YXMiLCJUaW1pbmciLCJlYXNlSW4iLCJlYXNlT3V0IiwiZWFzZUluT3V0IiwibGluZWFyIiwiQW5pbWF0aW9uIiwiaXNTdG9wIiwiZHVyYXRpb24iLCJ0aW1pbmciLCJjcmVhdGVBbmltYXRpb25GcmFtZSIsInN0ZXAiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJhbmltYXRpb25GcmFtZSIsInN0YXJ0VGltZVN0YW1wIiwiX3N0ZXAiLCJ0aW1lc3RhbXAiLCJvblByb2Nlc3MiLCJvbkFuaW1hdGlvbkZpbmlzaCIsInRpbWluZ0Z1bmN0aW9uIiwiZHJhd0NoYXJ0cyIsIl90aGlzIiwiYW5pbWF0aW9uIiwiYW5pbWF0aW9uSW5zdGFuY2UiLCJfc2VyaWVzXyIsIl9jYWxMZWdlbmREYXRhIiwiX2NhbFlBeGlzRGF0YSIsIl9jYWxDYXRlZ29yaWVzRGF0YSIsImNhdGVnb3JpZXNEYXRhIiwic2Nyb2xsQWxpZ24iLCJvZmZzZXRMZWZ0IiwidG90YWxXaWR0aCIsInNjcmVlbldpZHRoIiwic2Nyb2xsT3B0aW9uIiwiY3VycmVudE9mZnNldCIsInN0YXJ0VG91Y2hYIiwibGFzdE1vdmVUaW1lIiwid29yZE9wdGlvbiIsInVwZGF0ZURhdGEiLCJ0cmlnZ2VyIiwiX2RyYXdMaW5lRGF0YVBvaW50cyIsImVuYWJsZU1hcmtMaW5lIiwiX2RyYXdNaXhEYXRhUG9pbnRzIiwiX2RyYXdDb2x1bW5EYXRhUG9pbnRzIiwiX2RyYXdBcmVhRGF0YVBvaW50cyIsImFyY2JhckRhdGEiLCJnYXVnZURhdGEiLCJfZHJhd0NhbmRsZURhdGFQb2ludHMiLCJFdmVudCIsImV2ZW50cyIsImxpc3RlbmVyIiwiX2xlbiIsIl9rZXkiLCJDaGFydHMiLCJjb25maWckJDEiLCJ0ZW1wV2lkdGgiLCJ0ZW1wSGVpZ2h0IiwiJHRoaXMiLCJjcmVhdGVDYW52YXNDb250ZXh0IiwiY2FudmFzSWQiLCJzY3JvbGxQb3NpdGlvbiIsIl9nZXRYQXhpc1BvaW50czAiLCJ6b29tIiwiY2VudGVyTGVmdCIsIk1heExlZnQiLCJzdG9wQW5pbWF0aW9uIiwiZ2V0Q3VycmVudERhdGFJbmRleCIsImNoYW5nZWRUb3VjaGVzIiwiX3RvdWNoZXMkIiwiZ2V0TGVnZW5kRGF0YUluZGV4IiwidG91Y2hMZWdlbmQiLCJzaG93VG9vbFRpcCIsIl9nZXRUb29sVGlwRGF0YSIsIl9nZXRNaXhUb29sVGlwRGF0YSIsInNjcm9sbFN0YXJ0Iiwic2Nyb2xsIiwiTGltaXQiLCJ0b3VjaE1vdmVMaW1pdCIsImN1cnJNb3ZlVGltZSIsIl9kaXN0YW5jZSIsInNjcm9sbEVuZCIsIl9zY3JvbGxPcHRpb24iLCJub3JtYWxpemVDb21wb25lbnQiLCJzY3JpcHRFeHBvcnRzIiwiZnVuY3Rpb25hbFRlbXBsYXRlIiwiaW5qZWN0U3R5bGVzIiwic2NvcGVJZCIsIm1vZHVsZUlkZW50aWZpZXIiLCJzaGFkb3dNb2RlIiwicmVuZGVyanMiLCJfX21vZHVsZSIsIl9fVlVFX1NTUl9DT05URVhUX18iLCJfcmVnaXN0ZXJlZENvbXBvbmVudHMiLCJfc3NyUmVnaXN0ZXIiLCJzaGFkb3dSb290IiwiX2luamVjdFN0eWxlcyIsIm9yaWdpbmFsUmVuZGVyIiwid2ViaG9zdCIsIndlYmFwaSIsImNUYXNrVHlwZSIsImRUYXNrVHlwZSIsInJUYXNrVHlwZSIsImNUYXNrIiwidVRhc2siLCJkVGFzayIsIlRhc2tMaXN0IiwiVGFza0VuZCIsInJhbmtsaXN0IiwidW5pTG9naW4iLCJ2aXNpdExvZ2luIiwiZWRpdE5hbWUiLCJleHAiLCJzdGFyaGlzdG9yeSIsImNyZXdhcmQiLCJ1cmV3YXJkIiwicmV3YXJkTGlzdCIsInJld2FyZE9rIiwicmV3YXJkRGVsZXRlIiwiY2hhcnRzIiwic2lnbmluIiwibm90aWNlIiwic2lnbmdldCIsInNpZ25jbGVhciIsInVzZXJjbGVhciIsImNqTGlzdCIsImNqUmVxdWVzdCIsImhvbm9yVGl0bGUiLCJob25vckNvcnJlcyIsImhvbm9yTGlzdCIsImljb24iLCJjdXJpY29uIiwiZXhwdmFsIiwiY3Rhc2siLCJlbmR0YXNrIiwiZ2V0V2Vla0RheSIsIm15RGF0ZSIsImRheXMiLCJnZXREYXkiLCJxdCIsImJ5IiwiaGoiLCJiaiIsInpzIiwieHMiLCJleHBUaXRsZSIsInVybCIsInBhcmFtIiwicmVxdWVzdCIsImhlYWRlciIsImdldFN0b3JhZ2VTeW5jIiwic3RhdHVzQ29kZSIsInNob3dUb2FzdCIsInN3aXRjaFRhYiIsInBvc3REYXRhIiwic3RyYm9vbCIsImdldFVzZXJpbmZvIiwidXNlclJlcyIsInJlc2hvb2siLCJleHBQcm9ncmVzcyIsInVzZXJMZXZlbEluZm8iLCJjdXJyZW50RXhwZXJpZW5jZSIsInRvdGFsRXhwZXJpZW5jZUZvckN1cnJlbnRMZXZlbCIsInNldFN0b3JhZ2UiLCJzdGFyU3VtbWFyeSIsImN1cnJlbnRDb3VudCIsInNob3dNb2RhbCIsImNvbmZpcm0iLCJjYW5jZWwiLCJhZGRFeHAiLCJub2dldHVzZXIiLCJleHBlcmllbmNlIiwiZXhwUmVzIiwicmVzdWx0Q29kZSIsImNqQ2hlY2siLCJjamluZm8iLCJjaGVja0NqIiwic3RhckFkanVzdCIsImFkanVzdENvdW50Iiwic3RhclJlcyIsInNob3dMb2FkaW5nIiwibWFzayIsImhpZGVMb2FkaW5nIiwiY2hlY2tDb2RlIiwiY29kZSIsIm9yaWdpbiIsImVuY29kZURhdGEiLCJyZWRpcmVjdFRvIiwiZGF0YWRldGFpbCIsImRhdGFwYXJhbXMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZWNUb1RpbWUiLCJzZWMiLCJob3VyIiwibWludSIsInNlY29uZCIsImZvcm1hdE51bWJlciIsImZvcm1hdFRpbWUiLCJkYXRlIiwieWVhciIsImdldEZ1bGxZZWFyIiwibW9udGgiLCJnZXRNb250aCIsImdldERhdGUiXSwibWFwcGluZ3MiOiI7Ozs7aUxBQUEsd0IscWhFQUVBLElBQU1BLEVBQVlDLE9BQU9DLFVBQVVDLFNBQzdCQyxFQUFpQkgsT0FBT0MsVUFBVUUsZUFFeEMsU0FBU0MsRUFBTUMsR0FDYixNQUFxQixvQkFBUEEsRUFHaEIsU0FBU0MsRUFBT0MsR0FDZCxNQUFzQixrQkFBUkEsRUFHaEIsU0FBU0MsRUFBZUMsR0FDdEIsTUFBK0Isb0JBQXhCVixFQUFVVyxLQUFLRCxHQUd4QixTQUFTRSxFQUFRRixFQUFLRyxHQUNwQixPQUFPVCxFQUFlTyxLQUFLRCxFQUFLRyxHQUdsQyxTQUFTQyxLQUtULFNBQVNDLEVBQVFULEdBQ2YsSUFBTVUsRUFBUWYsT0FBT2dCLE9BQU8sTUFDNUIsT0FBTyxTQUFtQlQsR0FDeEIsSUFBTVUsRUFBTUYsRUFBTVIsR0FDbEIsT0FBT1UsSUFBUUYsRUFBTVIsR0FBT0YsRUFBR0UsS0FPbkMsSUFBTVcsRUFBYSxTQUNiQyxFQUFXTCxHQUFPLFNBQUNQLEdBQ3ZCLE9BQU9BLEVBQUlhLFFBQVFGLEdBQVksU0FBQ0csRUFBR0MsR0FBSixPQUFVQSxFQUFJQSxFQUFFQyxjQUFnQixTQUczREMsRUFBUSxDQUNaLFNBQ0EsVUFDQSxPQUNBLFdBQ0EsZUFHSUMsRUFBcUIsR0FDckJDLEVBQXFCLEdBRTNCLFNBQVNDLEVBQVdDLEVBQVdDLEdBQzdCLElBQU1DLEVBQU1ELEVBQ1JELEVBQ0VBLEVBQVVHLE9BQU9GLEdBQ2pCRyxNQUFNQyxRQUFRSixHQUNaQSxFQUFXLENBQUNBLEdBQ2hCRCxFQUNKLE9BQU9FLEVBQ0hJLEVBQVlKLEdBQ1pBLEVBR04sU0FBU0ksRUFBYUMsR0FFcEIsSUFEQSxJQUFNTCxFQUFNLEdBQ0hNLEVBQUksRUFBR0EsRUFBSUQsRUFBTUUsT0FBUUQsS0FDRCxJQUEzQk4sRUFBSVEsUUFBUUgsRUFBTUMsS0FDcEJOLEVBQUlTLEtBQUtKLEVBQU1DLElBR25CLE9BQU9OLEVBR1QsU0FBU1UsRUFBWUwsRUFBT00sR0FDMUIsSUFBTUMsRUFBUVAsRUFBTUcsUUFBUUcsSUFDYixJQUFYQyxHQUNGUCxFQUFNUSxPQUFPRCxFQUFPLEdBSXhCLFNBQVNFLEVBQXNCQyxFQUFhQyxHQUMxQzlDLE9BQU8rQyxLQUFLRCxHQUFRRSxTQUFRLFNBQUFQLElBQ0csSUFBekJqQixFQUFNYyxRQUFRRyxJQUFnQnJDLEVBQUswQyxFQUFPTCxNQUM1Q0ksRUFBWUosR0FBUWQsRUFBVWtCLEVBQVlKLEdBQU9LLEVBQU9MLFFBSzlELFNBQVNRLEVBQXVCSixFQUFhQyxHQUN0Q0QsR0FBZ0JDLEdBR3JCOUMsT0FBTytDLEtBQUtELEdBQVFFLFNBQVEsU0FBQVAsSUFDRyxJQUF6QmpCLEVBQU1jLFFBQVFHLElBQWdCckMsRUFBSzBDLEVBQU9MLEtBQzVDRCxFQUFXSyxFQUFZSixHQUFPSyxFQUFPTCxPQUszQyxTQUFTUyxFQUFnQkMsRUFBUUwsR0FDVCxrQkFBWEssR0FBdUIzQyxFQUFjc0MsR0FDOUNGLEVBQXFCbEIsRUFBbUJ5QixLQUFZekIsRUFBbUJ5QixHQUFVLElBQUtMLEdBQzdFdEMsRUFBYzJDLElBQ3ZCUCxFQUFxQm5CLEVBQW9CMEIsR0FJN0MsU0FBU0MsRUFBbUJELEVBQVFMLEdBQ1osa0JBQVhLLEVBQ0wzQyxFQUFjc0MsR0FDaEJHLEVBQXNCdkIsRUFBbUJ5QixHQUFTTCxVQUUzQ3BCLEVBQW1CeUIsR0FFbkIzQyxFQUFjMkMsSUFDdkJGLEVBQXNCeEIsRUFBb0IwQixHQUk5QyxTQUFTRSxFQUFhWixHQUNwQixPQUFPLFNBQVVhLEdBQ2YsT0FBT2IsRUFBS2EsSUFBU0EsR0FJekIsU0FBU0MsRUFBVzlDLEdBQ2xCLFFBQVNBLElBQXVCLGtCQUFSQSxHQUFtQyxvQkFBUkEsSUFBMkMsb0JBQWJBLEVBQUkrQyxLQUd2RixTQUFTQyxFQUFPdEIsRUFBT21CLEdBRXJCLElBREEsSUFBSUksR0FBVSxFQUNMdEIsRUFBSSxFQUFHQSxFQUFJRCxFQUFNRSxPQUFRRCxJQUFLLENBQ3JDLElBQU1LLEVBQU9OLEVBQU1DLEdBQ25CLEdBQUlzQixFQUNGQSxFQUFVQyxRQUFRQyxRQUFRUCxFQUFZWixRQUNqQyxDQUNMLElBQU1YLEVBQU1XLEVBQUthLEdBSWpCLEdBSElDLEVBQVV6QixLQUNaNEIsRUFBVUMsUUFBUUMsUUFBUTlCLEtBRWhCLElBQVJBLEVBQ0YsTUFBTyxDQUNMMEIsS0FESyxlQU1iLE9BQU9FLEdBQVcsQ0FDaEJGLEtBRGdCLFNBQ1ZLLEdBQ0osT0FBT0EsRUFBU1AsS0FLdEIsU0FBU1EsRUFBZ0JqQixHQUE0QixJQUFma0IsRUFBYyx1REFBSixHQVk5QyxNQVhBLENBQUMsVUFBVyxPQUFRLFlBQVlmLFNBQVEsU0FBQWdCLEdBQ3RDLEdBQUloQyxNQUFNQyxRQUFRWSxFQUFZbUIsSUFBUSxDQUNwQyxJQUFNQyxFQUFjRixFQUFRQyxHQUM1QkQsRUFBUUMsR0FBUSxTQUE4QmxDLEdBQzVDMkIsRUFBTVosRUFBWW1CLEdBQU9sQyxHQUFLMEIsTUFBSyxTQUFDMUIsR0FFbEMsT0FBTzFCLEVBQUs2RCxJQUFnQkEsRUFBWW5DLElBQVFBLFVBS2pEaUMsRUFHVCxTQUFTRyxFQUFvQmYsRUFBUWdCLEdBQ25DLElBQU1DLEVBQW1CLEdBQ3JCcEMsTUFBTUMsUUFBUVIsRUFBbUIwQyxjQUNuQ0MsRUFBaUI3QixLQUFqQixNQUFBNkIsRUFBZ0IsRUFBUzNDLEVBQW1CMEMsY0FFOUMsSUFBTXRCLEVBQWNuQixFQUFtQnlCLEdBT3ZDLE9BTklOLEdBQWViLE1BQU1DLFFBQVFZLEVBQVlzQixjQUMzQ0MsRUFBaUI3QixLQUFqQixNQUFBNkIsRUFBZ0IsRUFBU3ZCLEVBQVlzQixjQUV2Q0MsRUFBaUJwQixTQUFRLFNBQUFQLEdBQ3ZCMEIsRUFBYzFCLEVBQUswQixJQUFnQkEsS0FFOUJBLEVBR1QsU0FBU0UsRUFBd0JsQixHQUMvQixJQUFNTixFQUFjN0MsT0FBT2dCLE9BQU8sTUFDbENoQixPQUFPK0MsS0FBS3RCLEdBQW9CdUIsU0FBUSxTQUFBUCxHQUN6QixnQkFBVEEsSUFDRkksRUFBWUosR0FBUWhCLEVBQW1CZ0IsR0FBTTZCLFlBR2pELElBQU1DLEVBQW9CN0MsRUFBbUJ5QixHQVE3QyxPQVBJb0IsR0FDRnZFLE9BQU8rQyxLQUFLd0IsR0FBbUJ2QixTQUFRLFNBQUFQLEdBQ3hCLGdCQUFUQSxJQUNGSSxFQUFZSixJQUFTSSxFQUFZSixJQUFTLElBQUlWLE9BQU93QyxFQUFrQjlCLFFBSXRFSSxFQUdULFNBQVMyQixFQUFXckIsRUFBUXNCLEVBQUtWLEdBQXFCLElBQUQsdUJBQVJXLEVBQVEsaUNBQVJBLEVBQVEsa0JBQ25ELElBQU03QixFQUFjd0IsRUFBdUJsQixHQUMzQyxHQUFJTixHQUFlN0MsT0FBTytDLEtBQUtGLEdBQWFSLE9BQVEsQ0FDbEQsR0FBSUwsTUFBTUMsUUFBUVksRUFBWThCLFFBQVMsQ0FDckMsSUFBTTdDLEVBQU0yQixFQUFNWixFQUFZOEIsT0FBUVosR0FDdEMsT0FBT2pDLEVBQUkwQixNQUFLLFNBQUNPLEdBQ2YsT0FBT1UsRUFBRyxXQUFILEdBQUlYLEVBQWVqQixFQUFha0IsSUFBaEMsT0FBNkNXLE9BR3RELE9BQU9ELEVBQUcsV0FBSCxHQUFJWCxFQUFlakIsRUFBYWtCLElBQWhDLE9BQTZDVyxJQUd4RCxPQUFPRCxFQUFHLFdBQUgsR0FBSVYsR0FBSixPQUFnQlcsSUFHekIsSUFBTUUsRUFBcUIsQ0FDekJULFlBRHlCLFNBQ1pyQyxHQUNYLE9BQUt5QixFQUFVekIsR0FHUkEsRUFBSTBCLE1BQUssU0FBQTFCLEdBQ2QsT0FBT0EsRUFBSSxNQUNWK0MsT0FBTSxTQUFBL0MsR0FDUCxPQUFPQSxFQUFJLE1BTEpBLElBVVBnRCxFQUNKLHNQQUVJQyxFQUFpQixtQkFHakJDLEVBQXFCLENBQUMsdUJBR3RCQyxFQUFZLENBQUMsdUJBRWJDLEVBQWtCLFdBRXhCLFNBQVNDLEVBQWNuQixHQUNyQixPQUFPZSxFQUFlSyxLQUFLcEIsS0FBK0MsSUFBdENnQixFQUFtQjFDLFFBQVEwQixHQUVqRSxTQUFTcUIsRUFBV3JCLEdBQ2xCLE9BQU9jLEVBQVlNLEtBQUtwQixLQUFzQyxJQUE3QmlCLEVBQVUzQyxRQUFRMEIsR0FHckQsU0FBU3NCLEVBQWV0QixHQUN0QixPQUFPa0IsRUFBZ0JFLEtBQUtwQixJQUFrQixXQUFUQSxFQUd2QyxTQUFTdUIsR0FBZTdCLEdBQ3RCLE9BQU9BLEVBQVFGLE1BQUssU0FBQUYsR0FDbEIsTUFBTyxDQUFDLEtBQU1BLE1BRWJ1QixPQUFNLFNBQUFXLEdBQUcsTUFBSSxDQUFDQSxNQUduQixTQUFTQyxHQUFlekIsR0FDdEIsUUFDRW1CLEVBQWFuQixJQUNicUIsRUFBVXJCLElBQ1ZzQixFQUFjdEIsSUFvQmxCLFNBQVMwQixHQUFXMUIsRUFBTVMsR0FDeEIsT0FBS2dCLEdBQWN6QixHQUdaLFdBQThDLElBQUMsSUFBMUJELEVBQXlCLHVEQUFmLEdBQWUsbUJBQVJXLEVBQVEsaUNBQVJBLEVBQVEsa0JBQ25ELE9BQUl0RSxFQUFLMkQsRUFBUTRCLFVBQVl2RixFQUFLMkQsRUFBUTZCLE9BQVN4RixFQUFLMkQsRUFBUThCLFVBQ3ZEM0IsRUFBbUJGLEVBQU1RLEVBQVMsV0FBVCxHQUFVUixFQUFNUyxFQUFLVixHQUFyQixPQUFpQ1csS0FFNURSLEVBQW1CRixFQUFNdUIsR0FBYyxJQUFJNUIsU0FBUSxTQUFDQyxFQUFTa0MsR0FDbEV0QixFQUFTLFdBQVQsR0FBVVIsRUFBTVMsRUFBS3pFLE9BQU8rRixPQUFPLEdBQUloQyxFQUFTLENBQzlDNEIsUUFBUy9CLEVBQ1RnQyxLQUFNRSxLQUZSLE9BR09wQixVQVZGRCxFQWROZCxRQUFRMUQsVUFBVStGLFVBQ3JCckMsUUFBUTFELFVBQVUrRixRQUFVLFNBQVVuQyxHQUNwQyxJQUFNSCxFQUFVdUMsS0FBS0MsWUFDckIsT0FBT0QsS0FBS3pDLE1BQ1YsU0FBQTJDLEdBQUssT0FBSXpDLEVBQVFFLFFBQVFDLEtBQVlMLE1BQUssa0JBQU0yQyxRQUNoRCxTQUFBQyxHQUFNLE9BQUkxQyxFQUFRRSxRQUFRQyxLQUFZTCxNQUFLLFdBQ3pDLE1BQU00QyxVQXVCZCxJQUFNQyxHQUFNLEtBQ05DLEdBQW9CLElBQ3RCQyxJQUFRLEVBQ1JDLEdBQWMsRUFDZEMsR0FBWSxFQUVoQixTQUFTQyxLQUFxQixJQUFELEVBS3ZCQyxHQUFHQyxvQkFITEMsRUFGeUIsRUFFekJBLFNBQ0FDLEVBSHlCLEVBR3pCQSxXQUNBQyxFQUp5QixFQUl6QkEsWUFHRlAsR0FBY08sRUFDZE4sR0FBWUssRUFDWlAsR0FBcUIsUUFBYk0sRUFHVixTQUFTRyxHQUFRQyxFQUFRQyxHQU12QixHQUxvQixJQUFoQlYsSUFDRkUsS0FHRk8sRUFBU0UsT0FBT0YsR0FDRCxJQUFYQSxFQUNGLE9BQU8sRUFFVCxJQUFJRyxFQUFVSCxFQUFTWCxJQUFzQlksR0FBa0JWLElBWS9ELE9BWElZLEVBQVMsSUFDWEEsR0FBVUEsR0FFWkEsRUFBU0MsS0FBS0MsTUFBTUYsRUFBU2YsSUFDZCxJQUFYZSxJQUlBQSxFQUhnQixJQUFkWCxJQUFvQkYsR0FHYixHQUZBLEdBS05VLEVBQVMsR0FBS0csRUFBU0EsRUFHaEMsSUFBTUcsR0FBZSxDQUNuQjNDLHNCQUdFNEMsR0FBdUJ4SCxPQUFPeUgsT0FBTyxDQUN2Q0MsVUFBVyxLQUNYVixPQUFRQSxHQUNSOUQsZUFBZ0JBLEVBQ2hCRSxrQkFBbUJBLEVBQ25CbUUsYUFBY0EsS0FHWkksR0FBZSxDQUNqQkMsS0FEaUIsU0FDWEMsR0FDSixJQUFJQyxFQUFlQyxTQUFTRixFQUFTRyxTQUNyQyxJQUFJQyxNQUFNSCxHQUFWLENBR0EsSUFBTUksRUFBT0wsRUFBU0ssS0FDdEIsR0FBS2xHLE1BQU1DLFFBQVFpRyxHQUFuQixDQUdBLElBQU1DLEVBQU1ELEVBQUs3RixPQUNqQixHQUFLOEYsRUFnQkwsT0FiSUwsRUFBZSxFQUNqQkEsRUFBZSxFQUNOQSxHQUFnQkssSUFDekJMLEVBQWVLLEVBQU0sR0FFbkJMLEVBQWUsR0FDakJELEVBQVNHLFFBQVVFLEVBQUtKLEdBQ3hCRCxFQUFTSyxLQUFPQSxFQUFLRSxRQUNuQixTQUFDQyxFQUFNM0YsR0FBUCxRQUFpQkEsRUFBUW9GLElBQWVPLElBQVNILEVBQUtKLE9BR3hERCxFQUFTRyxRQUFVRSxFQUFLLEdBRW5CLENBQ0xJLFdBQVcsRUFDWEMsTUFBTSxPQUtOQyxHQUFZLENBQ2hCYixpQkFFSWMsR0FBUSxDQUNaLGNBQ0EsZ0JBQ0Esa0JBb0NJQyxHQUFXLENBQ2YsV0FDQSxxQkFDQSxvQkFDQSx3QkFDQSxlQUNBLGtCQUNBLHNCQUNBLHNCQUNBLGtCQUNBLHNCQUNBLGNBQ0EsZUFDQSxlQUNBLGdCQUNBLGVBQ0EsZ0JBQ0Esb0JBQ0Esa0JBQ0EsY0FDQSxnQkFDQSxlQUNBLGtCQUNBLGVBQ0EsMEJBQ0EsMEJBQ0Esd0JBQ0Esa0JBQ0Esd0JBQ0EsZ0JBQ0EsZ0JBQ0EsbUJBR0lDLEdBQVksQ0FBQyxVQUFXLE9BQVEsU0FBVSxZQUVoRCxTQUFTQyxHQUFpQkMsRUFBWTFGLEVBQVFnQixHQUM1QyxPQUFPLFNBQVVyQyxHQUNmLE9BQU9xQixFQUFPMkYsR0FBbUJELEVBQVkvRyxFQUFLcUMsS0FJdEQsU0FBUzRFLEdBQWFGLEVBQVloQixHQUFvRSxJQUExRG1CLEVBQXlELHVEQUE1QyxHQUFJN0UsRUFBd0MsdURBQTFCLEdBQUk4RSxFQUFzQix3REFDbkcsR0FBSXpJLEVBQWNxSCxHQUFXLENBQzNCLElBQU1xQixHQUEwQixJQUFqQkQsRUFBd0JwQixFQUFXLEdBSWxELElBQUssSUFBTWpILEtBSFBSLEVBQUs0SSxLQUNQQSxFQUFhQSxFQUFXbkIsRUFBVXFCLElBQVcsSUFFN0JyQixFQUNoQixHQUFJbEgsRUFBT3FJLEVBQVlwSSxHQUFNLENBQzNCLElBQUl1SSxFQUFZSCxFQUFXcEksR0FDdkJSLEVBQUsrSSxLQUNQQSxFQUFZQSxFQUFVdEIsRUFBU2pILEdBQU1pSCxFQUFVcUIsSUFFNUNDLEVBRU03SSxFQUFNNkksR0FDZkQsRUFBT0MsR0FBYXRCLEVBQVNqSCxHQUNwQkosRUFBYzJJLEtBQ3ZCRCxFQUFPQyxFQUFVbkYsS0FBT21GLEVBQVVuRixLQUFPcEQsR0FBT3VJLEVBQVVoRCxPQUoxRGlELFFBQVFDLEtBQVIsZ0JBQXNCUixFQUF0QixlQUF1Q2pJLFNBTUosSUFBNUIrSCxHQUFVckcsUUFBUTFCLEdBQ3ZCUixFQUFLeUgsRUFBU2pILE1BQ2hCc0ksRUFBT3RJLEdBQU9nSSxHQUFnQkMsRUFBWWhCLEVBQVNqSCxHQUFNdUQsSUFHdEQ4RSxJQUNIQyxFQUFPdEksR0FBT2lILEVBQVNqSCxJQUk3QixPQUFPc0ksRUFJVCxPQUhXOUksRUFBS3lILEtBQ2RBLEVBQVdlLEdBQWdCQyxFQUFZaEIsRUFBVTFELElBRTVDMEQsRUFHVCxTQUFTaUIsR0FBb0JELEVBQVkvRyxFQUFLcUMsR0FBdUMsSUFBMUJtRixFQUF5Qix3REFJbEYsT0FISWxKLEVBQUtvSSxHQUFVckUsZUFDakJyQyxFQUFNMEcsR0FBVXJFLFlBQVkwRSxFQUFZL0csSUFFbkNpSCxHQUFZRixFQUFZL0csRUFBS3FDLEVBQWEsR0FBSW1GLEdBR3ZELFNBQVNDLEdBQVNWLEVBQVkxRixHQUM1QixHQUFJeEMsRUFBTzZILEdBQVdLLEdBQWEsQ0FDakMsSUFBTVcsRUFBV2hCLEdBQVVLLEdBQzNCLE9BQUtXLEVBS0UsU0FBVUMsRUFBTUMsR0FDckIsSUFBSTNGLEVBQVV5RixFQUNWcEosRUFBS29KLEtBQ1B6RixFQUFVeUYsRUFBU0MsSUFHckJBLEVBQU9WLEdBQVlGLEVBQVlZLEVBQU0xRixFQUFRNkQsS0FBTTdELEVBQVFJLGFBRTNELElBQU15RCxFQUFPLENBQUM2QixHQUNNLHFCQUFUQyxHQUNUOUIsRUFBS3JGLEtBQUttSCxHQUVaLElBQU12RixFQUFjd0MsR0FBRzVDLEVBQVFDLE1BQVE2RSxHQUFZYyxNQUFNaEQsR0FBSWlCLEdBQzdELE9BQUl2QyxFQUFVd0QsR0FDTEMsR0FBbUJELEVBQVkxRSxFQUFhSixFQUFRSSxZQUFhZ0IsRUFBYTBELElBRWhGMUUsR0FwQkEsV0FDTGlGLFFBQVFRLE1BQVIsb0JBQTJCZixLQXNCakMsT0FBTzFGLEVBR1QsSUFBTTBHLEdBQVc3SixPQUFPZ0IsT0FBTyxNQUV6QjhJLEdBQVEsQ0FDWix1QkFDQSxnQkFDQSxrQkFDQSxTQUNBLFVBQ0EsU0FHRixTQUFTQyxHQUFlL0YsR0FDdEIsT0FBTyxZQUdKLElBRkQ0QixFQUVDLEVBRkRBLEtBQ0FDLEVBQ0MsRUFEREEsU0FFTS9ELEVBQU0sQ0FDVmtJLE9BQVEsR0FBRixPQUFLaEcsRUFBTCxzQkFBdUJBLEVBQXZCLFFBRVI1RCxFQUFLd0YsSUFBU0EsRUFBSzlELEdBQ25CMUIsRUFBS3lGLElBQWFBLEVBQVMvRCxJQUkvQmdJLEdBQU05RyxTQUFRLFNBQVVnQixHQUN0QjZGLEdBQVM3RixHQUFRK0YsR0FBYy9GLE1BR2pDLElBQUlpRyxHQUFZLENBQ2RDLE1BQU8sQ0FBQyxNQUNSQyxNQUFPLENBQUMsTUFDUkMsUUFBUyxDQUFDLFNBQ1Y3SCxLQUFNLENBQUMsT0FHVCxTQUFTOEgsR0FBVCxHQUtJLElBSkZDLEVBSUMsRUFKREEsUUFDQTNFLEVBR0MsRUFIREEsUUFDQUMsRUFFQyxFQUZEQSxLQUNBQyxFQUNDLEVBRERBLFNBRUkvRCxHQUFNLEVBQ05tSSxHQUFVSyxJQUNaeEksRUFBTSxDQUNKa0ksT0FBUSxpQkFDUk0sVUFDQUMsU0FBVU4sR0FBVUssSUFFdEJsSyxFQUFLdUYsSUFBWUEsRUFBUTdELEtBRXpCQSxFQUFNLENBQ0prSSxPQUFRLHVCQUF5Qk0sRUFBVSxRQUU3Q2xLLEVBQUt3RixJQUFTQSxFQUFLOUQsSUFFckIxQixFQUFLeUYsSUFBYUEsRUFBUy9ELEdBRzdCLElBQUkwSSxHQUF3QnhLLE9BQU95SCxPQUFPLENBQ3hDQyxVQUFXLEtBQ1gyQyxZQUFhQSxLQUdUSSxHQUFjLFdBQ2xCLElBQUlDLEVBQ0osT0FBTyxXQUlMLE9BSEtBLElBQ0hBLEVBQVUsSUFBSUMsV0FFVEQsR0FOUyxHQVVwQixTQUFTZixHQUFPaUIsRUFBS3pILEVBQVF5RSxHQUMzQixPQUFPZ0QsRUFBSXpILEdBQVF3RyxNQUFNaUIsRUFBS2hELEdBR2hDLFNBQVNpRCxLQUNQLE9BQU9sQixHQUFNYyxLQUFjLE1BQWYsMkJBQTBCSyxZQUV4QyxTQUFTQyxLQUNQLE9BQU9wQixHQUFNYyxLQUFjLE9BQWYsMkJBQTJCSyxZQUV6QyxTQUFTRSxLQUNQLE9BQU9yQixHQUFNYyxLQUFjLFFBQWYsMkJBQTRCSyxZQUUxQyxTQUFTRyxLQUNQLE9BQU90QixHQUFNYyxLQUFjLFFBQWYsMkJBQTRCSyxZQUcxQyxJQUFJSSxHQUF3QmxMLE9BQU95SCxPQUFPLENBQ3hDQyxVQUFXLEtBQ1htRCxJQUFLQSxHQUNMRSxLQUFNQSxHQUNOQyxNQUFPQSxHQUNQQyxNQUFPQSxLQUdMeEcsR0FBbUJ6RSxPQUFPeUgsT0FBTyxDQUNuQ0MsVUFBVyxPQUdQeUQsR0FBU0MsS0FDVEMsR0FBY0MsVUFFZEMsR0FBYyxLQUVkQyxHQUFZMUssR0FBTyxTQUFDUCxHQUN4QixPQUFPWSxFQUFTWixFQUFJYSxRQUFRbUssR0FBYSxTQUczQyxTQUFTRSxHQUFrQkMsR0FDekIsSUFBTUMsRUFBa0JELEVBQVdFLGFBQ25DRixFQUFXRSxhQUFlLFNBQVVDLEdBQWlCLElBQUQsdUJBQU5qRSxFQUFNLGlDQUFOQSxFQUFNLGtCQUNsRCxPQUFPK0QsRUFBZ0JoQyxNQUFNK0IsRUFBdEIsQ0FBbUNGLEdBQVVLLElBQTdDLE9BQXdEakUsS0FJbkUsU0FBU2tFLEdBQVU5SCxFQUFNRCxHQUN2QixJQUFNZ0ksRUFBVWhJLEVBQVFDLEdBTXRCRCxFQUFRQyxHQUxMK0gsRUFLYSxXQUNkTixHQUFpQnhGLE1BRGdCLDJCQUFOMkIsRUFBTSx5QkFBTkEsRUFBTSxnQkFFakMsT0FBT21FLEVBQVFwQyxNQUFNMUQsS0FBTTJCLElBTmIsV0FDZDZELEdBQWlCeEYsT0FVdkJtRixLQUFPLFdBQXlCLElBQWZySCxFQUFjLHVEQUFKLEdBRXpCLE9BREErSCxHQUFTLFNBQVUvSCxHQUNab0gsR0FBT3BILElBR2hCdUgsVUFBWSxXQUF5QixJQUFmdkgsRUFBYyx1REFBSixHQUU5QixPQURBK0gsR0FBUyxVQUFXL0gsR0FDYnNILEdBQVl0SCxJQUdyQixJQUFNaUksR0FBbUIsQ0FDdkIsb0JBQ0EsZ0JBQ0EsbUJBQ0Esa0JBQ0Esb0JBQ0EsZUFDQSxXQUNBLGdCQUdGLFNBQVNDLEdBQVdDLEVBQUlDLEdBQ3RCLElBQU1ULEVBQWFRLEVBQUdFLElBQUlGLEVBQUdHLFFBQzdCRixFQUFNbkosU0FBUSxTQUFBc0osR0FDUjNMLEVBQU8rSyxFQUFZWSxLQUNyQkosRUFBR0ksR0FBUVosRUFBV1ksT0FLNUIsU0FBU0MsR0FBUzlKLEVBQU0rSixHQUN0QixJQUFLQSxFQUNILE9BQU8sRUFHVCxHQUFJN0IsVUFBSTVHLFNBQVcvQixNQUFNQyxRQUFRMEksVUFBSTVHLFFBQVF0QixJQUMzQyxPQUFPLEVBS1QsR0FGQStKLEVBQWFBLEVBQVdDLFNBQVdELEVBRS9CcE0sRUFBS29NLEdBQ1AsUUFBSXBNLEVBQUtvTSxFQUFXRSxjQUFjakssUUFHOUIrSixFQUFXRyxPQUNiSCxFQUFXRyxNQUFNNUksU0FDakIvQixNQUFNQyxRQUFRdUssRUFBV0csTUFBTTVJLFFBQVF0QixLQU0zQyxHQUFJckMsRUFBS29NLEVBQVcvSixJQUNsQixPQUFPLEVBRVQsSUFBTW1LLEVBQVNKLEVBQVdJLE9BQzFCLE9BQUk1SyxNQUFNQyxRQUFRMkssS0FDUEEsRUFBT0MsTUFBSyxTQUFBQyxHQUFLLE9BQUlQLEdBQVE5SixFQUFNcUssV0FEOUMsRUFLRixTQUFTQyxHQUFXQyxFQUFXN0ssRUFBT3FLLEdBQ3BDckssRUFBTWEsU0FBUSxTQUFBUCxHQUNSOEosR0FBUTlKLEVBQU0rSixLQUNoQlEsRUFBVXZLLEdBQVEsU0FBVW1GLEdBQzFCLE9BQU8zQixLQUFLZ0gsS0FBT2hILEtBQUtnSCxJQUFJQyxZQUFZekssRUFBTW1GLFFBTXRELFNBQVN1RixHQUFrQnhDLEVBQUs2QixHQUU5QixJQUFJWSxFQU9KLE9BUkFaLEVBQWFBLEVBQVdDLFNBQVdELEVBR2pDWSxFQURFaE4sRUFBS29NLEdBQ1FBLEVBRUE3QixFQUFJMEMsT0FBT2IsR0FFNUJBLEVBQWFZLEVBQWFySixRQUNuQixDQUFDcUosRUFBY1osR0FHeEIsU0FBU2MsR0FBV3BCLEVBQUlxQixHQUN0QixHQUFJdkwsTUFBTUMsUUFBUXNMLElBQWFBLEVBQVNsTCxPQUFRLENBQzlDLElBQU1tTCxFQUFTeE4sT0FBT2dCLE9BQU8sTUFDN0J1TSxFQUFTdkssU0FBUSxTQUFBeUssR0FDZkQsRUFBT0MsSUFBWSxLQUVyQnZCLEVBQUd3QixhQUFleEIsRUFBR3NCLE9BQVNBLEdBSWxDLFNBQVNHLEdBQVlDLEVBQVFsQyxHQUMzQmtDLEdBQVVBLEdBQVUsSUFBSUMsTUFBTSxLQUM5QixJQUFNMUYsRUFBTXlGLEVBQU92TCxPQUVQLElBQVI4RixFQUNGdUQsRUFBV29DLFFBQVVGLEVBQU8sR0FDWCxJQUFSekYsSUFDVHVELEVBQVdvQyxRQUFVRixFQUFPLEdBQzVCbEMsRUFBV3FDLFNBQVdILEVBQU8sSUFJakMsU0FBU0ksR0FBVXhCLEVBQVl5QixHQUM3QixJQUFJM0ssRUFBT2tKLEVBQVdsSixNQUFRLEdBQ3hCNEssRUFBVTFCLEVBQVcwQixTQUFXLEdBRXRDLEdBQW9CLG9CQUFUNUssRUFDVCxJQUNFQSxFQUFPQSxFQUFLNUMsS0FBS3VOLEdBQ2pCLE1BQU9FLEdBQ0hDLHVFQUFZQyxlQUNkakYsUUFBUUMsS0FBSyx5RUFBMEUvRixRQUkzRixJQUVFQSxFQUFPZ0wsS0FBS0MsTUFBTUQsS0FBS0UsVUFBVWxMLElBQ2pDLE1BQU82SyxJQWFYLE9BVkszTixFQUFjOEMsS0FDakJBLEVBQU8sSUFHVHRELE9BQU8rQyxLQUFLbUwsR0FBU2xMLFNBQVEsU0FBQTZGLElBQzhCLElBQXJEb0YsRUFBUVEsb0JBQW9Cbk0sUUFBUXVHLElBQXVCbEksRUFBTzJDLEVBQU11RixLQUMxRXZGLEVBQUt1RixHQUFjcUYsRUFBUXJGLE9BSXhCdkYsRUFHVCxJQUFNb0wsR0FBYSxDQUFDQyxPQUFReEgsT0FBUXlILFFBQVM1TyxPQUFRZ0MsTUFBTyxNQUU1RCxTQUFTNk0sR0FBZ0I3SyxHQUN2QixPQUFPLFNBQW1COEssRUFBUUMsR0FDNUI5SSxLQUFLZ0gsTUFDUGhILEtBQUtnSCxJQUFJakosR0FBUThLLElBS3ZCLFNBQVNFLEdBQWV4QyxFQUFZeUMsR0FDbEMsSUFBTUMsRUFBZTFDLEVBQVcyQyxVQUMxQkMsRUFBYTVDLEVBQVc2QyxRQUN4QkMsRUFBWTlDLEVBQVdJLE9BRXpCMkMsRUFBVy9DLEVBQVdnRCxNQUVyQkQsSUFDSC9DLEVBQVdnRCxNQUFRRCxFQUFXLElBR2hDLElBQU1KLEVBQVksR0F1Q2xCLE9BdENJbk4sTUFBTUMsUUFBUWlOLElBQ2hCQSxFQUFhbE0sU0FBUSxTQUFBeU0sR0FDbkJOLEVBQVU1TSxLQUFLa04sRUFBU3JPLFFBQVEsU0FBYSxLQUE5QixnQkFDRSxxQkFBYnFPLElBQ0V6TixNQUFNQyxRQUFRc04sSUFDaEJBLEVBQVNoTixLQUFLLFFBQ2RnTixFQUFTaE4sS0FBSyxXQUVkZ04sRUFBU3ZMLEtBQU8sQ0FDZDBMLEtBQU1mLE9BQ05sQyxRQUFTLElBRVg4QyxFQUFTcEosTUFBUSxDQUNmdUosS0FBTSxDQUFDZixPQUFReEgsT0FBUXlILFFBQVM1TSxNQUFPaEMsT0FBUTJQLE1BQy9DbEQsUUFBUyxTQU1mak0sRUFBYzRPLElBQWVBLEVBQVdJLE9BQzFDTCxFQUFVNU0sS0FDUjBNLEVBQWEsQ0FDWFcsV0FBWUMsR0FBZVQsRUFBV0ksT0FBTyxNQUkvQ3hOLE1BQU1DLFFBQVFxTixJQUNoQkEsRUFBVXRNLFNBQVEsU0FBQThNLEdBQ1p0UCxFQUFjc1AsSUFBYUEsRUFBU04sT0FDdENMLEVBQVU1TSxLQUNSME0sRUFBYSxDQUNYVyxXQUFZQyxHQUFlQyxFQUFTTixPQUFPLFNBTTlDTCxFQUdULFNBQVNZLEdBQWVuUCxFQUFLOE8sRUFBTU0sRUFBY0MsR0FFL0MsT0FBSWpPLE1BQU1DLFFBQVF5TixJQUF5QixJQUFoQkEsRUFBS3JOLE9BQ3ZCcU4sRUFBSyxHQUVQQSxFQUdULFNBQVNHLEdBQWdCTCxHQUF1QyxJQUFoQ1UsRUFBK0Isd0RBQ3ZETixHQUR1RCx3REFDMUMsSUF5RG5CLE9BeERLTSxJQUNITixFQUFXTyxNQUFRLENBQ2pCVCxLQUFNZixPQUNOeEksTUFBTyxJQUdUeUosRUFBV1EsUUFBVSxDQUNuQlYsS0FBTTFQLE9BQ05tRyxNQUFPLE1BRVR5SixFQUFXckMsU0FBVyxDQUNwQm1DLEtBQU0sS0FDTnZKLE1BQU8sR0FDUGtLLFNBQVUsU0FBVXZCLEVBQVFDLEdBQzFCLElBQU12QixFQUFTeE4sT0FBT2dCLE9BQU8sTUFDN0I4TixFQUFPOUwsU0FBUSxTQUFBeUssR0FDYkQsRUFBT0MsSUFBWSxLQUVyQnhILEtBQUtxSyxRQUFRLENBQ1g5QyxjQUtKeEwsTUFBTUMsUUFBUXVOLEdBQ2hCQSxFQUFNeE0sU0FBUSxTQUFBcEMsR0FDWmdQLEVBQVdoUCxHQUFPLENBQ2hCOE8sS0FBTSxLQUNOVyxTQUFVeEIsR0FBZWpPLE9BR3BCSixFQUFjZ1AsSUFDdkJ4UCxPQUFPK0MsS0FBS3lNLEdBQU94TSxTQUFRLFNBQUFwQyxHQUN6QixJQUFNMlAsRUFBT2YsRUFBTTVPLEdBQ25CLEdBQUlKLEVBQWMrUCxHQUFPLENBQ3ZCLElBQUlwSyxFQUFRb0ssRUFBSzlELFFBQ2JyTSxFQUFLK0YsS0FDUEEsRUFBUUEsS0FHVm9LLEVBQUtiLEtBQU9LLEdBQWNuUCxFQUFLMlAsRUFBS2IsTUFFcENFLEVBQVdoUCxHQUFPLENBQ2hCOE8sTUFBeUMsSUFBbkNoQixHQUFXcE0sUUFBUWlPLEVBQUtiLE1BQWVhLEVBQUtiLEtBQU8sS0FDekR2SixRQUNBa0ssU0FBVXhCLEdBQWVqTyxRQUV0QixDQUNMLElBQU04TyxFQUFPSyxHQUFjblAsRUFBSzJQLEdBQ2hDWCxFQUFXaFAsR0FBTyxDQUNoQjhPLE1BQW9DLElBQTlCaEIsR0FBV3BNLFFBQVFvTixHQUFlQSxFQUFPLEtBQy9DVyxTQUFVeEIsR0FBZWpPLFFBSzFCZ1AsRUFHVCxTQUFTWSxHQUFXM0UsR0FFbEIsSUFDRUEsRUFBTTRFLEdBQUtuQyxLQUFLQyxNQUFNRCxLQUFLRSxVQUFVM0MsSUFDckMsTUFBT3NDLElBb0JULE9BbEJBdEMsRUFBTTZFLGdCQUFrQjdQLEVBQ3hCZ0wsRUFBTThFLGVBQWlCOVAsRUFFdkJnTCxFQUFNK0UsT0FBUy9FLEVBQU0rRSxRQUFVLEdBRTFCalEsRUFBT2tMLEVBQU8sWUFDakJBLEVBQU1nRixPQUFTLElBR2JsUSxFQUFPa0wsRUFBTyxjQUNoQkEsRUFBTWdGLE9BQWlDLGtCQUFqQmhGLEVBQU1nRixPQUFzQmhGLEVBQU1nRixPQUFTLEdBQ2pFaEYsRUFBTWdGLE9BQU9DLFNBQVdqRixFQUFNaUYsVUFHNUJ0USxFQUFjcUwsRUFBTWdGLFVBQ3RCaEYsRUFBTStFLE9BQVM1USxPQUFPK0YsT0FBTyxHQUFJOEYsRUFBTStFLE9BQVEvRSxFQUFNZ0YsU0FHaERoRixFQUdULFNBQVNrRixHQUFlN0UsRUFBSThFLEdBQzFCLElBQUkvQyxFQUFVL0IsRUE0Q2QsT0EzQ0E4RSxFQUFlaE8sU0FBUSxTQUFBaU8sR0FDckIsSUFBTUMsRUFBV0QsRUFBYyxHQUN6QjlLLEVBQVE4SyxFQUFjLEdBQzVCLEdBQUlDLEdBQTZCLHFCQUFWL0ssRUFBdUIsQ0FDNUMsSUFHSWdMLEVBSEVDLEVBQVdILEVBQWMsR0FDekJJLEVBQVlKLEVBQWMsR0FHNUI5SixPQUFPbUssVUFBVUosR0FDbkJDLEVBQU9ELEVBQ0dBLEVBRW1CLGtCQUFiQSxHQUF5QkEsSUFFdkNDLEVBRDhCLElBQTVCRCxFQUFTNU8sUUFBUSxPQUNaNE8sRUFBU0ssT0FBTyxHQUVoQnJGLEVBQUdzRixZQUFZTixFQUFVakQsSUFMbENrRCxFQUFPbEQsRUFTTDlHLE9BQU9tSyxVQUFVSCxHQUNuQmxELEVBQVU5SCxFQUNBaUwsRUFHTnBQLE1BQU1DLFFBQVFrUCxHQUNoQmxELEVBQVVrRCxFQUFLdEUsTUFBSyxTQUFBNEUsR0FDbEIsT0FBT3ZGLEVBQUdzRixZQUFZSixFQUFVSyxLQUFjdEwsS0FFdkMzRixFQUFjMlEsR0FDdkJsRCxFQUFVak8sT0FBTytDLEtBQUtvTyxHQUFNdEUsTUFBSyxTQUFBNkUsR0FDL0IsT0FBT3hGLEVBQUdzRixZQUFZSixFQUFVRCxFQUFLTyxNQUFjdkwsS0FHckRpRCxRQUFRUSxNQUFNLGtCQUFtQnVILEdBWG5DbEQsRUFBVWtELEVBQUtoTCxHQWVia0wsSUFDRnBELEVBQVUvQixFQUFHc0YsWUFBWUgsRUFBV3BELFFBSW5DQSxFQUdULFNBQVMwRCxHQUFtQnpGLEVBQUkwRixFQUFPL0YsR0FDckMsSUFBTWdHLEVBQVcsR0F1Q2pCLE9BckNJN1AsTUFBTUMsUUFBUTJQLElBQVVBLEVBQU12UCxRQVloQ3VQLEVBQU01TyxTQUFRLFNBQUNrTyxFQUFVeE8sR0FDQyxrQkFBYndPLEVBQ0pBLEVBR2MsV0FBYkEsRUFDRlcsRUFBUyxJQUFNblAsR0FBU21KLEVBQ0YsY0FBYnFGLEVBQ0xyRixFQUFNZ0YsUUFBVWhGLEVBQU1nRixPQUFPaUIsU0FDL0JELEVBQVMsSUFBTW5QLEdBQVNtSixFQUFNZ0YsT0FBT2lCLFNBRXJDRCxFQUFTLElBQU1uUCxHQUFTLENBQUNtSixHQUVjLElBQWhDcUYsRUFBUzVPLFFBQVEsV0FDMUJ1UCxFQUFTLElBQU1uUCxHQUFTd0osRUFBR3NGLFlBQVlOLEVBQVM5UCxRQUFRLFVBQVcsSUFBS3lLLEdBRXhFZ0csRUFBUyxJQUFNblAsR0FBU3dKLEVBQUdzRixZQUFZTixHQWJ6Q1csRUFBUyxJQUFNblAsR0FBU3dKLEVBaUIxQjJGLEVBQVMsSUFBTW5QLEdBQVNxTyxHQUFjN0UsRUFBSWdGLE1BS3pDVyxFQUdULFNBQVNFLEdBQWVDLEdBRXRCLElBREEsSUFBTXZSLEVBQU0sR0FDSDJCLEVBQUksRUFBR0EsRUFBSTRQLEVBQUkzUCxPQUFRRCxJQUFLLENBQ25DLElBQU02UCxFQUFVRCxFQUFJNVAsR0FDcEIzQixFQUFJd1IsRUFBUSxJQUFNQSxFQUFRLEdBRTVCLE9BQU94UixFQUdULFNBQVN5UixHQUFrQmhHLEVBQUlMLEdBQXFELElBQTlDakUsRUFBNkMsdURBQXRDLEdBQUlnSyxFQUFrQyx1REFBMUIsR0FBSU8sRUFBc0IsdUNBQVp0SixFQUFZLHVDQUM3RXVKLEdBQWtCLEVBQ3RCLEdBQUlELElBQ0ZDLEVBQWtCdkcsRUFBTXdHLGVBQ3RCeEcsRUFBTXdHLGNBQWNDLFNBQ29CLE9BQXhDekcsRUFBTXdHLGNBQWNDLFFBQVFDLFNBQ3pCM0ssRUFBS3ZGLFFBQ1IsT0FBSStQLEVBQ0ssQ0FBQ3ZHLEdBRUhBLEVBQU1nRixPQUFPaUIsVUFBWWpHLEVBQU1nRixPQUkxQyxJQUFNZ0IsRUFBV0YsR0FBa0J6RixFQUFJMEYsRUFBTy9GLEdBRXhDMkcsRUFBTSxHQXVCWixPQXRCQTVLLEVBQUs1RSxTQUFRLFNBQUF5UCxHQUNDLFdBQVJBLEVBQ2lCLGdCQUFmNUosR0FBaUNzSixFQUcvQkEsSUFBYUMsRUFDZkksRUFBSWpRLEtBQUtzSixFQUFNZ0YsT0FBT2lCLFNBQVMsSUFFL0JVLEVBQUlqUSxLQUFLc0osR0FMWDJHLEVBQUlqUSxLQUFLc0osRUFBTStFLE9BQU96SyxPQVNwQm5FLE1BQU1DLFFBQVF3USxJQUFtQixNQUFYQSxFQUFJLEdBQzVCRCxFQUFJalEsS0FBS3dQLEdBQWNVLElBQ0Msa0JBQVJBLEdBQW9COVIsRUFBT2tSLEVBQVVZLEdBQ3JERCxFQUFJalEsS0FBS3NQLEVBQVNZLElBRWxCRCxFQUFJalEsS0FBS2tRLE1BS1JELEVBR1QsSUFBTUUsR0FBTyxJQUNQQyxHQUFTLElBRWYsU0FBU0MsR0FBa0JDLEVBQVdDLEdBQ3BDLE9BQVFELElBQWNDLEdBRU4saUJBQVpBLElBRWdCLFVBQWRELEdBQ2MsUUFBZEEsR0FLUixTQUFTRSxHQUFjN0csR0FDckIsSUFBSThHLEVBQVU5RyxFQUFHOEcsUUFFakIsTUFBT0EsR0FBV0EsRUFBUUEsVUFBWUEsRUFBUUMsU0FBUzdDLFNBQVc0QyxFQUFRQSxRQUFRQyxTQUFTN0MsU0FBVzRDLEVBQVFFLE9BQU9uRixVQUNuSGlGLEVBQVVBLEVBQVFBLFFBRXBCLE9BQU9BLEdBQVdBLEVBQVFBLFFBRzVCLFNBQVNHLEdBQWF0SCxHQUFRLElBQUQsT0FDM0JBLEVBQVEyRSxHQUFVM0UsR0FHbEIsSUFBTXlHLEdBQVd6RyxFQUFNd0csZUFBaUJ4RyxFQUFNK0UsUUFBUTBCLFFBQ3RELElBQUtBLEVBQ0gsT0FBT2xKLFFBQVFDLEtBQUssV0FFdEIsSUFBTStKLEVBQVlkLEVBQVFjLFdBQWFkLEVBQVEsY0FDL0MsSUFBS2MsRUFDSCxPQUFPaEssUUFBUUMsS0FBSyxXQUl0QixJQUFNd0osRUFBWWhILEVBQU02RCxLQUVsQjhDLEVBQU0sR0F5RFosT0F2REFZLEVBQVVwUSxTQUFRLFNBQUFxUSxHQUNoQixJQUFJM0QsRUFBTzJELEVBQVMsR0FDZEMsRUFBY0QsRUFBUyxHQUV2QmxCLEVBQVd6QyxFQUFLNkQsT0FBTyxLQUFPWixHQUNwQ2pELEVBQU95QyxFQUFXekMsRUFBS3BMLE1BQU0sR0FBS29MLEVBQ2xDLElBQU04RCxFQUFTOUQsRUFBSzZELE9BQU8sS0FBT2IsR0FDbENoRCxFQUFPOEQsRUFBUzlELEVBQUtwTCxNQUFNLEdBQUtvTCxFQUU1QjRELEdBQWVWLEdBQWlCQyxFQUFXbkQsSUFDN0M0RCxFQUFZdFEsU0FBUSxTQUFBeVEsR0FDbEIsSUFBTTVLLEVBQWE0SyxFQUFXLEdBQzlCLEdBQUk1SyxFQUFZLENBQ2QsSUFBSTZLLEVBQWEsRUFBS3pHLElBSXRCLEdBSEl5RyxFQUFXVCxTQUFTN0MsVUFDdEJzRCxFQUFhWCxHQUFhVyxJQUFlQSxHQUV4QixVQUFmN0ssRUFVRixZQVRBNkssRUFBV3pJLE1BQU10QixNQUFNK0osRUFDckJ4QixHQUNFLEVBQUtqRixJQUNMcEIsRUFDQTRILEVBQVcsR0FDWEEsRUFBVyxHQUNYdEIsRUFDQXRKLElBSU4sSUFBTThLLEVBQVVELEVBQVc3SyxHQUMzQixJQUFLekksRUFBS3VULEdBQ1IsTUFBTSxJQUFJQyxNQUFKLGVBQWtCL0ssRUFBbEIsdUJBRVIsR0FBSTJLLEVBQVEsQ0FDVixHQUFJRyxFQUFRRSxLQUNWLE9BRUZGLEVBQVFFLE1BQU8sRUFFakIsSUFBTW5QLEVBQVN3TixHQUNiLEVBQUtqRixJQUNMcEIsRUFDQTRILEVBQVcsR0FDWEEsRUFBVyxHQUNYdEIsRUFDQXRKLEdBSUYySixFQUFJalEsS0FBS29SLEVBQVFoSyxNQUFNK0osR0FBYTFSLE1BQU1DLFFBQVF5QyxHQUFVQSxFQUFTLElBQUkzQyxPQUFPLENBQUMsQ0FBQyxDQUFGLFFBQXFCOEosYUFPN0YsVUFBZGdILEdBQ2UsSUFBZkwsRUFBSW5RLFFBQ2MscUJBQVhtUSxFQUFJLEdBRUpBLEVBQUksUUFMYixFQVNGLElBQU1yUSxHQUFRLENBQ1osU0FDQSxTQUNBLFVBQ0EsaUJBQ0EsZ0JBQ0Esd0JBR0YsU0FBUzJSLEdBQWM1SCxFQUF2QixHQUdJLElBRkZDLEVBRUMsRUFGREEsTUFDQTRILEVBQ0MsRUFEREEsU0FFSTdILEVBQUcrRyxTQUFTZSxRQUNkckosVUFBSTFLLFVBQVVnVSxPQUFTL0gsRUFBRytHLFNBQVNlLE9BR3JDckosVUFBSTFLLFVBQVVpVSxPQUFTLFFBRXZCdkosVUFBSW1DLE1BQU0sQ0FDUnFILGFBRFEsV0FFRGxPLEtBQUtnTixTQUFTNUcsU0FJbkJwRyxLQUFLb0csT0FBU3BHLEtBQUtnTixTQUFTNUcsT0FFNUJwRyxLQUFLbUcsSUFBTCxHQUNFOUksS0FBTSxJQUNMMkMsS0FBS29HLE9BQVNwRyxLQUFLZ04sU0FBU3ZILFlBRy9CekYsS0FBS2lOLE9BQVNqTixLQUFLZ04sU0FBU3ZILGtCQUVyQnpGLEtBQUtnTixTQUFTNUcsY0FDZHBHLEtBQUtnTixTQUFTdkgsV0FFRCxRQUFoQnpGLEtBQUtvRyxTQUNQMEgsRUFBUzlOLE1BQ1RnRyxHQUFVaEcsS0FBTWtHLFFBS3RCLElBQU1pSSxFQUFhLENBQ2pCQyxTQURpQixTQUNQek0sR0FDSjNCLEtBQUtnSCxNQUlGdEcsR0FBRzJOLFFBQVEsYUFDZGxMLFFBQVFRLE1BQU0sdURBSWxCM0QsS0FBS2dILElBQU1mLEVBRVhqRyxLQUFLZ0gsSUFBSWIsSUFBTSxDQUNibUksSUFBS3RPLE1BR1BBLEtBQUtnSCxJQUFJaUcsT0FBU2pOLEtBRWxCQSxLQUFLZ0gsSUFBSXVILFdBQWF2TyxLQUFLdU8sV0FFM0J2TyxLQUFLZ0gsSUFBSXdILFlBQWEsRUFDdEJ4TyxLQUFLZ0gsSUFBSUMsWUFBWSxVQUFXdEYsR0FFaEMzQixLQUFLZ0gsSUFBSUMsWUFBWSxXQUFZdEYsTUFLckN3TSxFQUFXSSxXQUFhdEksRUFBRytHLFNBQVN1QixZQUFjLEdBRWxELElBQU10RyxFQUFVaEMsRUFBRytHLFNBQVMvRSxRQVM1QixPQVJJQSxHQUNGbE8sT0FBTytDLEtBQUttTCxHQUFTbEwsU0FBUSxTQUFBZ0IsR0FDM0JvUSxFQUFXcFEsR0FBUWtLLEVBQVFsSyxNQUkvQitJLEdBQVVxSCxFQUFZalMsSUFFZmlTLEVBR1QsSUFBTWpJLEdBQVEsQ0FBQyxZQUFhLHVCQUF3QixtQkFFcEQsU0FBU3VJLEdBQWV4SSxFQUFJeUksR0FHMUIsSUFGQSxJQVNJQyxFQVRFQyxFQUFZM0ksRUFBRzJJLFVBRVp6UyxFQUFJeVMsRUFBVXhTLE9BQVMsRUFBR0QsR0FBSyxFQUFHQSxJQUFLLENBQzlDLElBQU0wUyxFQUFVRCxFQUFVelMsR0FDMUIsR0FBSTBTLEVBQVE1QixPQUFPcEYsVUFBWTZHLEVBQzdCLE9BQU9HLEVBS1gsSUFBSyxJQUFJMVMsRUFBSXlTLEVBQVV4UyxPQUFTLEVBQUdELEdBQUssRUFBR0EsSUFFekMsR0FEQXdTLEVBQVdGLEdBQWNHLEVBQVV6UyxHQUFJdVMsR0FDbkNDLEVBQ0YsT0FBT0EsRUFLYixTQUFTM0YsR0FBY2xMLEdBQ3JCLE9BQU9nUixTQUFTaFIsR0FHbEIsU0FBU2lSLEtBQ1AsUUFBUy9PLEtBQUtnUCxNQUdoQixTQUFTQyxHQUFjckUsR0FDckI1SyxLQUFLMkYsYUFBYSxNQUFPaUYsR0FHM0IsU0FBU2tELEdBQVU3SCxHQUNqQixJQUFNUixFQUFhUSxFQUFHZ0gsT0FDdEJsVCxPQUFPbVYsZUFBZWpKLEVBQUksUUFBUyxDQUNqQ2tKLElBRGlDLFdBRS9CLElBQU1DLEVBQVEsR0FDUkMsRUFBYTVKLEVBQVc2SixvQkFBb0IsWUFDbERELEVBQVd0UyxTQUFRLFNBQUF3UyxHQUNqQixJQUFNQyxFQUFNRCxFQUFVbEQsUUFBUW1ELElBQzlCSixFQUFNSSxHQUFPRCxFQUFVdkksS0FBT3VJLEtBRWhDLElBQU1FLEVBQWdCaEssRUFBVzZKLG9CQUFvQixtQkFRckQsT0FQQUcsRUFBYzFTLFNBQVEsU0FBQXdTLEdBQ3BCLElBQU1DLEVBQU1ELEVBQVVsRCxRQUFRbUQsSUFDekJKLEVBQU1JLEtBQ1RKLEVBQU1JLEdBQU8sSUFFZkosRUFBTUksR0FBS2xULEtBQUtpVCxFQUFVdkksS0FBT3VJLE1BRTVCSCxLQUtiLFNBQVNNLEdBQVk5SixHQUFRLElBTXZCK0ksRUFOc0IsRUFJdEIvSSxFQUFNZ0YsUUFBVWhGLEVBQU0xRixNQUZ4QndPLEVBRndCLEVBRXhCQSxPQUNBbkksRUFId0IsRUFHeEJBLFdBS0VtSSxJQUNGQyxFQUFXRixHQUFjek8sS0FBS2dILElBQUswSCxJQUdoQ0MsSUFDSEEsRUFBVzNPLEtBQUtnSCxLQUdsQlQsRUFBV29KLE9BQVNoQixFQUd0QixTQUFTaUIsR0FBVTNKLEdBQ2pCLE9BQU80SCxHQUFhNUgsRUFBSSxDQUN0QkMsU0FDQTRILGNBSUosU0FBUytCLEdBQVk1SixHQUNuQixPQUFPMkosR0FBUzNKLEdBR2xCLFNBQVM2SixHQUFXN0osR0FFbEIsT0FEQThKLElBQUlGLEdBQVc1SixJQUNSQSxFQUdULFNBQVMrSixHQUFvQkMsR0FHcEIsSUFBRCx5REFBSixHQUZGbEIsRUFFTSxFQUZOQSxPQUNBRSxFQUNNLEVBRE5BLGFBQ00sRUFDNkIvSCxHQUFpQnhDLFVBQUt1TCxHQURuRCxTQUNDOUksRUFERCxLQUNlWixFQURmLEtBR0F6SSxFQUFVLEVBQUgsQ0FDWG9TLGVBQWUsRUFDZkMsZ0JBQWdCLEdBQ1o1SixFQUFXekksU0FBVyxJQUt0QnlJLEVBQVcsY0FBZ0JBLEVBQVcsYUFBYXpJLFNBQ3JEL0QsT0FBTytGLE9BQU9oQyxFQUFTeUksRUFBVyxhQUFhekksU0FJbkQsSUFBTXNTLEVBQW1CLENBQ3ZCdFMsVUFDQVQsS0FBTTBLLEdBQVN4QixFQUFZN0IsVUFBSTFLLFdBQy9Ca1AsVUFBV0gsR0FBY3hDLEVBQVl5QyxJQUNyQ1csV0FBWUMsR0FBZXJELEVBQVdnRCxPQUFPLEVBQU9oRCxFQUFXOEosUUFDL0RDLFVBQVcsQ0FDVEMsU0FEUyxXQUVQLElBQU01RyxFQUFhM0osS0FBSzJKLFdBRWxCN0wsRUFBVSxDQUNkc0ksT0FBUTJJLEVBQU90VSxLQUFLdUYsTUFBUSxPQUFTLFlBQ3JDeUYsV0FBWXpGLEtBQ1p3USxVQUFXN0csR0FHYmpDLEdBQVdpQyxFQUFXTyxNQUFPbEssTUFHN0JpUCxFQUFheFUsS0FBS3VGLEtBQU0sQ0FDdEIwTyxPQUFRMU8sS0FBSzhILFNBQ2J2QixXQUFZekksSUFJZGtDLEtBQUtnSCxJQUFNLElBQUlHLEVBQWFySixHQUc1QnVKLEdBQVVySCxLQUFLZ0gsSUFBSzJDLEVBQVdyQyxVQUcvQnRILEtBQUtnSCxJQUFJeUosVUFFWEMsTUEzQlMsV0E4QkgxUSxLQUFLZ0gsTUFDUGhILEtBQUtnSCxJQUFJd0gsWUFBYSxFQUN0QnhPLEtBQUtnSCxJQUFJQyxZQUFZLFdBQ3JCakgsS0FBS2dILElBQUlDLFlBQVksYUFHekIwSixTQXBDUyxXQXFDUDNRLEtBQUtnSCxLQUFPaEgsS0FBS2dILElBQUk0SixhQUd6QkMsY0FBZSxDQUNiQyxLQURhLFNBQ1BuUCxHQUNKM0IsS0FBS2dILEtBQU9oSCxLQUFLZ0gsSUFBSUMsWUFBWSxhQUFjdEYsSUFFakRvUCxLQUphLFdBS1gvUSxLQUFLZ0gsS0FBT2hILEtBQUtnSCxJQUFJQyxZQUFZLGVBRW5DK0osT0FQYSxTQU9MQyxHQUNOalIsS0FBS2dILEtBQU9oSCxLQUFLZ0gsSUFBSUMsWUFBWSxlQUFnQmdLLEtBR3JEaEosUUFBUyxDQUNQaUosSUFBS3hCLEdBQ0x5QixJQUFLakUsS0FnQlQsT0FaSTNHLEVBQVc2SyxrQkFDYmhCLEVBQWlCZ0IsZ0JBQWtCN0ssRUFBVzZLLGlCQUc1Q3JWLE1BQU1DLFFBQVF1SyxFQUFXOEssaUJBQzNCOUssRUFBVzhLLGVBQWV0VSxTQUFRLFNBQUF1VSxHQUNoQ2xCLEVBQWlCbkksUUFBUXFKLEdBQWMsU0FBVTNQLEdBQy9DLE9BQU8zQixLQUFLZ0gsSUFBSXNLLEdBQVkzUCxPQUs5Qm9OLEVBQ0txQixFQUVGLENBQUNBLEVBQWtCakosR0FHNUIsU0FBU29LLEdBQWdCdEIsR0FDdkIsT0FBT0QsR0FBbUJDLEVBQXFCLENBQzdDbEIsVUFDQUUsa0JBSUosU0FBU3VDLEdBQWtCdkIsR0FDekIsT0FBT3NCLEdBQWV0QixHQUd4QixJQUFNd0IsR0FBVSxDQUNkLFNBQ0EsU0FDQSxZQUtGLFNBQVNDLEdBQWVDLEVBQXhCLEdBR0csRUFGRDVDLE9BRUMsRUFEREUsYUFDRSxJQUNJMkMsRUFBY0osR0FBaUJHLEdBU3JDLE9BUEE3SyxHQUFVOEssRUFBWTNKLFFBQVN3SixHQUFTRSxHQUV4Q0MsRUFBWTNKLFFBQVE0SixPQUFTLFNBQVVsUSxHQUNyQzNCLEtBQUtnSCxJQUFJYixJQUFJMkwsTUFBUW5RLEVBQ3JCM0IsS0FBS2dILElBQUlDLFlBQVksU0FBVXRGLElBRzFCaVEsRUFHVCxTQUFTRyxHQUFXSixHQUNsQixPQUFPRCxHQUFjQyxFQUFnQixDQUNuQzVDLFVBQ0FFLGtCQUlKLFNBQVMrQyxHQUFhTCxHQUNwQixPQUFPSSxHQUFVSixHQUduQixTQUFTTSxHQUFZTixHQUVqQixPQUFPdE0sVUFBVTJNLEdBQVlMLElBSWpDLFNBQVNPLEdBQWlCM0wsR0FFdEIsT0FBT2xCLFVBQVVtTSxHQUFpQmpMLElBckN0Q2tMLEdBQVFuVixLQUFSLE1BQUFtVixHQUFnQjFMLElBeUNoQnZELEdBQU16RixTQUFRLFNBQUFvVixHQUNaNVAsR0FBVTRQLElBQVcsS0FHdkIxUCxHQUFTMUYsU0FBUSxTQUFBcVYsR0FDZixJQUFNQyxFQUFVOVAsR0FBVTZQLElBQWU3UCxHQUFVNlAsR0FBWXJVLEtBQU93RSxHQUFVNlAsR0FBWXJVLEtBQ3hGcVUsRUFDQzFSLEdBQUcyTixRQUFRZ0UsS0FDZDlQLEdBQVU2UCxJQUFjLE1BSTVCLElBQUlFLEdBQU0sR0FFVyxxQkFBVkMsTUFDVEQsR0FBTSxJQUFJQyxNQUFNLEdBQUksQ0FDbEJwRCxJQURrQixTQUNieEUsRUFBUTVNLEdBQ1gsT0FBSXJELEVBQU9pUSxFQUFRNU0sR0FDVjRNLEVBQU81TSxHQUVad0QsR0FBUXhELEdBQ0h3RCxHQUFReEQsR0FFYlMsR0FBSVQsR0FDQzBCLEdBQVUxQixFQUFNUyxHQUFJVCxJQUd2QndHLEdBQVN4RyxHQUNKMEIsR0FBVTFCLEVBQU13RyxHQUFTeEcsSUFFOUI2RixHQUFTN0YsR0FDSjBCLEdBQVUxQixFQUFNNkYsR0FBUzdGLElBR2hDa0gsR0FBU2xILEdBQ0prSCxHQUFTbEgsR0FFYnJELEVBQU9nRyxHQUFJM0MsSUFBVXJELEVBQU82SCxHQUFXeEUsR0FHckMwQixHQUFVMUIsRUFBTXVGLEdBQVF2RixFQUFNMkMsR0FBRzNDLFVBSHhDLEdBS0Z5VSxJQTNCa0IsU0EyQmI3SCxFQUFRNU0sRUFBTW1DLEdBRWpCLE9BREF5SyxFQUFPNU0sR0FBUW1DLEdBQ1IsTUFJWG5HLE9BQU8rQyxLQUFLeUUsSUFBU3hFLFNBQVEsU0FBQWdCLEdBQzNCdVUsR0FBSXZVLEdBQVF3RCxHQUFReEQsTUFJcEJoRSxPQUFPK0MsS0FBSzhHLElBQVU3RyxTQUFRLFNBQUFnQixHQUM1QnVVLEdBQUl2VSxHQUFRMEIsR0FBVTFCLEVBQU02RixHQUFTN0YsT0FFdkNoRSxPQUFPK0MsS0FBS3lILElBQVV4SCxTQUFRLFNBQUFnQixHQUM1QnVVLEdBQUl2VSxHQUFRMEIsR0FBVTFCLEVBQU02RixHQUFTN0YsT0FJekNoRSxPQUFPK0MsS0FBS21JLElBQVVsSSxTQUFRLFNBQUFnQixHQUM1QnVVLEdBQUl2VSxHQUFRa0gsR0FBU2xILE1BR3ZCaEUsT0FBTytDLEtBQUswQixJQUFLekIsU0FBUSxTQUFBZ0IsR0FDdkJ1VSxHQUFJdlUsR0FBUTBCLEdBQVUxQixFQUFNUyxHQUFJVCxPQUdsQ2hFLE9BQU8rQyxLQUFLNEQsSUFBSTNELFNBQVEsU0FBQWdCLElBQ2xCckQsRUFBT2dHLEdBQUkzQyxJQUFTckQsRUFBTzZILEdBQVd4RSxNQUN4Q3VVLEdBQUl2VSxHQUFRMEIsR0FBVTFCLEVBQU11RixHQUFRdkYsRUFBTTJDLEdBQUczQyxVQUtuRDJDLEdBQUdvUCxVQUFZQSxHQUNmcFAsR0FBR3VSLFdBQWFBLEdBQ2hCdlIsR0FBR3dSLGdCQUFrQkEsR0FFckIsSUFBSU8sR0FBUUgsRyxHQUVHRyxHOzs7OzhDQzFtRGZDLEVBQU9DLFFBQVVDLDRCQUFRLEs7Ozs7OENDU3pCLElBQUlDLEVBQUksV0FDTixPQUFPN1MsTUFBeUIsa0JBQVQ4UyxNQUFxQkEsS0FEdEMsSUFFQUMsU0FBUyxjQUFUQSxHQUlKQyxFQUFhSCxFQUFFSSxvQkFDakJsWixPQUFPbVosb0JBQW9CTCxHQUFHeFcsUUFBUSx1QkFBeUIsRUFHN0Q4VyxFQUFhSCxHQUFjSCxFQUFFSSxtQkFPakMsR0FKQUosRUFBRUksd0JBQXFCRyxFQUV2QlYsRUFBT0MsUUFBVSxrQkFBUSxJQUVyQkssRUFFRkgsRUFBRUksbUJBQXFCRSxPQUd2QixXQUNTTixFQUFFSSxtQkFDVCxNQUFNL0ssR0FDTjJLLEVBQUVJLHdCQUFxQkcsSTs7Ozs2Q0MzQjFCLFNBQVVDLEdBQ1QsYUFFQSxJQUVJRCxFQUZBRSxFQUFLdlosT0FBT0MsVUFDWlUsRUFBUzRZLEVBQUdwWixlQUVacVosRUFBNEIsb0JBQVhDLE9BQXdCQSxPQUFTLEdBQ2xEQyxFQUFpQkYsRUFBUUcsVUFBWSxhQUNyQ0MsRUFBc0JKLEVBQVFLLGVBQWlCLGtCQUMvQ0MsRUFBb0JOLEVBQVFPLGFBQWUsZ0JBRTNDQyxFQUE2QixrQkFBWHJCLEVBQ2xCc0IsRUFBVVgsRUFBT0osbUJBQ3JCLEdBQUllLEVBQ0VELElBR0ZyQixFQUFPQyxRQUFVcUIsT0FKckIsQ0FhQUEsRUFBVVgsRUFBT0osbUJBQXFCYyxFQUFXckIsRUFBT0MsUUFBVSxHQWNsRXFCLEVBQVFDLEtBQU9BLEVBb0JmLElBQUlDLEVBQXlCLGlCQUN6QkMsRUFBeUIsaUJBQ3pCQyxFQUFvQixZQUNwQkMsRUFBb0IsWUFJcEJDLEVBQW1CLEdBWW5CQyxFQUFvQixHQUN4QkEsRUFBa0JkLEdBQWtCLFdBQ2xDLE9BQU96VCxNQUdULElBQUl3VSxFQUFXemEsT0FBTzBhLGVBQ2xCQyxFQUEwQkYsR0FBWUEsRUFBU0EsRUFBU0csRUFBTyxNQUMvREQsR0FDQUEsSUFBNEJwQixHQUM1QjVZLEVBQU9ELEtBQUtpYSxFQUF5QmpCLEtBR3ZDYyxFQUFvQkcsR0FHdEIsSUFBSUUsRUFBS0MsRUFBMkI3YSxVQUNsQzhhLEVBQVU5YSxVQUFZRCxPQUFPZ0IsT0FBT3daLEdBQ3RDUSxFQUFrQi9hLFVBQVk0YSxFQUFHM1UsWUFBYzRVLEVBQy9DQSxFQUEyQjVVLFlBQWM4VSxFQUN6Q0YsRUFBMkJoQixHQUN6QmtCLEVBQWtCQyxZQUFjLG9CQVlsQ2hCLEVBQVFpQixvQkFBc0IsU0FBU0MsR0FDckMsSUFBSUMsRUFBeUIsb0JBQVhELEdBQXlCQSxFQUFPalYsWUFDbEQsUUFBT2tWLElBQ0hBLElBQVNKLEdBRzJCLHVCQUFuQ0ksRUFBS0gsYUFBZUcsRUFBS3BYLFFBSWhDaVcsRUFBUW9CLEtBQU8sU0FBU0YsR0FVdEIsT0FUSW5iLE9BQU9zYixlQUNUdGIsT0FBT3NiLGVBQWVILEVBQVFMLElBRTlCSyxFQUFPelQsVUFBWW9ULEVBQ2JoQixLQUFxQnFCLElBQ3pCQSxFQUFPckIsR0FBcUIsc0JBR2hDcUIsRUFBT2xiLFVBQVlELE9BQU9nQixPQUFPNlosR0FDMUJNLEdBT1RsQixFQUFRc0IsTUFBUSxTQUFTOUksR0FDdkIsTUFBTyxDQUFFK0ksUUFBUy9JLElBc0VwQmdKLEVBQXNCQyxFQUFjemIsV0FDcEN5YixFQUFjemIsVUFBVTJaLEdBQXVCLFdBQzdDLE9BQU8zVCxNQUVUZ1UsRUFBUXlCLGNBQWdCQSxFQUt4QnpCLEVBQVEwQixNQUFRLFNBQVNDLEVBQVNDLEVBQVM5QyxFQUFNK0MsR0FDL0MsSUFBSUMsRUFBTyxJQUFJTCxFQUNieEIsRUFBSzBCLEVBQVNDLEVBQVM5QyxFQUFNK0MsSUFHL0IsT0FBTzdCLEVBQVFpQixvQkFBb0JXLEdBQy9CRSxFQUNBQSxFQUFLQyxPQUFPeFksTUFBSyxTQUFTNEQsR0FDeEIsT0FBT0EsRUFBTzZVLEtBQU83VSxFQUFPakIsTUFBUTRWLEVBQUtDLFdBc0tqRFAsRUFBc0JaLEdBRXRCQSxFQUFHZixHQUFxQixZQU94QmUsRUFBR25CLEdBQWtCLFdBQ25CLE9BQU96VCxNQUdUNFUsRUFBRzNhLFNBQVcsV0FDWixNQUFPLHNCQWtDVCtaLEVBQVFsWCxLQUFPLFNBQVNtWixHQUN0QixJQUFJblosRUFBTyxHQUNYLElBQUssSUFBSW5DLEtBQU9zYixFQUNkblosRUFBS1IsS0FBSzNCLEdBTVosT0FKQW1DLEVBQUtvWixVQUlFLFNBQVNILElBQ2QsTUFBT2paLEVBQUtWLE9BQVEsQ0FDbEIsSUFBSXpCLEVBQU1tQyxFQUFLcVosTUFDZixHQUFJeGIsS0FBT3NiLEVBR1QsT0FGQUYsRUFBSzdWLE1BQVF2RixFQUNib2IsRUFBS0MsTUFBTyxFQUNMRCxFQVFYLE9BREFBLEVBQUtDLE1BQU8sRUFDTEQsSUFzQ1gvQixFQUFRVyxPQUFTQSxFQU1qQnlCLEVBQVFwYyxVQUFZLENBQ2xCaUcsWUFBYW1XLEVBRWJDLE1BQU8sU0FBU0MsR0FjZCxHQWJBdFcsS0FBS3VXLEtBQU8sRUFDWnZXLEtBQUsrVixLQUFPLEVBR1ovVixLQUFLd1csS0FBT3hXLEtBQUt5VyxNQUFRckQsRUFDekJwVCxLQUFLZ1csTUFBTyxFQUNaaFcsS0FBSzBXLFNBQVcsS0FFaEIxVyxLQUFLOUMsT0FBUyxPQUNkOEMsS0FBS3dNLElBQU00RyxFQUVYcFQsS0FBSzJXLFdBQVc1WixRQUFRNlosSUFFbkJOLEVBQ0gsSUFBSyxJQUFJdlksS0FBUWlDLEtBRVEsTUFBbkJqQyxFQUFLdVAsT0FBTyxJQUNaNVMsRUFBT0QsS0FBS3VGLEtBQU1qQyxLQUNqQmlFLE9BQU9qRSxFQUFLTSxNQUFNLE1BQ3JCMkIsS0FBS2pDLEdBQVFxVixJQU1yQnlELEtBQU0sV0FDSjdXLEtBQUtnVyxNQUFPLEVBRVosSUFBSWMsRUFBWTlXLEtBQUsyVyxXQUFXLEdBQzVCSSxFQUFhRCxFQUFVRSxXQUMzQixHQUF3QixVQUFwQkQsRUFBV3ROLEtBQ2IsTUFBTXNOLEVBQVd2SyxJQUduQixPQUFPeE0sS0FBS2lYLE1BR2RDLGtCQUFtQixTQUFTQyxHQUMxQixHQUFJblgsS0FBS2dXLEtBQ1AsTUFBTW1CLEVBR1IsSUFBSW5QLEVBQVVoSSxLQUNkLFNBQVNvWCxFQUFPQyxFQUFLQyxHQVluQixPQVhBQyxFQUFPOU4sS0FBTyxRQUNkOE4sRUFBTy9LLElBQU0ySyxFQUNiblAsRUFBUStOLEtBQU9zQixFQUVYQyxJQUdGdFAsRUFBUTlLLE9BQVMsT0FDakI4SyxFQUFRd0UsSUFBTTRHLEtBR05rRSxFQUdaLElBQUssSUFBSW5iLEVBQUk2RCxLQUFLMlcsV0FBV3ZhLE9BQVMsRUFBR0QsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUlxYixFQUFReFgsS0FBSzJXLFdBQVd4YSxHQUN4Qm9iLEVBQVNDLEVBQU1SLFdBRW5CLEdBQXFCLFNBQWpCUSxFQUFNQyxPQUlSLE9BQU9MLEVBQU8sT0FHaEIsR0FBSUksRUFBTUMsUUFBVXpYLEtBQUt1VyxLQUFNLENBQzdCLElBQUltQixFQUFXaGQsRUFBT0QsS0FBSytjLEVBQU8sWUFDOUJHLEVBQWFqZCxFQUFPRCxLQUFLK2MsRUFBTyxjQUVwQyxHQUFJRSxHQUFZQyxFQUFZLENBQzFCLEdBQUkzWCxLQUFLdVcsS0FBT2lCLEVBQU1JLFNBQ3BCLE9BQU9SLEVBQU9JLEVBQU1JLFVBQVUsR0FDekIsR0FBSTVYLEtBQUt1VyxLQUFPaUIsRUFBTUssV0FDM0IsT0FBT1QsRUFBT0ksRUFBTUssaUJBR2pCLEdBQUlILEdBQ1QsR0FBSTFYLEtBQUt1VyxLQUFPaUIsRUFBTUksU0FDcEIsT0FBT1IsRUFBT0ksRUFBTUksVUFBVSxPQUczQixLQUFJRCxFQU1ULE1BQU0sSUFBSWhLLE1BQU0sMENBTGhCLEdBQUkzTixLQUFLdVcsS0FBT2lCLEVBQU1LLFdBQ3BCLE9BQU9ULEVBQU9JLEVBQU1LLGdCQVU5QkMsT0FBUSxTQUFTck8sRUFBTStDLEdBQ3JCLElBQUssSUFBSXJRLEVBQUk2RCxLQUFLMlcsV0FBV3ZhLE9BQVMsRUFBR0QsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUlxYixFQUFReFgsS0FBSzJXLFdBQVd4YSxHQUM1QixHQUFJcWIsRUFBTUMsUUFBVXpYLEtBQUt1VyxNQUNyQjdiLEVBQU9ELEtBQUsrYyxFQUFPLGVBQ25CeFgsS0FBS3VXLEtBQU9pQixFQUFNSyxXQUFZLENBQ2hDLElBQUlFLEVBQWVQLEVBQ25CLE9BSUFPLElBQ1UsVUFBVHRPLEdBQ1MsYUFBVEEsSUFDRHNPLEVBQWFOLFFBQVVqTCxHQUN2QkEsR0FBT3VMLEVBQWFGLGFBR3RCRSxFQUFlLE1BR2pCLElBQUlSLEVBQVNRLEVBQWVBLEVBQWFmLFdBQWEsR0FJdEQsT0FIQU8sRUFBTzlOLEtBQU9BLEVBQ2Q4TixFQUFPL0ssSUFBTUEsRUFFVHVMLEdBQ0YvWCxLQUFLOUMsT0FBUyxPQUNkOEMsS0FBSytWLEtBQU9nQyxFQUFhRixXQUNsQnZELEdBR0Z0VSxLQUFLSixTQUFTMlgsSUFHdkIzWCxTQUFVLFNBQVMyWCxFQUFRUyxHQUN6QixHQUFvQixVQUFoQlQsRUFBTzlOLEtBQ1QsTUFBTThOLEVBQU8vSyxJQWNmLE1BWG9CLFVBQWhCK0ssRUFBTzlOLE1BQ1MsYUFBaEI4TixFQUFPOU4sS0FDVHpKLEtBQUsrVixLQUFPd0IsRUFBTy9LLElBQ00sV0FBaEIrSyxFQUFPOU4sTUFDaEJ6SixLQUFLaVgsS0FBT2pYLEtBQUt3TSxJQUFNK0ssRUFBTy9LLElBQzlCeE0sS0FBSzlDLE9BQVMsU0FDZDhDLEtBQUsrVixLQUFPLE9BQ2EsV0FBaEJ3QixFQUFPOU4sTUFBcUJ1TyxJQUNyQ2hZLEtBQUsrVixLQUFPaUMsR0FHUDFELEdBR1QyRCxPQUFRLFNBQVNKLEdBQ2YsSUFBSyxJQUFJMWIsRUFBSTZELEtBQUsyVyxXQUFXdmEsT0FBUyxFQUFHRCxHQUFLLElBQUtBLEVBQUcsQ0FDcEQsSUFBSXFiLEVBQVF4WCxLQUFLMlcsV0FBV3hhLEdBQzVCLEdBQUlxYixFQUFNSyxhQUFlQSxFQUd2QixPQUZBN1gsS0FBS0osU0FBUzRYLEVBQU1SLFdBQVlRLEVBQU1RLFVBQ3RDcEIsRUFBY1ksR0FDUGxELElBS2IsTUFBUyxTQUFTbUQsR0FDaEIsSUFBSyxJQUFJdGIsRUFBSTZELEtBQUsyVyxXQUFXdmEsT0FBUyxFQUFHRCxHQUFLLElBQUtBLEVBQUcsQ0FDcEQsSUFBSXFiLEVBQVF4WCxLQUFLMlcsV0FBV3hhLEdBQzVCLEdBQUlxYixFQUFNQyxTQUFXQSxFQUFRLENBQzNCLElBQUlGLEVBQVNDLEVBQU1SLFdBQ25CLEdBQW9CLFVBQWhCTyxFQUFPOU4sS0FBa0IsQ0FDM0IsSUFBSXlPLEVBQVNYLEVBQU8vSyxJQUNwQm9LLEVBQWNZLEdBRWhCLE9BQU9VLEdBTVgsTUFBTSxJQUFJdkssTUFBTSwwQkFHbEJ3SyxjQUFlLFNBQVNDLEVBQVVDLEVBQVlDLEdBYTVDLE9BWkF0WSxLQUFLMFcsU0FBVyxDQUNkaEQsU0FBVWlCLEVBQU95RCxHQUNqQkMsV0FBWUEsRUFDWkMsUUFBU0EsR0FHUyxTQUFoQnRZLEtBQUs5QyxTQUdQOEMsS0FBS3dNLElBQU00RyxHQUdOa0IsSUFucUJYLFNBQVNMLEVBQUswQixFQUFTQyxFQUFTOUMsRUFBTStDLEdBRXBDLElBQUkwQyxFQUFpQjNDLEdBQVdBLEVBQVE1YixxQkFBcUI4YSxFQUFZYyxFQUFVZCxFQUMvRTBELEVBQVl6ZSxPQUFPZ0IsT0FBT3dkLEVBQWV2ZSxXQUN6Q2dPLEVBQVUsSUFBSW9PLEVBQVFQLEdBQWUsSUFNekMsT0FGQTJDLEVBQVVDLFFBQVVDLEVBQWlCL0MsRUFBUzdDLEVBQU05SyxHQUU3Q3dRLEVBY1QsU0FBU0csRUFBU3ZlLEVBQUlJLEVBQUtnUyxHQUN6QixJQUNFLE1BQU8sQ0FBRS9DLEtBQU0sU0FBVStDLElBQUtwUyxFQUFHSyxLQUFLRCxFQUFLZ1MsSUFDM0MsTUFBT2pOLEdBQ1AsTUFBTyxDQUFFa0ssS0FBTSxRQUFTK0MsSUFBS2pOLElBaUJqQyxTQUFTdVYsS0FDVCxTQUFTQyxLQUNULFNBQVNGLEtBNEJULFNBQVNXLEVBQXNCeGIsR0FDN0IsQ0FBQyxPQUFRLFFBQVMsVUFBVStDLFNBQVEsU0FBU0csR0FDM0NsRCxFQUFVa0QsR0FBVSxTQUFTc1AsR0FDM0IsT0FBT3hNLEtBQUt5WSxRQUFRdmIsRUFBUXNQLE9Bb0NsQyxTQUFTaUosRUFBYytDLEdBQ3JCLFNBQVM5WixFQUFPeEIsRUFBUXNQLEVBQUs3TyxFQUFTa0MsR0FDcEMsSUFBSTBYLEVBQVNvQixFQUFTSCxFQUFVdGIsR0FBU3NiLEVBQVdoTSxHQUNwRCxHQUFvQixVQUFoQitLLEVBQU85TixLQUVKLENBQ0wsSUFBSXRJLEVBQVNvVyxFQUFPL0ssSUFDaEJ0TSxFQUFRaUIsRUFBT2pCLE1BQ25CLE9BQUlBLEdBQ2lCLGtCQUFWQSxHQUNQeEYsRUFBT0QsS0FBS3lGLEVBQU8sV0FDZHhDLFFBQVFDLFFBQVF1QyxFQUFNcVYsU0FBU2hZLE1BQUssU0FBUzJDLEdBQ2xEeEIsRUFBTyxPQUFRd0IsRUFBT3ZDLEVBQVNrQyxNQUM5QixTQUFTTixHQUNWYixFQUFPLFFBQVNhLEVBQUs1QixFQUFTa0MsTUFJM0JuQyxRQUFRQyxRQUFRdUMsR0FBTzNDLE1BQUssU0FBU3FiLEdBSTFDelgsRUFBT2pCLE1BQVEwWSxFQUNmamIsRUFBUXdELE1BQ1AsU0FBU3dDLEdBR1YsT0FBT2pGLEVBQU8sUUFBU2lGLEVBQU9oRyxFQUFTa0MsTUF2QnpDQSxFQUFPMFgsRUFBTy9LLEtBNEJsQixJQUFJcU0sRUFFSixTQUFTQyxFQUFRNWIsRUFBUXNQLEdBQ3ZCLFNBQVN1TSxJQUNQLE9BQU8sSUFBSXJiLFNBQVEsU0FBU0MsRUFBU2tDLEdBQ25DbkIsRUFBT3hCLEVBQVFzUCxFQUFLN08sRUFBU2tDLE1BSWpDLE9BQU9nWixFQWFMQSxFQUFrQkEsRUFBZ0J0YixLQUNoQ3diLEVBR0FBLEdBQ0VBLElBS1IvWSxLQUFLeVksUUFBVUssRUF3QmpCLFNBQVNKLEVBQWlCL0MsRUFBUzdDLEVBQU05SyxHQUN2QyxJQUFJZ1IsRUFBUTlFLEVBRVosT0FBTyxTQUFnQmhYLEVBQVFzUCxHQUM3QixHQUFJd00sSUFBVTVFLEVBQ1osTUFBTSxJQUFJekcsTUFBTSxnQ0FHbEIsR0FBSXFMLElBQVUzRSxFQUFtQixDQUMvQixHQUFlLFVBQVhuWCxFQUNGLE1BQU1zUCxFQUtSLE9BQU95TSxJQUdUalIsRUFBUTlLLE9BQVNBLEVBQ2pCOEssRUFBUXdFLElBQU1BLEVBRWQsTUFBTyxFQUFNLENBQ1gsSUFBSWtLLEVBQVcxTyxFQUFRME8sU0FDdkIsR0FBSUEsRUFBVSxDQUNaLElBQUl3QyxFQUFpQkMsRUFBb0J6QyxFQUFVMU8sR0FDbkQsR0FBSWtSLEVBQWdCLENBQ2xCLEdBQUlBLElBQW1CNUUsRUFBa0IsU0FDekMsT0FBTzRFLEdBSVgsR0FBdUIsU0FBbkJsUixFQUFROUssT0FHVjhLLEVBQVF3TyxLQUFPeE8sRUFBUXlPLE1BQVF6TyxFQUFRd0UsU0FFbEMsR0FBdUIsVUFBbkJ4RSxFQUFROUssT0FBb0IsQ0FDckMsR0FBSThiLElBQVU5RSxFQUVaLE1BREE4RSxFQUFRM0UsRUFDRnJNLEVBQVF3RSxJQUdoQnhFLEVBQVFrUCxrQkFBa0JsUCxFQUFRd0UsU0FFTixXQUFuQnhFLEVBQVE5SyxRQUNqQjhLLEVBQVE4UCxPQUFPLFNBQVU5UCxFQUFRd0UsS0FHbkN3TSxFQUFRNUUsRUFFUixJQUFJbUQsRUFBU29CLEVBQVNoRCxFQUFTN0MsRUFBTTlLLEdBQ3JDLEdBQW9CLFdBQWhCdVAsRUFBTzlOLEtBQW1CLENBTzVCLEdBSkF1UCxFQUFRaFIsRUFBUWdPLEtBQ1ozQixFQUNBRixFQUVBb0QsRUFBTy9LLE1BQVE4SCxFQUNqQixTQUdGLE1BQU8sQ0FDTHBVLE1BQU9xWCxFQUFPL0ssSUFDZHdKLEtBQU1oTyxFQUFRZ08sTUFHUyxVQUFoQnVCLEVBQU85TixPQUNoQnVQLEVBQVEzRSxFQUdSck0sRUFBUTlLLE9BQVMsUUFDakI4SyxFQUFRd0UsSUFBTStLLEVBQU8vSyxPQVU3QixTQUFTMk0sRUFBb0J6QyxFQUFVMU8sR0FDckMsSUFBSTlLLEVBQVN3WixFQUFTaEQsU0FBUzFMLEVBQVE5SyxRQUN2QyxHQUFJQSxJQUFXa1csRUFBVyxDQUt4QixHQUZBcEwsRUFBUTBPLFNBQVcsS0FFSSxVQUFuQjFPLEVBQVE5SyxPQUFvQixDQUM5QixHQUFJd1osRUFBU2hELFNBQVMwRixTQUdwQnBSLEVBQVE5SyxPQUFTLFNBQ2pCOEssRUFBUXdFLElBQU00RyxFQUNkK0YsRUFBb0J6QyxFQUFVMU8sR0FFUCxVQUFuQkEsRUFBUTlLLFFBR1YsT0FBT29YLEVBSVh0TSxFQUFROUssT0FBUyxRQUNqQjhLLEVBQVF3RSxJQUFNLElBQUk2TSxVQUNoQixrREFHSixPQUFPL0UsRUFHVCxJQUFJaUQsRUFBU29CLEVBQVN6YixFQUFRd1osRUFBU2hELFNBQVUxTCxFQUFRd0UsS0FFekQsR0FBb0IsVUFBaEIrSyxFQUFPOU4sS0FJVCxPQUhBekIsRUFBUTlLLE9BQVMsUUFDakI4SyxFQUFRd0UsSUFBTStLLEVBQU8vSyxJQUNyQnhFLEVBQVEwTyxTQUFXLEtBQ1pwQyxFQUdULElBQUlnRixFQUFPL0IsRUFBTy9LLElBRWxCLE9BQU04TSxFQU9GQSxFQUFLdEQsTUFHUGhPLEVBQVEwTyxFQUFTMkIsWUFBY2lCLEVBQUtwWixNQUdwQzhILEVBQVErTixLQUFPVyxFQUFTNEIsUUFRRCxXQUFuQnRRLEVBQVE5SyxTQUNWOEssRUFBUTlLLE9BQVMsT0FDakI4SyxFQUFRd0UsSUFBTTRHLEdBVWxCcEwsRUFBUTBPLFNBQVcsS0FDWnBDLEdBTkVnRixHQTNCUHRSLEVBQVE5SyxPQUFTLFFBQ2pCOEssRUFBUXdFLElBQU0sSUFBSTZNLFVBQVUsb0NBQzVCclIsRUFBUTBPLFNBQVcsS0FDWnBDLEdBb0RYLFNBQVNpRixFQUFhQyxHQUNwQixJQUFJaEMsRUFBUSxDQUFFQyxPQUFRK0IsRUFBSyxJQUV2QixLQUFLQSxJQUNQaEMsRUFBTUksU0FBVzRCLEVBQUssSUFHcEIsS0FBS0EsSUFDUGhDLEVBQU1LLFdBQWEyQixFQUFLLEdBQ3hCaEMsRUFBTVEsU0FBV3dCLEVBQUssSUFHeEJ4WixLQUFLMlcsV0FBV3JhLEtBQUtrYixHQUd2QixTQUFTWixFQUFjWSxHQUNyQixJQUFJRCxFQUFTQyxFQUFNUixZQUFjLEdBQ2pDTyxFQUFPOU4sS0FBTyxnQkFDUDhOLEVBQU8vSyxJQUNkZ0wsRUFBTVIsV0FBYU8sRUFHckIsU0FBU25CLEVBQVFQLEdBSWY3VixLQUFLMlcsV0FBYSxDQUFDLENBQUVjLE9BQVEsU0FDN0I1QixFQUFZOVksUUFBUXdjLEVBQWN2WixNQUNsQ0EsS0FBS3FXLE9BQU0sR0E4QmIsU0FBUzFCLEVBQU95RCxHQUNkLEdBQUlBLEVBQVUsQ0FDWixJQUFJcUIsRUFBaUJyQixFQUFTM0UsR0FDOUIsR0FBSWdHLEVBQ0YsT0FBT0EsRUFBZWhmLEtBQUsyZCxHQUc3QixHQUE2QixvQkFBbEJBLEVBQVNyQyxLQUNsQixPQUFPcUMsRUFHVCxJQUFLcFcsTUFBTW9XLEVBQVNoYyxRQUFTLENBQzNCLElBQUlELEdBQUssRUFBRzRaLEVBQU8sU0FBU0EsSUFDMUIsUUFBUzVaLEVBQUlpYyxFQUFTaGMsT0FDcEIsR0FBSTFCLEVBQU9ELEtBQUsyZCxFQUFVamMsR0FHeEIsT0FGQTRaLEVBQUs3VixNQUFRa1ksRUFBU2pjLEdBQ3RCNFosRUFBS0MsTUFBTyxFQUNMRCxFQU9YLE9BSEFBLEVBQUs3VixNQUFRa1QsRUFDYjJDLEVBQUtDLE1BQU8sRUFFTEQsR0FHVCxPQUFPQSxFQUFLQSxLQUFPQSxHQUt2QixNQUFPLENBQUVBLEtBQU1rRCxHQUlqQixTQUFTQSxJQUNQLE1BQU8sQ0FBRS9ZLE1BQU9rVCxFQUFXNEMsTUFBTSxJQXhmcEMsQ0Fzc0JDLFdBQ0UsT0FBT2hXLE1BQXlCLGtCQUFUOFMsTUFBcUJBLEtBRDlDLElBRVFDLFNBQVMsY0FBVEEsSzs7Ozs0T0Mvc0JWLG9CQUNBLHNCLCtXQUVBck8sVUFBSWdWLElBQUlDLFdBRVIsSUFBTTVMLEVBQVEsSUFBSTRMLFVBQUtDLE1BQU0sQ0FDNUJaLE1BQU8sQ0FDTmEsVUFBVSxFQUNWQyxjQUFlLEdBQ2ZDLFNBQVUsR0FDVkMsT0FBTyxHQUNQQyxTQUFTLEdBQ1RDLE1BQU0sR0FDTkMsTUFBTSxHQUNOQyxPQUFPLEdBQ1BDLE1BQU0sRUFDTkMsU0FBUyxFQUNUQyxRQUFRLEVBQ1JDLE1BQU0sRUFDTkMsYUFBWSxFQUNaQyxhQUFZLEVBQ1pDLE9BQVEsS0FDUkMsVUFBVSxFQUNWQyxXQUFZLEVBQ1pDLFNBQVMsR0FDVEMsVUFBVyxDQUFDLFVBQVcsVUFBVyxZQUVuQ0MsVUFBVyxDQUNWQyxNQURVLFNBQ0pqQyxFQUFPbmQsR0FDWm1kLEVBQU1hLFVBQVcsRUFDakJiLEVBQU1lLFNBQVdsZSxFQUNqQm1kLEVBQU1nQixPQUFTbmUsRUFBSXFmLGdCQUFnQkMsVUFDbkNuQyxFQUFNaUIsU0FBV3BlLEVBQUlxZixnQkFBZ0JFLFNBQ3JDcEMsRUFBTWtCLE1BQVFyZSxFQUFJcWUsTUFNbEIsSUFGQSxJQUFJbUIsRUFBYSxDQUFDLFlBQVksV0FBVyxRQUFRLFVBQVcsVUFDeERDLEVBQVksQ0FBQ3pmLEVBQUlxZixnQkFBZ0JDLFVBQVd0ZixFQUFJcWYsZ0JBQWdCRSxTQUFVdmYsRUFBSXFlLE9BQU8sRUFBS3JlLEVBQUkwZixRQUN6RnBmLEVBQUksRUFBR0EsRUFBSWtmLEVBQVdqZixPQUFRRCxJQUN0Q21XLEVBQUlrSixlQUFlLENBQ2xCN2dCLElBQUswZ0IsRUFBV2xmLEdBQ2hCa0IsS0FBTWllLEVBQVVuZixLQUdsQmdILFFBQVFzWSxJQUFJLHFCQUNadFksUUFBUXNZLElBQUl6QyxFQUFNZSxXQUVuQjJCLE9BckJVLFNBcUJIMUMsR0FDTkEsRUFBTWEsVUFBVyxFQUNqQmIsRUFBTTJCLE9BQVMsTUFFaEJnQixTQXpCVSxTQXlCRDNDLEVBQU00QyxHQUNkNUMsRUFBTXFCLE1BQVFyQixFQUFNcUIsTUFBUXVCLEdBRTdCQyxZQTVCVSxTQTRCRTdDLEVBQU04QyxHQUNqQjlDLEVBQU15QixZQUFjcUIsR0FFckJDLFlBL0JVLFNBK0JFL0MsRUFBTThDLEdBQ2pCOUMsRUFBTTBCLFlBQWNvQixHQUVyQkUsWUFsQ1UsU0FrQ0VoRCxFQUFNcUIsR0FFakJyQixFQUFNcUIsTUFBUUEsRUFDZGxYLFFBQVFzWSxJQUFJLDJCQUNadFksUUFBUXNZLElBQUl6QyxFQUFNcUIsUUFFbkI0QixlQXhDVSxTQXdDS2pELEVBQU1zQixHQUVwQnRCLEVBQU1zQixTQUFXQSxFQUNqQm5YLFFBQVFzWSxJQUFJLDhCQUNadFksUUFBUXNZLElBQUl6QyxFQUFNc0IsV0FFbkI0QixXQTlDVSxTQThDQ2xELEVBQU1tRCxHQUVoQm5ELEVBQU11QixRQUFVNEIsRUFDaEJoWixRQUFRc1ksSUFBSSw4QkFDWnRZLFFBQVFzWSxJQUFJekMsRUFBTXVCLFVBRW5CNkIsZUFwRFUsU0FvREtwRCxFQUFNc0IsR0FDcEJ0QixFQUFNc0IsU0FBV0EsR0FFbEIrQixZQXZEVSxTQXVERXJELEVBQU1tQixHQUNqQm5CLEVBQU1tQixNQUFRQSxHQUVmbUMsU0ExRFUsU0EwRER0RCxFQUFNdUQsR0FDZHZELEVBQU13QixNQUFRK0IsR0FFZkMsVUE3RFUsU0E2REF4RCxFQUFNamIsR0FDZmliLEVBQU1pQixTQUFXbGMsR0FFbEIwZSxlQWhFVSxTQWdFS3pELEVBQU0wRCxHQUNwQjFELEVBQU04QixTQUFXNEIsR0FFbEJDLFVBbkVVLFNBbUVBM0QsRUFBTzJCLEdBQ2hCM0IsRUFBTTJCLE9BQVNBLEdBRWhCaUMsWUF0RVUsU0FzRUU1RCxHQUNYQSxFQUFNNEIsVUFBVyxHQUVsQmlDLGFBekVVLFNBeUVHN0QsR0FDWkEsRUFBTTRCLFVBQVcsR0FFbEJrQyxjQTVFVSxTQTRFSTlELEVBQU92YyxHQUNwQnVjLEVBQU02QixXQUFhcGUsSUFHckJzZ0IsUUFBUyxDQUNSQyxhQURRLFNBQ0toRSxHQUNaLE9BQU9BLEVBQU0rQixVQUFVL0IsRUFBTTZCLGNBRy9Cb0MsUUFBUyxDQUVSQyxjQUFlLFdBQUYsd0JBQUUscUdBQ2RDLEVBRGMsRUFDZEEsT0FDQW5FLEVBRmMsRUFFZEEsTUFGYyxhQUlHdGIsU0FBUSxTQUFDQyxFQUFTa0MsR0FDOUJtWixFQUFNMkIsT0FDVGhkLEVBQVFxYixFQUFNMkIsUUFFZHJJLEVBQUkySSxNQUFNLENBQ1R2YixRQUFTLFNBQUNyQyxHQUNUOGYsRUFBTyxTQUNQQyxZQUFXLFdBQ1YsSUFBTXpDLEVBQVMsWUFDZnhYLFFBQVFzWSxJQUFJLDJCQUE2QmQsRUFBUyxLQUNsRHdDLEVBQU8sWUFBYXhDLEdBQ3BCaGQsRUFBUWdkLEtBQ04sTUFFSmhiLEtBQU0sU0FBQ0osR0FDTjRELFFBQVFzWSxJQUFJLGtDQUFtQ2xjLEdBQy9DTSxFQUFPTixTQXBCRyxtRkFBRixzREFBRSxNLEVBNkJGd08sRTs7OztzSkMvSWY7Ozs7OztBQUtBLElBQUlzUCxFQUFhLFNBQVUzWSxHQUN6QixJQUFJNFksRUFBVXBjLE9BQU93RCxFQUFJNFksUUFBUTFWLE1BQU0sS0FBSyxJQUU1QyxHQUFJMFYsR0FBVyxFQUNiNVksRUFBSW1DLE1BQU0sQ0FBRXFILGFBQWNxUCxRQUNyQixDQUdMLElBQUlDLEVBQVE5WSxFQUFJMUssVUFBVXdqQixNQUMxQjlZLEVBQUkxSyxVQUFVd2pCLE1BQVEsU0FBVTFmLFFBQ2IsSUFBWkEsSUFBcUJBLEVBQVUsSUFFcENBLEVBQVEyZixLQUFPM2YsRUFBUTJmLEtBQ25CLENBQUNGLEdBQVV6aEIsT0FBT2dDLEVBQVEyZixNQUMxQkYsRUFDSkMsRUFBTS9pQixLQUFLdUYsS0FBTWxDLElBUXJCLFNBQVN5ZixJQUNQLElBQUl6ZixFQUFVa0MsS0FBS2dOLFNBRWZsUCxFQUFRaVEsTUFDVi9OLEtBQUtnTyxPQUFrQyxvQkFBbEJsUSxFQUFRaVEsTUFDekJqUSxFQUFRaVEsUUFDUmpRLEVBQVFpUSxNQUNIalEsRUFBUTZSLFFBQVU3UixFQUFRNlIsT0FBTzNCLFNBQzFDaE8sS0FBS2dPLE9BQVNsUSxFQUFRNlIsT0FBTzNCLFVBSy9CMFAsRUFDZ0IscUJBQVhDLFFBQ1BBLE9BQU9DLDZCQUVULFNBQVNDLEVBQWU5UCxHQUNqQjJQLElBRUwzUCxFQUFNK1AsYUFBZUosRUFFckJBLEVBQVlLLEtBQUssWUFBYWhRLEdBRTlCMlAsRUFBWU0sR0FBRyx3QkFBd0IsU0FBVUMsR0FDL0NsUSxFQUFNbVEsYUFBYUQsTUFHckJsUSxFQUFNb1EsV0FBVSxTQUFVQyxFQUFVcEYsR0FDbEMwRSxFQUFZSyxLQUFLLGdCQUFpQkssRUFBVXBGLE9BMEJoRCxTQUFTcUYsRUFBYzdqQixFQUFLSixHQUMxQkwsT0FBTytDLEtBQUt0QyxHQUFLdUMsU0FBUSxTQUFVcEMsR0FBTyxPQUFPUCxFQUFHSSxFQUFJRyxHQUFNQSxNQUdoRSxTQUFTMmpCLEVBQVU5akIsR0FDakIsT0FBZSxPQUFSQSxHQUErQixrQkFBUkEsRUFHaEMsU0FBUzhDLEVBQVdpaEIsR0FDbEIsT0FBT0EsR0FBMkIsb0JBQWJBLEVBQUloaEIsS0FHM0IsU0FBU2loQixFQUFRQyxFQUFXQyxHQUMxQixJQUFLRCxFQUFhLE1BQU0sSUFBSTlRLE1BQU8sVUFBWStRLEdBR2pELElBQUlDLEVBQVMsU0FBaUJDLEVBQVc1SyxHQUN2Q2hVLEtBQUtnVSxRQUFVQSxFQUNmaFUsS0FBSzZlLFVBQVk5a0IsT0FBT2dCLE9BQU8sTUFDL0JpRixLQUFLOGUsV0FBYUYsRUFDbEIsSUFBSUcsRUFBV0gsRUFBVTVGLE1BQ3pCaFosS0FBS2daLE9BQTZCLG9CQUFiK0YsRUFBMEJBLElBQWFBLElBQWEsSUFHdkVDLEVBQXVCLENBQUVDLFdBQVksQ0FBRUMsY0FBYyxJQUV6REYsRUFBcUJDLFdBQVc5UCxJQUFNLFdBQ3BDLFFBQVNuUCxLQUFLOGUsV0FBV0csWUFHM0JOLEVBQU8za0IsVUFBVW1sQixTQUFXLFNBQW1CeGtCLEVBQUsrWCxHQUNsRDFTLEtBQUs2ZSxVQUFVbGtCLEdBQU8rWCxHQUd4QmlNLEVBQU8za0IsVUFBVW9sQixZQUFjLFNBQXNCemtCLFVBQzVDcUYsS0FBSzZlLFVBQVVsa0IsSUFHeEJna0IsRUFBTzNrQixVQUFVcWxCLFNBQVcsU0FBbUIxa0IsR0FDN0MsT0FBT3FGLEtBQUs2ZSxVQUFVbGtCLElBR3hCZ2tCLEVBQU8za0IsVUFBVXNsQixPQUFTLFNBQWlCVixHQUN6QzVlLEtBQUs4ZSxXQUFXRyxXQUFhTCxFQUFVSyxXQUNuQ0wsRUFBVTNCLFVBQ1pqZCxLQUFLOGUsV0FBVzdCLFFBQVUyQixFQUFVM0IsU0FFbEMyQixFQUFVNUQsWUFDWmhiLEtBQUs4ZSxXQUFXOUQsVUFBWTRELEVBQVU1RCxXQUVwQzRELEVBQVU3QixVQUNaL2MsS0FBSzhlLFdBQVcvQixRQUFVNkIsRUFBVTdCLFVBSXhDNEIsRUFBTzNrQixVQUFVdWxCLGFBQWUsU0FBdUJubEIsR0FDckRpa0IsRUFBYXJlLEtBQUs2ZSxVQUFXemtCLElBRy9CdWtCLEVBQU8za0IsVUFBVXdsQixjQUFnQixTQUF3QnBsQixHQUNuRDRGLEtBQUs4ZSxXQUFXL0IsU0FDbEJzQixFQUFhcmUsS0FBSzhlLFdBQVcvQixRQUFTM2lCLElBSTFDdWtCLEVBQU8za0IsVUFBVXlsQixjQUFnQixTQUF3QnJsQixHQUNuRDRGLEtBQUs4ZSxXQUFXN0IsU0FDbEJvQixFQUFhcmUsS0FBSzhlLFdBQVc3QixRQUFTN2lCLElBSTFDdWtCLEVBQU8za0IsVUFBVTBsQixnQkFBa0IsU0FBMEJ0bEIsR0FDdkQ0RixLQUFLOGUsV0FBVzlELFdBQ2xCcUQsRUFBYXJlLEtBQUs4ZSxXQUFXOUQsVUFBVzVnQixJQUk1Q0wsT0FBTzRsQixpQkFBa0JoQixFQUFPM2tCLFVBQVdnbEIsR0FFM0MsSUFBSVksRUFBbUIsU0FBMkJDLEdBRWhEN2YsS0FBSzhmLFNBQVMsR0FBSUQsR0FBZSxJQXFEbkMsU0FBU1AsRUFBUVMsRUFBTUMsRUFBY0MsR0FTbkMsR0FQRUMsRUFBZ0JILEVBQU1FLEdBSXhCRCxFQUFhVixPQUFPVyxHQUdoQkEsRUFBVUUsUUFDWixJQUFLLElBQUl4bEIsS0FBT3NsQixFQUFVRSxRQUFTLENBQ2pDLElBQUtILEVBQWFYLFNBQVMxa0IsR0FPekIsWUFMRXdJLFFBQVFDLEtBQ04sc0NBQXdDekksRUFBTSwrQ0FNcEQya0IsRUFDRVMsRUFBS2prQixPQUFPbkIsR0FDWnFsQixFQUFhWCxTQUFTMWtCLEdBQ3RCc2xCLEVBQVVFLFFBQVF4bEIsS0F6RTFCaWxCLEVBQWlCNWxCLFVBQVVtVixJQUFNLFNBQWM0USxHQUM3QyxPQUFPQSxFQUFLSyxRQUFPLFNBQVUxTixFQUFRL1gsR0FDbkMsT0FBTytYLEVBQU8yTSxTQUFTMWtCLEtBQ3RCcUYsS0FBS3FnQixPQUdWVCxFQUFpQjVsQixVQUFVc21CLGFBQWUsU0FBdUJQLEdBQy9ELElBQUlyTixFQUFTMVMsS0FBS3FnQixLQUNsQixPQUFPTixFQUFLSyxRQUFPLFNBQVVHLEVBQVc1bEIsR0FFdEMsT0FEQStYLEVBQVNBLEVBQU8yTSxTQUFTMWtCLEdBQ2xCNGxCLEdBQWE3TixFQUFPdU0sV0FBYXRrQixFQUFNLElBQU0sTUFDbkQsS0FHTGlsQixFQUFpQjVsQixVQUFVc2xCLE9BQVMsU0FBbUJPLEdBQ3JEUCxFQUFPLEdBQUl0ZixLQUFLcWdCLEtBQU1SLElBR3hCRCxFQUFpQjVsQixVQUFVOGxCLFNBQVcsU0FBbUJDLEVBQU1uQixFQUFXNUssR0FDdEUsSUFBSXdNLEVBQVN4Z0IsVUFDSSxJQUFaZ1UsSUFBcUJBLEdBQVUsR0FHcENrTSxFQUFnQkgsRUFBTW5CLEdBR3hCLElBQUlxQixFQUFZLElBQUl0QixFQUFPQyxFQUFXNUssR0FDdEMsR0FBb0IsSUFBaEIrTCxFQUFLM2pCLE9BQ1A0RCxLQUFLcWdCLEtBQU9KLE1BQ1AsQ0FDTCxJQUFJdFEsRUFBUzNQLEtBQUttUCxJQUFJNFEsRUFBSzFoQixNQUFNLEdBQUksSUFDckNzUixFQUFPd1AsU0FBU1ksRUFBS0EsRUFBSzNqQixPQUFTLEdBQUk2akIsR0FJckNyQixFQUFVdUIsU0FDWjlCLEVBQWFPLEVBQVV1QixTQUFTLFNBQVVNLEVBQWdCOWxCLEdBQ3hENmxCLEVBQU9WLFNBQVNDLEVBQUtqa0IsT0FBT25CLEdBQU04bEIsRUFBZ0J6TSxPQUt4RDRMLEVBQWlCNWxCLFVBQVUwbUIsV0FBYSxTQUFxQlgsR0FDM0QsSUFBSXBRLEVBQVMzUCxLQUFLbVAsSUFBSTRRLEVBQUsxaEIsTUFBTSxHQUFJLElBQ2pDMUQsRUFBTW9sQixFQUFLQSxFQUFLM2pCLE9BQVMsR0FDeEJ1VCxFQUFPMFAsU0FBUzFrQixHQUFLcVosU0FFMUJyRSxFQUFPeVAsWUFBWXprQixJQWdDckIsSUF5Q0krSixFQXpDQWljLEVBQWlCLENBQ25CbkMsT0FBUSxTQUFVdGUsR0FBUyxNQUF3QixvQkFBVkEsR0FDekMwZ0IsU0FBVSxZQUdSQyxFQUFlLENBQ2pCckMsT0FBUSxTQUFVdGUsR0FBUyxNQUF3QixvQkFBVkEsR0FDckIsa0JBQVZBLEdBQStDLG9CQUFsQkEsRUFBTXdOLFNBQzdDa1QsU0FBVSw4Q0FHUkUsRUFBYyxDQUNoQi9ELFFBQVM0RCxFQUNUM0YsVUFBVzJGLEVBQ1gxRCxRQUFTNEQsR0FHWCxTQUFTWCxFQUFpQkgsRUFBTW5CLEdBQzlCN2tCLE9BQU8rQyxLQUFLZ2tCLEdBQWEvakIsU0FBUSxTQUFVcEMsR0FDekMsR0FBS2lrQixFQUFVamtCLEdBQWYsQ0FFQSxJQUFJb21CLEVBQWdCRCxFQUFZbm1CLEdBRWhDMGpCLEVBQWFPLEVBQVVqa0IsSUFBTSxTQUFVdUYsRUFBT3VKLEdBQzVDK1UsRUFDRXVDLEVBQWN2QyxPQUFPdGUsR0FDckI4Z0IsRUFBcUJqQixFQUFNcGxCLEVBQUs4TyxFQUFNdkosRUFBTzZnQixFQUFjSCxrQkFNbkUsU0FBU0ksRUFBc0JqQixFQUFNcGxCLEVBQUs4TyxFQUFNdkosRUFBTzBnQixHQUNyRCxJQUFJSyxFQUFNdG1CLEVBQU0sY0FBZ0JpbUIsRUFBVyxTQUFZam1CLEVBQU0sSUFBTThPLEVBQU8sSUFLMUUsT0FKSXNXLEVBQUszakIsT0FBUyxJQUNoQjZrQixHQUFPLGVBQW1CbEIsRUFBS21CLEtBQUssS0FBUSxLQUU5Q0QsR0FBTyxPQUFVNVksS0FBS0UsVUFBVXJJLEdBQVUsSUFDbkMrZ0IsRUFLVCxJQUFJckgsRUFBUSxTQUFTQSxFQUFPOWIsR0FDMUIsSUFBSTBpQixFQUFTeGdCLFVBQ0ksSUFBWmxDLElBQXFCQSxFQUFVLEtBSy9CNEcsR0FBeUIscUJBQVhpWixRQUEwQkEsT0FBT2paLEtBQ2xEeWMsRUFBUXhELE9BQU9qWixLQUlmOFosRUFBTzlaLEVBQUssNkRBQ1o4WixFQUEwQixxQkFBWjlnQixRQUF5QixxREFDdkM4Z0IsRUFBT3hlLGdCQUFnQjRaLEVBQU8sK0NBR2hDLElBQUl3SCxFQUFVdGpCLEVBQVFzakIsYUFBMEIsSUFBWkEsSUFBcUJBLEVBQVUsSUFDbkUsSUFBSUMsRUFBU3ZqQixFQUFRdWpCLFlBQXdCLElBQVhBLElBQW9CQSxHQUFTLEdBRS9ELElBQUlySSxFQUFRbGIsRUFBUWtiLFdBQXNCLElBQVZBLElBQW1CQSxFQUFRLElBQ3RDLG9CQUFWQSxJQUNUQSxFQUFRQSxLQUFXLElBSXJCaFosS0FBS3NoQixhQUFjLEVBQ25CdGhCLEtBQUt1aEIsU0FBV3huQixPQUFPZ0IsT0FBTyxNQUM5QmlGLEtBQUt3aEIsbUJBQXFCLEdBQzFCeGhCLEtBQUt5aEIsV0FBYTFuQixPQUFPZ0IsT0FBTyxNQUNoQ2lGLEtBQUswaEIsZ0JBQWtCM25CLE9BQU9nQixPQUFPLE1BQ3JDaUYsS0FBSzJoQixTQUFXLElBQUkvQixFQUFpQjloQixHQUNyQ2tDLEtBQUs0aEIscUJBQXVCN25CLE9BQU9nQixPQUFPLE1BQzFDaUYsS0FBSzZoQixhQUFlLEdBQ3BCN2hCLEtBQUs4aEIsV0FBYSxJQUFJcGQsRUFHdEIsSUFBSXFKLEVBQVEvTixLQUNSd1AsRUFBTXhQLEtBQ04raEIsRUFBV3ZTLEVBQUl1UyxTQUNmNUUsRUFBUzNOLEVBQUkyTixPQUNqQm5kLEtBQUsraEIsU0FBVyxTQUF3QnRZLEVBQU11WSxHQUM1QyxPQUFPRCxFQUFTdG5CLEtBQUtzVCxFQUFPdEUsRUFBTXVZLElBRXBDaGlCLEtBQUttZCxPQUFTLFNBQXNCMVQsRUFBTXVZLEVBQVNsa0IsR0FDakQsT0FBT3FmLEVBQU8xaUIsS0FBS3NULEVBQU90RSxFQUFNdVksRUFBU2xrQixJQUkzQ2tDLEtBQUtxaEIsT0FBU0EsRUFLZFksRUFBY2ppQixLQUFNZ1osRUFBTyxHQUFJaFosS0FBSzJoQixTQUFTdEIsTUFJN0M2QixFQUFhbGlCLEtBQU1nWixHQUduQm9JLEVBQVFya0IsU0FBUSxTQUFVb2xCLEdBQVUsT0FBT0EsRUFBTzNCLE1BRTlDOWIsRUFBSTBkLE9BQU9DLFVBQ2J4RSxFQUFjN2QsT0FJZHNpQixFQUFxQixDQUFFdEosTUFBTyxDQUFFa0csY0FBYyxJQStJbEQsU0FBU3FELEVBQWtCbm9CLEVBQUlvb0IsR0FJN0IsT0FISUEsRUFBS25tQixRQUFRakMsR0FBTSxHQUNyQm9vQixFQUFLbG1CLEtBQUtsQyxHQUVMLFdBQ0wsSUFBSStCLEVBQUlxbUIsRUFBS25tQixRQUFRakMsR0FDakIrQixHQUFLLEdBQ1BxbUIsRUFBSzlsQixPQUFPUCxFQUFHLElBS3JCLFNBQVNzbUIsRUFBWTFVLEVBQU8yVSxHQUMxQjNVLEVBQU13VCxTQUFXeG5CLE9BQU9nQixPQUFPLE1BQy9CZ1QsRUFBTTBULFdBQWExbkIsT0FBT2dCLE9BQU8sTUFDakNnVCxFQUFNMlQsZ0JBQWtCM25CLE9BQU9nQixPQUFPLE1BQ3RDZ1QsRUFBTTZULHFCQUF1QjduQixPQUFPZ0IsT0FBTyxNQUMzQyxJQUFJaWUsRUFBUWpMLEVBQU1pTCxNQUVsQmlKLEVBQWNsVSxFQUFPaUwsRUFBTyxHQUFJakwsRUFBTTRULFNBQVN0QixNQUFNLEdBRXJENkIsRUFBYW5VLEVBQU9pTCxFQUFPMEosR0FHN0IsU0FBU1IsRUFBY25VLEVBQU9pTCxFQUFPMEosR0FDbkMsSUFBSUMsRUFBUTVVLEVBQU02VSxJQUdsQjdVLEVBQU1nUCxRQUFVLEdBQ2hCLElBQUk4RixFQUFpQjlVLEVBQU0yVCxnQkFDdkJvQixFQUFXLEdBQ2Z6RSxFQUFhd0UsR0FBZ0IsU0FBVXpvQixFQUFJTyxHQUV6Q21vQixFQUFTbm9CLEdBQU8sV0FBYyxPQUFPUCxFQUFHMlQsSUFDeENoVSxPQUFPbVYsZUFBZW5CLEVBQU1nUCxRQUFTcGlCLEVBQUssQ0FDeEN3VSxJQUFLLFdBQWMsT0FBT3BCLEVBQU02VSxJQUFJam9CLElBQ3BDb29CLFlBQVksT0FPaEIsSUFBSUMsRUFBU3RlLEVBQUkwZCxPQUFPWSxPQUN4QnRlLEVBQUkwZCxPQUFPWSxRQUFTLEVBQ3BCalYsRUFBTTZVLElBQU0sSUFBSWxlLEVBQUksQ0FDbEJySCxLQUFNLENBQ0o0bEIsUUFBU2pLLEdBRVg4SixTQUFVQSxJQUVacGUsRUFBSTBkLE9BQU9ZLE9BQVNBLEVBR2hCalYsRUFBTXNULFFBQ1I2QixFQUFpQm5WLEdBR2Y0VSxJQUNFRCxHQUdGM1UsRUFBTW9WLGFBQVksV0FDaEJSLEVBQU1TLE1BQU1ILFFBQVUsUUFHMUJ2ZSxFQUFJMmUsVUFBUyxXQUFjLE9BQU9WLEVBQU0vUixlQUk1QyxTQUFTcVIsRUFBZWxVLEVBQU91VixFQUFXdkQsRUFBTXJOLEVBQVFnUSxHQUN0RCxJQUFJYSxHQUFVeEQsRUFBSzNqQixPQUNmbWtCLEVBQVl4UyxFQUFNNFQsU0FBU3JCLGFBQWFQLEdBUTVDLEdBTElyTixFQUFPdU0sYUFDVGxSLEVBQU02VCxxQkFBcUJyQixHQUFhN04sSUFJckM2USxJQUFXYixFQUFLLENBQ25CLElBQUljLEVBQWNDLEVBQWVILEVBQVd2RCxFQUFLMWhCLE1BQU0sR0FBSSxJQUN2RHFsQixFQUFhM0QsRUFBS0EsRUFBSzNqQixPQUFTLEdBQ3BDMlIsRUFBTW9WLGFBQVksV0FDaEJ6ZSxFQUFJOE4sSUFBSWdSLEVBQWFFLEVBQVloUixFQUFPc0csVUFJNUMsSUFBSTJLLEVBQVFqUixFQUFPMUssUUFBVTRiLEVBQWlCN1YsRUFBT3dTLEVBQVdSLEdBRWhFck4sRUFBT2dOLGlCQUFnQixTQUFVdEIsRUFBVXpqQixHQUN6QyxJQUFJa3BCLEVBQWlCdEQsRUFBWTVsQixFQUNqQ21wQixFQUFpQi9WLEVBQU84VixFQUFnQnpGLEVBQVV1RixNQUdwRGpSLEVBQU8rTSxlQUFjLFNBQVVzRSxFQUFRcHBCLEdBQ3JDLElBQUk4TyxFQUFPc2EsRUFBTzFELEtBQU8xbEIsRUFBTTRsQixFQUFZNWxCLEVBQ3ZDK1MsRUFBVXFXLEVBQU9yVyxTQUFXcVcsRUFDaENDLEVBQWVqVyxFQUFPdEUsRUFBTWlFLEVBQVNpVyxNQUd2Q2pSLEVBQU84TSxlQUFjLFNBQVV5RSxFQUFRdHBCLEdBQ3JDLElBQUlrcEIsRUFBaUJ0RCxFQUFZNWxCLEVBQ2pDdXBCLEVBQWVuVyxFQUFPOFYsRUFBZ0JJLEVBQVFOLE1BR2hEalIsRUFBTzZNLGNBQWEsU0FBVTRFLEVBQU94cEIsR0FDbkNzbkIsRUFBY2xVLEVBQU91VixFQUFXdkQsRUFBS2prQixPQUFPbkIsR0FBTXdwQixFQUFPekIsTUFRN0QsU0FBU2tCLEVBQWtCN1YsRUFBT3dTLEVBQVdSLEdBQzNDLElBQUlxRSxFQUE0QixLQUFkN0QsRUFFZG9ELEVBQVEsQ0FDVjVCLFNBQVVxQyxFQUFjclcsRUFBTWdVLFNBQVcsU0FBVXNDLEVBQU9DLEVBQVVDLEdBQ2xFLElBQUk1aUIsRUFBTzZpQixFQUFpQkgsRUFBT0MsRUFBVUMsR0FDekN2QyxFQUFVcmdCLEVBQUtxZ0IsUUFDZmxrQixFQUFVNkQsRUFBSzdELFFBQ2YyTCxFQUFPOUgsRUFBSzhILEtBRWhCLEdBQUszTCxHQUFZQSxFQUFRdWlCLE9BQ3ZCNVcsRUFBTzhXLEVBQVk5VyxFQUMyQnNFLEVBQU13VCxTQUFTOVgsSUFNL0QsT0FBT3NFLEVBQU1nVSxTQUFTdFksRUFBTXVZLEdBTHhCN2UsUUFBUVEsTUFBTyxxQ0FBd0NoQyxFQUFTLEtBQUksa0JBQW9COEgsSUFROUYwVCxPQUFRaUgsRUFBY3JXLEVBQU1vUCxPQUFTLFNBQVVrSCxFQUFPQyxFQUFVQyxHQUM5RCxJQUFJNWlCLEVBQU82aUIsRUFBaUJILEVBQU9DLEVBQVVDLEdBQ3pDdkMsRUFBVXJnQixFQUFLcWdCLFFBQ2Zsa0IsRUFBVTZELEVBQUs3RCxRQUNmMkwsRUFBTzlILEVBQUs4SCxLQUVYM0wsR0FBWUEsRUFBUXVpQixPQUN2QjVXLEVBQU84VyxFQUFZOVcsRUFDMkJzRSxFQUFNMFQsV0FBV2hZLElBTWpFc0UsRUFBTW9QLE9BQU8xVCxFQUFNdVksRUFBU2xrQixHQUx4QnFGLFFBQVFRLE1BQU8sdUNBQTBDaEMsRUFBUyxLQUFJLGtCQUFvQjhILEtBc0JsRyxPQVhBMVAsT0FBTzRsQixpQkFBaUJnRSxFQUFPLENBQzdCNUcsUUFBUyxDQUNQNU4sSUFBS2lWLEVBQ0QsV0FBYyxPQUFPclcsRUFBTWdQLFNBQzNCLFdBQWMsT0FBTzBILEVBQWlCMVcsRUFBT3dTLEtBRW5EdkgsTUFBTyxDQUNMN0osSUFBSyxXQUFjLE9BQU9zVSxFQUFlMVYsRUFBTWlMLE1BQU8rRyxPQUluRDRELEVBR1QsU0FBU2MsRUFBa0IxVyxFQUFPd1MsR0FDaEMsSUFBSW1FLEVBQWUsR0FFZkMsRUFBV3BFLEVBQVVua0IsT0FpQnpCLE9BaEJBckMsT0FBTytDLEtBQUtpUixFQUFNZ1AsU0FBU2hnQixTQUFRLFNBQVUwTSxHQUUzQyxHQUFJQSxFQUFLcEwsTUFBTSxFQUFHc21CLEtBQWNwRSxFQUFoQyxDQUdBLElBQUlxRSxFQUFZbmIsRUFBS3BMLE1BQU1zbUIsR0FLM0I1cUIsT0FBT21WLGVBQWV3VixFQUFjRSxFQUFXLENBQzdDelYsSUFBSyxXQUFjLE9BQU9wQixFQUFNZ1AsUUFBUXRULElBQ3hDc1osWUFBWSxRQUlUMkIsRUFHVCxTQUFTWixFQUFrQi9WLEVBQU90RSxFQUFNaUUsRUFBU2lXLEdBQy9DLElBQUluTSxFQUFRekosRUFBTTBULFdBQVdoWSxLQUFVc0UsRUFBTTBULFdBQVdoWSxHQUFRLElBQ2hFK04sRUFBTWxiLE1BQUssU0FBaUMwbEIsR0FDMUN0VSxFQUFRalQsS0FBS3NULEVBQU80VixFQUFNM0ssTUFBT2dKLE1BSXJDLFNBQVNnQyxFQUFnQmpXLEVBQU90RSxFQUFNaUUsRUFBU2lXLEdBQzdDLElBQUluTSxFQUFRekosRUFBTXdULFNBQVM5WCxLQUFVc0UsRUFBTXdULFNBQVM5WCxHQUFRLElBQzVEK04sRUFBTWxiLE1BQUssU0FBK0IwbEIsRUFBUzZDLEdBQ2pELElBQUlocEIsRUFBTTZSLEVBQVFqVCxLQUFLc1QsRUFBTyxDQUM1QmdVLFNBQVU0QixFQUFNNUIsU0FDaEI1RSxPQUFRd0csRUFBTXhHLE9BQ2RKLFFBQVM0RyxFQUFNNUcsUUFDZi9ELE1BQU8ySyxFQUFNM0ssTUFDYjhMLFlBQWEvVyxFQUFNZ1AsUUFDbkJ1RyxVQUFXdlYsRUFBTWlMLE9BQ2hCZ0osRUFBUzZDLEdBSVosT0FIS3ZuQixFQUFVekIsS0FDYkEsRUFBTTZCLFFBQVFDLFFBQVE5QixJQUVwQmtTLEVBQU0rUCxhQUNEamlCLEVBQUkrQyxPQUFNLFNBQVVXLEdBRXpCLE1BREF3TyxFQUFNK1AsYUFBYUMsS0FBSyxhQUFjeGUsR0FDaENBLEtBR0QxRCxLQUtiLFNBQVNxb0IsRUFBZ0JuVyxFQUFPdEUsRUFBTXNiLEVBQVdwQixHQUMzQzVWLEVBQU0yVCxnQkFBZ0JqWSxHQUV0QnRHLFFBQVFRLE1BQU8sZ0NBQWtDOEYsR0FJckRzRSxFQUFNMlQsZ0JBQWdCalksR0FBUSxTQUF3QnNFLEdBQ3BELE9BQU9nWCxFQUNMcEIsRUFBTTNLLE1BQ04ySyxFQUFNNUcsUUFDTmhQLEVBQU1pTCxNQUNOakwsRUFBTWdQLFVBS1osU0FBU21HLEVBQWtCblYsR0FDekJBLEVBQU02VSxJQUFJb0MsUUFBTyxXQUFjLE9BQU9obEIsS0FBS29qQixNQUFNSCxXQUFXLFdBRXhEekUsRUFBT3pRLEVBQU11VCxZQUFhLCtEQUUzQixDQUFFMkQsTUFBTSxFQUFNQyxNQUFNLElBR3pCLFNBQVN6QixFQUFnQnpLLEVBQU8rRyxHQUM5QixPQUFPQSxFQUFLM2pCLE9BQ1IyakIsRUFBS0ssUUFBTyxTQUFVcEgsRUFBT3JlLEdBQU8sT0FBT3FlLEVBQU1yZSxLQUFTcWUsR0FDMURBLEVBR04sU0FBU3dMLEVBQWtCL2EsRUFBTXVZLEVBQVNsa0IsR0FXeEMsT0FWSXdnQixFQUFTN1UsSUFBU0EsRUFBS0EsT0FDekIzTCxFQUFVa2tCLEVBQ1ZBLEVBQVV2WSxFQUNWQSxFQUFPQSxFQUFLQSxNQUlaK1UsRUFBdUIsa0JBQVQvVSxFQUFvQixnREFBbURBLEVBQVEsS0FHeEYsQ0FBRUEsS0FBTUEsRUFBTXVZLFFBQVNBLEVBQVNsa0IsUUFBU0EsR0FHbEQsU0FBU3FqQixFQUFTZ0UsR0FDWnpnQixHQUFPeWdCLElBQVN6Z0IsRUFFaEJ2QixRQUFRUSxNQUNOLHdFQUtOZSxFQUFNeWdCLEVBQ045SCxFQUFXM1ksSUFyYWI0ZCxFQUFtQnRKLE1BQU03SixJQUFNLFdBQzdCLE9BQU9uUCxLQUFLNGlCLElBQUlRLE1BQU1ILFNBR3hCWCxFQUFtQnRKLE1BQU14RyxJQUFNLFNBQVU0UyxHQUVyQzVHLEdBQU8sRUFBTyw4REFJbEI1RSxFQUFNNWYsVUFBVW1qQixPQUFTLFNBQWlCa0gsRUFBT0MsRUFBVUMsR0FDdkQsSUFBSS9ELEVBQVN4Z0IsS0FHWHdQLEVBQU1nVixFQUFpQkgsRUFBT0MsRUFBVUMsR0FDdEM5YSxFQUFPK0YsRUFBSS9GLEtBQ1h1WSxFQUFVeFMsRUFBSXdTLFFBQ2Rsa0IsRUFBVTBSLEVBQUkxUixRQUVoQnNnQixFQUFXLENBQUUzVSxLQUFNQSxFQUFNdVksUUFBU0EsR0FDbEN4SyxFQUFReFgsS0FBS3loQixXQUFXaFksR0FDdkIrTixHQU1MeFgsS0FBS21qQixhQUFZLFdBQ2YzTCxFQUFNemEsU0FBUSxTQUF5QjJRLEdBQ3JDQSxFQUFRc1UsU0FHWmhpQixLQUFLNmhCLGFBQWE5a0IsU0FBUSxTQUFVc29CLEdBQU8sT0FBT0EsRUFBSWpILEVBQVVvQyxFQUFPeEgsVUFJckVsYixHQUFXQSxFQUFRa2xCLFFBRW5CN2YsUUFBUUMsS0FDTix5QkFBMkJxRyxFQUFPLHVGQWhCbEN0RyxRQUFRUSxNQUFPLGlDQUFtQzhGLElBc0J4RG1RLEVBQU01ZixVQUFVK25CLFNBQVcsU0FBbUJzQyxFQUFPQyxHQUNqRCxJQUFJOUQsRUFBU3hnQixLQUdYd1AsRUFBTWdWLEVBQWlCSCxFQUFPQyxHQUM1QjdhLEVBQU8rRixFQUFJL0YsS0FDWHVZLEVBQVV4UyxFQUFJd1MsUUFFaEIrQixFQUFTLENBQUV0YSxLQUFNQSxFQUFNdVksUUFBU0EsR0FDaEN4SyxFQUFReFgsS0FBS3VoQixTQUFTOVgsR0FDMUIsR0FBSytOLEVBU0wsT0FGQXhYLEtBQUt3aEIsbUJBQW1CemtCLFNBQVEsU0FBVXNvQixHQUFPLE9BQU9BLEVBQUl0QixFQUFRdkQsRUFBT3hILFVBRXBFeEIsRUFBTXBiLE9BQVMsRUFDbEJzQixRQUFRNG5CLElBQUk5TixFQUFNK04sS0FBSSxTQUFVN1gsR0FBVyxPQUFPQSxFQUFRc1UsT0FDMUR4SyxFQUFNLEdBQUd3SyxHQVRUN2UsUUFBUVEsTUFBTywrQkFBaUM4RixJQVl0RG1RLEVBQU01ZixVQUFVbWtCLFVBQVksU0FBb0IvakIsR0FDOUMsT0FBT21vQixFQUFpQm5vQixFQUFJNEYsS0FBSzZoQixlQUduQ2pJLEVBQU01ZixVQUFVd3JCLGdCQUFrQixTQUEwQnByQixHQUMxRCxPQUFPbW9CLEVBQWlCbm9CLEVBQUk0RixLQUFLd2hCLHFCQUduQzVILEVBQU01ZixVQUFVeXJCLE1BQVEsU0FBZ0J4QixFQUFRWSxFQUFJL21CLEdBQ2hELElBQUkwaUIsRUFBU3hnQixLQUtmLE9BRkV3ZSxFQUF5QixvQkFBWHlGLEVBQXVCLHdDQUVoQ2prQixLQUFLOGhCLFdBQVdrRCxRQUFPLFdBQWMsT0FBT2YsRUFBT3pELEVBQU94SCxNQUFPd0gsRUFBT3pELFdBQWE4SCxFQUFJL21CLElBR2xHOGIsRUFBTTVmLFVBQVVra0IsYUFBZSxTQUF1QmxGLEdBQ2xELElBQUl3SCxFQUFTeGdCLEtBRWZBLEtBQUttakIsYUFBWSxXQUNmM0MsRUFBT29DLElBQUlRLE1BQU1ILFFBQVVqSyxNQUkvQlksRUFBTTVmLFVBQVUwckIsZUFBaUIsU0FBeUIzRixFQUFNbkIsRUFBVzlnQixRQUN0RCxJQUFaQSxJQUFxQkEsRUFBVSxJQUVsQixrQkFBVGlpQixJQUFxQkEsRUFBTyxDQUFDQSxJQUd0Q3ZCLEVBQU96aUIsTUFBTUMsUUFBUStqQixHQUFPLDZDQUM1QnZCLEVBQU91QixFQUFLM2pCLE9BQVMsRUFBRyw0REFHMUI0RCxLQUFLMmhCLFNBQVM3QixTQUFTQyxFQUFNbkIsR0FDN0JxRCxFQUFjamlCLEtBQU1BLEtBQUtnWixNQUFPK0csRUFBTS9mLEtBQUsyaEIsU0FBU3hTLElBQUk0USxHQUFPamlCLEVBQVE2bkIsZUFFdkV6RCxFQUFhbGlCLEtBQU1BLEtBQUtnWixRQUcxQlksRUFBTTVmLFVBQVU0ckIsaUJBQW1CLFNBQTJCN0YsR0FDMUQsSUFBSVMsRUFBU3hnQixLQUVLLGtCQUFUK2YsSUFBcUJBLEVBQU8sQ0FBQ0EsSUFHdEN2QixFQUFPemlCLE1BQU1DLFFBQVErakIsR0FBTyw2Q0FHOUIvZixLQUFLMmhCLFNBQVNqQixXQUFXWCxHQUN6Qi9mLEtBQUttakIsYUFBWSxXQUNmLElBQUlLLEVBQWNDLEVBQWVqRCxFQUFPeEgsTUFBTytHLEVBQUsxaEIsTUFBTSxHQUFJLElBQzlEcUcsRUFBSW1oQixPQUFPckMsRUFBYXpELEVBQUtBLEVBQUszakIsT0FBUyxPQUU3Q3FtQixFQUFXemlCLE9BR2I0WixFQUFNNWYsVUFBVThyQixVQUFZLFNBQW9CQyxHQUM5Qy9sQixLQUFLMmhCLFNBQVNyQyxPQUFPeUcsR0FDckJ0RCxFQUFXemlCLE1BQU0sSUFHbkI0WixFQUFNNWYsVUFBVW1wQixZQUFjLFNBQXNCL29CLEdBQ2xELElBQUk0ckIsRUFBYWhtQixLQUFLc2hCLFlBQ3RCdGhCLEtBQUtzaEIsYUFBYyxFQUNuQmxuQixJQUNBNEYsS0FBS3NoQixZQUFjMEUsR0FHckJqc0IsT0FBTzRsQixpQkFBa0IvRixFQUFNNWYsVUFBV3NvQixHQTZSMUMsSUFBSTJELEVBQVdDLEdBQW1CLFNBQVUzRixFQUFXNEYsR0FDckQsSUFBSXRxQixFQUFNLEdBdUJWLE9BdEJBdXFCLEVBQWFELEdBQVFwcEIsU0FBUSxTQUFVeVMsR0FDckMsSUFBSTdVLEVBQU02VSxFQUFJN1UsSUFDVjRqQixFQUFNL08sRUFBSStPLElBRWQxaUIsRUFBSWxCLEdBQU8sV0FDVCxJQUFJcWUsRUFBUWhaLEtBQUtnTyxPQUFPZ0wsTUFDcEIrRCxFQUFVL2MsS0FBS2dPLE9BQU8rTyxRQUMxQixHQUFJd0QsRUFBVyxDQUNiLElBQUk3TixFQUFTMlQsRUFBcUJybUIsS0FBS2dPLE9BQVEsV0FBWXVTLEdBQzNELElBQUs3TixFQUNILE9BRUZzRyxFQUFRdEcsRUFBTzFLLFFBQVFnUixNQUN2QitELEVBQVVySyxFQUFPMUssUUFBUStVLFFBRTNCLE1BQXNCLG9CQUFSd0IsRUFDVkEsRUFBSTlqQixLQUFLdUYsS0FBTWdaLEVBQU8rRCxHQUN0Qi9ELEVBQU11RixJQUdaMWlCLEVBQUlsQixHQUFLMnJCLE1BQU8sS0FFWHpxQixLQUdMMHFCLEVBQWVMLEdBQW1CLFNBQVUzRixFQUFXdkYsR0FDekQsSUFBSW5mLEVBQU0sR0FzQlYsT0FyQkF1cUIsRUFBYXBMLEdBQVdqZSxTQUFRLFNBQVV5UyxHQUN4QyxJQUFJN1UsRUFBTTZVLEVBQUk3VSxJQUNWNGpCLEVBQU0vTyxFQUFJK08sSUFFZDFpQixFQUFJbEIsR0FBTyxXQUNULElBQUlnSCxFQUFPLEdBQUlPLEVBQU0yQyxVQUFVekksT0FDL0IsTUFBUThGLElBQVFQLEVBQU1PLEdBQVEyQyxVQUFXM0MsR0FFekMsSUFBSWliLEVBQVNuZCxLQUFLZ08sT0FBT21QLE9BQ3pCLEdBQUlvRCxFQUFXLENBQ2IsSUFBSTdOLEVBQVMyVCxFQUFxQnJtQixLQUFLZ08sT0FBUSxlQUFnQnVTLEdBQy9ELElBQUs3TixFQUNILE9BRUZ5SyxFQUFTekssRUFBTzFLLFFBQVFtVixPQUUxQixNQUFzQixvQkFBUm9CLEVBQ1ZBLEVBQUk3YSxNQUFNMUQsS0FBTSxDQUFDbWQsR0FBUXJoQixPQUFPNkYsSUFDaEN3YixFQUFPelosTUFBTTFELEtBQUtnTyxPQUFRLENBQUN1USxHQUFLemlCLE9BQU82RixRQUd4QzlGLEtBR0wycUIsRUFBYU4sR0FBbUIsU0FBVTNGLEVBQVd4RCxHQUN2RCxJQUFJbGhCLEVBQU0sR0FtQlYsT0FsQkF1cUIsRUFBYXJKLEdBQVNoZ0IsU0FBUSxTQUFVeVMsR0FDdEMsSUFBSTdVLEVBQU02VSxFQUFJN1UsSUFDVjRqQixFQUFNL08sRUFBSStPLElBRWRBLEVBQU1nQyxFQUFZaEMsRUFDbEIxaUIsRUFBSWxCLEdBQU8sV0FDVCxJQUFJNGxCLEdBQWM4RixFQUFxQnJtQixLQUFLZ08sT0FBUSxhQUFjdVMsR0FBbEUsQ0FHQSxHQUErQ2hDLEtBQU92ZSxLQUFLZ08sT0FBTytPLFFBSWxFLE9BQU8vYyxLQUFLZ08sT0FBTytPLFFBQVF3QixHQUh6QnBiLFFBQVFRLE1BQU8sMEJBQTRCNGEsS0FNL0MxaUIsRUFBSWxCLEdBQUsyckIsTUFBTyxLQUVYenFCLEtBR0w0cUIsRUFBYVAsR0FBbUIsU0FBVTNGLEVBQVd0RCxHQUN2RCxJQUFJcGhCLEVBQU0sR0FzQlYsT0FyQkF1cUIsRUFBYW5KLEdBQVNsZ0IsU0FBUSxTQUFVeVMsR0FDdEMsSUFBSTdVLEVBQU02VSxFQUFJN1UsSUFDVjRqQixFQUFNL08sRUFBSStPLElBRWQxaUIsRUFBSWxCLEdBQU8sV0FDVCxJQUFJZ0gsRUFBTyxHQUFJTyxFQUFNMkMsVUFBVXpJLE9BQy9CLE1BQVE4RixJQUFRUCxFQUFNTyxHQUFRMkMsVUFBVzNDLEdBRXpDLElBQUk2ZixFQUFXL2hCLEtBQUtnTyxPQUFPK1QsU0FDM0IsR0FBSXhCLEVBQVcsQ0FDYixJQUFJN04sRUFBUzJULEVBQXFCcm1CLEtBQUtnTyxPQUFRLGFBQWN1UyxHQUM3RCxJQUFLN04sRUFDSCxPQUVGcVAsRUFBV3JQLEVBQU8xSyxRQUFRK1osU0FFNUIsTUFBc0Isb0JBQVJ4RCxFQUNWQSxFQUFJN2EsTUFBTTFELEtBQU0sQ0FBQytoQixHQUFVam1CLE9BQU82RixJQUNsQ29nQixFQUFTcmUsTUFBTTFELEtBQUtnTyxPQUFRLENBQUN1USxHQUFLemlCLE9BQU82RixRQUcxQzlGLEtBR0w2cUIsRUFBMEIsU0FBVW5HLEdBQWEsTUFBTyxDQUMxRDBGLFNBQVVBLEVBQVNVLEtBQUssS0FBTXBHLEdBQzlCaUcsV0FBWUEsRUFBV0csS0FBSyxLQUFNcEcsR0FDbENnRyxhQUFjQSxFQUFhSSxLQUFLLEtBQU1wRyxHQUN0Q2tHLFdBQVlBLEVBQVdFLEtBQUssS0FBTXBHLEtBR3BDLFNBQVM2RixFQUFjYixHQUNyQixPQUFPeHBCLE1BQU1DLFFBQVF1cEIsR0FDakJBLEVBQUlBLEtBQUksU0FBVTVxQixHQUFPLE1BQU8sQ0FBR0EsSUFBS0EsRUFBSzRqQixJQUFLNWpCLE1BQ2xEWixPQUFPK0MsS0FBS3lvQixHQUFLQSxLQUFJLFNBQVU1cUIsR0FBTyxNQUFPLENBQUdBLElBQUtBLEVBQUs0akIsSUFBS2dILEVBQUk1cUIsT0FHekUsU0FBU3VyQixFQUFvQjlyQixHQUMzQixPQUFPLFNBQVVtbUIsRUFBV2dGLEdBTzFCLE1BTnlCLGtCQUFkaEYsR0FDVGdGLEVBQU1oRixFQUNOQSxFQUFZLElBQ3dDLE1BQTNDQSxFQUFValQsT0FBT2lULEVBQVVua0IsT0FBUyxLQUM3Q21rQixHQUFhLEtBRVJubUIsRUFBR21tQixFQUFXZ0YsSUFJekIsU0FBU2MsRUFBc0J0WSxFQUFPNlksRUFBUXJHLEdBQzVDLElBQUk3TixFQUFTM0UsRUFBTTZULHFCQUFxQnJCLEdBSXhDLE9BSDhDN04sR0FDNUN2UCxRQUFRUSxNQUFPLHdDQUEwQ2lqQixFQUFTLE9BQVNyRyxHQUV0RTdOLEVBR1QsSUFBSW1VLEVBQVksQ0FDZGpOLE1BQU9BLEVBQ1B1SCxRQUFTQSxFQUNUN0QsUUFBUyxRQUNUMkksU0FBVUEsRUFDVk0sYUFBY0EsRUFDZEMsV0FBWUEsRUFDWkMsV0FBWUEsRUFDWkMsd0JBQXlCQSxHQUlaLGdCOzs7O2dKQy81QkEsQ0FDZHJwQixLQURjLFdBRWIsTUFBTyxDQUNOeXBCLFNBQVMsRUFDVEMsS0FBTSxJQUdSakUsU0FBVSxDQUNUa0UsU0FEUyxXQUVSLDJCQUFxQmhuQixLQUFLK21CLEtBQTFCLFNBR0Z0QixNQUFPLENBQ04zVSxLQURNLFNBQ0RqSSxHQUNDN0ksS0FBS2luQixVQUE4QyxPQUFsQzVlLEtBQUtFLFVBQVV2SSxLQUFLaW5CLFlBQ3RDam5CLEtBQUtrbkIsWUFDTHJlLEdBQ0g3SSxLQUFLZ0YsTUFBTSxVQUFVLEdBQ3JCaEYsS0FBS21uQixTQUVMbm5CLEtBQUtnRixNQUFNLFVBQVUsR0FDckJoRixLQUFLb25CLGFBSVJDLFFBekJjLFdBeUJILElBQUQsT0FDVHJuQixLQUFLaW5CLFNBQVcsUUFDa0I3VCxJQUE5QnBULEtBQUtzbkIsWUFBWUMsVUFDcEJ2bkIsS0FBS3NuQixZQUFZQyxTQUFTanJCLEtBQUswRCxNQUVoQ29kLFlBQVcsV0FDVixFQUFLb0sscUJBQ0gsTUFFSkMsYUFsQ2MsV0FrQ0UsSUFBRCxPQUNkem5CLEtBQUtzbkIsWUFBWUMsU0FBU3hxQixTQUFRLFNBQUNxRixFQUFNM0YsR0FDcEMyRixJQUFTLEdBQ1osRUFBS2tsQixZQUFZQyxTQUFTN3FCLE9BQU9ELEVBQU8sT0FJM0N3TCxRQUFTLENBQ1J5ZixRQURRLFNBQ0FqckIsRUFBTzJGLEdBQ2RwQyxLQUFLZ0YsTUFBTSxRQUFTLENBQ25CMmlCLFFBQVN2bEIsRUFDVDNGLFVBRUR1RCxLQUFLb25CLFNBRU5RLFdBUlEsU0FRRzFmLEdBQUksSUFFYjJmLEVBQ0czZixFQUFFNGYsUUFBUSxHQURiRCxNQUVELElBQUk3bkIsS0FBSytuQixTQUFULENBQ0EsSUFBTWhCLEVBQU8vbUIsS0FBS2luQixTQUFTVSxRQUFRWixLQUMvQi9tQixLQUFLa25CLFdBQ1JsbkIsS0FBS3NuQixZQUFZVSxXQUFXaG9CLE1BRTdCQSxLQUFLaW9CLE1BQVFKLEVBQVFkLEVBQ2pCL21CLEtBQUtrb0IsUUFDTGxvQixLQUFLOG1CLFVBQ1I5bUIsS0FBSzhtQixTQUFVLEVBQ2Y5bUIsS0FBS2tvQixRQUFTLEVBQ2Rsb0IsS0FBS21vQixTQUFXbm9CLEtBQUsrbUIsS0FBTy9tQixLQUFLaW5CLFNBQVNtQixPQUFPSCxTQUduREksVUF6QlEsU0F5QkVuZ0IsRUFBR3pMLEdBQ1osSUFBSXVELEtBQUsrbkIsU0FBVCxDQURtQixJQUdsQkYsRUFDRzNmLEVBQUU0ZixRQUFRLEdBRGJELE1BRUQ3bkIsS0FBS3NvQixZQUFZVCxLQUVsQlUsU0FoQ1EsV0FpQ0h2b0IsS0FBSytuQixXQUNML25CLEtBQUtrb0IsT0FDUmxvQixLQUFLd29CLEtBQUt4b0IsS0FBS21vQixTQUFVLEdBRzFCbm9CLEtBQUt3b0IsS0FBS3hvQixLQUFLK21CLE1BQU8sTUFFdkJ1QixZQXhDUSxTQXdDSUcsRUFBR0MsR0FDVDFvQixLQUFLaW5CLFNBQVNtQixPQUFPSCxPQUkxQmpvQixLQUFLMm9CLFNBQVNGLEVBQUl6b0IsS0FBS2lvQixRQUV4QlUsU0EvQ1EsU0ErQ0N6b0IsR0FFUkYsS0FBSyttQixLQUFPM2xCLEtBQUt3bkIsS0FBSzVvQixLQUFLaW5CLFNBQVNtQixPQUFPSCxNQUFPN21CLEtBQUt5bkIsSUFBSS9tQixTQUFTNUIsR0FBUSxJQUM1RUYsS0FBS2luQixTQUFTVSxRQUFRWixLQUFPL21CLEtBQUsrbUIsS0FDOUIvbUIsS0FBS2tvQixTQUNSbG9CLEtBQUttb0IsU0FBV25vQixLQUFLK21CLEtBQU8vbUIsS0FBS2luQixTQUFTbUIsT0FBT0gsUUFHbkRPLEtBdkRRLFNBdURIekIsRUFBTTdtQixHQUNONm1CLEdBQVE3bUIsR0FDWEYsS0FBS2dGLE1BQU0sVUFBVSxHQUNyQmhGLEtBQUtvbkIsVUFFTHBuQixLQUFLZ0YsTUFBTSxVQUFVLEdBQ3JCaEYsS0FBS21uQixTQUdQQSxLQWhFUSxXQWlFUG5uQixLQUFLOG1CLFNBQVUsRUFDZjltQixLQUFLK21CLE1BQVEvbUIsS0FBS2luQixTQUFTbUIsT0FBT0gsTUFDbENqb0IsS0FBSzJvQixVQUFVM29CLEtBQUtpbkIsU0FBU21CLE9BQU9ILFFBRXJDYixNQXJFUSxXQXFFQyxJQUFELE9BQ1BwbkIsS0FBSzhtQixTQUFVLEVBQ2Y5bUIsS0FBSzJvQixTQUFTLEdBQ2R2TCxZQUFXLFdBQ1YsRUFBSzBKLFNBQVUsRUFDZixFQUFLb0IsUUFBUyxJQUNaLE1BRUpWLGlCQTdFUSxXQTZFWSxJQUFELE9BRVpzQixFQUFReFcsRUFBSXlXLHNCQUFzQkMsR0FBR2hwQixNQUMzQzhvQixFQUNFRyxVQUFVLHdCQUNWQyxvQkFBbUIsU0FBQTdyQixHQUNuQjhGLFFBQVFzWSxJQUFJcGUsR0FDWixFQUFLNHBCLFNBQVNVLFFBQVV0cUIsRUFBSyxHQUM3QixFQUFLNHBCLFNBQVNtQixPQUFTL3FCLEVBQUssR0FDeEIsRUFBSzZwQixZQUNMLEVBQUtwVyxLQUNSLEVBQUtxVyxPQUVMLEVBQUtDLFlBR04rQixVOzs7OzZEQ3pJTDs7Ozs7O0FBT0EsSUFBSUMsRUFBY3J2QixPQUFPeUgsT0FBTyxJQUloQyxTQUFTNm5CLEVBQVNqRSxHQUNoQixZQUFhaFMsSUFBTmdTLEdBQXlCLE9BQU5BLEVBRzVCLFNBQVNrRSxFQUFPbEUsR0FDZCxZQUFhaFMsSUFBTmdTLEdBQXlCLE9BQU5BLEVBRzVCLFNBQVNtRSxFQUFRbkUsR0FDZixPQUFhLElBQU5BLEVBR1QsU0FBU29FLEVBQVNwRSxHQUNoQixPQUFhLElBQU5BLEVBTVQsU0FBU3FFLEVBQWF2cEIsR0FDcEIsTUFDbUIsa0JBQVZBLEdBQ1Usa0JBQVZBLEdBRVUsa0JBQVZBLEdBQ1UsbUJBQVZBLEVBU1gsU0FBU29lLEVBQVU5akIsR0FDakIsT0FBZSxPQUFSQSxHQUErQixrQkFBUkEsRUFNaEMsSUFBSVYsRUFBWUMsT0FBT0MsVUFBVUMsU0FFakMsU0FBU3l2QixFQUFXeHBCLEdBQ2xCLE9BQU9wRyxFQUFVVyxLQUFLeUYsR0FBTzdCLE1BQU0sR0FBSSxHQU96QyxTQUFTOUQsRUFBZUMsR0FDdEIsTUFBK0Isb0JBQXhCVixFQUFVVyxLQUFLRCxHQUd4QixTQUFTbXZCLEVBQVV2RSxHQUNqQixNQUE2QixvQkFBdEJ0ckIsRUFBVVcsS0FBSzJxQixHQU14QixTQUFTd0UsRUFBbUJyTCxHQUMxQixJQUFJc0wsRUFBSUMsV0FBV3BoQixPQUFPNlYsSUFDMUIsT0FBT3NMLEdBQUssR0FBS3pvQixLQUFLQyxNQUFNd29CLEtBQU9BLEdBQUtFLFNBQVN4TCxHQUduRCxTQUFTamhCLEVBQVdpaEIsR0FDbEIsT0FDRStLLEVBQU0vSyxJQUNjLG9CQUFiQSxFQUFJaGhCLE1BQ1Usb0JBQWRnaEIsRUFBSTNmLE1BT2YsU0FBUzNFLEVBQVVza0IsR0FDakIsT0FBYyxNQUFQQSxFQUNILEdBQ0F4aUIsTUFBTUMsUUFBUXVpQixJQUFTaGtCLEVBQWNna0IsSUFBUUEsRUFBSXRrQixXQUFhSCxFQUM1RHVPLEtBQUtFLFVBQVVnVyxFQUFLLEtBQU0sR0FDMUI3VixPQUFPNlYsR0FPZixTQUFTeUwsRUFBVXpMLEdBQ2pCLElBQUlzTCxFQUFJQyxXQUFXdkwsR0FDbkIsT0FBT3ZjLE1BQU02bkIsR0FBS3RMLEVBQU1zTCxFQU8xQixTQUFTSSxFQUNQM3ZCLEVBQ0E0dkIsR0FJQSxJQUZBLElBQUkzRSxFQUFNeHJCLE9BQU9nQixPQUFPLE1BQ3BCMmhCLEVBQU9waUIsRUFBSXNOLE1BQU0sS0FDWnpMLEVBQUksRUFBR0EsRUFBSXVnQixFQUFLdGdCLE9BQVFELElBQy9Cb3BCLEVBQUk3SSxFQUFLdmdCLEtBQU0sRUFFakIsT0FBTyt0QixFQUNILFNBQVUzTCxHQUFPLE9BQU9nSCxFQUFJaEgsRUFBSTRMLGdCQUNoQyxTQUFVNUwsR0FBTyxPQUFPZ0gsRUFBSWhILElBTWxDLElBQUk2TCxFQUFlSCxFQUFRLGtCQUFrQixHQUt6Q0ksRUFBc0JKLEVBQVEsOEJBS2xDLFNBQVNLLEVBQVF2ZSxFQUFLM0osR0FDcEIsR0FBSTJKLEVBQUkzUCxPQUFRLENBQ2QsSUFBSUssRUFBUXNQLEVBQUkxUCxRQUFRK0YsR0FDeEIsR0FBSTNGLEdBQVMsRUFDWCxPQUFPc1AsRUFBSXJQLE9BQU9ELEVBQU8sSUFRL0IsSUFBSXZDLEVBQWlCSCxPQUFPQyxVQUFVRSxlQUN0QyxTQUFTUSxFQUFRRixFQUFLRyxHQUNwQixPQUFPVCxFQUFlTyxLQUFLRCxFQUFLRyxHQU1sQyxTQUFTRSxFQUFRVCxHQUNmLElBQUlVLEVBQVFmLE9BQU9nQixPQUFPLE1BQzFCLE9BQU8sU0FBb0JULEdBQ3pCLElBQUlVLEVBQU1GLEVBQU1SLEdBQ2hCLE9BQU9VLElBQVFGLEVBQU1SLEdBQU9GLEVBQUdFLEtBT25DLElBQUlXLEVBQWEsU0FDYkMsRUFBV0wsR0FBTyxTQUFVUCxHQUM5QixPQUFPQSxFQUFJYSxRQUFRRixHQUFZLFNBQVVHLEVBQUdDLEdBQUssT0FBT0EsRUFBSUEsRUFBRUMsY0FBZ0IsU0FNNUVpdkIsRUFBYTF2QixHQUFPLFNBQVVQLEdBQ2hDLE9BQU9BLEVBQUlnVCxPQUFPLEdBQUdoUyxjQUFnQmhCLEVBQUkrRCxNQUFNLE1BTTdDbXNCLEVBQWMsYUFDZEMsRUFBWTV2QixHQUFPLFNBQVVQLEdBQy9CLE9BQU9BLEVBQUlhLFFBQVFxdkIsRUFBYSxPQUFPTCxpQkFZekMsU0FBU08sRUFBY3R3QixFQUFJdUssR0FDekIsU0FBU2dtQixFQUFTQyxHQUNoQixJQUFJQyxFQUFJaG1CLFVBQVV6SSxPQUNsQixPQUFPeXVCLEVBQ0hBLEVBQUksRUFDRnp3QixFQUFHc0osTUFBTWlCLEVBQUtFLFdBQ2R6SyxFQUFHSyxLQUFLa0ssRUFBS2ltQixHQUNmeHdCLEVBQUdLLEtBQUtrSyxHQUlkLE9BREFnbUIsRUFBUUcsUUFBVTF3QixFQUFHZ0MsT0FDZHV1QixFQUdULFNBQVNJLEVBQVkzd0IsRUFBSXVLLEdBQ3ZCLE9BQU92SyxFQUFHdXNCLEtBQUtoaUIsR0FHakIsSUFBSWdpQixFQUFPNVQsU0FBUy9ZLFVBQVUyc0IsS0FDMUJvRSxFQUNBTCxFQUtKLFNBQVNNLEVBQVN0TyxFQUFNdU8sR0FDdEJBLEVBQVFBLEdBQVMsRUFDakIsSUFBSTl1QixFQUFJdWdCLEVBQUt0Z0IsT0FBUzZ1QixFQUNsQjFlLEVBQU0sSUFBSXhRLE1BQU1JLEdBQ3BCLE1BQU9BLElBQ0xvUSxFQUFJcFEsR0FBS3VnQixFQUFLdmdCLEVBQUk4dUIsR0FFcEIsT0FBTzFlLEVBTVQsU0FBU25GLEVBQVE4akIsRUFBSUMsR0FDbkIsSUFBSyxJQUFJeHdCLEtBQU93d0IsRUFDZEQsRUFBR3Z3QixHQUFPd3dCLEVBQU14d0IsR0FFbEIsT0FBT3V3QixFQU1ULFNBQVNFLEVBQVVyZixHQUVqQixJQURBLElBQUlsUSxFQUFNLEdBQ0RNLEVBQUksRUFBR0EsRUFBSTRQLEVBQUkzUCxPQUFRRCxJQUMxQjRQLEVBQUk1UCxJQUNOaUwsRUFBT3ZMLEVBQUtrUSxFQUFJNVAsSUFHcEIsT0FBT04sRUFVVCxTQUFTakIsRUFBTWd3QixFQUFHUyxFQUFHaHdCLElBS3JCLElBQUlpd0IsRUFBSyxTQUFVVixFQUFHUyxFQUFHaHdCLEdBQUssT0FBTyxHQU9qQ2t3QixFQUFXLFNBQVVud0IsR0FBSyxPQUFPQSxHQU1yQyxTQUFTb3dCLEVBQVlaLEVBQUdTLEdBQ3RCLEdBQUlULElBQU1TLEVBQUssT0FBTyxFQUN0QixJQUFJSSxFQUFZbk4sRUFBU3NNLEdBQ3JCYyxFQUFZcE4sRUFBUytNLEdBQ3pCLElBQUlJLElBQWFDLEVBd0JWLE9BQUtELElBQWNDLEdBQ2pCaGpCLE9BQU9raUIsS0FBT2xpQixPQUFPMmlCLEdBeEI1QixJQUNFLElBQUlNLEVBQVc1dkIsTUFBTUMsUUFBUTR1QixHQUN6QmdCLEVBQVc3dkIsTUFBTUMsUUFBUXF2QixHQUM3QixHQUFJTSxHQUFZQyxFQUNkLE9BQU9oQixFQUFFeHVCLFNBQVdpdkIsRUFBRWp2QixRQUFVd3VCLEVBQUVpQixPQUFNLFNBQVUzakIsRUFBRy9MLEdBQ25ELE9BQU9xdkIsRUFBV3RqQixFQUFHbWpCLEVBQUVsdkIsT0FFcEIsR0FBSXl1QixhQUFhbGhCLE1BQVEyaEIsYUFBYTNoQixLQUMzQyxPQUFPa2hCLEVBQUVrQixZQUFjVCxFQUFFUyxVQUNwQixHQUFLSCxHQUFhQyxFQVF2QixPQUFPLEVBUFAsSUFBSUcsRUFBUWh5QixPQUFPK0MsS0FBSzh0QixHQUNwQm9CLEVBQVFqeUIsT0FBTytDLEtBQUt1dUIsR0FDeEIsT0FBT1UsRUFBTTN2QixTQUFXNHZCLEVBQU01dkIsUUFBVTJ2QixFQUFNRixPQUFNLFNBQVVseEIsR0FDNUQsT0FBTzZ3QixFQUFXWixFQUFFandCLEdBQU0wd0IsRUFBRTF3QixPQU1oQyxNQUFPdU4sR0FFUCxPQUFPLEdBY2IsU0FBUytqQixFQUFjbGdCLEVBQUt3UyxHQUMxQixJQUFLLElBQUlwaUIsRUFBSSxFQUFHQSxFQUFJNFAsRUFBSTNQLE9BQVFELElBQzlCLEdBQUlxdkIsRUFBV3pmLEVBQUk1UCxHQUFJb2lCLEdBQVEsT0FBT3BpQixFQUV4QyxPQUFRLEVBTVYsU0FBU3lSLEVBQU14VCxHQUNiLElBQUk4eEIsR0FBUyxFQUNiLE9BQU8sV0FDQUEsSUFDSEEsR0FBUyxFQUNUOXhCLEVBQUdzSixNQUFNMUQsS0FBTTZFLGFBS3JCLElBQUlzbkIsRUFBYyxDQUNoQixZQUNBLFlBQ0EsVUFHRUMsRUFBa0IsQ0FDcEIsZUFDQSxVQUNBLGNBQ0EsVUFDQSxlQUNBLFVBQ0EsZ0JBQ0EsWUFDQSxZQUNBLGNBQ0EsZ0JBQ0Esa0JBT0VoSyxFQUFTLENBS1hpSyxzQkFBdUJ0eUIsT0FBT2dCLE9BQU8sTUFLckNpb0IsUUFBUSxFQUtSc0osZUFBZSxFQUtmakssVUFBVSxFQUtWa0ssYUFBYSxFQUtiQyxhQUFjLEtBS2RDLFlBQWEsS0FLYkMsZ0JBQWlCLEdBTWpCQyxTQUFVNXlCLE9BQU9nQixPQUFPLE1BTXhCNnhCLGNBQWV0QixFQU1mdUIsZUFBZ0J2QixFQU1oQndCLGlCQUFrQnhCLEVBS2xCeUIsZ0JBQWlCbnlCLEVBS2pCb3lCLHFCQUFzQnpCLEVBTXRCMEIsWUFBYTNCLEVBTWI1VixPQUFPLEVBS1B3WCxnQkFBaUJkLEdBVWZlLEVBQWdCLDhKQUtwQixTQUFTQyxFQUFZOXlCLEdBQ25CLElBQUllLEdBQUtmLEVBQU0sSUFBSSt5QixXQUFXLEdBQzlCLE9BQWEsS0FBTmh5QixHQUFvQixLQUFOQSxFQU12QixTQUFTaXlCLEVBQUs5eUIsRUFBS0csRUFBSzRqQixFQUFLd0UsR0FDM0JocEIsT0FBT21WLGVBQWUxVSxFQUFLRyxFQUFLLENBQzlCdUYsTUFBT3FlLEVBQ1B3RSxhQUFjQSxFQUNkd0ssVUFBVSxFQUNWck8sY0FBYyxJQU9sQixJQUFJc08sRUFBUyxJQUFJQyxPQUFRLEtBQVFOLEVBQW9CLE9BQUksV0FDekQsU0FBU08sRUFBVzNOLEdBQ2xCLElBQUl5TixFQUFPcnVCLEtBQUs0Z0IsR0FBaEIsQ0FHQSxJQUFJNE4sRUFBVzVOLEVBQUtuWSxNQUFNLEtBQzFCLE9BQU8sU0FBVXBOLEdBQ2YsSUFBSyxJQUFJMkIsRUFBSSxFQUFHQSxFQUFJd3hCLEVBQVN2eEIsT0FBUUQsSUFBSyxDQUN4QyxJQUFLM0IsRUFBTyxPQUNaQSxFQUFNQSxFQUFJbXpCLEVBQVN4eEIsSUFFckIsT0FBTzNCLElBT1gsSUErQklvekIsRUEvQkFDLEVBQVcsYUFBZSxHQUcxQkMsRUFBOEIscUJBQVhuUSxPQUNuQm9RLEVBQWtDLHFCQUFsQkMsaUJBQW1DQSxjQUFjcHRCLFNBQ2pFcXRCLEVBQWVGLEdBQVVDLGNBQWNwdEIsU0FBU3VwQixjQUNoRCtELEdBQUtKLEdBQWFuUSxPQUFPd1EsVUFBVUMsVUFBVWpFLGNBQzdDa0UsR0FBT0gsSUFBTSxlQUFlL3VCLEtBQUsrdUIsSUFFakNJLElBRFFKLElBQU1BLEdBQUc3eEIsUUFBUSxZQUNoQjZ4QixJQUFNQSxHQUFHN3hCLFFBQVEsU0FBVyxHQUVyQ2lFLElBRGE0dEIsSUFBTUEsR0FBRzd4QixRQUFRLFdBQ3JCNnhCLElBQU0sdUJBQXVCL3VCLEtBQUsrdUIsS0FBMEIsUUFBakJELEdBTXBETSxJQUxXTCxJQUFNLGNBQWMvdUIsS0FBSyt1QixJQUN0QkEsSUFBTSxZQUFZL3VCLEtBQUsrdUIsSUFDOUJBLElBQU1BLEdBQUdNLE1BQU0sa0JBR1IsR0FBSy9JLE9BQ3ZCLEdBQUlxSSxFQUNGLElBQ0UsSUFBSXhqQixHQUFPLEdBQ1h2USxPQUFPbVYsZUFBZTVFLEdBQU0sVUFBVyxDQUNyQzZFLElBQUssZUFHUHdPLE9BQU84USxpQkFBaUIsZUFBZ0IsS0FBTW5rQixJQUM5QyxNQUFPcEMsS0FNWCxJQUFJd21CLEdBQW9CLFdBV3RCLFlBVmtCdGIsSUFBZHdhLElBT0FBLEdBTEdFLElBQWNDLEdBQTRCLHFCQUFYMWEsSUFHdEJBLEVBQU8sWUFBZ0QsV0FBbENBLEVBQU8sV0FBV3NiLElBQUlDLFVBS3BEaEIsR0FJTHZMLEdBQVd5TCxHQUFhblEsT0FBT0MsNkJBR25DLFNBQVNpUixHQUFVQyxHQUNqQixNQUF1QixvQkFBVEEsR0FBdUIsY0FBYzN2QixLQUFLMnZCLEVBQUs3MEIsWUFHL0QsSUFJSTgwQixHQUpBQyxHQUNnQixxQkFBWHhiLFFBQTBCcWIsR0FBU3JiLFNBQ3ZCLHFCQUFaeWIsU0FBMkJKLEdBQVNJLFFBQVFDLFNBTW5ESCxHQUZpQixxQkFBUkksS0FBdUJOLEdBQVNNLEtBRWxDQSxJQUdjLFdBQ25CLFNBQVNBLElBQ1BudkIsS0FBS3dTLElBQU16WSxPQUFPZ0IsT0FBTyxNQVkzQixPQVZBbzBCLEVBQUluMUIsVUFBVW8xQixJQUFNLFNBQWN6MEIsR0FDaEMsT0FBeUIsSUFBbEJxRixLQUFLd1MsSUFBSTdYLElBRWxCdzBCLEVBQUluMUIsVUFBVXExQixJQUFNLFNBQWMxMEIsR0FDaENxRixLQUFLd1MsSUFBSTdYLElBQU8sR0FFbEJ3MEIsRUFBSW4xQixVQUFVczFCLE1BQVEsV0FDcEJ0dkIsS0FBS3dTLElBQU16WSxPQUFPZ0IsT0FBTyxPQUdwQm8wQixFQWRXLEdBb0J0QixJQUFJL3JCLEdBQU94SSxFQUNQMjBCLEdBQU0zMEIsRUFDTjQwQixHQUF5QixFQUN6QkMsR0FBc0IsRUFHcEJDLEdBQWdDLHFCQUFadnNCLFFBQ3BCd3NCLEdBQWEsa0JBQ2JDLEdBQVcsU0FBVXQxQixHQUFPLE9BQU9BLEVBQ3BDYSxRQUFRdzBCLElBQVksU0FBVXQwQixHQUFLLE9BQU9BLEVBQUVDLGlCQUM1Q0gsUUFBUSxRQUFTLEtBRXBCaUksR0FBTyxTQUFVc2IsRUFBS3pZLEdBQ3BCLElBQUk0cEIsRUFBUTVwQixFQUFLdXBCLEdBQXVCdnBCLEdBQU0sR0FFMUNtYyxFQUFPcUssWUFDVHJLLEVBQU9xSyxZQUFZaHlCLEtBQUssS0FBTWlrQixFQUFLelksRUFBSTRwQixHQUM5QkgsS0FBZ0J0TixFQUFPWSxRQUNoQzdmLFFBQVFRLE1BQU8sZUFBaUIrYSxFQUFNbVIsSUFJMUNOLEdBQU0sU0FBVTdRLEVBQUt6WSxHQUNmeXBCLEtBQWdCdE4sRUFBT1ksUUFDekI3ZixRQUFRQyxLQUFLLGNBQWdCc2IsR0FDM0J6WSxFQUFLdXBCLEdBQXVCdnBCLEdBQU0sTUFLeEN3cEIsR0FBc0IsU0FBVXhwQixFQUFJNnBCLEdBQ2xDLEdBQUk3cEIsRUFBRzhwQixRQUFVOXBCLEVBQ2YsT0FBSUEsRUFBRytHLFVBQVkvRyxFQUFHK0csU0FBU3FELE9BQ3RCLEdBQU9wSyxFQUFHK0csU0FBU3FELE9BRXJCLFNBRVQsSUFBSXZTLEVBQXdCLG9CQUFQbUksR0FBK0IsTUFBVkEsRUFBRytwQixJQUN6Qy9wQixFQUFHbkksUUFDSG1JLEVBQUdncUIsT0FDRGhxQixFQUFHK0csVUFBWS9HLEVBQUdoRyxZQUFZbkMsUUFDOUJtSSxFQUNGbEksRUFBT0QsRUFBUUMsTUFBUUQsRUFBUW95QixjQUMvQmxtQixFQUFPbE0sRUFBUXVTLE9BQ25CLElBQUt0UyxHQUFRaU0sRUFBTSxDQUNqQixJQUFJd2tCLEVBQVF4a0IsRUFBS3drQixNQUFNLG1CQUN2Qnp3QixFQUFPeXdCLEdBQVNBLEVBQU0sR0FHeEIsT0FDR3p3QixFQUFRLElBQU82eEIsR0FBUzd4QixHQUFTLElBQU8sZ0JBQ3hDaU0sSUFBd0IsSUFBaEI4bEIsRUFBeUIsT0FBUzlsQixFQUFRLEtBSXZELElBQUltbUIsR0FBUyxTQUFVNzFCLEVBQUt1dkIsR0FDMUIsSUFBSWh1QixFQUFNLEdBQ1YsTUFBT2d1QixFQUNEQSxFQUFJLElBQU0sSUFBS2h1QixHQUFPdkIsR0FDdEJ1dkIsRUFBSSxJQUFLdnZCLEdBQU9BLEdBQ3BCdXZCLElBQU0sRUFFUixPQUFPaHVCLEdBR1QyekIsR0FBeUIsU0FBVXZwQixHQUNqQyxHQUFJQSxFQUFHZ3FCLFFBQVVocUIsRUFBRzhHLFFBQVMsQ0FDM0IsSUFBSXFqQixFQUFPLEdBQ1BDLEVBQTJCLEVBQy9CLE1BQU9wcUIsR0FBMkIsYUFBckJBLEVBQUcrRyxTQUFTalAsS0FBcUIsQ0FDNUMsR0FBSXF5QixFQUFLaDBCLE9BQVMsRUFBRyxDQUNuQixJQUFJazBCLEVBQU9GLEVBQUtBLEVBQUtoMEIsT0FBUyxHQUM5QixHQUFJazBCLEVBQUtyd0IsY0FBZ0JnRyxFQUFHaEcsWUFBYSxDQUN2Q293QixJQUNBcHFCLEVBQUtBLEVBQUc4RyxRQUNSLFNBQ1NzakIsRUFBMkIsSUFDcENELEVBQUtBLEVBQUtoMEIsT0FBUyxHQUFLLENBQUNrMEIsRUFBTUQsR0FDL0JBLEVBQTJCLElBRzlCcHFCLEVBQUcrRyxTQUFTb2dCLFlBQWNnRCxFQUFLOXpCLEtBQUsySixHQUNyQ0EsRUFBS0EsRUFBRzhHLFFBRVYsTUFBTyxtQkFBcUJxakIsRUFDekI3SyxLQUFJLFNBQVV0ZixFQUFJOUosR0FBSyxNQUFRLElBQVksSUFBTkEsRUFBVSxXQUFVZzBCLEdBQU8sSUFBSyxFQUFRLEVBQUpoMEIsS0FBV0osTUFBTUMsUUFBUWlLLEdBQzNGd3BCLEdBQW9CeHBCLEVBQUcsSUFBTyxRQUFXQSxFQUFHLEdBQU0sb0JBQ3BEd3BCLEdBQW9CeHBCLE9BQ3pCaWIsS0FBSyxNQUVSLE1BQVEsaUJBQW9CdU8sR0FBb0J4cEIsR0FBTyxLQU83RCxJQUFJc3FCLEdBQU0sRUFNTkMsR0FBTSxXQUNSeHdCLEtBQUt5d0IsR0FBS0YsS0FDVnZ3QixLQUFLd2lCLEtBQU8sSUF3Q2QsU0FBU2tPLEdBQVkvbEIsR0FDbkI2bEIsR0FBSUcsYUFBYUMsWUFBWXQwQixLQUFLcU8sR0FDbEM2bEIsR0FBSUcsYUFBYWhtQixPQUFTQSxFQUc1QixTQUFTa21CLEtBQ1BMLEdBQUlHLGFBQWFDLFlBQVl6YSxNQUM3QnFhLEdBQUlHLGFBQWFobUIsT0FBUzZsQixHQUFJRyxhQUFhQyxZQUFZSixHQUFJRyxhQUFhQyxZQUFZeDBCLE9BQVMsR0E1Qy9GbzBCLEdBQUl4MkIsVUFBVTgyQixPQUFTLFNBQWlCekwsR0FDdENybEIsS0FBS3dpQixLQUFLbG1CLEtBQUsrb0IsSUFHakJtTCxHQUFJeDJCLFVBQVUrMkIsVUFBWSxTQUFvQjFMLEdBQzVDaUYsRUFBT3RxQixLQUFLd2lCLEtBQU02QyxJQUdwQm1MLEdBQUl4MkIsVUFBVWczQixPQUFTLFdBQ2pCUixHQUFJRyxhQUFhaG1CLFFBQ25CNmxCLEdBQUlHLGFBQWFobUIsT0FBT3NtQixPQUFPanhCLE9BSW5Dd3dCLEdBQUl4MkIsVUFBVWszQixPQUFTLFdBRXJCLElBQUkxTyxFQUFPeGlCLEtBQUt3aUIsS0FBS25rQixRQUN5QitqQixFQUFPMU0sT0FJbkQ4TSxFQUFLMk8sTUFBSyxTQUFVdkcsRUFBR1MsR0FBSyxPQUFPVCxFQUFFNkYsR0FBS3BGLEVBQUVvRixNQUU5QyxJQUFLLElBQUl0MEIsRUFBSSxFQUFHMHVCLEVBQUlySSxFQUFLcG1CLE9BQVFELEVBQUkwdUIsRUFBRzF1QixJQUN0Q3FtQixFQUFLcm1CLEdBQUdtakIsVUFTWmtSLEdBQUlHLGFBQWUsR0FDbkJILEdBQUlHLGFBQWFobUIsT0FBUyxLQUMxQjZsQixHQUFJRyxhQUFhQyxZQUFjLEdBYy9CLElBQUlRLEdBQVEsU0FDVkMsRUFDQWgwQixFQUNBa3FCLEVBQ0ErSixFQUNBQyxFQUNBdnBCLEVBQ0FvSSxFQUNBb2hCLEdBRUF4eEIsS0FBS3F4QixJQUFNQSxFQUNYcnhCLEtBQUszQyxLQUFPQSxFQUNaMkMsS0FBS3VuQixTQUFXQSxFQUNoQnZuQixLQUFLc3hCLEtBQU9BLEVBQ1p0eEIsS0FBS3V4QixJQUFNQSxFQUNYdnhCLEtBQUt5eEIsUUFBS3JlLEVBQ1ZwVCxLQUFLZ0ksUUFBVUEsRUFDZmhJLEtBQUsweEIsZUFBWXRlLEVBQ2pCcFQsS0FBSzJ4QixlQUFZdmUsRUFDakJwVCxLQUFLNHhCLGVBQVl4ZSxFQUNqQnBULEtBQUtyRixJQUFNMEMsR0FBUUEsRUFBSzFDLElBQ3hCcUYsS0FBS29RLGlCQUFtQkEsRUFDeEJwUSxLQUFLNnhCLHVCQUFvQnplLEVBQ3pCcFQsS0FBSzJQLFlBQVN5RCxFQUNkcFQsS0FBSzh4QixLQUFNLEVBQ1g5eEIsS0FBSyt4QixVQUFXLEVBQ2hCL3hCLEtBQUtneUIsY0FBZSxFQUNwQmh5QixLQUFLaXlCLFdBQVksRUFDakJqeUIsS0FBS2t5QixVQUFXLEVBQ2hCbHlCLEtBQUt1TixRQUFTLEVBQ2R2TixLQUFLd3hCLGFBQWVBLEVBQ3BCeHhCLEtBQUtteUIsZUFBWS9lLEVBQ2pCcFQsS0FBS295QixvQkFBcUIsR0FHeEI5UCxHQUFxQixDQUFFNkIsTUFBTyxDQUFFakYsY0FBYyxJQUlsRG9ELEdBQW1CNkIsTUFBTWhWLElBQU0sV0FDN0IsT0FBT25QLEtBQUs2eEIsbUJBR2Q5M0IsT0FBTzRsQixpQkFBa0J5UixHQUFNcDNCLFVBQVdzb0IsSUFFMUMsSUFBSStQLEdBQW1CLFNBQVVmLFFBQ2pCLElBQVRBLElBQWtCQSxFQUFPLElBRTlCLElBQUlnQixFQUFPLElBQUlsQixHQUdmLE9BRkFrQixFQUFLaEIsS0FBT0EsRUFDWmdCLEVBQUtMLFdBQVksRUFDVkssR0FHVCxTQUFTQyxHQUFpQmhVLEdBQ3hCLE9BQU8sSUFBSTZTLFFBQU1oZSxPQUFXQSxPQUFXQSxFQUFXMUssT0FBTzZWLElBTzNELFNBQVNpVSxHQUFZQyxHQUNuQixJQUFJQyxFQUFTLElBQUl0QixHQUNmcUIsRUFBTXBCLElBQ05vQixFQUFNcDFCLEtBSU5vMUIsRUFBTWxMLFVBQVlrTCxFQUFNbEwsU0FBU2xwQixRQUNqQ28wQixFQUFNbkIsS0FDTm1CLEVBQU1sQixJQUNOa0IsRUFBTXpxQixRQUNOeXFCLEVBQU1yaUIsaUJBQ05xaUIsRUFBTWpCLGNBV1IsT0FUQWtCLEVBQU9qQixHQUFLZ0IsRUFBTWhCLEdBQ2xCaUIsRUFBT1gsU0FBV1UsRUFBTVYsU0FDeEJXLEVBQU8vM0IsSUFBTTgzQixFQUFNOTNCLElBQ25CKzNCLEVBQU9ULFVBQVlRLEVBQU1SLFVBQ3pCUyxFQUFPaEIsVUFBWWUsRUFBTWYsVUFDekJnQixFQUFPZixVQUFZYyxFQUFNZCxVQUN6QmUsRUFBT2QsVUFBWWEsRUFBTWIsVUFDekJjLEVBQU9QLFVBQVlNLEVBQU1OLFVBQ3pCTyxFQUFPUixVQUFXLEVBQ1hRLEVBUVQsSUFBSUMsR0FBYTUyQixNQUFNL0IsVUFDbkI0NEIsR0FBZTc0QixPQUFPZ0IsT0FBTzQzQixJQUU3QkUsR0FBaUIsQ0FDbkIsT0FDQSxNQUNBLFFBQ0EsVUFDQSxTQUNBLE9BQ0EsV0FNRkEsR0FBZTkxQixTQUFRLFNBQVVHLEdBRS9CLElBQUk0MUIsRUFBV0gsR0FBV3oxQixHQUMxQm93QixFQUFJc0YsR0FBYzExQixHQUFRLFdBQ3hCLElBQUl5RSxFQUFPLEdBQUlPLEVBQU0yQyxVQUFVekksT0FDL0IsTUFBUThGLElBQVFQLEVBQU1PLEdBQVEyQyxVQUFXM0MsR0FFekMsSUFFSTZ3QixFQUZBNXhCLEVBQVMyeEIsRUFBU3B2QixNQUFNMUQsS0FBTTJCLEdBQzlCcXhCLEVBQUtoekIsS0FBS2l6QixPQUVkLE9BQVEvMUIsR0FDTixJQUFLLE9BQ0wsSUFBSyxVQUNINjFCLEVBQVdweEIsRUFDWCxNQUNGLElBQUssU0FDSG94QixFQUFXcHhCLEVBQUt0RCxNQUFNLEdBQ3RCLE1BS0osT0FISTAwQixHQUFZQyxFQUFHRSxhQUFhSCxHQUVoQ0MsRUFBR0csSUFBSWpDLFNBQ0EvdkIsUUFNWCxJQUFJaXlCLEdBQVlyNUIsT0FBT21aLG9CQUFvQjBmLElBTXZDUyxJQUFnQixFQUVwQixTQUFTQyxHQUFpQnB6QixHQUN4Qm16QixHQUFnQm56QixFQVNsQixJQUFJcXpCLEdBQVcsU0FBbUJyekIsR0FDaENGLEtBQUtFLE1BQVFBLEVBQ2JGLEtBQUttekIsSUFBTSxJQUFJM0MsR0FDZnh3QixLQUFLd3pCLFFBQVUsRUFDZmxHLEVBQUlwdEIsRUFBTyxTQUFVRixNQUNqQmpFLE1BQU1DLFFBQVFrRSxJQUNaMnRCLEVBRUczdEIsRUFBTTVELE9BQVM0RCxFQUFNdUIsVUFBVW5GLEtBQ2hDbTNCLEdBQVl2ekIsRUFBTzB5QixHQUFjUSxJQUVqQ00sR0FBYXh6QixFQUFPMHlCLElBSXhCYSxHQUFZdnpCLEVBQU8weUIsR0FBY1EsSUFFbkNwekIsS0FBS2t6QixhQUFhaHpCLElBRWxCRixLQUFLMnpCLEtBQUt6ekIsSUErQmQsU0FBU3d6QixHQUFjL29CLEVBQVFpcEIsR0FFN0JqcEIsRUFBT2xKLFVBQVlteUIsRUFTckIsU0FBU0gsR0FBYTlvQixFQUFRaXBCLEVBQUs5MkIsR0FDakMsSUFBSyxJQUFJWCxFQUFJLEVBQUcwdUIsRUFBSS90QixFQUFLVixPQUFRRCxFQUFJMHVCLEVBQUcxdUIsSUFBSyxDQUMzQyxJQUFJeEIsRUFBTW1DLEVBQUtYLEdBQ2ZteEIsRUFBSTNpQixFQUFRaFEsRUFBS2k1QixFQUFJajVCLEtBU3pCLFNBQVNrNUIsR0FBUzN6QixFQUFPNHpCLEdBSXZCLElBQUlkLEVBSEosR0FBSzFVLEVBQVNwZSxNQUFVQSxhQUFpQmt4QixJQWtCekMsT0FkSTEyQixFQUFPd0YsRUFBTyxXQUFhQSxFQUFNK3lCLGtCQUFrQk0sR0FDckRQLEVBQUs5eUIsRUFBTSt5QixPQUVYSSxLQUNDM0UsT0FDQTN5QixNQUFNQyxRQUFRa0UsSUFBVTNGLEVBQWMyRixLQUN2Q25HLE9BQU9nNkIsYUFBYTd6QixLQUNuQkEsRUFBTSt2QixTQUVQK0MsRUFBSyxJQUFJTyxHQUFTcnpCLElBRWhCNHpCLEdBQWNkLEdBQ2hCQSxFQUFHUSxVQUVFUixFQU1ULFNBQVNnQixHQUNQeDVCLEVBQ0FHLEVBQ0E0akIsRUFDQTBWLEVBQ0FDLEdBRUEsSUFBSWYsRUFBTSxJQUFJM0MsR0FFVjJELEVBQVdwNkIsT0FBT3E2Qix5QkFBeUI1NUIsRUFBS0csR0FDcEQsSUFBSXc1QixJQUFzQyxJQUExQkEsRUFBU2pWLGFBQXpCLENBS0EsSUFBSStFLEVBQVNrUSxHQUFZQSxFQUFTaGxCLElBQzlCa2xCLEVBQVNGLEdBQVlBLEVBQVMzaEIsSUFDNUJ5UixJQUFVb1EsR0FBZ0MsSUFBckJ4dkIsVUFBVXpJLFNBQ25DbWlCLEVBQU0vakIsRUFBSUcsSUFHWixJQUFJMjVCLEdBQVdKLEdBQVdMLEdBQVF0VixHQUNsQ3hrQixPQUFPbVYsZUFBZTFVLEVBQUtHLEVBQUssQ0FDOUJvb0IsWUFBWSxFQUNaN0QsY0FBYyxFQUNkL1AsSUFBSyxXQUNILElBQUlqUCxFQUFRK2pCLEVBQVNBLEVBQU94cEIsS0FBS0QsR0FBTytqQixFQVV4QyxPQVRJaVMsR0FBSUcsYUFBYWhtQixTQUNuQndvQixFQUFJbkMsU0FDQXNELElBQ0ZBLEVBQVFuQixJQUFJbkMsU0FDUmoxQixNQUFNQyxRQUFRa0UsSUFDaEJxMEIsR0FBWXIwQixLQUlYQSxHQUVUc1MsSUFBSyxTQUF5QjNKLEdBQzVCLElBQUkzSSxFQUFRK2pCLEVBQVNBLEVBQU94cEIsS0FBS0QsR0FBTytqQixFQUVwQzFWLElBQVczSSxHQUFVMkksSUFBV0EsR0FBVTNJLElBQVVBLElBSVgrekIsR0FDM0NBLElBR0VoUSxJQUFXb1EsSUFDWEEsRUFDRkEsRUFBTzU1QixLQUFLRCxFQUFLcU8sR0FFakIwVixFQUFNMVYsRUFFUnlyQixHQUFXSixHQUFXTCxHQUFRaHJCLEdBQzlCc3FCLEVBQUlqQyxlQVVWLFNBQVMxZSxHQUFLN0gsRUFBUWhRLEVBQUs0akIsR0FNekIsSUFKRzhLLEVBQVExZSxJQUFXOGUsRUFBWTllLEtBRWhDdkgsR0FBTSx3RUFBMEUsR0FFOUVySCxNQUFNQyxRQUFRMk8sSUFBV2lmLEVBQWtCanZCLEdBRzdDLE9BRkFnUSxFQUFPdk8sT0FBU2dGLEtBQUt3bkIsSUFBSWplLEVBQU92TyxPQUFRekIsR0FDeENnUSxFQUFPak8sT0FBTy9CLEVBQUssRUFBRzRqQixHQUNmQSxFQUVULEdBQUk1akIsS0FBT2dRLEtBQVloUSxLQUFPWixPQUFPQyxXQUVuQyxPQURBMlEsRUFBT2hRLEdBQU80akIsRUFDUEEsRUFFVCxJQUFJeVUsRUFBSyxFQUFTQyxPQUNsQixPQUFJdG9CLEVBQU9zbEIsUUFBVytDLEdBQU1BLEVBQUdRLFNBQ1lwd0IsR0FDdkMsNEhBR0ttYixHQUVKeVUsR0FJTGdCLEdBQWtCaEIsRUFBRzl5QixNQUFPdkYsRUFBSzRqQixHQUNqQ3lVLEVBQUdHLElBQUlqQyxTQUNBM1MsSUFMTDVULEVBQU9oUSxHQUFPNGpCLEVBQ1BBLEdBVVgsU0FBU2lXLEdBQUs3cEIsRUFBUWhRLEdBTXBCLElBSkcwdUIsRUFBUTFlLElBQVc4ZSxFQUFZOWUsS0FFaEN2SCxHQUFNLDJFQUE2RSxHQUVqRnJILE1BQU1DLFFBQVEyTyxJQUFXaWYsRUFBa0JqdkIsR0FDN0NnUSxFQUFPak8sT0FBTy9CLEVBQUssT0FEckIsQ0FJQSxJQUFJcTRCLEVBQUssRUFBU0MsT0FDZHRvQixFQUFPc2xCLFFBQVcrQyxHQUFNQSxFQUFHUSxRQUNZcHdCLEdBQ3ZDLHdGQUtDMUksRUFBT2lRLEVBQVFoUSxZQUdiZ1EsRUFBT2hRLEdBQ1RxNEIsR0FHTEEsRUFBR0csSUFBSWpDLFdBT1QsU0FBU3FELEdBQWFyMEIsR0FDcEIsSUFBSyxJQUFJZ0ksT0FBSSxFQUFVL0wsRUFBSSxFQUFHMHVCLEVBQUkzcUIsRUFBTTlELE9BQVFELEVBQUkwdUIsRUFBRzF1QixJQUNyRCtMLEVBQUloSSxFQUFNL0QsR0FDVitMLEdBQUtBLEVBQUUrcUIsUUFBVS9xQixFQUFFK3FCLE9BQU9FLElBQUluQyxTQUMxQmoxQixNQUFNQyxRQUFRa00sSUFDaEJxc0IsR0FBWXJzQixHQWhObEJxckIsR0FBU3Y1QixVQUFVMjVCLEtBQU8sU0FBZW41QixHQUV2QyxJQURBLElBQUlzQyxFQUFPL0MsT0FBTytDLEtBQUt0QyxHQUNkMkIsRUFBSSxFQUFHQSxFQUFJVyxFQUFLVixPQUFRRCxJQUMvQjYzQixHQUFrQng1QixFQUFLc0MsRUFBS1gsS0FPaENvM0IsR0FBU3Y1QixVQUFVazVCLGFBQWUsU0FBdUJ1QixHQUN2RCxJQUFLLElBQUl0NEIsRUFBSSxFQUFHMHVCLEVBQUk0SixFQUFNcjRCLE9BQVFELEVBQUkwdUIsRUFBRzF1QixJQUN2QzAzQixHQUFRWSxFQUFNdDRCLEtBZ05sQixJQUFJdTRCLEdBQVN0UyxFQUFPaUssc0JBb0JwQixTQUFTc0ksR0FBV3pKLEVBQUkwSixHQUN0QixJQUFLQSxFQUFRLE9BQU8xSixFQU9wQixJQU5BLElBQUl2d0IsRUFBS2s2QixFQUFPQyxFQUVaaDRCLEVBQU9reUIsR0FDUEMsUUFBUUMsUUFBUTBGLEdBQ2hCNzZCLE9BQU8rQyxLQUFLODNCLEdBRVB6NEIsRUFBSSxFQUFHQSxFQUFJVyxFQUFLVixPQUFRRCxJQUMvQnhCLEVBQU1tQyxFQUFLWCxHQUVDLFdBQVJ4QixJQUNKazZCLEVBQVEzSixFQUFHdndCLEdBQ1htNkIsRUFBVUYsRUFBS2o2QixHQUNWRCxFQUFPd3dCLEVBQUl2d0IsR0FHZGs2QixJQUFVQyxHQUNWdjZCLEVBQWNzNkIsSUFDZHQ2QixFQUFjdTZCLElBRWRILEdBQVVFLEVBQU9DLEdBTmpCdGlCLEdBQUkwWSxFQUFJdndCLEVBQUttNkIsSUFTakIsT0FBTzVKLEVBTVQsU0FBUzZKLEdBQ1BwNUIsRUFDQUMsRUFDQXFLLEdBRUEsT0FBS0EsRUFvQkksV0FFTCxJQUFJK3VCLEVBQW1DLG9CQUFicDVCLEVBQ3RCQSxFQUFTbkIsS0FBS3dMLEVBQUlBLEdBQ2xCckssRUFDQXE1QixFQUFtQyxvQkFBZHQ1QixFQUNyQkEsRUFBVWxCLEtBQUt3TCxFQUFJQSxHQUNuQnRLLEVBQ0osT0FBSXE1QixFQUNLTCxHQUFVSyxFQUFjQyxHQUV4QkEsR0E3Qk5yNUIsRUFHQUQsRUFRRSxXQUNMLE9BQU9nNUIsR0FDZSxvQkFBYi80QixFQUEwQkEsRUFBU25CLEtBQUt1RixLQUFNQSxNQUFRcEUsRUFDeEMsb0JBQWRELEVBQTJCQSxFQUFVbEIsS0FBS3VGLEtBQU1BLE1BQVFyRSxJQVYxREMsRUFIQUQsRUEyRGIsU0FBU0QsR0FDUEMsRUFDQUMsR0FFQSxJQUFJQyxFQUFNRCxFQUNORCxFQUNFQSxFQUFVRyxPQUFPRixHQUNqQkcsTUFBTUMsUUFBUUosR0FDWkEsRUFDQSxDQUFDQSxHQUNMRCxFQUNKLE9BQU9FLEVBQ0hJLEdBQVlKLEdBQ1pBLEVBR04sU0FBU0ksR0FBYUMsR0FFcEIsSUFEQSxJQUFJTCxFQUFNLEdBQ0RNLEVBQUksRUFBR0EsRUFBSUQsRUFBTUUsT0FBUUQsS0FDRCxJQUEzQk4sRUFBSVEsUUFBUUgsRUFBTUMsS0FDcEJOLEVBQUlTLEtBQUtKLEVBQU1DLElBR25CLE9BQU9OLEVBY1QsU0FBU3E1QixHQUNQdjVCLEVBQ0FDLEVBQ0FxSyxFQUNBdEwsR0FFQSxJQUFJa0IsRUFBTTlCLE9BQU9nQixPQUFPWSxHQUFhLE1BQ3JDLE9BQUlDLEdBQ3VDdTVCLEdBQWlCeDZCLEVBQUtpQixFQUFVcUssR0FDbEVtQixFQUFPdkwsRUFBS0QsSUFFWkMsRUEvSlQ2NEIsR0FBT1UsR0FBS1YsR0FBT2xrQixVQUFZLFNBQVViLEVBQVF3VSxFQUFPbGUsRUFBSXRMLEdBTzFELE9BTktzTCxHQUNIN0MsR0FDRSxXQUFjekksRUFBTSx1RUFJakIwNkIsR0FBYTFsQixFQUFRd1UsSUErRWhDdVEsR0FBT3IzQixLQUFPLFNBQ1oxQixFQUNBQyxFQUNBcUssR0FFQSxPQUFLQSxFQWNFOHVCLEdBQWNwNUIsRUFBV0MsRUFBVXFLLEdBYnBDckssR0FBZ0Msb0JBQWJBLEdBQ29Cd0gsR0FDdkMscUdBR0E2QyxHQUdLdEssR0FFRm81QixHQUFjcDVCLEVBQVdDLElBbUNwQ3d3QixFQUFnQnJ2QixTQUFRLFNBQVVQLEdBQ2hDazRCLEdBQU9sNEIsR0FBUWQsTUF5QmpCeXdCLEVBQVlwdkIsU0FBUSxTQUFVME0sR0FDNUJpckIsR0FBT2pyQixFQUFPLEtBQU95ckIsTUFTdkJSLEdBQU9qUCxNQUFRLFNBQ2I5cEIsRUFDQUMsRUFDQXFLLEVBQ0F0TCxHQU1BLEdBSElnQixJQUFjNHlCLEtBQWU1eUIsT0FBWXlYLEdBQ3pDeFgsSUFBYTJ5QixLQUFlM3lCLE9BQVd3WCxJQUV0Q3hYLEVBQVksT0FBTzdCLE9BQU9nQixPQUFPWSxHQUFhLE1BSW5ELEdBRkV3NUIsR0FBaUJ4NkIsRUFBS2lCLEVBQVVxSyxJQUU3QnRLLEVBQWEsT0FBT0MsRUFDekIsSUFBSTJRLEVBQU0sR0FFVixJQUFLLElBQUkrb0IsS0FEVGx1QixFQUFPbUYsRUFBSzVRLEdBQ01DLEVBQVUsQ0FDMUIsSUFBSStULEVBQVNwRCxFQUFJK29CLEdBQ2JuUixFQUFRdm9CLEVBQVMwNUIsR0FDakIzbEIsSUFBVzVULE1BQU1DLFFBQVEyVCxLQUMzQkEsRUFBUyxDQUFDQSxJQUVacEQsRUFBSStvQixHQUFTM2xCLEVBQ1RBLEVBQU83VCxPQUFPcW9CLEdBQ2Rwb0IsTUFBTUMsUUFBUW1vQixHQUFTQSxFQUFRLENBQUNBLEdBRXRDLE9BQU81WCxHQU1UbW9CLEdBQU9uckIsTUFDUG1yQixHQUFPenNCLFFBQ1B5c0IsR0FBT2EsT0FDUGIsR0FBTzVSLFNBQVcsU0FDaEJubkIsRUFDQUMsRUFDQXFLLEVBQ0F0TCxHQUtBLEdBSElpQixHQUNGdTVCLEdBQWlCeDZCLEVBQUtpQixFQUFVcUssSUFFN0J0SyxFQUFhLE9BQU9DLEVBQ3pCLElBQUkyUSxFQUFNeFMsT0FBT2dCLE9BQU8sTUFHeEIsT0FGQXFNLEVBQU9tRixFQUFLNVEsR0FDUkMsR0FBWXdMLEVBQU9tRixFQUFLM1EsR0FDckIyUSxHQUVUbW9CLEdBQU9jLFFBQVVULEdBS2pCLElBQUlNLEdBQWUsU0FBVTE1QixFQUFXQyxHQUN0QyxZQUFvQndYLElBQWJ4WCxFQUNIRCxFQUNBQyxHQU1OLFNBQVM2NUIsR0FBaUIzM0IsR0FDeEIsSUFBSyxJQUFJbkQsS0FBT21ELEVBQVF1UixXQUN0QnFtQixHQUFzQi82QixHQUkxQixTQUFTKzZCLEdBQXVCMzNCLEdBQ3pCLElBQUkwdkIsT0FBUSx1QkFBMEJOLEVBQW9CLE9BQUksT0FBUWh1QixLQUFLcEIsSUFDOUVxRixHQUNFLDRCQUE4QnJGLEVBQU8sMkZBSXJDcXNCLEVBQWFyc0IsSUFBU3FrQixFQUFPd0ssY0FBYzd1QixLQUM3Q3FGLEdBQ0Usa0VBQ1NyRixHQVNmLFNBQVM0M0IsR0FBZ0I3M0IsRUFBU21JLEdBQ2hDLElBQUlzRCxFQUFRekwsRUFBUXlMLE1BQ3BCLEdBQUtBLEVBQUwsQ0FDQSxJQUNJcE4sRUFBR29pQixFQUFLeGdCLEVBRFJsQyxFQUFNLEdBRVYsR0FBSUUsTUFBTUMsUUFBUXVOLEdBQVEsQ0FDeEJwTixFQUFJb04sRUFBTW5OLE9BQ1YsTUFBT0QsSUFDTG9pQixFQUFNaFYsRUFBTXBOLEdBQ08sa0JBQVJvaUIsR0FDVHhnQixFQUFPN0MsRUFBU3FqQixHQUNoQjFpQixFQUFJa0MsR0FBUSxDQUFFMEwsS0FBTSxPQUVwQnJHLEdBQUssdURBR0osR0FBSTdJLEVBQWNnUCxHQUN2QixJQUFLLElBQUk1TyxLQUFPNE8sRUFDZGdWLEVBQU1oVixFQUFNNU8sR0FDWm9ELEVBQU83QyxFQUFTUCxHQUNoQmtCLEVBQUlrQyxHQUFReEQsRUFBY2drQixHQUN0QkEsRUFDQSxDQUFFOVUsS0FBTThVLFFBR2RuYixHQUNFLDZFQUNjc21CLEVBQVVuZ0IsR0FBVSxJQUNsQ3RELEdBR0puSSxFQUFReUwsTUFBUTFOLEdBTWxCLFNBQVMrNUIsR0FBaUI5M0IsRUFBU21JLEdBQ2pDLElBQUlzdkIsRUFBU3ozQixFQUFReTNCLE9BQ3JCLEdBQUtBLEVBQUwsQ0FDQSxJQUFJTSxFQUFhLzNCLEVBQVF5M0IsT0FBUyxHQUNsQyxHQUFJeDVCLE1BQU1DLFFBQVF1NUIsR0FDaEIsSUFBSyxJQUFJcDVCLEVBQUksRUFBR0EsRUFBSW81QixFQUFPbjVCLE9BQVFELElBQ2pDMDVCLEVBQVdOLEVBQU9wNUIsSUFBTSxDQUFFeTRCLEtBQU1XLEVBQU9wNUIsU0FFcEMsR0FBSTVCLEVBQWNnN0IsR0FDdkIsSUFBSyxJQUFJNTZCLEtBQU80NkIsRUFBUSxDQUN0QixJQUFJaFgsRUFBTWdYLEVBQU81NkIsR0FDakJrN0IsRUFBV2w3QixHQUFPSixFQUFjZ2tCLEdBQzVCblgsRUFBTyxDQUFFd3RCLEtBQU1qNkIsR0FBTzRqQixHQUN0QixDQUFFcVcsS0FBTXJXLFFBR2RuYixHQUNFLDhFQUNjc21CLEVBQVU2TCxHQUFXLElBQ25DdHZCLElBUU4sU0FBUzZ2QixHQUFxQmg0QixHQUM1QixJQUFJaTRCLEVBQU9qNEIsRUFBUWs0QixXQUNuQixHQUFJRCxFQUNGLElBQUssSUFBSXA3QixLQUFPbzdCLEVBQU0sQ0FDcEIsSUFBSUUsRUFBU0YsRUFBS3A3QixHQUNJLG9CQUFYczdCLElBQ1RGLEVBQUtwN0IsR0FBTyxDQUFFZ3NCLEtBQU1zUCxFQUFRM1csT0FBUTJXLEtBTTVDLFNBQVNkLEdBQWtCcDNCLEVBQU1tQyxFQUFPK0YsR0FDakMxTCxFQUFjMkYsSUFDakJrRCxHQUNFLDZCQUFnQ3JGLEVBQU8sa0NBQ3pCMnJCLEVBQVV4cEIsR0FBVSxJQUNsQytGLEdBU04sU0FBU2l3QixHQUNQdm1CLEVBQ0F3VSxFQUNBbGUsR0FrQkEsR0FmRXd2QixHQUFnQnRSLEdBR0csb0JBQVZBLElBQ1RBLEVBQVFBLEVBQU1ybUIsU0FHaEI2M0IsR0FBZXhSLEVBQU9sZSxHQUN0QjJ2QixHQUFnQnpSLEVBQU9sZSxHQUN2QjZ2QixHQUFvQjNSLElBTWZBLEVBQU1nUyxRQUNMaFMsRUFBTS9hLFVBQ1J1RyxFQUFTdW1CLEdBQWF2bUIsRUFBUXdVLEVBQU0vYSxRQUFTbkQsSUFFM0NrZSxFQUFNeGQsUUFDUixJQUFLLElBQUl4SyxFQUFJLEVBQUcwdUIsRUFBSTFHLEVBQU14ZCxPQUFPdkssT0FBUUQsRUFBSTB1QixFQUFHMXVCLElBQzlDd1QsRUFBU3VtQixHQUFhdm1CLEVBQVF3VSxFQUFNeGQsT0FBT3hLLEdBQUk4SixHQUtyRCxJQUNJdEwsRUFEQW1ELEVBQVUsR0FFZCxJQUFLbkQsS0FBT2dWLEVBQ1Z5bUIsRUFBV3o3QixHQUViLElBQUtBLEtBQU93cEIsRUFDTHpwQixFQUFPaVYsRUFBUWhWLElBQ2xCeTdCLEVBQVd6N0IsR0FHZixTQUFTeTdCLEVBQVl6N0IsR0FDbkIsSUFBSTA3QixFQUFRM0IsR0FBTy81QixJQUFRMDZCLEdBQzNCdjNCLEVBQVFuRCxHQUFPMDdCLEVBQU0xbUIsRUFBT2hWLEdBQU13cEIsRUFBTXhwQixHQUFNc0wsRUFBSXRMLEdBRXBELE9BQU9tRCxFQVFULFNBQVN3NEIsR0FDUHg0QixFQUNBMkwsRUFDQWduQixFQUNBOEYsR0FHQSxHQUFrQixrQkFBUDlGLEVBQVgsQ0FHQSxJQUFJK0YsRUFBUzE0QixFQUFRMkwsR0FFckIsR0FBSS9PLEVBQU84N0IsRUFBUS9GLEdBQU8sT0FBTytGLEVBQU8vRixHQUN4QyxJQUFJZ0csRUFBY3Y3QixFQUFTdTFCLEdBQzNCLEdBQUkvMUIsRUFBTzg3QixFQUFRQyxHQUFnQixPQUFPRCxFQUFPQyxHQUNqRCxJQUFJQyxFQUFlbk0sRUFBV2tNLEdBQzlCLEdBQUkvN0IsRUFBTzg3QixFQUFRRSxHQUFpQixPQUFPRixFQUFPRSxHQUVsRCxJQUFJNzZCLEVBQU0yNkIsRUFBTy9GLElBQU8rRixFQUFPQyxJQUFnQkQsRUFBT0UsR0FPdEQsT0FONkNILElBQWdCMTZCLEdBQzNEdUgsR0FDRSxxQkFBdUJxRyxFQUFLcEwsTUFBTSxHQUFJLEdBQUssS0FBT295QixFQUNsRDN5QixHQUdHakMsR0FPVCxTQUFTODZCLEdBQ1BoOEIsRUFDQWk4QixFQUNBcG1CLEVBQ0F2SyxHQUVBLElBQUk0d0IsRUFBT0QsRUFBWWo4QixHQUNuQm04QixHQUFVcDhCLEVBQU84VixFQUFXN1YsR0FDNUJ1RixFQUFRc1EsRUFBVTdWLEdBRWxCbzhCLEVBQWVDLEdBQWFydUIsUUFBU2t1QixFQUFLcHRCLE1BQzlDLEdBQUlzdEIsR0FBZ0IsRUFDbEIsR0FBSUQsSUFBV3A4QixFQUFPbThCLEVBQU0sV0FDMUIzMkIsR0FBUSxPQUNILEdBQWMsS0FBVkEsR0FBZ0JBLElBQVV1cUIsRUFBVTl2QixHQUFNLENBR25ELElBQUlzOEIsRUFBY0QsR0FBYXR1QixPQUFRbXVCLEVBQUtwdEIsT0FDeEN3dEIsRUFBYyxHQUFLRixFQUFlRSxLQUNwQy8yQixHQUFRLEdBS2QsUUFBY2tULElBQVZsVCxFQUFxQixDQUN2QkEsRUFBUWczQixHQUFvQmp4QixFQUFJNHdCLEVBQU1sOEIsR0FHdEMsSUFBSXc4QixFQUFvQjlELEdBQ3hCQyxJQUFnQixHQUNoQk8sR0FBUTN6QixHQUNSb3pCLEdBQWdCNkQsR0FTbEIsT0FGRUMsR0FBV1AsRUFBTWw4QixFQUFLdUYsRUFBTytGLEVBQUk2d0IsR0FFNUI1MkIsRUFNVCxTQUFTZzNCLEdBQXFCanhCLEVBQUk0d0IsRUFBTWw4QixHQUV0QyxHQUFLRCxFQUFPbThCLEVBQU0sV0FBbEIsQ0FHQSxJQUFJdkosRUFBTXVKLEVBQUtyd0IsUUFZZixPQVY2QzhYLEVBQVNnUCxJQUNwRGxxQixHQUNFLG1DQUFxQ3pJLEVBQU0sMkZBRzNDc0wsR0FLQUEsR0FBTUEsRUFBRytHLFNBQVN3RCxnQkFDVzRDLElBQS9Cbk4sRUFBRytHLFNBQVN3RCxVQUFVN1YsU0FDSHlZLElBQW5Cbk4sRUFBR294QixPQUFPMThCLEdBRUhzTCxFQUFHb3hCLE9BQU8xOEIsR0FJRyxvQkFBUjJ5QixHQUE2QyxhQUF2QmdLLEdBQVFULEVBQUtwdEIsTUFDN0M2akIsRUFBSTd5QixLQUFLd0wsR0FDVHFuQixHQU1OLFNBQVM4SixHQUNQUCxFQUNBOTRCLEVBQ0FtQyxFQUNBK0YsRUFDQTZ3QixHQUVBLEdBQUlELEVBQUtVLFVBQVlULEVBQ25CMXpCLEdBQ0UsMkJBQTZCckYsRUFBTyxJQUNwQ2tJLFFBSUosR0FBYSxNQUFUL0YsR0FBa0IyMkIsRUFBS1UsU0FBM0IsQ0FHQSxJQUFJOXRCLEVBQU9vdEIsRUFBS3B0QixLQUNaK3RCLEdBQVMvdEIsSUFBaUIsSUFBVEEsRUFDakJndUIsRUFBZ0IsR0FDcEIsR0FBSWh1QixFQUFNLENBQ0gxTixNQUFNQyxRQUFReU4sS0FDakJBLEVBQU8sQ0FBQ0EsSUFFVixJQUFLLElBQUl0TixFQUFJLEVBQUdBLEVBQUlzTixFQUFLck4sU0FBV283QixFQUFPcjdCLElBQUssQ0FDOUMsSUFBSXU3QixFQUFlQyxHQUFXejNCLEVBQU91SixFQUFLdE4sSUFDMUNzN0IsRUFBY243QixLQUFLbzdCLEVBQWFFLGNBQWdCLElBQ2hESixFQUFRRSxFQUFhRixPQUl6QixHQUFLQSxFQUFMLENBT0EsSUFBSUssRUFBWWhCLEVBQUtnQixVQUNqQkEsSUFDR0EsRUFBVTMzQixJQUNia0QsR0FDRSx5REFBMkRyRixFQUFPLEtBQ2xFa0ksU0FYSjdDLEdBQ0UwMEIsR0FBc0IvNUIsRUFBTW1DLEVBQU91M0IsR0FDbkN4eEIsSUFlTixJQUFJOHhCLEdBQWdCLDRDQUVwQixTQUFTSixHQUFZejNCLEVBQU91SixHQUMxQixJQUFJK3RCLEVBQ0FJLEVBQWVOLEdBQVE3dEIsR0FDM0IsR0FBSXN1QixHQUFjNTRCLEtBQUt5NEIsR0FBZSxDQUNwQyxJQUFJSSxTQUFXOTNCLEVBQ2ZzM0IsRUFBUVEsSUFBTUosRUFBYXpOLGNBRXRCcU4sR0FBZSxXQUFOUSxJQUNaUixFQUFRdDNCLGFBQWlCdUosUUFHM0IrdEIsRUFEMEIsV0FBakJJLEVBQ0RyOUIsRUFBYzJGLEdBQ0ksVUFBakIwM0IsRUFDRDc3QixNQUFNQyxRQUFRa0UsR0FFZEEsYUFBaUJ1SixFQUUzQixNQUFPLENBQ0wrdEIsTUFBT0EsRUFDUEksYUFBY0EsR0FTbEIsU0FBU04sR0FBU2w5QixHQUNoQixJQUFJbzBCLEVBQVFwMEIsR0FBTUEsRUFBR0gsV0FBV3UwQixNQUFNLHNCQUN0QyxPQUFPQSxFQUFRQSxFQUFNLEdBQUssR0FHNUIsU0FBU3lKLEdBQVlyTixFQUFHUyxHQUN0QixPQUFPaU0sR0FBUTFNLEtBQU8wTSxHQUFRak0sR0FHaEMsU0FBUzJMLEdBQWN2dEIsRUFBTWd1QixHQUMzQixJQUFLMTdCLE1BQU1DLFFBQVF5N0IsR0FDakIsT0FBT1EsR0FBV1IsRUFBZWh1QixHQUFRLEdBQUssRUFFaEQsSUFBSyxJQUFJdE4sRUFBSSxFQUFHK0YsRUFBTXUxQixFQUFjcjdCLE9BQVFELEVBQUkrRixFQUFLL0YsSUFDbkQsR0FBSTg3QixHQUFXUixFQUFjdDdCLEdBQUlzTixHQUMvQixPQUFPdE4sRUFHWCxPQUFRLEVBR1YsU0FBUzI3QixHQUF1Qi81QixFQUFNbUMsRUFBT3UzQixHQUMzQyxJQUFJUyxFQUFVLDZDQUFnRG42QixFQUFPLGVBQ25EMDVCLEVBQWNsUyxJQUFJZ0YsR0FBWXJKLEtBQUssTUFDakQwVyxFQUFlSCxFQUFjLEdBQzdCVSxFQUFlek8sRUFBVXhwQixHQUN6Qms0QixFQUFnQkMsR0FBV240QixFQUFPMDNCLEdBQ2xDVSxFQUFnQkQsR0FBV240QixFQUFPaTRCLEdBWXRDLE9BVjZCLElBQXpCVixFQUFjcjdCLFFBQ2RtOEIsR0FBYVgsS0FDWlksR0FBVVosRUFBY08sS0FDM0JELEdBQVcsZUFBaUJFLEdBRTlCRixHQUFXLFNBQVdDLEVBQWUsSUFFakNJLEdBQWFKLEtBQ2ZELEdBQVcsY0FBZ0JJLEVBQWdCLEtBRXRDSixFQUdULFNBQVNHLEdBQVluNEIsRUFBT3VKLEdBQzFCLE1BQWEsV0FBVEEsRUFDTSxJQUFPdkosRUFBUSxJQUNMLFdBQVR1SixFQUNELEdBQU12SSxPQUFPaEIsR0FFYixHQUFLQSxFQUlqQixTQUFTcTRCLEdBQWNyNEIsR0FDckIsSUFBSXU0QixFQUFnQixDQUFDLFNBQVUsU0FBVSxXQUN6QyxPQUFPQSxFQUFjQyxNQUFLLFNBQVVDLEdBQVEsT0FBT3o0QixFQUFNaXFCLGdCQUFrQndPLEtBRzdFLFNBQVNILEtBQ1AsSUFBSTcyQixFQUFPLEdBQUlPLEVBQU0yQyxVQUFVekksT0FDL0IsTUFBUThGLElBQVFQLEVBQU1PLEdBQVEyQyxVQUFXM0MsR0FFekMsT0FBT1AsRUFBSysyQixNQUFLLFNBQVVDLEdBQVEsTUFBOEIsWUFBdkJBLEVBQUt4TyxpQkFLakQsU0FBU3lPLEdBQWFyNUIsRUFBSzBHLEVBQUlxVCxHQUc3Qm9YLEtBQ0EsSUFDRSxHQUFJenFCLEVBQUksQ0FDTixJQUFJNHlCLEVBQU01eUIsRUFDVixNQUFRNHlCLEVBQU1BLEVBQUk5ckIsUUFBVSxDQUMxQixJQUFJN1EsRUFBUTI4QixFQUFJN3JCLFNBQVM4ckIsY0FDekIsR0FBSTU4QixFQUNGLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJRCxFQUFNRSxPQUFRRCxJQUNoQyxJQUNFLElBQUk0OEIsR0FBZ0QsSUFBdEM3OEIsRUFBTUMsR0FBRzFCLEtBQUtvK0IsRUFBS3Q1QixFQUFLMEcsRUFBSXFULEdBQzFDLEdBQUl5ZixFQUFXLE9BQ2YsTUFBTzd3QixJQUNQOHdCLEdBQWtCOXdCLEdBQUcyd0IsRUFBSyx3QkFNcENHLEdBQWtCejVCLEVBQUswRyxFQUFJcVQsR0FDM0IsUUFDQXVYLE1BSUosU0FBU29JLEdBQ1B2ckIsRUFDQTFGLEVBQ0FyRyxFQUNBc0UsRUFDQXFULEdBRUEsSUFBSXpkLEVBQ0osSUFDRUEsRUFBTThGLEVBQU8rTCxFQUFRaEssTUFBTXNFLEVBQVNyRyxHQUFRK0wsRUFBUWpULEtBQUt1TixHQUNyRG5NLElBQVFBLEVBQUlvMEIsUUFBVTN5QixFQUFVekIsS0FBU0EsRUFBSXE5QixXQUMvQ3I5QixFQUFJK0MsT0FBTSxTQUFVc0osR0FBSyxPQUFPMHdCLEdBQVkxd0IsRUFBR2pDLEVBQUlxVCxFQUFPLHVCQUcxRHpkLEVBQUlxOUIsVUFBVyxHQUVqQixNQUFPaHhCLElBQ1Awd0IsR0FBWTF3QixHQUFHakMsRUFBSXFULEdBRXJCLE9BQU96ZCxFQUdULFNBQVNtOUIsR0FBbUJ6NUIsRUFBSzBHLEVBQUlxVCxHQUNuQyxHQUFJOEksRUFBT29LLGFBQ1QsSUFDRSxPQUFPcEssRUFBT29LLGFBQWEveEIsS0FBSyxLQUFNOEUsRUFBSzBHLEVBQUlxVCxHQUMvQyxNQUFPcFIsSUFHSEEsS0FBTTNJLEdBQ1I0NUIsR0FBU2p4QixHQUFHLEtBQU0sdUJBSXhCaXhCLEdBQVM1NUIsRUFBSzBHLEVBQUlxVCxHQUdwQixTQUFTNmYsR0FBVTU1QixFQUFLMEcsRUFBSXFULEdBSzFCLEdBSEVsVyxHQUFNLFlBQWNrVyxFQUFPLE1BQVUvWixFQUFJdEYsV0FBYyxJQUFPZ00sSUFHM0Q2bkIsSUFBYUMsR0FBOEIscUJBQVo1cUIsUUFHbEMsTUFBTTVELEVBRk40RCxRQUFRUSxNQUFNcEUsR0FRbEIsSUF1Qkk2NUIsR0FpRkFDLEdBeEdBQyxHQUFZLEdBQ1pDLElBQVUsRUFFZCxTQUFTQyxLQUNQRCxJQUFVLEVBQ1YsSUFBSUUsRUFBU0gsR0FBVWo3QixNQUFNLEdBQzdCaTdCLEdBQVVsOUIsT0FBUyxFQUNuQixJQUFLLElBQUlELEVBQUksRUFBR0EsRUFBSXM5QixFQUFPcjlCLE9BQVFELElBQ2pDczlCLEVBQU90OUIsS0F3QlgsR0FBdUIscUJBQVp1QixTQUEyQm14QixHQUFTbnhCLFNBQVUsQ0FDdkQsSUFBSWc4QixHQUFJaDhCLFFBQVFDLFVBQ2hCeTdCLEdBQVksV0FDVk0sR0FBRW44QixLQUFLaThCLElBTUhsNUIsSUFBUzhjLFdBQVd4aUIsU0FFckIsR0FBS3l6QixJQUFvQyxxQkFBckJzTCxtQkFDekI5SyxHQUFTOEssbUJBRXVCLHlDQUFoQ0EsaUJBQWlCMS9CLFdBbUJqQm0vQixHQUppQyxxQkFBakJRLGNBQWdDL0ssR0FBUytLLGNBSTdDLFdBQ1ZBLGFBQWFKLEtBSUgsV0FDVnBjLFdBQVdvYyxHQUFnQixRQXhCNUIsQ0FJRCxJQUFJSyxHQUFVLEVBQ1Z6dkIsR0FBVyxJQUFJdXZCLGlCQUFpQkgsSUFDaENNLEdBQVdDLFNBQVNDLGVBQWV0eEIsT0FBT214QixLQUM5Q3p2QixHQUFTeXBCLFFBQVFpRyxHQUFVLENBQ3pCRyxlQUFlLElBRWpCYixHQUFZLFdBQ1ZTLElBQVdBLEdBQVUsR0FBSyxFQUMxQkMsR0FBU3o4QixLQUFPcUwsT0FBT214QixLQWdCM0IsU0FBU3hXLEdBQVV3QixFQUFJbGdCLEdBQ3JCLElBQUl1MUIsRUFpQkosR0FoQkFaLEdBQVVoOUIsTUFBSyxXQUNiLEdBQUl1b0IsRUFDRixJQUNFQSxFQUFHcHFCLEtBQUtrSyxHQUNSLE1BQU91RCxJQUNQMHdCLEdBQVkxd0IsR0FBR3ZELEVBQUssaUJBRWJ1MUIsR0FDVEEsRUFBU3YxQixNQUdSNDBCLEtBQ0hBLElBQVUsRUFDVkgsT0FHR3ZVLEdBQXlCLHFCQUFabm5CLFFBQ2hCLE9BQU8sSUFBSUEsU0FBUSxTQUFVQyxHQUMzQnU4QixFQUFXdjhCLEtBWWYsSUFBSXc4QixHQUFpQmxRLEVBQ25CLHFNQU1FbVEsR0FBaUIsU0FBVXp2QixFQUFRaFEsR0FDckN5SSxHQUNFLHVCQUEwQnpJLEVBQU0sa1JBS2hDZ1EsSUFJQTB2QixHQUFxQixTQUFVMXZCLEVBQVFoUSxHQUN6Q3lJLEdBQ0UsYUFBZ0J6SSxFQUFNLGtDQUFzQ0EsRUFBTSxpS0FJbEVnUSxJQUlBMnZCLEdBQ2UscUJBQVYvbkIsT0FBeUJzYyxHQUFTdGMsT0FFM0MsR0FBSStuQixHQUFVLENBQ1osSUFBSUMsR0FBb0J0USxFQUFRLCtDQUNoQzdILEVBQU91SyxTQUFXLElBQUlwYSxNQUFNNlAsRUFBT3VLLFNBQVUsQ0FDM0NuYSxJQUFLLFNBQWM3SCxFQUFRaFEsRUFBS3VGLEdBQzlCLE9BQUlxNkIsR0FBa0I1L0IsSUFDcEJ5SSxHQUFNLDREQUE4RHpJLElBQzdELElBRVBnUSxFQUFPaFEsR0FBT3VGLEdBQ1AsTUFNZixJQUFJczZCLEdBQWEsQ0FDZnBMLElBQUssU0FBY3prQixFQUFRaFEsR0FDekIsSUFBSXkwQixFQUFNejBCLEtBQU9nUSxFQUNiOHZCLEVBQVlOLEdBQWV4L0IsSUFDYixrQkFBUkEsR0FBc0MsTUFBbEJBLEVBQUkyUyxPQUFPLE1BQWdCM1MsS0FBT2dRLEVBQU8rdkIsT0FLdkUsT0FKS3RMLEdBQVFxTCxJQUNQOS9CLEtBQU9nUSxFQUFPK3ZCLE1BQVNMLEdBQW1CMXZCLEVBQVFoUSxHQUMvQ3kvQixHQUFlenZCLEVBQVFoUSxJQUV6QnkwQixJQUFRcUwsSUFJZkUsR0FBYSxDQUNmeHJCLElBQUssU0FBY3hFLEVBQVFoUSxHQUt6QixNQUptQixrQkFBUkEsR0FBc0JBLEtBQU9nUSxJQUNsQ2hRLEtBQU9nUSxFQUFPK3ZCLE1BQVNMLEdBQW1CMXZCLEVBQVFoUSxHQUMvQ3kvQixHQUFlenZCLEVBQVFoUSxJQUV6QmdRLEVBQU9oUSxLQUlsQjArQixHQUFZLFNBQW9CcHpCLEdBQzlCLEdBQUlxMEIsR0FBVSxDQUVaLElBQUl4OEIsRUFBVW1JLEVBQUcrRyxTQUNiNHRCLEVBQVc5OEIsRUFBUSs4QixRQUFVLzhCLEVBQVErOEIsT0FBT0MsY0FDNUNILEdBQ0FILEdBQ0p2MEIsRUFBRzgwQixhQUFlLElBQUl4b0IsTUFBTXRNLEVBQUkyMEIsUUFFaEMzMEIsRUFBRzgwQixhQUFlOTBCLEdBT3hCLElBbUNJbVAsR0FDQTRsQixHQXBDQUMsR0FBYyxJQUFJbE0sR0FPdEIsU0FBU21NLEdBQVUzYyxHQUNqQjRjLEdBQVU1YyxFQUFLMGMsSUFDZkEsR0FBWTNMLFFBR2QsU0FBUzZMLEdBQVc1YyxFQUFLNmMsR0FDdkIsSUFBSWovQixFQUFHVyxFQUNIdStCLEVBQU10L0IsTUFBTUMsUUFBUXVpQixHQUN4QixNQUFNOGMsSUFBUS9jLEVBQVNDLElBQVN4a0IsT0FBT3VoQyxTQUFTL2MsSUFBUUEsYUFBZTZTLElBQXZFLENBR0EsR0FBSTdTLEVBQUkwVSxPQUFRLENBQ2QsSUFBSXNJLEVBQVFoZCxFQUFJMFUsT0FBT0UsSUFBSTFDLEdBQzNCLEdBQUkySyxFQUFLaE0sSUFBSW1NLEdBQ1gsT0FFRkgsRUFBSy9MLElBQUlrTSxHQUVYLEdBQUlGLEVBQUssQ0FDUGwvQixFQUFJb2lCLEVBQUluaUIsT0FDUixNQUFPRCxJQUFPZy9CLEdBQVU1YyxFQUFJcGlCLEdBQUlpL0IsT0FDM0IsQ0FDTHQrQixFQUFPL0MsT0FBTytDLEtBQUt5aEIsR0FDbkJwaUIsRUFBSVcsRUFBS1YsT0FDVCxNQUFPRCxJQUFPZy9CLEdBQVU1YyxFQUFJemhCLEVBQUtYLElBQUtpL0IsS0FReEMsSUFBSUksR0FBTzFOLEdBQWFuUSxPQUFPNE8sWUFHN0JpUCxJQUNBQSxHQUFLcG1CLE1BQ0xvbUIsR0FBS1IsU0FDTFEsR0FBS0MsWUFDTEQsR0FBS0UsZ0JBRUx0bUIsR0FBTyxTQUFVaWMsR0FBTyxPQUFPbUssR0FBS3BtQixLQUFLaWMsSUFDekMySixHQUFVLFNBQVVqOUIsRUFBTTQ5QixFQUFVQyxHQUNsQ0osR0FBS1IsUUFBUWo5QixFQUFNNDlCLEVBQVVDLEdBQzdCSixHQUFLQyxXQUFXRSxHQUNoQkgsR0FBS0MsV0FBV0csS0FRdEIsSUFBSUMsR0FBaUJoaEMsR0FBTyxTQUFVa0QsR0FDcEMsSUFBSSs5QixFQUE2QixNQUFuQi85QixFQUFLdVAsT0FBTyxHQUMxQnZQLEVBQU8rOUIsRUFBVS85QixFQUFLTSxNQUFNLEdBQUtOLEVBQ2pDLElBQUlnK0IsRUFBNkIsTUFBbkJoK0IsRUFBS3VQLE9BQU8sR0FDMUJ2UCxFQUFPZytCLEVBQVVoK0IsRUFBS00sTUFBTSxHQUFLTixFQUNqQyxJQUFJZzdCLEVBQTZCLE1BQW5CaDdCLEVBQUt1UCxPQUFPLEdBRTFCLE9BREF2UCxFQUFPZzdCLEVBQVVoN0IsRUFBS00sTUFBTSxHQUFLTixFQUMxQixDQUNMQSxLQUFNQSxFQUNONlAsS0FBTW11QixFQUNOaEQsUUFBU0EsRUFDVCtDLFFBQVNBLE1BSWIsU0FBU0UsR0FBaUJDLEVBQUtoMkIsR0FDN0IsU0FBU2kyQixJQUNQLElBQUlDLEVBQWN0M0IsVUFFZG8zQixFQUFNQyxFQUFRRCxJQUNsQixJQUFJbGdDLE1BQU1DLFFBQVFpZ0MsR0FPaEIsT0FBT2hELEdBQXdCZ0QsRUFBSyxLQUFNcDNCLFVBQVdvQixFQUFJLGdCQUx6RCxJQURBLElBQUl5c0IsRUFBU3VKLEVBQUk1OUIsUUFDUmxDLEVBQUksRUFBR0EsRUFBSXUyQixFQUFPdDJCLE9BQVFELElBQ2pDODhCLEdBQXdCdkcsRUFBT3YyQixHQUFJLEtBQU1nZ0MsRUFBYWwyQixFQUFJLGdCQVFoRSxPQURBaTJCLEVBQVFELElBQU1BLEVBQ1BDLEVBR1QsU0FBU0UsR0FDUHBlLEVBQ0FxZSxFQUNBaE4sRUFDQWlOLEVBQ0FDLEVBQ0F0MkIsR0FFQSxJQUFJbEksRUFBYzg2QixFQUFLMkQsRUFBSzUyQixFQUM1QixJQUFLN0gsS0FBUWlnQixFQUNGNmEsRUFBTTdhLEVBQUdqZ0IsR0FDbEJ5K0IsRUFBTUgsRUFBTXQrQixHQUNaNkgsRUFBUWkyQixHQUFlOTlCLEdBQ25Cc3JCLEVBQVF3UCxHQUMrQnoxQixHQUN2Qyw4QkFBa0N3QyxFQUFVLEtBQUksVUFBYThDLE9BQU9td0IsR0FDcEU1eUIsR0FFT29qQixFQUFRbVQsSUFDYm5ULEVBQVF3UCxFQUFJb0QsT0FDZHBELEVBQU03YSxFQUFHamdCLEdBQVFpK0IsR0FBZ0JuRCxFQUFLNXlCLElBRXBDc2pCLEVBQU8zakIsRUFBTWdJLFFBQ2ZpckIsRUFBTTdhLEVBQUdqZ0IsR0FBUXcrQixFQUFrQjMyQixFQUFNN0gsS0FBTTg2QixFQUFLanpCLEVBQU1tekIsVUFFNUQxSixFQUFJenBCLEVBQU03SCxLQUFNODZCLEVBQUtqekIsRUFBTW16QixRQUFTbnpCLEVBQU1rMkIsUUFBU2wyQixFQUFNbkgsU0FDaERvNkIsSUFBUTJELElBQ2pCQSxFQUFJUCxJQUFNcEQsRUFDVjdhLEVBQUdqZ0IsR0FBUXkrQixHQUdmLElBQUt6K0IsS0FBUXMrQixFQUNQaFQsRUFBUXJMLEVBQUdqZ0IsTUFDYjZILEVBQVFpMkIsR0FBZTk5QixHQUN2QnUrQixFQUFVMTJCLEVBQU03SCxLQUFNcytCLEVBQU10K0IsR0FBTzZILEVBQU1tekIsVUFVL0MsU0FBUzBELEdBQStCcC9CLEVBQU15eEIsRUFBTWp6QixFQUFLbU0sR0FDdkQsSUFBSTR1QixFQUFjOUgsRUFBS2h4QixRQUFRaUosV0FBYStuQixFQUFLaHhCLFFBQVFpSixVQUFVNEMsV0FDbkUsR0FBSTBmLEVBQVF1TixHQUNWLE9BQU8vNkIsRUFFVCxJQUFJdVYsRUFBa0IwZCxFQUFLaHhCLFFBQVFpSixVQUFVcUssaUJBQW1CLEdBQzVEc3JCLEVBQVFyL0IsRUFBS3EvQixNQUNibnpCLEVBQVFsTSxFQUFLa00sTUFDakIsR0FBSStmLEVBQU1vVCxJQUFVcFQsRUFBTS9mLEdBQ3hCLElBQUssSUFBSTVPLEtBQU9pOEIsRUFBYSxDQUMzQixJQUFJK0YsRUFBU2xTLEVBQVU5dkIsR0FDbkJ3RyxFQUFTeTdCLEdBQVUvZ0MsRUFBSzBOLEVBQU81TyxFQUFLZ2lDLEdBQVEsSUFDNUNDLEdBQVUvZ0MsRUFBSzZnQyxFQUFPL2hDLEVBQUtnaUMsR0FBUSxHQUdyQ3g3QixHQUNBdEYsRUFBSWxCLEtBQ2lDLElBQXJDeVcsRUFBZ0IvVSxRQUFRc2dDLElBQ3hCMzBCLEVBQVE5TSxFQUFTVyxFQUFJbEIsT0FHckJrQixFQUFJbEIsR0FBT3FOLEVBQVE5TSxFQUFTVyxFQUFJbEIsTUFJdEMsT0FBT2tCLEVBR1QsU0FBU2doQyxHQUNQeC9CLEVBQ0F5eEIsRUFDQXVDLEVBQ0FycEIsR0FLQSxJQUFJNHVCLEVBQWM5SCxFQUFLaHhCLFFBQVF5TCxNQUMvQixHQUFJOGYsRUFBUXVOLEdBRVYsT0FBTzZGLEdBQStCcC9CLEVBQU15eEIsRUFBTSxHQUFJOW1CLEdBRXhELElBQUluTSxFQUFNLEdBQ042Z0MsRUFBUXIvQixFQUFLcS9CLE1BQ2JuekIsRUFBUWxNLEVBQUtrTSxNQUNqQixHQUFJK2YsRUFBTW9ULElBQVVwVCxFQUFNL2YsR0FDeEIsSUFBSyxJQUFJNU8sS0FBT2k4QixFQUFhLENBQzNCLElBQUkrRixFQUFTbFMsRUFBVTl2QixHQUVqQm1pQyxFQUFpQm5pQyxFQUFJd3ZCLGNBRXZCeHZCLElBQVFtaUMsR0FDUkosR0FBU2hpQyxFQUFPZ2lDLEVBQU9JLElBRXZCdk4sR0FDRSxTQUFZdU4sRUFBaUIsNEJBQzVCck4sR0FBb0I0QixHQUFPdkMsR0FBUyxvQ0FDN0JuMEIsRUFBTSx5S0FHNEJnaUMsRUFBUyxpQkFBcUJoaUMsRUFBTSxNQUlwRmlpQyxHQUFVL2dDLEVBQUswTixFQUFPNU8sRUFBS2dpQyxHQUFRLElBQ25DQyxHQUFVL2dDLEVBQUs2Z0MsRUFBTy9oQyxFQUFLZ2lDLEdBQVEsR0FJdkMsT0FBT0YsR0FBK0JwL0IsRUFBTXl4QixFQUFNanpCLEVBQUttTSxHQUd6RCxTQUFTNDBCLEdBQ1AvZ0MsRUFDQWtoQyxFQUNBcGlDLEVBQ0FnaUMsRUFDQUssR0FFQSxHQUFJMVQsRUFBTXlULEdBQU8sQ0FDZixHQUFJcmlDLEVBQU9xaUMsRUFBTXBpQyxHQUtmLE9BSkFrQixFQUFJbEIsR0FBT29pQyxFQUFLcGlDLEdBQ1hxaUMsVUFDSUQsRUFBS3BpQyxJQUVQLEVBQ0YsR0FBSUQsRUFBT3FpQyxFQUFNSixHQUt0QixPQUpBOWdDLEVBQUlsQixHQUFPb2lDLEVBQUtKLEdBQ1hLLFVBQ0lELEVBQUtKLElBRVAsRUFHWCxPQUFPLEVBaUJULFNBQVNNLEdBQXlCMVYsR0FDaEMsSUFBSyxJQUFJcHJCLEVBQUksRUFBR0EsRUFBSW9yQixFQUFTbnJCLE9BQVFELElBQ25DLEdBQUlKLE1BQU1DLFFBQVF1ckIsRUFBU3ByQixJQUN6QixPQUFPSixNQUFNL0IsVUFBVThCLE9BQU80SCxNQUFNLEdBQUk2akIsR0FHNUMsT0FBT0EsRUFPVCxTQUFTMlYsR0FBbUIzVixHQUMxQixPQUFPa0MsRUFBWWxDLEdBQ2YsQ0FBQ2dMLEdBQWdCaEwsSUFDakJ4ckIsTUFBTUMsUUFBUXVyQixHQUNaNFYsR0FBdUI1VixRQUN2Qm5VLEVBR1IsU0FBU2dxQixHQUFZOUssR0FDbkIsT0FBT2hKLEVBQU1nSixJQUFTaEosRUFBTWdKLEVBQUtoQixPQUFTOUgsRUFBUThJLEVBQUtMLFdBR3pELFNBQVNrTCxHQUF3QjVWLEVBQVU4VixHQUN6QyxJQUNJbGhDLEVBQUdkLEVBQUdpaUMsRUFBV2hOLEVBRGpCejBCLEVBQU0sR0FFVixJQUFLTSxFQUFJLEVBQUdBLEVBQUlvckIsRUFBU25yQixPQUFRRCxJQUMvQmQsRUFBSWtzQixFQUFTcHJCLEdBQ1RrdEIsRUFBUWh1QixJQUFtQixtQkFBTkEsSUFDekJpaUMsRUFBWXpoQyxFQUFJTyxPQUFTLEVBQ3pCazBCLEVBQU96MEIsRUFBSXloQyxHQUVQdmhDLE1BQU1DLFFBQVFYLEdBQ1pBLEVBQUVlLE9BQVMsSUFDYmYsRUFBSThoQyxHQUF1QjloQyxHQUFLZ2lDLEdBQWUsSUFBTSxJQUFNbGhDLEdBRXZEaWhDLEdBQVcvaEMsRUFBRSxLQUFPK2hDLEdBQVc5TSxLQUNqQ3owQixFQUFJeWhDLEdBQWEvSyxHQUFnQmpDLEVBQUtnQixLQUFRajJCLEVBQUUsR0FBSWkyQixNQUNwRGoyQixFQUFFa2lDLFNBRUoxaEMsRUFBSVMsS0FBS29ILE1BQU03SCxFQUFLUixJQUVib3VCLEVBQVlwdUIsR0FDakIraEMsR0FBVzlNLEdBSWJ6MEIsRUFBSXloQyxHQUFhL0ssR0FBZ0JqQyxFQUFLZ0IsS0FBT2oyQixHQUM5QixLQUFOQSxHQUVUUSxFQUFJUyxLQUFLaTJCLEdBQWdCbDNCLElBR3ZCK2hDLEdBQVcvaEMsSUFBTStoQyxHQUFXOU0sR0FFOUJ6MEIsRUFBSXloQyxHQUFhL0ssR0FBZ0JqQyxFQUFLZ0IsS0FBT2oyQixFQUFFaTJCLE9BRzNDL0gsRUFBT2hDLEVBQVNpVyxXQUNsQmxVLEVBQU1qdUIsRUFBRWcyQixNQUNSaEksRUFBUWh1QixFQUFFVixNQUNWMnVCLEVBQU0rVCxLQUNOaGlDLEVBQUVWLElBQU0sVUFBWTBpQyxFQUFjLElBQU1saEMsRUFBSSxNQUU5Q04sRUFBSVMsS0FBS2pCLEtBSWYsT0FBT1EsRUFLVCxTQUFTNGhDLEdBQWF4M0IsR0FDcEIsSUFBSXV2QixFQUFVdnZCLEVBQUcrRyxTQUFTd29CLFFBQ3RCQSxJQUNGdnZCLEVBQUd5M0IsVUFBK0Isb0JBQVpsSSxFQUNsQkEsRUFBUS82QixLQUFLd0wsR0FDYnV2QixHQUlSLFNBQVNtSSxHQUFnQjEzQixHQUN2QixJQUFJOUUsRUFBU3k4QixHQUFjMzNCLEVBQUcrRyxTQUFTdW9CLE9BQVF0dkIsR0FDM0M5RSxJQUNGbXlCLElBQWdCLEdBQ2hCdjVCLE9BQU8rQyxLQUFLcUUsR0FBUXBFLFNBQVEsU0FBVXBDLEdBR2xDcTVCLEdBQWtCL3RCLEVBQUl0TCxFQUFLd0csRUFBT3hHLElBQU0sV0FDdEN5SSxHQUNFLHlKQUVnQ3pJLEVBQU0sSUFDdENzTCxTQU9ScXRCLElBQWdCLElBSXBCLFNBQVNzSyxHQUFlckksRUFBUXR2QixHQUM5QixHQUFJc3ZCLEVBQVEsQ0FPVixJQUxBLElBQUlwMEIsRUFBU3BILE9BQU9nQixPQUFPLE1BQ3ZCK0IsRUFBT2t5QixHQUNQQyxRQUFRQyxRQUFRcUcsR0FDaEJ4N0IsT0FBTytDLEtBQUt5NEIsR0FFUHA1QixFQUFJLEVBQUdBLEVBQUlXLEVBQUtWLE9BQVFELElBQUssQ0FDcEMsSUFBSXhCLEVBQU1tQyxFQUFLWCxHQUVmLEdBQVksV0FBUnhCLEVBQUosQ0FDQSxJQUFJa2pDLEVBQWF0SSxFQUFPNTZCLEdBQUtpNkIsS0FDekJrSixFQUFTNzNCLEVBQ2IsTUFBTzYzQixFQUFRLENBQ2IsR0FBSUEsRUFBT0osV0FBYWhqQyxFQUFPb2pDLEVBQU9KLFVBQVdHLEdBQWEsQ0FDNUQxOEIsRUFBT3hHLEdBQU9takMsRUFBT0osVUFBVUcsR0FDL0IsTUFFRkMsRUFBU0EsRUFBTy93QixRQUVsQixJQUFLK3dCLEVBQ0gsR0FBSSxZQUFhdkksRUFBTzU2QixHQUFNLENBQzVCLElBQUlvakMsRUFBaUJ4SSxFQUFPNTZCLEdBQUs2TCxRQUNqQ3JGLEVBQU94RyxHQUFpQyxvQkFBbkJvakMsRUFDakJBLEVBQWV0akMsS0FBS3dMLEdBQ3BCODNCLE9BRUozNkIsR0FBTSxjQUFpQnpJLEVBQU0sY0FBaUJzTCxJQUlwRCxPQUFPOUUsR0FXWCxTQUFTNjhCLEdBQ1B6VyxFQUNBdmYsR0FFQSxJQUFLdWYsSUFBYUEsRUFBU25yQixPQUN6QixNQUFPLEdBR1QsSUFEQSxJQUFJNmhDLEVBQVEsR0FDSDloQyxFQUFJLEVBQUcwdUIsRUFBSXRELEVBQVNuckIsT0FBUUQsRUFBSTB1QixFQUFHMXVCLElBQUssQ0FDL0MsSUFBSWdvQixFQUFRb0QsRUFBU3ByQixHQUNqQmtCLEVBQU84bUIsRUFBTTltQixLQU9qQixHQUxJQSxHQUFRQSxFQUFLcS9CLE9BQVNyL0IsRUFBS3EvQixNQUFNd0IsYUFDNUI3Z0MsRUFBS3EvQixNQUFNd0IsS0FJZi9aLEVBQU1uYyxVQUFZQSxHQUFXbWMsRUFBTXVOLFlBQWMxcEIsSUFDcEQzSyxHQUFxQixNQUFiQSxFQUFLNmdDLEtBV1YvWixFQUFNZ08sV0FBYWhPLEVBQU1nTyxVQUFVOTBCLE1BQXNDLFNBQTlCOG1CLEVBQU1nTyxVQUFVOTBCLEtBQUs2Z0MsTUFDaEVELEVBQU0sVUFBWUEsRUFBTSxRQUFVLEtBQUszaEMsS0FBSzZuQixJQUU1QzhaLEVBQU16M0IsVUFBWXkzQixFQUFNejNCLFFBQVUsS0FBS2xLLEtBQUs2bkIsT0FiL0MsQ0FDQSxJQUFJcG1CLEVBQU9WLEVBQUs2Z0MsS0FDWkEsRUFBUUQsRUFBTWxnQyxLQUFVa2dDLEVBQU1sZ0MsR0FBUSxJQUN4QixhQUFkb21CLEVBQU1rTixJQUNSNk0sRUFBSzVoQyxLQUFLb0gsTUFBTXc2QixFQUFNL1osRUFBTW9ELFVBQVksSUFFeEMyVyxFQUFLNWhDLEtBQUs2bkIsSUFZaEIsSUFBSyxJQUFJZ2EsS0FBVUYsRUFDYkEsRUFBTUUsR0FBUXRTLE1BQU11UyxZQUNmSCxFQUFNRSxHQUdqQixPQUFPRixFQUdULFNBQVNHLEdBQWM5TCxHQUNyQixPQUFRQSxFQUFLTCxZQUFjSyxFQUFLZCxjQUErQixNQUFkYyxFQUFLaEIsS0FLeEQsU0FBUytNLEdBQ1BKLEVBQ0FLLEVBQ0FDLEdBRUEsSUFBSTFpQyxFQUNBMmlDLEVBQWlCemtDLE9BQU8rQyxLQUFLd2hDLEdBQWFsaUMsT0FBUyxFQUNuRHFpQyxFQUFXUixJQUFVQSxFQUFNUyxTQUFXRixFQUN0QzdqQyxFQUFNc2pDLEdBQVNBLEVBQU1VLEtBQ3pCLEdBQUtWLEVBRUUsSUFBSUEsRUFBTVcsWUFFZixPQUFPWCxFQUFNVyxZQUNSLEdBQ0xILEdBQ0FGLEdBQ0FBLElBQWNuVixHQUNkenVCLElBQVE0akMsRUFBVUksT0FDakJILElBQ0FELEVBQVVNLFdBSVgsT0FBT04sRUFHUCxJQUFLLElBQUlqSixLQURUejVCLEVBQU0sR0FDWW9pQyxFQUNaQSxFQUFNM0ksSUFBdUIsTUFBYkEsRUFBTSxLQUN4Qno1QixFQUFJeTVCLEdBQVN3SixHQUFvQlIsRUFBYWhKLEVBQU8ySSxFQUFNM0ksVUFuQi9EejVCLEVBQU0sR0F3QlIsSUFBSyxJQUFJa2pDLEtBQVNULEVBQ1ZTLEtBQVNsakMsSUFDYkEsRUFBSWtqQyxHQUFTQyxHQUFnQlYsRUFBYVMsSUFXOUMsT0FOSWQsR0FBU2xrQyxPQUFPZzZCLGFBQWFrSyxLQUMvQixFQUFRVyxZQUFjL2lDLEdBRXhCeXhCLEVBQUl6eEIsRUFBSyxVQUFXNGlDLEdBQ3BCblIsRUFBSXp4QixFQUFLLE9BQVFsQixHQUNqQjJ5QixFQUFJenhCLEVBQUssYUFBYzJpQyxHQUNoQjNpQyxFQUdULFNBQVNpakMsR0FBb0JSLEVBQWEzakMsRUFBS1AsR0FDN0MsSUFBSXk3QixFQUFhLFdBQ2YsSUFBSWg2QixFQUFNZ0osVUFBVXpJLE9BQVNoQyxFQUFHc0osTUFBTSxLQUFNbUIsV0FBYXpLLEVBQUcsSUFJNUQsT0FIQXlCLEVBQU1BLEdBQXNCLGtCQUFSQSxJQUFxQkUsTUFBTUMsUUFBUUgsR0FDbkQsQ0FBQ0EsR0FDRHFoQyxHQUFrQnJoQyxHQUNmQSxJQUNVLElBQWZBLEVBQUlPLFFBQ1ksSUFBZlAsRUFBSU8sUUFBZ0JQLEVBQUksR0FBR28yQixnQkFDMUI3ZSxFQUNBdlgsR0FZTixPQVBJekIsRUFBRzZrQyxPQUNMbGxDLE9BQU9tVixlQUFlb3ZCLEVBQWEzakMsRUFBSyxDQUN0Q3dVLElBQUswbUIsRUFDTDlTLFlBQVksRUFDWjdELGNBQWMsSUFHWDJXLEVBR1QsU0FBU21KLEdBQWdCZixFQUFPdGpDLEdBQzlCLE9BQU8sV0FBYyxPQUFPc2pDLEVBQU10akMsSUFRcEMsU0FBU3VrQyxHQUNQM2dCLEVBQ0FzYyxHQUVBLElBQUl0dUIsRUFBS3BRLEVBQUcwdUIsRUFBRy90QixFQUFNbkMsRUFDckIsR0FBSW9CLE1BQU1DLFFBQVF1aUIsSUFBdUIsa0JBQVJBLEVBRS9CLElBREFoUyxFQUFNLElBQUl4USxNQUFNd2lCLEVBQUluaUIsUUFDZkQsRUFBSSxFQUFHMHVCLEVBQUl0TSxFQUFJbmlCLE9BQVFELEVBQUkwdUIsRUFBRzF1QixJQUNqQ29RLEVBQUlwUSxHQUFLMCtCLEVBQU90YyxFQUFJcGlCLEdBQUlBLEVBQUdBLEVBQUdBLFFBRTNCLEdBQW1CLGtCQUFSb2lCLEVBRWhCLElBREFoUyxFQUFNLElBQUl4USxNQUFNd2lCLEdBQ1hwaUIsRUFBSSxFQUFHQSxFQUFJb2lCLEVBQUtwaUIsSUFDbkJvUSxFQUFJcFEsR0FBSzArQixFQUFPMStCLEVBQUksRUFBR0EsRUFBR0EsRUFBR0EsUUFFMUIsR0FBSW1pQixFQUFTQyxHQUNsQixHQUFJeVEsSUFBYXpRLEVBQUkvSyxPQUFPRSxVQUFXLENBQ3JDbkgsRUFBTSxHQUNOLElBQUltSCxFQUFXNkssRUFBSS9LLE9BQU9FLFlBQ3RCdlMsRUFBU3VTLEVBQVNxQyxPQUN0QixPQUFRNVUsRUFBTzZVLEtBQ2J6SixFQUFJalEsS0FBS3UrQixFQUFPMTVCLEVBQU9qQixNQUFPcU0sRUFBSW5RLE9BQVFELElBQUtBLElBQy9DZ0YsRUFBU3VTLEVBQVNxQyxZQUtwQixJQUZBalosRUFBTy9DLE9BQU8rQyxLQUFLeWhCLEdBQ25CaFMsRUFBTSxJQUFJeFEsTUFBTWUsRUFBS1YsUUFDaEJELEVBQUksRUFBRzB1QixFQUFJL3RCLEVBQUtWLE9BQVFELEVBQUkwdUIsRUFBRzF1QixJQUNsQ3hCLEVBQU1tQyxFQUFLWCxHQUNYb1EsRUFBSXBRLEdBQUswK0IsRUFBT3RjLEVBQUk1akIsR0FBTUEsRUFBS3dCLEVBQUdBLEdBUXhDLE9BSkttdEIsRUFBTS9jLEtBQ1RBLEVBQU0sSUFFUixFQUFNaXhCLFVBQVcsRUFDVmp4QixFQVFULFNBQVM0eUIsR0FDUHBoQyxFQUNBcWhDLEVBQ0E3MUIsRUFDQTgxQixHQUVBLElBQ0lDLEVBREFDLEVBQWV2L0IsS0FBS3lILGFBQWExSixHQUVqQ3doQyxHQUNGaDJCLEVBQVFBLEdBQVMsR0FDYjgxQixJQUM0Qy9nQixFQUFTK2dCLElBQ3JEajhCLEdBQ0UsaURBQ0FwRCxNQUdKdUosRUFBUW5DLEVBQU9BLEVBQU8sR0FBSWk0QixHQUFhOTFCLElBR3pDKzFCLEVBQVFDLEVBQWFoMkIsRUFBT3ZKLEtBQU11SixFQUFNaTJCLEtBQU9KLEdBRS9DRSxFQUFRdC9CLEtBQUt1SCxPQUFPeEosSUFBU3FoQyxFQUcvQixJQUFJejBCLEVBQVNwQixHQUFTQSxFQUFNMjBCLEtBQzVCLE9BQUl2ekIsRUFDSzNLLEtBQUt5L0IsZUFBZSxXQUFZLENBQUV2QixLQUFNdnpCLEdBQVUyMEIsR0FFbERBLEVBU1gsU0FBU0ksR0FBZWpQLEdBQ3RCLE9BQU82RixHQUFhdDJCLEtBQUtnTixTQUFVLFVBQVd5akIsR0FBSSxJQUFTbEYsRUFLN0QsU0FBU29VLEdBQWVDLEVBQVFDLEdBQzlCLE9BQUk5akMsTUFBTUMsUUFBUTRqQyxJQUNtQixJQUE1QkEsRUFBT3ZqQyxRQUFRd2pDLEdBRWZELElBQVdDLEVBU3RCLFNBQVNDLEdBQ1BDLEVBQ0FwbEMsRUFDQXFsQyxFQUNBQyxFQUNBQyxHQUVBLElBQUlDLEVBQWdCL2QsRUFBT3VLLFNBQVNoeUIsSUFBUXFsQyxFQUM1QyxPQUFJRSxHQUFrQkQsSUFBaUI3ZCxFQUFPdUssU0FBU2h5QixHQUM5Q2dsQyxHQUFjTyxFQUFnQkQsR0FDNUJFLEVBQ0ZSLEdBQWNRLEVBQWVKLEdBQzNCRSxFQUNGeFYsRUFBVXdWLEtBQWtCdGxDLE9BRDlCLEVBVVQsU0FBU3lsQyxHQUNQL2lDLEVBQ0FnMEIsRUFDQW54QixFQUNBbWdDLEVBQ0FDLEdBRUEsR0FBSXBnQyxFQUNGLEdBQUtvZSxFQUFTcGUsR0FLUCxDQUlMLElBQUk2OEIsRUFIQWhoQyxNQUFNQyxRQUFRa0UsS0FDaEJBLEVBQVFrckIsRUFBU2xyQixJQUduQixJQUFJb0MsRUFBTyxTQUFXM0gsR0FDcEIsR0FDVSxVQUFSQSxHQUNRLFVBQVJBLEdBQ0EwdkIsRUFBb0IxdkIsR0FFcEJvaUMsRUFBTzEvQixNQUNGLENBQ0wsSUFBSW9NLEVBQU9wTSxFQUFLcS9CLE9BQVNyL0IsRUFBS3EvQixNQUFNanpCLEtBQ3BDc3pCLEVBQU9zRCxHQUFVamUsRUFBTzZLLFlBQVlvRSxFQUFLNW5CLEVBQU05TyxHQUMzQzBDLEVBQUtrakMsV0FBYWxqQyxFQUFLa2pDLFNBQVcsSUFDbENsakMsRUFBS3EvQixRQUFVci9CLEVBQUtxL0IsTUFBUSxJQUVsQyxJQUFJOEQsRUFBZXRsQyxFQUFTUCxHQUN4QjhsQyxFQUFnQmhXLEVBQVU5dkIsR0FDOUIsS0FBTTZsQyxLQUFnQnpELE1BQVcwRCxLQUFpQjFELEtBQ2hEQSxFQUFLcGlDLEdBQU91RixFQUFNdkYsR0FFZDJsQyxHQUFRLENBQ1YsSUFBSXRpQixFQUFLM2dCLEVBQUsyZ0IsS0FBTzNnQixFQUFLMmdCLEdBQUssSUFDL0JBLEVBQUksVUFBWXJqQixHQUFRLFNBQVUrbEMsR0FDaEN4Z0MsRUFBTXZGLEdBQU8rbEMsS0FNckIsSUFBSyxJQUFJL2xDLEtBQU91RixFQUFPb0MsRUFBTTNILFFBcENZeUksR0FDdkMsMkRBQ0FwRCxNQXFDTixPQUFPM0MsRUFRVCxTQUFTc2pDLEdBQ1Bsa0MsRUFDQW1rQyxHQUVBLElBQUkvbEMsRUFBU21GLEtBQUs2Z0MsZUFBaUI3Z0MsS0FBSzZnQyxhQUFlLElBQ25EelEsRUFBT3YxQixFQUFPNEIsR0FHbEIsT0FBSTJ6QixJQUFTd1EsRUFDSnhRLEdBR1RBLEVBQU92MUIsRUFBTzRCLEdBQVN1RCxLQUFLZ04sU0FBUzh6QixnQkFBZ0Jya0MsR0FBT2hDLEtBQzFEdUYsS0FBSys2QixhQUNMLEtBQ0EvNkIsTUFFRitnQyxHQUFXM1EsRUFBTyxhQUFlM3pCLEdBQVEsR0FDbEMyekIsR0FPVCxTQUFTNFEsR0FDUDVRLEVBQ0EzekIsRUFDQTlCLEdBR0EsT0FEQW9tQyxHQUFXM1EsRUFBTyxXQUFhM3pCLEdBQVM5QixFQUFPLElBQU1BLEVBQU8sS0FBTSxHQUMzRHkxQixFQUdULFNBQVMyUSxHQUNQM1EsRUFDQXoxQixFQUNBNFMsR0FFQSxHQUFJeFIsTUFBTUMsUUFBUW8wQixHQUNoQixJQUFLLElBQUlqMEIsRUFBSSxFQUFHQSxFQUFJaTBCLEVBQUtoMEIsT0FBUUQsSUFDM0JpMEIsRUFBS2owQixJQUF5QixrQkFBWmkwQixFQUFLajBCLElBQ3pCOGtDLEdBQWU3USxFQUFLajBCLEdBQUt4QixFQUFNLElBQU13QixFQUFJb1IsUUFJN0MwekIsR0FBZTdRLEVBQU16MUIsRUFBSzRTLEdBSTlCLFNBQVMwekIsR0FBZ0IzTyxFQUFNMzNCLEVBQUs0UyxHQUNsQytrQixFQUFLUCxVQUFXLEVBQ2hCTyxFQUFLMzNCLElBQU1BLEVBQ1gyM0IsRUFBSy9rQixPQUFTQSxFQUtoQixTQUFTMnpCLEdBQXFCN2pDLEVBQU02QyxHQUNsQyxHQUFJQSxFQUNGLEdBQUszRixFQUFjMkYsR0FLWixDQUNMLElBQUk4ZCxFQUFLM2dCLEVBQUsyZ0IsR0FBSzNnQixFQUFLMmdCLEdBQUs1VyxFQUFPLEdBQUkvSixFQUFLMmdCLElBQU0sR0FDbkQsSUFBSyxJQUFJcmpCLEtBQU91RixFQUFPLENBQ3JCLElBQUlpaEMsRUFBV25qQixFQUFHcmpCLEdBQ2R5bUMsRUFBT2xoQyxFQUFNdkYsR0FDakJxakIsRUFBR3JqQixHQUFPd21DLEVBQVcsR0FBR3JsQyxPQUFPcWxDLEVBQVVDLEdBQVFBLFFBVFZoK0IsR0FDdkMsZ0RBQ0FwRCxNQVdOLE9BQU8zQyxFQUtULFNBQVNna0MsR0FDUHBGLEVBQ0FwZ0MsRUFFQXlsQyxFQUNBQyxHQUVBMWxDLEVBQU1BLEdBQU8sQ0FBRTZpQyxTQUFVNEMsR0FDekIsSUFBSyxJQUFJbmxDLEVBQUksRUFBR0EsRUFBSTgvQixFQUFJNy9CLE9BQVFELElBQUssQ0FDbkMsSUFBSStoQyxFQUFPakMsRUFBSTkvQixHQUNYSixNQUFNQyxRQUFRa2lDLEdBQ2hCbUQsR0FBbUJuRCxFQUFNcmlDLEVBQUt5bEMsR0FDckJwRCxJQUVMQSxFQUFLZSxRQUNQZixFQUFLOWpDLEdBQUc2a0MsT0FBUSxHQUVsQnBqQyxFQUFJcWlDLEVBQUt2akMsS0FBT3VqQyxFQUFLOWpDLElBTXpCLE9BSEltbkMsSUFDRixFQUFNNUMsS0FBTzRDLEdBRVIxbEMsRUFLVCxTQUFTMmxDLEdBQWlCQyxFQUFTOXNCLEdBQ2pDLElBQUssSUFBSXhZLEVBQUksRUFBR0EsRUFBSXdZLEVBQU92WSxPQUFRRCxHQUFLLEVBQUcsQ0FDekMsSUFBSXhCLEVBQU1nYSxFQUFPeFksR0FDRSxrQkFBUnhCLEdBQW9CQSxFQUM3QjhtQyxFQUFROXNCLEVBQU94WSxJQUFNd1ksRUFBT3hZLEVBQUksR0FDMEIsS0FBUnhCLEdBQXNCLE9BQVJBLEdBRWhFeUksR0FDRywyRUFBNkV6SSxFQUM5RXFGLE1BSU4sT0FBT3loQyxFQU1ULFNBQVNDLEdBQWlCeGhDLEVBQU95aEMsR0FDL0IsTUFBd0Isa0JBQVZ6aEMsRUFBcUJ5aEMsRUFBU3poQyxFQUFRQSxFQUt0RCxTQUFTMGhDLEdBQXNCajNCLEdBQzdCQSxFQUFPazNCLEdBQUtiLEdBQ1pyMkIsRUFBT20zQixHQUFLOVgsRUFDWnJmLEVBQU9vM0IsR0FBSzluQyxFQUNaMFEsRUFBT3EzQixHQUFLOUMsR0FDWnYwQixFQUFPczNCLEdBQUs5QyxHQUNaeDBCLEVBQU91M0IsR0FBSzFXLEVBQ1o3Z0IsRUFBTzYwQixHQUFLdlQsRUFDWnRoQixFQUFPdzNCLEdBQUt4QixHQUNaaDJCLEVBQU95M0IsR0FBSzFDLEdBQ1ovMEIsRUFBTzAzQixHQUFLdkMsR0FDWm4xQixFQUFPMjNCLEdBQUtsQyxHQUNaejFCLEVBQU80M0IsR0FBS2hRLEdBQ1o1bkIsRUFBTzYzQixHQUFLblEsR0FDWjFuQixFQUFPODNCLEdBQUtwQixHQUNaMTJCLEVBQU8rM0IsR0FBS3hCLEdBQ1p2MkIsRUFBT2c0QixHQUFLbkIsR0FDWjcyQixFQUFPaTRCLEdBQUtsQixHQUtkLFNBQVNtQixHQUNQeGxDLEVBQ0FrTSxFQUNBZ2UsRUFDQTVYLEVBQ0FtZixHQUVBLElBS0lnVSxFQUxBdGlCLEVBQVN4Z0IsS0FFVGxDLEVBQVVneEIsRUFBS2h4QixRQUlmcEQsRUFBT2lWLEVBQVEsU0FDakJtekIsRUFBWS9vQyxPQUFPZ0IsT0FBTzRVLEdBRTFCbXpCLEVBQVVDLFVBQVlwekIsSUFLdEJtekIsRUFBWW56QixFQUVaQSxFQUFTQSxFQUFPb3pCLFdBRWxCLElBQUlDLEVBQWF6WixFQUFPenJCLEVBQVFtbEMsV0FDNUJDLEdBQXFCRixFQUV6QmhqQyxLQUFLM0MsS0FBT0EsRUFDWjJDLEtBQUt1SixNQUFRQSxFQUNidkosS0FBS3VuQixTQUFXQSxFQUNoQnZuQixLQUFLMlAsT0FBU0EsRUFDZDNQLEtBQUttakMsVUFBWTlsQyxFQUFLMmdCLElBQU1vTCxFQUM1QnBwQixLQUFLb2pDLFdBQWF4RixHQUFjOS9CLEVBQVF5M0IsT0FBUTVsQixHQUNoRDNQLEtBQUtpK0IsTUFBUSxXQU9YLE9BTkt6ZCxFQUFPalosUUFDVjgyQixHQUNFaGhDLEVBQUtnbUMsWUFDTDdpQixFQUFPalosT0FBU3kyQixHQUFhelcsRUFBVTVYLElBR3BDNlEsRUFBT2paLFFBR2hCeE4sT0FBT21WLGVBQWVsUCxLQUFNLGNBQWUsQ0FDekMraUIsWUFBWSxFQUNaNVQsSUFBSyxXQUNILE9BQU9rdkIsR0FBcUJoaEMsRUFBS2dtQyxZQUFhcmpDLEtBQUtpK0IsWUFLbkQrRSxJQUVGaGpDLEtBQUtnTixTQUFXbFAsRUFFaEJrQyxLQUFLdUgsT0FBU3ZILEtBQUtpK0IsUUFDbkJqK0IsS0FBS3lILGFBQWU0MkIsR0FBcUJoaEMsRUFBS2dtQyxZQUFhcmpDLEtBQUt1SCxTQUc5RHpKLEVBQVF3bEMsU0FDVnRqQyxLQUFLdWpDLEdBQUssU0FBVTNZLEVBQUdTLEVBQUdod0IsRUFBR21vQyxHQUMzQixJQUFJL1EsRUFBUWdSLEdBQWNYLEVBQVdsWSxFQUFHUyxFQUFHaHdCLEVBQUdtb0MsRUFBR04sR0FLakQsT0FKSXpRLElBQVUxMkIsTUFBTUMsUUFBUXkyQixLQUMxQkEsRUFBTWIsVUFBWTl6QixFQUFRd2xDLFNBQzFCN1EsRUFBTWYsVUFBWS9oQixHQUViOGlCLEdBR1R6eUIsS0FBS3VqQyxHQUFLLFNBQVUzWSxFQUFHUyxFQUFHaHdCLEVBQUdtb0MsR0FBSyxPQUFPQyxHQUFjWCxFQUFXbFksRUFBR1MsRUFBR2h3QixFQUFHbW9DLEVBQUdOLElBTWxGLFNBQVNRLEdBQ1A1VSxFQUNBdGUsRUFDQW5ULEVBQ0F5bEMsRUFDQXZiLEdBRUEsSUFBSXpwQixFQUFVZ3hCLEVBQUtoeEIsUUFDZnlMLEVBQVEsR0FDUnF0QixFQUFjOTRCLEVBQVF5TCxNQUMxQixHQUFJK2YsRUFBTXNOLEdBQ1IsSUFBSyxJQUFJajhCLEtBQU9pOEIsRUFDZHJ0QixFQUFNNU8sR0FBT2c4QixHQUFhaDhCLEVBQUtpOEIsRUFBYXBtQixHQUFhNFksUUFHdkRFLEVBQU1qc0IsRUFBS3EvQixRQUFVaUgsR0FBV3A2QixFQUFPbE0sRUFBS3EvQixPQUM1Q3BULEVBQU1qc0IsRUFBS2tNLFFBQVVvNkIsR0FBV3A2QixFQUFPbE0sRUFBS2tNLE9BR2xELElBQUlxNkIsRUFBZ0IsSUFBSWYsR0FDdEJ4bEMsRUFDQWtNLEVBQ0FnZSxFQUNBdWIsRUFDQWhVLEdBR0UyRCxFQUFRMzBCLEVBQVErOEIsT0FBT3BnQyxLQUFLLEtBQU1tcEMsRUFBY0wsR0FBSUssR0FFeEQsR0FBSW5SLGFBQWlCckIsR0FDbkIsT0FBT3lTLEdBQTZCcFIsRUFBT3AxQixFQUFNdW1DLEVBQWNqMEIsT0FBUTdSLEVBQVM4bEMsR0FDM0UsR0FBSTduQyxNQUFNQyxRQUFReTJCLEdBQVEsQ0FHL0IsSUFGQSxJQUFJcVIsRUFBUzVHLEdBQWtCekssSUFBVSxHQUNyQzUyQixFQUFNLElBQUlFLE1BQU0rbkMsRUFBTzFuQyxRQUNsQkQsRUFBSSxFQUFHQSxFQUFJMm5DLEVBQU8xbkMsT0FBUUQsSUFDakNOLEVBQUlNLEdBQUswbkMsR0FBNkJDLEVBQU8zbkMsR0FBSWtCLEVBQU11bUMsRUFBY2owQixPQUFRN1IsRUFBUzhsQyxHQUV4RixPQUFPL25DLEdBSVgsU0FBU2dvQyxHQUE4QnBSLEVBQU9wMUIsRUFBTXlsQyxFQUFXaGxDLEVBQVM4bEMsR0FJdEUsSUFBSUcsRUFBUXZSLEdBQVdDLEdBU3ZCLE9BUkFzUixFQUFNclMsVUFBWW9SLEVBQ2xCaUIsRUFBTXBTLFVBQVk3ekIsR0FFZmltQyxFQUFNQyxhQUFlRCxFQUFNQyxjQUFnQixJQUFJSixjQUFnQkEsRUFFOUR2bUMsRUFBSzZnQyxRQUNONkYsRUFBTTFtQyxPQUFTMG1DLEVBQU0xbUMsS0FBTyxLQUFLNmdDLEtBQU83Z0MsRUFBSzZnQyxNQUV6QzZGLEVBR1QsU0FBU0osR0FBWXpZLEVBQUkwSixHQUN2QixJQUFLLElBQUlqNkIsS0FBT2k2QixFQUNkMUosRUFBR2h3QixFQUFTUCxJQUFRaTZCLEVBQUtqNkIsR0E3RDdCaW5DLEdBQXFCaUIsR0FBd0I3b0MsV0EwRTdDLElBQUlpcUMsR0FBc0IsQ0FDeEJ4bUIsS0FBTSxTQUFlZ1YsRUFBT3lSLEdBQzFCLEdBQ0V6UixFQUFNWixvQkFDTFksRUFBTVosa0JBQWtCc1MsY0FDekIxUixFQUFNcDFCLEtBQUsrbUMsVUFDWCxDQUVBLElBQUlDLEVBQWM1UixFQUNsQndSLEdBQW9CSyxTQUFTRCxFQUFhQSxPQUNyQyxDQUNMLElBQUlsZ0IsRUFBUXNPLEVBQU1aLGtCQUFvQjBTLEdBQ3BDOVIsRUFDQStSLElBRUZyZ0IsRUFBTTFULE9BQU95ekIsRUFBWXpSLEVBQU1sQixTQUFNbmUsRUFBVzh3QixLQUlwREksU0FBVSxTQUFtQkcsRUFBVWhTLEdBQ3JDLElBQUkzMEIsRUFBVTIwQixFQUFNcmlCLGlCQUNoQitULEVBQVFzTyxFQUFNWixrQkFBb0I0UyxFQUFTNVMsa0JBQy9DNlMsR0FDRXZnQixFQUNBcm1CLEVBQVEwUyxVQUNSMVMsRUFBUXFsQyxVQUNSMVEsRUFDQTMwQixFQUFReXBCLFdBSVpvZCxPQUFRLFNBQWlCbFMsR0FDdkIsSUFBSXpxQixFQUFVeXFCLEVBQU16cUIsUUFDaEI2cEIsRUFBb0JZLEVBQU1aLGtCQUN6QkEsRUFBa0JyakIsYUFDckJvMkIsR0FBUy9TLEVBQW1CLG9CQUM1QitTLEdBQVMvUyxFQUFtQixxQkFDNUJBLEVBQWtCcmpCLFlBQWEsRUFDL0JvMkIsR0FBUy9TLEVBQW1CLFlBRTFCWSxFQUFNcDFCLEtBQUsrbUMsWUFDVHA4QixFQUFRd0csV0FNVnEyQixHQUF3QmhULEdBRXhCaVQsR0FBdUJqVCxHQUFtQixLQUtoRGtULFFBQVMsU0FBa0J0UyxHQUN6QixJQUFJWixFQUFvQlksRUFBTVosa0JBQ3pCQSxFQUFrQnNTLGVBQ2hCMVIsRUFBTXAxQixLQUFLK21DLFVBR2RZLEdBQXlCblQsR0FBbUIsR0FGNUNBLEVBQWtCamhCLGNBUXRCcTBCLEdBQWVsckMsT0FBTytDLEtBQUttbkMsSUFFL0IsU0FBUy94QixHQUNQNGMsRUFDQXp4QixFQUNBMkssRUFDQXVmLEVBQ0E4SixHQUVBLElBQUloSSxFQUFReUYsR0FBWixDQUlBLElBQUlvVyxFQUFXbDlCLEVBQVFnRixTQUFTbXBCLE1BU2hDLEdBTkk3WCxFQUFTd1EsS0FDWEEsRUFBT29XLEVBQVM5OUIsT0FBTzBuQixJQUtMLG9CQUFUQSxFQUFYLENBUUEsSUFBSTBDLEVBQ0osR0FBSW5JLEVBQVF5RixFQUFLa0IsT0FDZndCLEVBQWUxQyxFQUNmQSxFQUFPcVcsR0FBc0IzVCxFQUFjMFQsUUFDOUI5eEIsSUFBVDBiLEdBSUYsT0FBT3NXLEdBQ0w1VCxFQUNBbjBCLEVBQ0EySyxFQUNBdWYsRUFDQThKLEdBS05oMEIsRUFBT0EsR0FBUSxHQUlmZ29DLEdBQTBCdlcsR0FHdEJ4RixFQUFNanNCLEVBQUtpb0MsUUFDYkMsR0FBZXpXLEVBQUtoeEIsUUFBU1QsR0FJL0IsSUFBSW1ULEVBQVlxc0IsR0FBMEJ4L0IsRUFBTXl4QixFQUFNdUMsRUFBS3JwQixHQUczRCxHQUFJdWhCLEVBQU91RixFQUFLaHhCLFFBQVEwbkMsWUFDdEIsT0FBTzlCLEdBQTBCNVUsRUFBTXRlLEVBQVduVCxFQUFNMkssRUFBU3VmLEdBS25FLElBQUk0YixFQUFZOWxDLEVBQUsyZ0IsR0FLckIsR0FGQTNnQixFQUFLMmdCLEdBQUszZ0IsRUFBS29vQyxTQUVYbGMsRUFBT3VGLEVBQUtoeEIsUUFBUTRuQyxVQUFXLENBS2pDLElBQUl4SCxFQUFPN2dDLEVBQUs2Z0MsS0FDaEI3Z0MsRUFBTyxHQUNINmdDLElBQ0Y3Z0MsRUFBSzZnQyxLQUFPQSxHQUtoQnlILEdBQXNCdG9DLEdBR3RCLElBQUlVLEVBQU8rd0IsRUFBS2h4QixRQUFRQyxNQUFRc3pCLEVBQzVCb0IsRUFBUSxJQUFJckIsR0FDYixpQkFBb0J0QyxFQUFRLEtBQUsvd0IsRUFBUSxJQUFNQSxFQUFRLElBQ3hEVixPQUFNK1YsT0FBV0EsT0FBV0EsRUFBV3BMLEVBQ3ZDLENBQUU4bUIsS0FBTUEsRUFBTXRlLFVBQVdBLEVBQVcyeUIsVUFBV0EsRUFBVzlSLElBQUtBLEVBQUs5SixTQUFVQSxHQUM5RWlLLEdBR0YsT0FBT2lCLEVBMUVIcnZCLEdBQU0saUNBQW9Dc0YsT0FBT29tQixHQUFTOW1CLElBNkVoRSxTQUFTdThCLEdBQ1A5UixFQUNBOWlCLEdBRUEsSUFBSTdSLEVBQVUsQ0FDWjhuQyxjQUFjLEVBQ2RDLGFBQWNwVCxFQUNkOWlCLE9BQVFBLEdBR05tMkIsRUFBaUJyVCxFQUFNcDFCLEtBQUt5b0MsZUFLaEMsT0FKSXhjLEVBQU13YyxLQUNSaG9DLEVBQVErOEIsT0FBU2lMLEVBQWVqTCxPQUNoQy84QixFQUFRZ2pDLGdCQUFrQmdGLEVBQWVoRixpQkFFcEMsSUFBSXJPLEVBQU1yaUIsaUJBQWlCMGUsS0FBS2h4QixHQUd6QyxTQUFTNm5DLEdBQXVCdG9DLEdBRTlCLElBREEsSUFBSW5CLEVBQVFtQixFQUFLYixPQUFTYSxFQUFLYixLQUFPLElBQzdCTCxFQUFJLEVBQUdBLEVBQUk4b0MsR0FBYTdvQyxPQUFRRCxJQUFLLENBQzVDLElBQUl4QixFQUFNc3FDLEdBQWE5b0MsR0FDbkJnbEMsRUFBV2psQyxFQUFNdkIsR0FDakJvckMsRUFBVTlCLEdBQW9CdHBDLEdBQzlCd21DLElBQWE0RSxHQUFhNUUsR0FBWUEsRUFBUzZFLFVBQ2pEOXBDLEVBQU12QixHQUFPd21DLEVBQVc4RSxHQUFZRixFQUFTNUUsR0FBWTRFLElBSy9ELFNBQVNFLEdBQWFDLEVBQUlDLEdBQ3hCLElBQUlDLEVBQVMsU0FBVXhiLEVBQUdTLEdBRXhCNmEsRUFBR3RiLEVBQUdTLEdBQ044YSxFQUFHdmIsRUFBR1MsSUFHUixPQURBK2EsRUFBT0osU0FBVSxFQUNWSSxFQUtULFNBQVNiLEdBQWdCem5DLEVBQVNULEdBQ2hDLElBQUl3NUIsRUFBUS80QixFQUFRd25DLE9BQVN4bkMsRUFBUXduQyxNQUFNek8sTUFBUyxRQUNoRGp4QixFQUFTOUgsRUFBUXduQyxPQUFTeG5DLEVBQVF3bkMsTUFBTTEvQixPQUFVLFNBQ3BEdkksRUFBS3EvQixRQUFVci9CLEVBQUtxL0IsTUFBUSxLQUFLN0YsR0FBUXg1QixFQUFLaW9DLE1BQU1wbEMsTUFDdEQsSUFBSThkLEVBQUszZ0IsRUFBSzJnQixLQUFPM2dCLEVBQUsyZ0IsR0FBSyxJQUMzQm1qQixFQUFXbmpCLEVBQUdwWSxHQUNkaEksRUFBV1AsRUFBS2lvQyxNQUFNMW5DLFNBQ3RCMHJCLEVBQU02WCxJQUVOcGxDLE1BQU1DLFFBQVFtbEMsSUFDc0IsSUFBaENBLEVBQVM5a0MsUUFBUXVCLEdBQ2pCdWpDLElBQWF2akMsS0FFakJvZ0IsRUFBR3BZLEdBQVMsQ0FBQ2hJLEdBQVU5QixPQUFPcWxDLElBR2hDbmpCLEVBQUdwWSxHQUFTaEksRUFNaEIsSUFBSXlvQyxHQUFtQixFQUNuQkMsR0FBbUIsRUFJdkIsU0FBUzdDLEdBQ1B6N0IsRUFDQXFwQixFQUNBaDBCLEVBQ0FrcUIsRUFDQWdmLEVBQ0FDLEdBVUEsT0FSSXpxQyxNQUFNQyxRQUFRcUIsSUFBU29zQixFQUFZcHNCLE1BQ3JDa3BDLEVBQW9CaGYsRUFDcEJBLEVBQVdscUIsRUFDWEEsT0FBTytWLEdBRUxtVyxFQUFPaWQsS0FDVEQsRUFBb0JELElBRWZHLEdBQWV6K0IsRUFBU3FwQixFQUFLaDBCLEVBQU1rcUIsRUFBVWdmLEdBR3RELFNBQVNFLEdBQ1B6K0IsRUFDQXFwQixFQUNBaDBCLEVBQ0FrcUIsRUFDQWdmLEdBRUEsR0FBSWpkLEVBQU1qc0IsSUFBU2lzQixFQUFNLEVBQU8ySixRQU05QixPQUx5Qzd2QixHQUN2QyxtREFBc0RpRixLQUFLRSxVQUFVbEwsR0FBUywyREFFOUUySyxHQUVLcXFCLEtBTVQsR0FISS9JLEVBQU1qc0IsSUFBU2lzQixFQUFNanNCLEVBQUtxcEMsTUFDNUJyVixFQUFNaDBCLEVBQUtxcEMsS0FFUnJWLEVBRUgsT0FBT2dCLEtBMkJULElBQUlJLEVBQU9oQixFQUVMM0MsR0F6Qkp4RixFQUFNanNCLElBQVNpc0IsRUFBTWpzQixFQUFLMUMsT0FBUzh1QixFQUFZcHNCLEVBQUsxQyxNQUdsRHlJLEdBQ0UsMkVBRUE0RSxHQUtGak0sTUFBTUMsUUFBUXVyQixJQUNPLG9CQUFoQkEsRUFBUyxLQUVoQmxxQixFQUFPQSxHQUFRLEdBQ2ZBLEVBQUtnbUMsWUFBYyxDQUFFNzhCLFFBQVMrZ0IsRUFBUyxJQUN2Q0EsRUFBU25yQixPQUFTLEdBRWhCbXFDLElBQXNCRCxHQUN4Qi9lLEVBQVcyVixHQUFrQjNWLEdBQ3BCZ2YsSUFBc0JGLEtBQy9COWUsRUFBVzBWLEdBQXdCMVYsSUFHbEIsa0JBQVI4SixJQUVUSSxFQUFNenBCLEVBQVEyK0IsUUFBVTMrQixFQUFRMitCLE9BQU9sVixJQUFPclAsRUFBTzJLLGdCQUFnQnNFLEdBQ2pFalAsRUFBT3dLLGNBQWN5RSxJQUVzQi9ILEVBQU1qc0IsSUFBU2lzQixFQUFNanNCLEVBQUtvb0MsV0FDckVyaUMsR0FDRyxpRkFBbUZpdUIsRUFBTSxLQUMxRnJwQixHQUdKeXFCLEVBQVEsSUFBSXJCLEdBQ1ZoUCxFQUFPNEsscUJBQXFCcUUsR0FBTWgwQixFQUFNa3FCLE9BQ3hDblUsT0FBV0EsRUFBV3BMLElBU3hCeXFCLEVBUFdwMUIsR0FBU0EsRUFBS3VwQyxNQUFRdGQsRUFBTXdGLEVBQU93SCxHQUFhdHVCLEVBQVFnRixTQUFVLGFBQWNxa0IsSUFPbkYsSUFBSUQsR0FDVkMsRUFBS2gwQixFQUFNa3FCLE9BQ1huVSxPQUFXQSxFQUFXcEwsR0FQaEJrSyxHQUFnQjRjLEVBQU16eEIsRUFBTTJLLEVBQVN1ZixFQUFVOEosSUFZekRvQixFQUFRdmdCLEdBQWdCbWYsRUFBS2gwQixFQUFNMkssRUFBU3VmLEdBRTlDLE9BQUl4ckIsTUFBTUMsUUFBUXkyQixHQUNUQSxFQUNFbkosRUFBTW1KLElBQ1huSixFQUFNbUksSUFBT29WLEdBQVFwVSxFQUFPaEIsR0FDNUJuSSxFQUFNanNCLElBQVN5cEMsR0FBcUJ6cEMsR0FDakNvMUIsR0FFQUosS0FJWCxTQUFTd1UsR0FBU3BVLEVBQU9oQixFQUFJc1YsR0FPM0IsR0FOQXRVLEVBQU1oQixHQUFLQSxFQUNPLGtCQUFkZ0IsRUFBTXBCLE1BRVJJLE9BQUtyZSxFQUNMMnpCLEdBQVEsR0FFTnpkLEVBQU1tSixFQUFNbEwsVUFDZCxJQUFLLElBQUlwckIsRUFBSSxFQUFHMHVCLEVBQUk0SCxFQUFNbEwsU0FBU25yQixPQUFRRCxFQUFJMHVCLEVBQUcxdUIsSUFBSyxDQUNyRCxJQUFJZ29CLEVBQVFzTyxFQUFNbEwsU0FBU3ByQixHQUN2Qm10QixFQUFNbkYsRUFBTWtOLE9BQ2RoSSxFQUFRbEYsRUFBTXNOLEtBQVFsSSxFQUFPd2QsSUFBd0IsUUFBZDVpQixFQUFNa04sTUFDN0N3VixHQUFRMWlCLEVBQU9zTixFQUFJc1YsSUFTM0IsU0FBU0QsR0FBc0J6cEMsR0FDekJpaEIsRUFBU2poQixFQUFLMnBDLFFBQ2hCOUwsR0FBUzc5QixFQUFLMnBDLE9BRVoxb0IsRUFBU2poQixFQUFLNHBDLFFBQ2hCL0wsR0FBUzc5QixFQUFLNHBDLE9BTWxCLFNBQVNDLEdBQVlqaEMsR0FDbkJBLEVBQUdraEMsT0FBUyxLQUNabGhDLEVBQUc0NkIsYUFBZSxLQUNsQixJQUFJL2lDLEVBQVVtSSxFQUFHK0csU0FDYm82QixFQUFjbmhDLEVBQUcwZ0MsT0FBUzdvQyxFQUFRK25DLGFBQ2xDakMsRUFBZ0J3RCxHQUFlQSxFQUFZcC9CLFFBQy9DL0IsRUFBR3NCLE9BQVN5MkIsR0FBYWxnQyxFQUFRdXBDLGdCQUFpQnpELEdBQ2xEMzlCLEVBQUd3QixhQUFlMmhCLEVBS2xCbmpCLEVBQUdzOUIsR0FBSyxTQUFVM1ksRUFBR1MsRUFBR2h3QixFQUFHbW9DLEdBQUssT0FBT0MsR0FBY3g5QixFQUFJMmtCLEVBQUdTLEVBQUdod0IsRUFBR21vQyxHQUFHLElBR3JFdjlCLEVBQUd3NUIsZUFBaUIsU0FBVTdVLEVBQUdTLEVBQUdod0IsRUFBR21vQyxHQUFLLE9BQU9DLEdBQWN4OUIsRUFBSTJrQixFQUFHUyxFQUFHaHdCLEVBQUdtb0MsR0FBRyxJQUlqRixJQUFJOEQsRUFBYUYsR0FBZUEsRUFBWS9wQyxLQUkxQzIyQixHQUFrQi90QixFQUFJLFNBQVVxaEMsR0FBY0EsRUFBVzVLLE9BQVN0VCxHQUFhLFlBQzVFbWUsSUFBNEJua0MsR0FBSyxzQkFBdUI2QyxNQUN4RCxHQUNIK3RCLEdBQWtCL3RCLEVBQUksYUFBY25JLEVBQVEwcEMsa0JBQW9CcGUsR0FBYSxZQUMxRW1lLElBQTRCbmtDLEdBQUssMEJBQTJCNkMsTUFDNUQsR0FPUCxJQWtRSTBFLEdBbFFBODhCLEdBQTJCLEtBRS9CLFNBQVNDLEdBQWFoakMsR0FFcEJrOUIsR0FBcUJsOUIsRUFBSTFLLFdBRXpCMEssRUFBSTFLLFVBQVUydEMsVUFBWSxTQUFVdnRDLEdBQ2xDLE9BQU9pcEIsR0FBU2pwQixFQUFJNEYsT0FHdEIwRSxFQUFJMUssVUFBVTR0QyxRQUFVLFdBQ3RCLElBaUJJblYsRUFqQkF4c0IsRUFBS2pHLEtBQ0x3UCxFQUFNdkosRUFBRytHLFNBQ1Q2dEIsRUFBU3JyQixFQUFJcXJCLE9BQ2JnTCxFQUFlcjJCLEVBQUlxMkIsYUFFbkJBLElBQ0Y1L0IsRUFBR3dCLGFBQWU0MkIsR0FDaEJ3SCxFQUFheG9DLEtBQUtnbUMsWUFDbEJwOUIsRUFBR3NCLE9BQ0h0QixFQUFHd0IsZUFNUHhCLEVBQUcwZ0MsT0FBU2QsRUFHWixJQUlFNEIsR0FBMkJ4aEMsRUFDM0J3c0IsRUFBUW9JLEVBQU9wZ0MsS0FBS3dMLEVBQUc4MEIsYUFBYzkwQixFQUFHdzVCLGdCQUN4QyxNQUFPdjNCLElBS1AsR0FKQTB3QixHQUFZMXdCLEdBQUdqQyxFQUFJLFVBSTBCQSxFQUFHK0csU0FBUzY2QixZQUN2RCxJQUNFcFYsRUFBUXhzQixFQUFHK0csU0FBUzY2QixZQUFZcHRDLEtBQUt3TCxFQUFHODBCLGFBQWM5MEIsRUFBR3c1QixlQUFnQnYzQixJQUN6RSxNQUFPQSxJQUNQMHdCLEdBQVkxd0IsR0FBR2pDLEVBQUksZUFDbkJ3c0IsRUFBUXhzQixFQUFHa2hDLFlBR2IxVSxFQUFReHNCLEVBQUdraEMsT0FFYixRQUNBTSxHQUEyQixLQW1CN0IsT0FoQkkxckMsTUFBTUMsUUFBUXkyQixJQUEyQixJQUFqQkEsRUFBTXIyQixTQUNoQ3EyQixFQUFRQSxFQUFNLElBR1ZBLGFBQWlCckIsS0FDd0JyMUIsTUFBTUMsUUFBUXkyQixJQUN6RHJ2QixHQUNFLHVHQUVBNkMsR0FHSndzQixFQUFRSixNQUdWSSxFQUFNOWlCLE9BQVNrMkIsRUFDUnBULEdBTVgsU0FBU3FWLEdBQVlDLEVBQU1DLEdBT3pCLE9BTEVELEVBQUtFLFlBQ0pqWixJQUEwQyxXQUE3QitZLEVBQUt2MEIsT0FBT00sZ0JBRTFCaTBCLEVBQU9BLEVBQUt2aEMsU0FFUDhYLEVBQVN5cEIsR0FDWkMsRUFBSzVnQyxPQUFPMmdDLEdBQ1pBLEVBR04sU0FBUzNDLEdBQ1A4QyxFQUNBN3FDLEVBQ0EySyxFQUNBdWYsRUFDQThKLEdBRUEsSUFBSWlCLEVBQU9ELEtBR1gsT0FGQUMsRUFBS2QsYUFBZTBXLEVBQ3BCNVYsRUFBS0gsVUFBWSxDQUFFOTBCLEtBQU1BLEVBQU0ySyxRQUFTQSxFQUFTdWYsU0FBVUEsRUFBVThKLElBQUtBLEdBQ25FaUIsRUFHVCxTQUFTNlMsR0FDUCtDLEVBQ0FoRCxHQUVBLEdBQUkzYixFQUFPMmUsRUFBUXZrQyxRQUFVMmxCLEVBQU00ZSxFQUFRQyxXQUN6QyxPQUFPRCxFQUFRQyxVQUdqQixHQUFJN2UsRUFBTTRlLEVBQVFFLFVBQ2hCLE9BQU9GLEVBQVFFLFNBR2pCLElBQUlDLEVBQVFaLEdBTVosR0FMSVksR0FBUy9lLEVBQU00ZSxFQUFRSSxVQUE4QyxJQUFuQ0osRUFBUUksT0FBT2pzQyxRQUFRZ3NDLElBRTNESCxFQUFRSSxPQUFPaHNDLEtBQUsrckMsR0FHbEI5ZSxFQUFPMmUsRUFBUUssVUFBWWpmLEVBQU00ZSxFQUFRTSxhQUMzQyxPQUFPTixFQUFRTSxZQUdqQixHQUFJSCxJQUFVL2UsRUFBTTRlLEVBQVFJLFFBQVMsQ0FDbkMsSUFBSUEsRUFBU0osRUFBUUksT0FBUyxDQUFDRCxHQUMzQm5qQixHQUFPLEVBQ1B1akIsRUFBZSxLQUNmQyxFQUFlLEtBRWxCLEVBQVE5akMsSUFBSSxrQkFBa0IsV0FBYyxPQUFPMGxCLEVBQU9nZSxFQUFRRCxNQUVuRSxJQUFJTSxFQUFjLFNBQVVDLEdBQzFCLElBQUssSUFBSXpzQyxFQUFJLEVBQUcwdUIsRUFBSXlkLEVBQU9sc0MsT0FBUUQsRUFBSTB1QixFQUFHMXVCLElBQ3ZDbXNDLEVBQU9uc0MsR0FBSTBzQyxlQUdWRCxJQUNGTixFQUFPbHNDLE9BQVMsRUFDSyxPQUFqQnFzQyxJQUNGSyxhQUFhTCxHQUNiQSxFQUFlLE1BRUksT0FBakJDLElBQ0ZJLGFBQWFKLEdBQ2JBLEVBQWUsUUFLakIvcUMsRUFBVWlRLEdBQUssU0FBVS9SLEdBRTNCcXNDLEVBQVFFLFNBQVdOLEdBQVdqc0MsRUFBS3FwQyxHQUc5QmhnQixFQUdIb2pCLEVBQU9sc0MsT0FBUyxFQUZoQnVzQyxHQUFZLE1BTVo5b0MsRUFBUytOLEdBQUssU0FBVXpOLEdBQ2VpRCxHQUN2QyxzQ0FBeUNzRixPQUFPdy9CLElBQy9DL25DLEVBQVUsYUFBZUEsRUFBVSxLQUVsQ21wQixFQUFNNGUsRUFBUUMsYUFDaEJELEVBQVF2a0MsT0FBUSxFQUNoQmdsQyxHQUFZLE9BSVo5c0MsRUFBTXFzQyxFQUFRdnFDLEVBQVNrQyxHQStDM0IsT0E3Q0l5ZSxFQUFTemlCLEtBQ1B5QixFQUFVekIsR0FFUnd0QixFQUFRNmUsRUFBUUUsV0FDbEJ2c0MsRUFBSTBCLEtBQUtJLEVBQVNrQyxHQUVYdkMsRUFBVXpCLEVBQUkwVCxhQUN2QjFULEVBQUkwVCxVQUFVaFMsS0FBS0ksRUFBU2tDLEdBRXhCeXBCLEVBQU16dEIsRUFBSThILFNBQ1p1a0MsRUFBUUMsVUFBWUwsR0FBV2pzQyxFQUFJOEgsTUFBT3VoQyxJQUd4QzViLEVBQU16dEIsRUFBSTBzQyxXQUNaTCxFQUFRTSxZQUFjVixHQUFXanNDLEVBQUkwc0MsUUFBU3JELEdBQzVCLElBQWRycEMsRUFBSWt0QyxNQUNOYixFQUFRSyxTQUFVLEVBRWxCRSxFQUFlcnJCLFlBQVcsV0FDeEJxckIsRUFBZSxLQUNYcGYsRUFBUTZlLEVBQVFFLFdBQWEvZSxFQUFRNmUsRUFBUXZrQyxTQUMvQ3VrQyxFQUFRSyxTQUFVLEVBQ2xCSSxHQUFZLE1BRWI5c0MsRUFBSWt0QyxPQUFTLE1BSWhCemYsRUFBTXp0QixFQUFJbXRDLFdBQ1pOLEVBQWV0ckIsWUFBVyxXQUN4QnNyQixFQUFlLEtBQ1hyZixFQUFRNmUsRUFBUUUsV0FDbEJ2b0MsRUFFTyxZQUFlaEUsRUFBVyxRQUFJLFNBSXRDQSxFQUFJbXRDLFlBS2I5akIsR0FBTyxFQUVBZ2pCLEVBQVFLLFFBQ1hMLEVBQVFNLFlBQ1JOLEVBQVFFLFVBTWhCLFNBQVNoVyxHQUFvQkUsR0FDM0IsT0FBT0EsRUFBS0wsV0FBYUssRUFBS2QsYUFLaEMsU0FBU3lYLEdBQXdCMWhCLEdBQy9CLEdBQUl4ckIsTUFBTUMsUUFBUXVyQixHQUNoQixJQUFLLElBQUlwckIsRUFBSSxFQUFHQSxFQUFJb3JCLEVBQVNuckIsT0FBUUQsSUFBSyxDQUN4QyxJQUFJZCxFQUFJa3NCLEVBQVNwckIsR0FDakIsR0FBSW10QixFQUFNanVCLEtBQU9pdUIsRUFBTWp1QixFQUFFK1UsbUJBQXFCZ2lCLEdBQW1CLzJCLElBQy9ELE9BQU9BLEdBVWYsU0FBUzZ0QyxHQUFZampDLEdBQ25CQSxFQUFHa2pDLFFBQVVwdkMsT0FBT2dCLE9BQU8sTUFDM0JrTCxFQUFHbWpDLGVBQWdCLEVBRW5CLElBQUlqRyxFQUFZbDlCLEVBQUcrRyxTQUFTdzZCLGlCQUN4QnJFLEdBQ0ZrRyxHQUF5QnBqQyxFQUFJazlCLEdBTWpDLFNBQVM5VCxHQUFLenBCLEVBQU94TCxHQUNuQnVRLEdBQU8vRixJQUFJZ0IsRUFBT3hMLEdBR3BCLFNBQVNrdkMsR0FBVTFqQyxFQUFPeEwsR0FDeEJ1USxHQUFPN0YsS0FBS2MsRUFBT3hMLEdBR3JCLFNBQVNtaUMsR0FBbUIzMkIsRUFBT3hMLEdBQ2pDLElBQUltdkMsRUFBVTUrQixHQUNkLE9BQU8sU0FBUzYrQixJQUNkLElBQUkzdEMsRUFBTXpCLEVBQUdzSixNQUFNLEtBQU1tQixXQUNiLE9BQVJoSixHQUNGMHRDLEVBQVF6a0MsS0FBS2MsRUFBTzRqQyxJQUsxQixTQUFTSCxHQUNQcGpDLEVBQ0FrOUIsRUFDQXNHLEdBRUE5K0IsR0FBUzFFLEVBQ1RtMkIsR0FBZ0IrRyxFQUFXc0csR0FBZ0IsR0FBSXBhLEdBQUtpYSxHQUFVL00sR0FBbUJ0MkIsR0FDakYwRSxRQUFTeUksRUFHWCxTQUFTczJCLEdBQWFobEMsR0FDcEIsSUFBSWlsQyxFQUFTLFNBQ2JqbEMsRUFBSTFLLFVBQVU0SyxJQUFNLFNBQVVnQixFQUFPeEwsR0FDbkMsSUFBSTZMLEVBQUtqRyxLQUNULEdBQUlqRSxNQUFNQyxRQUFRNEosR0FDaEIsSUFBSyxJQUFJekosRUFBSSxFQUFHMHVCLEVBQUlqbEIsRUFBTXhKLE9BQVFELEVBQUkwdUIsRUFBRzF1QixJQUN2QzhKLEVBQUdyQixJQUFJZ0IsRUFBTXpKLEdBQUkvQixRQUdsQjZMLEVBQUdrakMsUUFBUXZqQyxLQUFXSyxFQUFHa2pDLFFBQVF2akMsR0FBUyxLQUFLdEosS0FBS2xDLEdBR2pEdXZDLEVBQU94cUMsS0FBS3lHLEtBQ2RLLEVBQUdtakMsZUFBZ0IsR0FHdkIsT0FBT25qQyxHQUdUdkIsRUFBSTFLLFVBQVUrSyxNQUFRLFNBQVVhLEVBQU94TCxHQUNyQyxJQUFJNkwsRUFBS2pHLEtBQ1QsU0FBU2dlLElBQ1AvWCxFQUFHbkIsS0FBS2MsRUFBT29ZLEdBQ2Y1akIsRUFBR3NKLE1BQU11QyxFQUFJcEIsV0FJZixPQUZBbVosRUFBRzVqQixHQUFLQSxFQUNSNkwsRUFBR3JCLElBQUlnQixFQUFPb1ksR0FDUC9YLEdBR1R2QixFQUFJMUssVUFBVThLLEtBQU8sU0FBVWMsRUFBT3hMLEdBQ3BDLElBQUk2TCxFQUFLakcsS0FFVCxJQUFLNkUsVUFBVXpJLE9BRWIsT0FEQTZKLEVBQUdrakMsUUFBVXB2QyxPQUFPZ0IsT0FBTyxNQUNwQmtMLEVBR1QsR0FBSWxLLE1BQU1DLFFBQVE0SixHQUFRLENBQ3hCLElBQUssSUFBSWdrQyxFQUFNLEVBQUcvZSxFQUFJamxCLEVBQU14SixPQUFRd3RDLEVBQU0vZSxFQUFHK2UsSUFDM0MzakMsRUFBR25CLEtBQUtjLEVBQU1na0MsR0FBTXh2QyxHQUV0QixPQUFPNkwsRUFHVCxJQVNJNGUsRUFUQWdsQixFQUFNNWpDLEVBQUdrakMsUUFBUXZqQyxHQUNyQixJQUFLaWtDLEVBQ0gsT0FBTzVqQyxFQUVULElBQUs3TCxFQUVILE9BREE2TCxFQUFHa2pDLFFBQVF2akMsR0FBUyxLQUNiSyxFQUlULElBQUk5SixFQUFJMHRDLEVBQUl6dEMsT0FDWixNQUFPRCxJQUVMLEdBREEwb0IsRUFBS2dsQixFQUFJMXRDLEdBQ0wwb0IsSUFBT3pxQixHQUFNeXFCLEVBQUd6cUIsS0FBT0EsRUFBSSxDQUM3Qnl2QyxFQUFJbnRDLE9BQU9QLEVBQUcsR0FDZCxNQUdKLE9BQU84SixHQUdUdkIsRUFBSTFLLFVBQVVnTCxNQUFRLFNBQVVZLEdBQzlCLElBQUlLLEVBQUtqRyxLQUVIOHBDLEVBQWlCbGtDLEVBQU11a0IsY0FDdkIyZixJQUFtQmxrQyxHQUFTSyxFQUFHa2pDLFFBQVFXLElBQ3pDdmEsR0FDRSxVQUFhdWEsRUFBaUIsNkJBQzdCcmEsR0FBb0J4cEIsR0FBTyx1Q0FBMENMLEVBQVEsaUtBRzlDNmtCLEVBQVU3a0IsR0FBVSxpQkFBcUJBLEVBQVEsTUFJdkYsSUFBSWlrQyxFQUFNNWpDLEVBQUdrakMsUUFBUXZqQyxHQUNyQixHQUFJaWtDLEVBQUssQ0FDUEEsRUFBTUEsRUFBSXp0QyxPQUFTLEVBQUk0dUIsRUFBUTZlLEdBQU9BLEVBR3RDLElBRkEsSUFBSWxvQyxFQUFPcXBCLEVBQVFubUIsVUFBVyxHQUMxQnlVLEVBQU8sc0JBQXlCMVQsRUFBUSxJQUNuQ3pKLEVBQUksRUFBRzB1QixFQUFJZ2YsRUFBSXp0QyxPQUFRRCxFQUFJMHVCLEVBQUcxdUIsSUFDckM4OEIsR0FBd0I0USxFQUFJMXRDLEdBQUk4SixFQUFJdEUsRUFBTXNFLEVBQUlxVCxHQUdsRCxPQUFPclQsR0FNWCxJQUFJdStCLEdBQWlCLEtBQ2pCK0MsSUFBMkIsRUFFL0IsU0FBU3dDLEdBQWtCOWpDLEdBQ3pCLElBQUkrakMsRUFBcUJ4RixHQUV6QixPQURBQSxHQUFpQnYrQixFQUNWLFdBQ0x1K0IsR0FBaUJ3RixHQUlyQixTQUFTQyxHQUFlaGtDLEdBQ3RCLElBQUluSSxFQUFVbUksRUFBRytHLFNBR2IyQyxFQUFTN1IsRUFBUTZSLE9BQ3JCLEdBQUlBLElBQVc3UixFQUFRNG5DLFNBQVUsQ0FDL0IsTUFBTy8xQixFQUFPM0MsU0FBUzA0QixVQUFZLzFCLEVBQU81QyxRQUN4QzRDLEVBQVNBLEVBQU81QyxRQUVsQjRDLEVBQU9mLFVBQVV0UyxLQUFLMkosR0FHeEJBLEVBQUc4RyxRQUFVNEMsRUFDYjFKLEVBQUc4cEIsTUFBUXBnQixFQUFTQSxFQUFPb2dCLE1BQVE5cEIsRUFFbkNBLEVBQUcySSxVQUFZLEdBQ2YzSSxFQUFHbUosTUFBUSxHQUVYbkosRUFBR2lrQyxTQUFXLEtBQ2Rqa0MsRUFBR2trQyxVQUFZLEtBQ2Zsa0MsRUFBR21rQyxpQkFBa0IsRUFDckJua0MsRUFBR3VJLFlBQWEsRUFDaEJ2SSxFQUFHaytCLGNBQWUsRUFDbEJsK0IsRUFBR29rQyxtQkFBb0IsRUFHekIsU0FBU0MsR0FBZ0I1bEMsR0FDdkJBLEVBQUkxSyxVQUFVdXdDLFFBQVUsU0FBVTlYLEVBQU95UixHQUN2QyxJQUFJaitCLEVBQUtqRyxLQUNMd3FDLEVBQVN2a0MsRUFBR3drQyxJQUNaQyxFQUFZemtDLEVBQUdraEMsT0FDZndELEVBQXdCWixHQUFrQjlqQyxHQUM5Q0EsRUFBR2toQyxPQUFTMVUsRUFRVnhzQixFQUFHd2tDLElBTEFDLEVBS016a0MsRUFBRzJrQyxVQUFVRixFQUFXalksR0FIeEJ4c0IsRUFBRzJrQyxVQUFVM2tDLEVBQUd3a0MsSUFBS2hZLEVBQU95UixHQUFXLEdBS2xEeUcsSUFFSUgsSUFDRkEsRUFBT0ssUUFBVSxNQUVmNWtDLEVBQUd3a0MsTUFDTHhrQyxFQUFHd2tDLElBQUlJLFFBQVU1a0MsR0FHZkEsRUFBRzBnQyxRQUFVMWdDLEVBQUc4RyxTQUFXOUcsRUFBRzBnQyxTQUFXMWdDLEVBQUc4RyxRQUFRbzZCLFNBQ3REbGhDLEVBQUc4RyxRQUFRMDlCLElBQU14a0MsRUFBR3drQyxNQU14Qi9sQyxFQUFJMUssVUFBVTZ1QyxhQUFlLFdBQzNCLElBQUk1aUMsRUFBS2pHLEtBQ0xpRyxFQUFHaWtDLFVBQ0xqa0MsRUFBR2lrQyxTQUFTNXFCLFVBSWhCNWEsRUFBSTFLLFVBQVU0VyxTQUFXLFdBQ3ZCLElBQUkzSyxFQUFLakcsS0FDVCxJQUFJaUcsRUFBR29rQyxrQkFBUCxDQUdBekYsR0FBUzMrQixFQUFJLGlCQUNiQSxFQUFHb2tDLG1CQUFvQixFQUV2QixJQUFJMTZCLEVBQVMxSixFQUFHOEcsU0FDWjRDLEdBQVdBLEVBQU8wNkIsbUJBQXNCcGtDLEVBQUcrRyxTQUFTMDRCLFVBQ3REcGIsRUFBTzNhLEVBQU9mLFVBQVczSSxHQUd2QkEsRUFBR2lrQyxVQUNMamtDLEVBQUdpa0MsU0FBU1ksV0FFZCxJQUFJM3VDLEVBQUk4SixFQUFHOGtDLFVBQVUzdUMsT0FDckIsTUFBT0QsSUFDTDhKLEVBQUc4a0MsVUFBVTV1QyxHQUFHMnVDLFdBSWQ3a0MsRUFBR21kLE1BQU02UCxRQUNYaHRCLEVBQUdtZCxNQUFNNlAsT0FBT08sVUFHbEJ2dEIsRUFBR2srQixjQUFlLEVBRWxCbCtCLEVBQUcya0MsVUFBVTNrQyxFQUFHa2hDLE9BQVEsTUFFeEJ2QyxHQUFTMytCLEVBQUksYUFFYkEsRUFBR25CLE9BRUNtQixFQUFHd2tDLE1BQ0x4a0MsRUFBR3drQyxJQUFJSSxRQUFVLE1BR2Y1a0MsRUFBRzBnQyxTQUNMMWdDLEVBQUcwZ0MsT0FBT2gzQixPQUFTLFFBS3pCLFNBQVMrMEIsR0FDUHorQixFQUNBdUssRUFDQTJ5QixFQUNBaUUsRUFDQTRELEdBR0V6RCxJQUEyQixFQVM3QixJQUFJMEQsRUFBaUI3RCxFQUFZL3BDLEtBQUtnbUMsWUFDbEM2SCxFQUFpQmpsQyxFQUFHd0IsYUFDcEIwakMsS0FDREYsSUFBbUJBLEVBQWV2TSxTQUNsQ3dNLElBQW1COWhCLElBQWdCOGhCLEVBQWV4TSxTQUNsRHVNLEdBQWtCaGxDLEVBQUd3QixhQUFhazNCLE9BQVNzTSxFQUFldE0sTUFNekR5TSxLQUNGSixHQUNBL2tDLEVBQUcrRyxTQUFTcTZCLGlCQUNaOEQsR0FrQkYsR0FmQWxsQyxFQUFHK0csU0FBUzY0QixhQUFldUIsRUFDM0JuaEMsRUFBRzBnQyxPQUFTUyxFQUVSbmhDLEVBQUdraEMsU0FDTGxoQyxFQUFHa2hDLE9BQU94M0IsT0FBU3kzQixHQUVyQm5oQyxFQUFHK0csU0FBU3E2QixnQkFBa0IyRCxFQUs5Qi9rQyxFQUFHb2xDLE9BQVNqRSxFQUFZL3BDLEtBQUtxL0IsT0FBU3RULEVBQ3RDbmpCLEVBQUdxbEMsV0FBYW5JLEdBQWEvWixFQUd6QjVZLEdBQWF2SyxFQUFHK0csU0FBU3pELE1BQU8sQ0FDbEMrcEIsSUFBZ0IsR0FHaEIsSUFGQSxJQUFJL3BCLEVBQVF0RCxFQUFHb3hCLE9BQ1hrVSxFQUFXdGxDLEVBQUcrRyxTQUFTdytCLFdBQWEsR0FDL0JydkMsRUFBSSxFQUFHQSxFQUFJb3ZDLEVBQVNudkMsT0FBUUQsSUFBSyxDQUN4QyxJQUFJeEIsRUFBTTR3QyxFQUFTcHZDLEdBQ2Z5NkIsRUFBYzN3QixFQUFHK0csU0FBU3pELE1BQzlCQSxFQUFNNU8sR0FBT2c4QixHQUFhaDhCLEVBQUtpOEIsRUFBYXBtQixFQUFXdkssR0FFekRxdEIsSUFBZ0IsR0FFaEJydEIsRUFBRytHLFNBQVN3RCxVQUFZQSxFQUkxQnZLLEVBQUd3bEMsb0JBQXNCeGxDLEVBQUd3bEMsbUJBQW1CeGxDLEdBRy9DazlCLEVBQVlBLEdBQWEvWixFQUN6QixJQUFJcWdCLEVBQWV4akMsRUFBRytHLFNBQVN3NkIsaUJBQy9CdmhDLEVBQUcrRyxTQUFTdzZCLGlCQUFtQnJFLEVBQy9Ca0csR0FBeUJwakMsRUFBSWs5QixFQUFXc0csR0FHcEMyQixJQUNGbmxDLEVBQUdzQixPQUFTeTJCLEdBQWFnTixFQUFnQjVELEVBQVlwL0IsU0FDckQvQixFQUFHNGlDLGdCQUlIdEIsSUFBMkIsRUFJL0IsU0FBU21FLEdBQWtCemxDLEdBQ3pCLE1BQU9BLElBQU9BLEVBQUtBLEVBQUc4RyxTQUNwQixHQUFJOUcsRUFBR2trQyxVQUFhLE9BQU8sRUFFN0IsT0FBTyxFQUdULFNBQVNyRixHQUF3QjcrQixFQUFJMGxDLEdBQ25DLEdBQUlBLEdBRUYsR0FEQTFsQyxFQUFHbWtDLGlCQUFrQixFQUNqQnNCLEdBQWlCemxDLEdBQ25CLFlBRUcsR0FBSUEsRUFBR21rQyxnQkFDWixPQUVGLEdBQUlua0MsRUFBR2trQyxXQUE4QixPQUFqQmxrQyxFQUFHa2tDLFVBQW9CLENBQ3pDbGtDLEVBQUdra0MsV0FBWSxFQUNmLElBQUssSUFBSWh1QyxFQUFJLEVBQUdBLEVBQUk4SixFQUFHMkksVUFBVXhTLE9BQVFELElBQ3ZDMm9DLEdBQXVCNytCLEVBQUcySSxVQUFVelMsSUFFdEN5b0MsR0FBUzMrQixFQUFJLGNBSWpCLFNBQVMrK0IsR0FBMEIvK0IsRUFBSTBsQyxHQUNyQyxLQUFJQSxJQUNGMWxDLEVBQUdta0MsaUJBQWtCLEdBQ2pCc0IsR0FBaUJ6bEMsT0FJbEJBLEVBQUdra0MsVUFBVyxDQUNqQmxrQyxFQUFHa2tDLFdBQVksRUFDZixJQUFLLElBQUlodUMsRUFBSSxFQUFHQSxFQUFJOEosRUFBRzJJLFVBQVV4UyxPQUFRRCxJQUN2QzZvQyxHQUF5Qi8rQixFQUFHMkksVUFBVXpTLElBRXhDeW9DLEdBQVMzK0IsRUFBSSxnQkFJakIsU0FBUzIrQixHQUFVMytCLEVBQUl6SixHQUVyQmswQixLQUNBLElBQUlrSyxFQUFXMzBCLEVBQUcrRyxTQUFTeFEsR0FDdkI4YyxFQUFPOWMsRUFBTyxRQUNsQixHQUFJbytCLEVBQ0YsSUFBSyxJQUFJeitCLEVBQUksRUFBR3l2QyxFQUFJaFIsRUFBU3grQixPQUFRRCxFQUFJeXZDLEVBQUd6dkMsSUFDMUM4OEIsR0FBd0IyQixFQUFTeitCLEdBQUk4SixFQUFJLEtBQU1BLEVBQUlxVCxHQUduRHJULEVBQUdtakMsZUFDTG5qQyxFQUFHakIsTUFBTSxRQUFVeEksR0FFckJxMEIsS0FLRixJQUFJZ2IsR0FBbUIsSUFFbkJydUMsR0FBUSxHQUNSc3VDLEdBQW9CLEdBQ3BCMWMsR0FBTSxHQUNOMmMsR0FBVyxHQUNYQyxJQUFVLEVBQ1ZDLElBQVcsRUFDWHh2QyxHQUFRLEVBS1osU0FBU3l2QyxLQUNQenZDLEdBQVFlLEdBQU1wQixPQUFTMHZDLEdBQWtCMXZDLE9BQVMsRUFDbERnekIsR0FBTSxHQUVKMmMsR0FBVyxHQUViQyxHQUFVQyxJQUFXLEVBUXZCLElBR0lFLEdBQVN6aUMsS0FBSzBpQyxJQVFsQixHQUFJdGUsSUFBY08sR0FBTSxDQUN0QixJQUFJOUIsR0FBYzVPLE9BQU80TyxZQUV2QkEsSUFDMkIsb0JBQXBCQSxHQUFZNmYsS0FDbkJELEtBQVdwUyxTQUFTc1MsWUFBWSxTQUFTQyxZQU16Q0gsR0FBUyxXQUFjLE9BQU81ZixHQUFZNmYsUUFPOUMsU0FBU0csS0FHUCxJQUFJQyxFQUFTL2IsRUFjYixJQWhCd0IwYixLQUN4QkYsSUFBVyxFQVdYenVDLEdBQU0yekIsTUFBSyxTQUFVdkcsRUFBR1MsR0FBSyxPQUFPVCxFQUFFNkYsR0FBS3BGLEVBQUVvRixNQUl4Q2gwQixHQUFRLEVBQUdBLEdBQVFlLEdBQU1wQixPQUFRSyxLQVNwQyxHQVJBK3ZDLEVBQVVodkMsR0FBTWYsSUFDWit2QyxFQUFRQyxRQUNWRCxFQUFRQyxTQUVWaGMsRUFBSytiLEVBQVEvYixHQUNickIsR0FBSXFCLEdBQU0sS0FDVitiLEVBQVFFLE1BRWdELE1BQVh0ZCxHQUFJcUIsS0FDL0NzYixHQUFTdGIsSUFBT3NiLEdBQVN0YixJQUFPLEdBQUssRUFDakNzYixHQUFTdGIsR0FBTW9iLElBQWtCLENBQ25Dem9DLEdBQ0UseUNBQ0VvcEMsRUFBUUcsS0FDSCwrQkFBbUNILEVBQWtCLFdBQUksSUFDMUQsbUNBRU5BLEVBQVF2bUMsSUFFVixNQU1OLElBQUkybUMsRUFBaUJkLEdBQWtCenRDLFFBQ25Dd3VDLEVBQWVydkMsR0FBTWEsUUFFekI2dEMsS0FHQVksR0FBbUJGLEdBQ25CRyxHQUFpQkYsR0FJYnhxQixJQUFZRCxFQUFPQyxVQUNyQkEsR0FBU3RFLEtBQUssU0FJbEIsU0FBU2d2QixHQUFrQnZ2QyxHQUN6QixJQUFJckIsRUFBSXFCLEVBQU1wQixPQUNkLE1BQU9ELElBQUssQ0FDVixJQUFJcXdDLEVBQVVodkMsRUFBTXJCLEdBQ2hCOEosRUFBS3VtQyxFQUFRdm1DLEdBQ2JBLEVBQUdpa0MsV0FBYXNDLEdBQVd2bUMsRUFBR3VJLGFBQWV2SSxFQUFHaytCLGNBQ2xEUyxHQUFTMytCLEVBQUksWUFTbkIsU0FBUzQrQixHQUF5QjUrQixHQUdoQ0EsRUFBR2trQyxXQUFZLEVBQ2YyQixHQUFrQnh2QyxLQUFLMkosR0FHekIsU0FBUzZtQyxHQUFvQnR2QyxHQUMzQixJQUFLLElBQUlyQixFQUFJLEVBQUdBLEVBQUlxQixFQUFNcEIsT0FBUUQsSUFDaENxQixFQUFNckIsR0FBR2d1QyxXQUFZLEVBQ3JCckYsR0FBdUJ0bkMsRUFBTXJCLElBQUksR0FTckMsU0FBUzZ3QyxHQUFjUixHQUNyQixJQUFJL2IsRUFBSytiLEVBQVEvYixHQUNqQixHQUFlLE1BQVhyQixHQUFJcUIsR0FBYSxDQUVuQixHQURBckIsR0FBSXFCLElBQU0sRUFDTHdiLEdBRUUsQ0FHTCxJQUFJOXZDLEVBQUlxQixHQUFNcEIsT0FBUyxFQUN2QixNQUFPRCxFQUFJTSxJQUFTZSxHQUFNckIsR0FBR3MwQixHQUFLK2IsRUFBUS9iLEdBQ3hDdDBCLElBRUZxQixHQUFNZCxPQUFPUCxFQUFJLEVBQUcsRUFBR3F3QyxRQVJ2Qmh2QyxHQUFNbEIsS0FBS2t3QyxHQVdiLElBQUtSLEdBQVMsQ0FHWixHQUZBQSxJQUFVLEdBRW9DNXBCLEVBQU8xTSxNQUVuRCxZQURBNjJCLEtBR0ZscEIsR0FBU2twQixNQVNmLElBQUlVLEdBQVEsRUFPUkMsR0FBVSxTQUNaam5DLEVBQ0FrbkMsRUFDQXRvQixFQUNBL21CLEVBQ0FzdkMsR0FFQXB0QyxLQUFLaUcsR0FBS0EsRUFDTm1uQyxJQUNGbm5DLEVBQUdpa0MsU0FBV2xxQyxNQUVoQmlHLEVBQUc4a0MsVUFBVXp1QyxLQUFLMEQsTUFFZGxDLEdBQ0ZrQyxLQUFLaWxCLE9BQVNubkIsRUFBUW1uQixLQUN0QmpsQixLQUFLMnNDLE9BQVM3dUMsRUFBUTZ1QyxLQUN0QjNzQyxLQUFLcXRDLE9BQVN2dkMsRUFBUXV2QyxLQUN0QnJ0QyxLQUFLa2xCLE9BQVNwbkIsRUFBUW9uQixLQUN0QmxsQixLQUFLeXNDLE9BQVMzdUMsRUFBUTJ1QyxRQUV0QnpzQyxLQUFLaWxCLEtBQU9qbEIsS0FBSzJzQyxLQUFPM3NDLEtBQUtxdEMsS0FBT3J0QyxLQUFLa2xCLE1BQU8sRUFFbERsbEIsS0FBSzZrQixHQUFLQSxFQUNWN2tCLEtBQUt5d0IsS0FBT3djLEdBQ1pqdEMsS0FBS3N0QyxRQUFTLEVBQ2R0dEMsS0FBS3V0QyxNQUFRdnRDLEtBQUtxdEMsS0FDbEJydEMsS0FBS3d0QyxLQUFPLEdBQ1p4dEMsS0FBS3l0QyxRQUFVLEdBQ2Z6dEMsS0FBSzB0QyxPQUFTLElBQUkzZSxHQUNsQi91QixLQUFLMnRDLFVBQVksSUFBSTVlLEdBQ3JCL3VCLEtBQUs0dEMsV0FDRFQsRUFBUWx6QyxXQUdXLG9CQUFaa3pDLEVBQ1RudEMsS0FBS2lrQixPQUFTa3BCLEdBRWRudEMsS0FBS2lrQixPQUFTeUosRUFBVXlmLEdBQ25CbnRDLEtBQUtpa0IsU0FDUmprQixLQUFLaWtCLE9BQVNycEIsRUFDMkJ3SSxHQUN2QywwQkFBNkIrcEMsRUFBVSwrRkFHdkNsbkMsS0FJTmpHLEtBQUtFLE1BQVFGLEtBQUtxdEMsVUFDZGo2QixFQUNBcFQsS0FBS21QLE9BTVgrOUIsR0FBUWx6QyxVQUFVbVYsSUFBTSxXQUV0QixJQUFJalAsRUFESnd3QixHQUFXMXdCLE1BRVgsSUFBSWlHLEVBQUtqRyxLQUFLaUcsR0FDZCxJQUNFL0YsRUFBUUYsS0FBS2lrQixPQUFPeHBCLEtBQUt3TCxFQUFJQSxHQUM3QixNQUFPaUMsSUFDUCxJQUFJbEksS0FBSzJzQyxLQUdQLE1BQU16a0MsR0FGTjB3QixHQUFZMXdCLEdBQUdqQyxFQUFLLHVCQUEyQmpHLEtBQWUsV0FBSSxLQUlwRSxRQUdJQSxLQUFLaWxCLE1BQ1BpVyxHQUFTaDdCLEdBRVgyd0IsS0FDQTd3QixLQUFLNnRDLGNBRVAsT0FBTzN0QyxHQU1UZ3RDLEdBQVFsekMsVUFBVWkzQixPQUFTLFNBQWlCa0MsR0FDMUMsSUFBSTFDLEVBQUswQyxFQUFJMUMsR0FDUnp3QixLQUFLMnRDLFVBQVV2ZSxJQUFJcUIsS0FDdEJ6d0IsS0FBSzJ0QyxVQUFVdGUsSUFBSW9CLEdBQ25CendCLEtBQUt5dEMsUUFBUW54QyxLQUFLNjJCLEdBQ2JuekIsS0FBSzB0QyxPQUFPdGUsSUFBSXFCLElBQ25CMEMsRUFBSXJDLE9BQU85d0IsUUFRakJrdEMsR0FBUWx6QyxVQUFVNnpDLFlBQWMsV0FDOUIsSUFBSTF4QyxFQUFJNkQsS0FBS3d0QyxLQUFLcHhDLE9BQ2xCLE1BQU9ELElBQUssQ0FDVixJQUFJZzNCLEVBQU1uekIsS0FBS3d0QyxLQUFLcnhDLEdBQ2Y2RCxLQUFLMnRDLFVBQVV2ZSxJQUFJK0QsRUFBSTFDLEtBQzFCMEMsRUFBSXBDLFVBQVUvd0IsTUFHbEIsSUFBSTh0QyxFQUFNOXRDLEtBQUswdEMsT0FDZjF0QyxLQUFLMHRDLE9BQVMxdEMsS0FBSzJ0QyxVQUNuQjN0QyxLQUFLMnRDLFVBQVlHLEVBQ2pCOXRDLEtBQUsydEMsVUFBVXJlLFFBQ2Z3ZSxFQUFNOXRDLEtBQUt3dEMsS0FDWHh0QyxLQUFLd3RDLEtBQU94dEMsS0FBS3l0QyxRQUNqQnp0QyxLQUFLeXRDLFFBQVVLLEVBQ2Y5dEMsS0FBS3l0QyxRQUFRcnhDLE9BQVMsR0FPeEI4d0MsR0FBUWx6QyxVQUFVc2xCLE9BQVMsV0FFckJ0ZixLQUFLcXRDLEtBQ1BydEMsS0FBS3V0QyxPQUFRLEVBQ0p2dEMsS0FBS2tsQixLQUNkbGxCLEtBQUswc0MsTUFFTE0sR0FBYWh0QyxPQVFqQmt0QyxHQUFRbHpDLFVBQVUweUMsSUFBTSxXQUN0QixHQUFJMXNDLEtBQUtzdEMsT0FBUSxDQUNmLElBQUlwdEMsRUFBUUYsS0FBS21QLE1BQ2pCLEdBQ0VqUCxJQUFVRixLQUFLRSxPQUlmb2UsRUFBU3BlLElBQ1RGLEtBQUtpbEIsS0FDTCxDQUVBLElBQUk4b0IsRUFBVy90QyxLQUFLRSxNQUVwQixHQURBRixLQUFLRSxNQUFRQSxFQUNURixLQUFLMnNDLEtBQ1AsSUFDRTNzQyxLQUFLNmtCLEdBQUdwcUIsS0FBS3VGLEtBQUtpRyxHQUFJL0YsRUFBTzZ0QyxHQUM3QixNQUFPN2xDLElBQ1Awd0IsR0FBWTF3QixHQUFHbEksS0FBS2lHLEdBQUsseUJBQTZCakcsS0FBZSxXQUFJLFVBRzNFQSxLQUFLNmtCLEdBQUdwcUIsS0FBS3VGLEtBQUtpRyxHQUFJL0YsRUFBTzZ0QyxNQVVyQ2IsR0FBUWx6QyxVQUFVZzBDLFNBQVcsV0FDM0JodUMsS0FBS0UsTUFBUUYsS0FBS21QLE1BQ2xCblAsS0FBS3V0QyxPQUFRLEdBTWZMLEdBQVFsekMsVUFBVWczQixPQUFTLFdBQ3pCLElBQUk3MEIsRUFBSTZELEtBQUt3dEMsS0FBS3B4QyxPQUNsQixNQUFPRCxJQUNMNkQsS0FBS3d0QyxLQUFLcnhDLEdBQUc2MEIsVUFPakJrYyxHQUFRbHpDLFVBQVU4d0MsU0FBVyxXQUMzQixHQUFJOXFDLEtBQUtzdEMsT0FBUSxDQUlWdHRDLEtBQUtpRyxHQUFHb2tDLG1CQUNYL2YsRUFBT3RxQixLQUFLaUcsR0FBRzhrQyxVQUFXL3FDLE1BRTVCLElBQUk3RCxFQUFJNkQsS0FBS3d0QyxLQUFLcHhDLE9BQ2xCLE1BQU9ELElBQ0w2RCxLQUFLd3RDLEtBQUtyeEMsR0FBRzQwQixVQUFVL3dCLE1BRXpCQSxLQUFLc3RDLFFBQVMsSUFNbEIsSUFBSVcsR0FBMkIsQ0FDN0JsckIsWUFBWSxFQUNaN0QsY0FBYyxFQUNkL1AsSUFBS3ZVLEVBQ0w0WCxJQUFLNVgsR0FHUCxTQUFTcWtDLEdBQU90MEIsRUFBUXVqQyxFQUFXdnpDLEdBQ2pDc3pDLEdBQXlCOStCLElBQU0sV0FDN0IsT0FBT25QLEtBQUtrdUMsR0FBV3Z6QyxJQUV6QnN6QyxHQUF5Qno3QixJQUFNLFNBQXNCK0wsR0FDbkR2ZSxLQUFLa3VDLEdBQVd2ekMsR0FBTzRqQixHQUV6QnhrQixPQUFPbVYsZUFBZXZFLEVBQVFoUSxFQUFLc3pDLElBR3JDLFNBQVNFLEdBQVdsb0MsR0FDbEJBLEVBQUc4a0MsVUFBWSxHQUNmLElBQUl6Z0MsRUFBT3JFLEVBQUcrRyxTQUNWMUMsRUFBS2YsT0FBUzZrQyxHQUFVbm9DLEVBQUlxRSxFQUFLZixPQUNqQ2UsRUFBS3JDLFNBQVdvbUMsR0FBWXBvQyxFQUFJcUUsRUFBS3JDLFNBQ3JDcUMsRUFBS2pOLEtBQ1AwSyxHQUFTOUIsR0FFVDR0QixHQUFRNXRCLEVBQUdtZCxNQUFRLElBQUksR0FFckI5WSxFQUFLd1ksVUFBWXdyQixHQUFhcm9DLEVBQUlxRSxFQUFLd1ksVUFDdkN4WSxFQUFLbWIsT0FBU25iLEVBQUttYixRQUFVOEksSUFDL0JnZ0IsR0FBVXRvQyxFQUFJcUUsRUFBS21iLE9BSXZCLFNBQVMyb0IsR0FBV25vQyxFQUFJdW9DLEdBQ3RCLElBQUloK0IsRUFBWXZLLEVBQUcrRyxTQUFTd0QsV0FBYSxHQUNyQ2pILEVBQVF0RCxFQUFHb3hCLE9BQVMsR0FHcEJ2NkIsRUFBT21KLEVBQUcrRyxTQUFTdytCLFVBQVksR0FDL0Jqb0IsR0FBVXRkLEVBQUc4RyxRQUVad1csR0FDSCtQLElBQWdCLEdBRWxCLElBQUloeEIsRUFBTyxTQUFXM0gsR0FDcEJtQyxFQUFLUixLQUFLM0IsR0FDVixJQUFJdUYsRUFBUXkyQixHQUFhaDhCLEVBQUs2ekMsRUFBY2grQixFQUFXdkssR0FHakR3NkIsRUFBZ0JoVyxFQUFVOXZCLElBQzFCMHZCLEVBQW9Cb1csSUFDcEJyZSxFQUFPeUssZUFBZTRULEtBQ3hCcjlCLEdBQ0csSUFBT3E5QixFQUFnQixrRUFDeEJ4NkIsR0FHSit0QixHQUFrQnpxQixFQUFPNU8sRUFBS3VGLEdBQU8sV0FDbkMsSUFBS3FqQixJQUFXZ2tCLEdBQTBCLENBRXRDLEdBQWlCLGFBQWR0aEMsRUFBR2dJLE9BQ0YsT0FHSixHQUNZLFVBQVJ0VCxHQUNBb0IsTUFBTUMsUUFBUWlLLEVBQUcrRyxTQUFTOUQsYUFDNkIsSUFBdkRqRCxFQUFHK0csU0FBUzlELFVBQVU3TSxRQUFRLG9CQUVoQyxPQUVGLEdBQUc0SixFQUFHd29DLGFBQ0osT0FFRixJQUFJMWhDLEVBQVU5RyxFQUFHOEcsUUFDakIsTUFBTUEsRUFBUSxDQUNaLEdBQUdBLEVBQVEyaEMsb0JBQ1QsT0FFRjNoQyxFQUFVQSxFQUFRQSxRQUd0QjNKLEdBQ0UsME1BR2tDekksRUFBTSxJQUN4Q3NMLE9BVUZ0TCxLQUFPc0wsR0FDWGc1QixHQUFNaDVCLEVBQUksU0FBVXRMLElBSXhCLElBQUssSUFBSUEsS0FBTzZ6QyxFQUFjbHNDLEVBQU0zSCxHQUNwQzI0QixJQUFnQixHQUdsQixTQUFTdnJCLEdBQVU5QixHQUNqQixJQUFJNUksRUFBTzRJLEVBQUcrRyxTQUFTM1AsS0FDdkJBLEVBQU80SSxFQUFHbWQsTUFBd0Isb0JBQVQvbEIsRUFDckJzeEMsR0FBUXR4QyxFQUFNNEksR0FDZDVJLEdBQVEsR0FDUDlDLEVBQWM4QyxLQUNqQkEsRUFBTyxHQUNrQytGLEdBQ3ZDLDhHQUVBNkMsSUFJSixJQUFJbkosRUFBTy9DLE9BQU8rQyxLQUFLTyxHQUNuQmtNLEVBQVF0RCxFQUFHK0csU0FBU3pELE1BQ3BCdEIsRUFBVWhDLEVBQUcrRyxTQUFTL0UsUUFDdEI5TCxFQUFJVyxFQUFLVixPQUNiLE1BQU9ELElBQUssQ0FDVixJQUFJeEIsRUFBTW1DLEVBQUtYLEdBRVQ4TCxHQUFXdk4sRUFBT3VOLEVBQVN0TixJQUM3QnlJLEdBQ0csV0FBY3pJLEVBQU0saURBQ3JCc0wsR0FJRnNELEdBQVM3TyxFQUFPNk8sRUFBTzVPLEdBQ2dCeUksR0FDdkMsc0JBQXlCekksRUFBTSxtRUFFL0JzTCxHQUVRbW5CLEVBQVd6eUIsSUFDckJza0MsR0FBTWg1QixFQUFJLFFBQVN0TCxHQUl2Qms1QixHQUFReDJCLEdBQU0sR0FHaEIsU0FBU3N4QyxHQUFTdHhDLEVBQU00SSxHQUV0QnlxQixLQUNBLElBQ0UsT0FBT3J6QixFQUFLNUMsS0FBS3dMLEVBQUlBLEdBQ3JCLE1BQU9pQyxJQUVQLE9BREEwd0IsR0FBWTF3QixHQUFHakMsRUFBSSxVQUNaLEdBQ1AsUUFDQTRxQixNQUlKLElBQUkrZCxHQUF5QixDQUFFdkIsTUFBTSxHQUVyQyxTQUFTaUIsR0FBY3JvQyxFQUFJNmMsR0FFekIsSUFBSStyQixFQUFXNW9DLEVBQUc2b0Msa0JBQW9CLzBDLE9BQU9nQixPQUFPLE1BRWhEZzBDLEVBQVFyZ0IsS0FFWixJQUFLLElBQUkvekIsS0FBT21vQixFQUFVLENBQ3hCLElBQUlrc0IsRUFBVWxzQixFQUFTbm9CLEdBQ25Cc3BCLEVBQTRCLG9CQUFaK3FCLEVBQXlCQSxFQUFVQSxFQUFRNy9CLElBQ1IsTUFBVjhVLEdBQzNDN2dCLEdBQ0csNENBQStDekksRUFBTSxLQUN0RHNMLEdBSUM4b0MsSUFFSEYsRUFBU2wwQyxHQUFPLElBQUl1eUMsR0FDbEJqbkMsRUFDQWdlLEdBQVVycEIsRUFDVkEsRUFDQWcwQyxLQU9FajBDLEtBQU9zTCxFQUdQdEwsS0FBT3NMLEVBQUd5MEIsTUFDWnQzQixHQUFNLDBCQUE2QnpJLEVBQU0sZ0NBQW1Dc0wsR0FDbkVBLEVBQUcrRyxTQUFTekQsT0FBUzVPLEtBQU9zTCxFQUFHK0csU0FBU3pELE9BQ2pEbkcsR0FBTSwwQkFBNkJ6SSxFQUFNLGtDQUFxQ3NMLEdBTGhGZ3BDLEdBQWVocEMsRUFBSXRMLEVBQUtxMEMsSUFXOUIsU0FBU0MsR0FDUHRrQyxFQUNBaFEsRUFDQXEwQyxHQUVBLElBQUlFLEdBQWV4Z0IsS0FDSSxvQkFBWnNnQixHQUNUZixHQUF5QjkrQixJQUFNKy9CLEVBQzNCQyxHQUFxQngwQyxHQUNyQnkwQyxHQUFvQkosR0FDeEJmLEdBQXlCejdCLElBQU01WCxJQUUvQnF6QyxHQUF5QjkrQixJQUFNNi9CLEVBQVE3L0IsSUFDbkMrL0IsSUFBaUMsSUFBbEJGLEVBQVFsMEMsTUFDckJxMEMsR0FBcUJ4MEMsR0FDckJ5MEMsR0FBb0JKLEVBQVE3L0IsS0FDOUJ2VSxFQUNKcXpDLEdBQXlCejdCLElBQU13OEIsRUFBUXg4QixLQUFPNVgsR0FHNUNxekMsR0FBeUJ6N0IsTUFBUTVYLElBQ25DcXpDLEdBQXlCejdCLElBQU0sV0FDN0JwUCxHQUNHLHNCQUF5QnpJLEVBQU0sMENBQ2hDcUYsUUFJTmpHLE9BQU9tVixlQUFldkUsRUFBUWhRLEVBQUtzekMsSUFHckMsU0FBU2tCLEdBQXNCeDBDLEdBQzdCLE9BQU8sV0FDTCxJQUFJNnhDLEVBQVV4c0MsS0FBSzh1QyxtQkFBcUI5dUMsS0FBSzh1QyxrQkFBa0JuMEMsR0FDL0QsR0FBSTZ4QyxFQU9GLE9BTklBLEVBQVFlLE9BQ1ZmLEVBQVF3QixXQUVOeGQsR0FBSUcsYUFBYWhtQixRQUNuQjZoQyxFQUFReGIsU0FFSHdiLEVBQVF0c0MsT0FLckIsU0FBU2t2QyxHQUFvQmgxQyxHQUMzQixPQUFPLFdBQ0wsT0FBT0EsRUFBR0ssS0FBS3VGLEtBQU1BLE9BSXpCLFNBQVNxdUMsR0FBYXBvQyxFQUFJZ0MsR0FDeEIsSUFBSXNCLEVBQVF0RCxFQUFHK0csU0FBU3pELE1BQ3hCLElBQUssSUFBSTVPLEtBQU9zTixFQUVnQixvQkFBakJBLEVBQVF0TixJQUNqQnlJLEdBQ0UsV0FBY3pJLEVBQU0sc0JBQTJCc04sRUFBUXROLEdBQVEsMkVBRS9Ec0wsR0FHQXNELEdBQVM3TyxFQUFPNk8sRUFBTzVPLElBQ3pCeUksR0FDRyxXQUFjekksRUFBTSx3Q0FDckJzTCxHQUdDdEwsS0FBT3NMLEdBQU9tbkIsRUFBV3p5QixJQUM1QnlJLEdBQ0UsV0FBY3pJLEVBQU0sOEdBSzFCc0wsRUFBR3RMLEdBQStCLG9CQUFqQnNOLEVBQVF0TixHQUFzQkMsRUFBTytyQixFQUFLMWUsRUFBUXROLEdBQU1zTCxHQUk3RSxTQUFTc29DLEdBQVd0b0MsRUFBSXdmLEdBQ3RCLElBQUssSUFBSTlxQixLQUFPOHFCLEVBQU8sQ0FDckIsSUFBSS9YLEVBQVUrWCxFQUFNOXFCLEdBQ3BCLEdBQUlvQixNQUFNQyxRQUFRMFIsR0FDaEIsSUFBSyxJQUFJdlIsRUFBSSxFQUFHQSxFQUFJdVIsRUFBUXRSLE9BQVFELElBQ2xDa3pDLEdBQWNwcEMsRUFBSXRMLEVBQUsrUyxFQUFRdlIsU0FHakNrekMsR0FBY3BwQyxFQUFJdEwsRUFBSytTLElBSzdCLFNBQVMyaEMsR0FDUHBwQyxFQUNBa25DLEVBQ0F6L0IsRUFDQTVQLEdBU0EsT0FQSXZELEVBQWNtVCxLQUNoQjVQLEVBQVU0UCxFQUNWQSxFQUFVQSxFQUFRQSxTQUVHLGtCQUFaQSxJQUNUQSxFQUFVekgsRUFBR3lILElBRVJ6SCxFQUFHK2UsT0FBT21vQixFQUFTei9CLEVBQVM1UCxHQUdyQyxTQUFTd3hDLEdBQVk1cUMsR0FJbkIsSUFBSTZxQyxFQUFVLENBQ2QsSUFBYyxXQUFjLE9BQU92dkMsS0FBS29qQixRQUNwQ29zQixFQUFXLENBQ2YsSUFBZSxXQUFjLE9BQU94dkMsS0FBS3EzQixTQUV2Q2tZLEVBQVEvOEIsSUFBTSxXQUNacFAsR0FDRSwyRUFFQXBELE9BR0p3dkMsRUFBU2g5QixJQUFNLFdBQ2JwUCxHQUFLLHNCQUF1QnBELE9BR2hDakcsT0FBT21WLGVBQWV4SyxFQUFJMUssVUFBVyxRQUFTdTFDLEdBQzlDeDFDLE9BQU9tVixlQUFleEssRUFBSTFLLFVBQVcsU0FBVXcxQyxHQUUvQzlxQyxFQUFJMUssVUFBVXkxQyxLQUFPajlCLEdBQ3JCOU4sRUFBSTFLLFVBQVUwMUMsUUFBVWxiLEdBRXhCOXZCLEVBQUkxSyxVQUFVZ3JCLE9BQVMsU0FDckJtb0IsRUFDQXRvQixFQUNBL21CLEdBRUEsSUFBSW1JLEVBQUtqRyxLQUNULEdBQUl6RixFQUFjc3FCLEdBQ2hCLE9BQU93cUIsR0FBY3BwQyxFQUFJa25DLEVBQVN0b0IsRUFBSS9tQixHQUV4Q0EsRUFBVUEsR0FBVyxHQUNyQkEsRUFBUTZ1QyxNQUFPLEVBQ2YsSUFBSUgsRUFBVSxJQUFJVSxHQUFRam5DLEVBQUlrbkMsRUFBU3RvQixFQUFJL21CLEdBQzNDLEdBQUlBLEVBQVE2eEMsVUFDVixJQUNFOXFCLEVBQUdwcUIsS0FBS3dMLEVBQUl1bUMsRUFBUXRzQyxPQUNwQixNQUFPeUQsR0FDUGkxQixHQUFZajFCLEVBQU9zQyxFQUFLLG1DQUF1Q3VtQyxFQUFrQixXQUFJLEtBR3pGLE9BQU8sV0FDTEEsRUFBUTFCLGFBT2QsSUFBSThFLEdBQVEsRUFFWixTQUFTQyxHQUFXbnJDLEdBQ2xCQSxFQUFJMUssVUFBVXdqQixNQUFRLFNBQVUxZixHQUM5QixJQUlJNjlCLEVBQVVDLEVBSlYzMUIsRUFBS2pHLEtBRVRpRyxFQUFHNnBDLEtBQU9GLEtBSW1DeHRCLEVBQU9tSyxhQUFlblgsS0FDakV1bUIsRUFBVyxrQkFBcUIxMUIsRUFBTyxLQUN2QzIxQixFQUFTLGdCQUFtQjMxQixFQUFPLEtBQ25DbVAsR0FBS3VtQixJQUlQMTFCLEVBQUdncUIsUUFBUyxFQUVSbnlCLEdBQVdBLEVBQVE4bkMsYUFJckJtSyxHQUFzQjlwQyxFQUFJbkksR0FFMUJtSSxFQUFHK0csU0FBV2twQixHQUNabVAsR0FBMEJwL0IsRUFBR2hHLGFBQzdCbkMsR0FBVyxHQUNYbUksR0FLRm96QixHQUFVcHpCLEdBS1pBLEVBQUcrcEMsTUFBUS9wQyxFQUNYZ2tDLEdBQWNoa0MsR0FDZGlqQyxHQUFXampDLEdBQ1hpaEMsR0FBV2poQyxHQUNYMitCLEdBQVMzK0IsRUFBSSxpQkFDWkEsRUFBR2dxQyxZQUFjdFMsR0FBZTEzQixHQUNqQ2tvQyxHQUFVbG9DLElBQ1RBLEVBQUdncUMsWUFBY3hTLEdBQVl4M0IsSUFDN0JBLEVBQUdncUMsWUFBY3JMLEdBQVMzK0IsRUFBSSxXQUdjbWMsRUFBT21LLGFBQWVuWCxLQUNqRW5QLEVBQUdpcUMsTUFBUXpnQixHQUFvQnhwQixHQUFJLEdBQ25DbVAsR0FBS3dtQixHQUNMWixHQUFTLE9BQVUvMEIsRUFBUSxNQUFJLFFBQVUwMUIsRUFBVUMsSUFHakQzMUIsRUFBRytHLFNBQVNvb0IsSUFDZG52QixFQUFHd0ssT0FBT3hLLEVBQUcrRyxTQUFTb29CLEtBSzVCLFNBQVMyYSxHQUF1QjlwQyxFQUFJbkksR0FDbEMsSUFBSXdNLEVBQU9yRSxFQUFHK0csU0FBV2pULE9BQU9nQixPQUFPa0wsRUFBR2hHLFlBQVluQyxTQUVsRHNwQyxFQUFjdHBDLEVBQVErbkMsYUFDMUJ2N0IsRUFBS3FGLE9BQVM3UixFQUFRNlIsT0FDdEJyRixFQUFLdTdCLGFBQWV1QixFQUVwQixJQUFJK0ksRUFBd0IvSSxFQUFZaDNCLGlCQUN4QzlGLEVBQUtrRyxVQUFZMi9CLEVBQXNCMy9CLFVBQ3ZDbEcsRUFBS2s5QixpQkFBbUIySSxFQUFzQmhOLFVBQzlDNzRCLEVBQUsrOEIsZ0JBQWtCOEksRUFBc0I1b0IsU0FDN0NqZCxFQUFLNGxCLGNBQWdCaWdCLEVBQXNCOWUsSUFFdkN2ekIsRUFBUSs4QixTQUNWdndCLEVBQUt1d0IsT0FBUy84QixFQUFRKzhCLE9BQ3RCdndCLEVBQUt3MkIsZ0JBQWtCaGpDLEVBQVFnakMsaUJBSW5DLFNBQVN1RSxHQUEyQnZXLEdBQ2xDLElBQUloeEIsRUFBVWd4QixFQUFLaHhCLFFBQ25CLEdBQUlneEIsRUFBS3BvQixNQUFPLENBQ2QsSUFBSTBwQyxFQUFlL0ssR0FBMEJ2VyxFQUFLcG9CLE9BQzlDMnBDLEVBQXFCdmhCLEVBQUtzaEIsYUFDOUIsR0FBSUEsSUFBaUJDLEVBQW9CLENBR3ZDdmhCLEVBQUtzaEIsYUFBZUEsRUFFcEIsSUFBSUUsRUFBa0JDLEdBQXVCemhCLEdBRXpDd2hCLEdBQ0ZscEMsRUFBTzBuQixFQUFLcm9CLGNBQWU2cEMsR0FFN0J4eUMsRUFBVWd4QixFQUFLaHhCLFFBQVVvNEIsR0FBYWthLEVBQWN0aEIsRUFBS3JvQixlQUNyRDNJLEVBQVFDLE9BQ1ZELEVBQVF1UixXQUFXdlIsRUFBUUMsTUFBUSt3QixJQUl6QyxPQUFPaHhCLEVBR1QsU0FBU3l5QyxHQUF3QnpoQixHQUMvQixJQUFJMGhCLEVBQ0FDLEVBQVMzaEIsRUFBS2h4QixRQUNkNHlDLEVBQVM1aEIsRUFBSzZoQixjQUNsQixJQUFLLElBQUloMkMsS0FBTzgxQyxFQUNWQSxFQUFPOTFDLEtBQVMrMUMsRUFBTy8xQyxLQUNwQjYxQyxJQUFZQSxFQUFXLElBQzVCQSxFQUFTNzFDLEdBQU84MUMsRUFBTzkxQyxJQUczQixPQUFPNjFDLEVBR1QsU0FBUzlyQyxHQUFLNUcsR0FFUmtDLGdCQUFnQjBFLElBRWxCdEIsR0FBSyxvRUFFUHBELEtBQUt3ZCxNQUFNMWYsR0FXYixTQUFTOHlDLEdBQVNsc0MsR0FDaEJBLEVBQUlnVixJQUFNLFNBQVV5SSxHQUNsQixJQUFJMHVCLEVBQW9CN3dDLEtBQUs4d0Msb0JBQXNCOXdDLEtBQUs4d0Msa0JBQW9CLElBQzVFLEdBQUlELEVBQWlCeDBDLFFBQVE4bEIsSUFBVyxFQUN0QyxPQUFPbmlCLEtBSVQsSUFBSTJCLEVBQU9xcEIsRUFBUW5tQixVQUFXLEdBUTlCLE9BUEFsRCxFQUFLb3ZDLFFBQVEvd0MsTUFDaUIsb0JBQW5CbWlCLEVBQU9oQixRQUNoQmdCLEVBQU9oQixRQUFRemQsTUFBTXllLEVBQVF4Z0IsR0FDRixvQkFBWHdnQixHQUNoQkEsRUFBT3plLE1BQU0sS0FBTS9CLEdBRXJCa3ZDLEVBQWlCdjBDLEtBQUs2bEIsR0FDZm5pQixNQU1YLFNBQVNneEMsR0FBYXRzQyxHQUNwQkEsRUFBSW1DLE1BQVEsU0FBVUEsR0FFcEIsT0FEQTdHLEtBQUtsQyxRQUFVbzRCLEdBQWFsMkIsS0FBS2xDLFFBQVMrSSxHQUNuQzdHLE1BTVgsU0FBU2l4QyxHQUFZdnNDLEdBTW5CQSxFQUFJc3JCLElBQU0sRUFDVixJQUFJQSxFQUFNLEVBS1Z0ckIsRUFBSTBDLE9BQVMsU0FBVVgsR0FDckJBLEVBQWdCQSxHQUFpQixHQUNqQyxJQUFJeXFDLEVBQVFseEMsS0FDUm14QyxFQUFVRCxFQUFNbGhCLElBQ2hCb2hCLEVBQWMzcUMsRUFBYzRxQyxRQUFVNXFDLEVBQWM0cUMsTUFBUSxJQUNoRSxHQUFJRCxFQUFZRCxHQUNkLE9BQU9DLEVBQVlELEdBR3JCLElBQUlwekMsRUFBTzBJLEVBQWMxSSxNQUFRbXpDLEVBQU1wekMsUUFBUUMsS0FDRkEsR0FDM0MyM0IsR0FBc0IzM0IsR0FHeEIsSUFBSXV6QyxFQUFNLFNBQXVCeHpDLEdBQy9Ca0MsS0FBS3dkLE1BQU0xZixJQTZDYixPQTNDQXd6QyxFQUFJdDNDLFVBQVlELE9BQU9nQixPQUFPbTJDLEVBQU1sM0MsV0FDcENzM0MsRUFBSXQzQyxVQUFVaUcsWUFBY3F4QyxFQUM1QkEsRUFBSXRoQixJQUFNQSxJQUNWc2hCLEVBQUl4ekMsUUFBVW80QixHQUNaZ2IsRUFBTXB6QyxRQUNOMkksR0FFRjZxQyxFQUFJLFNBQVdKLEVBS1hJLEVBQUl4ekMsUUFBUXlMLE9BQ2Rnb0MsR0FBWUQsR0FFVkEsRUFBSXh6QyxRQUFRZ2xCLFVBQ2QwdUIsR0FBZUYsR0FJakJBLEVBQUlscUMsT0FBUzhwQyxFQUFNOXBDLE9BQ25Ca3FDLEVBQUl6cUMsTUFBUXFxQyxFQUFNcnFDLE1BQ2xCeXFDLEVBQUk1M0IsSUFBTXczQixFQUFNeDNCLElBSWhCeVMsRUFBWXB2QixTQUFRLFNBQVUwTSxHQUM1QjZuQyxFQUFJN25DLEdBQVF5bkMsRUFBTXpuQyxNQUdoQjFMLElBQ0Z1ekMsRUFBSXh6QyxRQUFRdVIsV0FBV3RSLEdBQVF1ekMsR0FNakNBLEVBQUlsQixhQUFlYyxFQUFNcHpDLFFBQ3pCd3pDLEVBQUk3cUMsY0FBZ0JBLEVBQ3BCNnFDLEVBQUlYLGNBQWdCdnBDLEVBQU8sR0FBSWtxQyxFQUFJeHpDLFNBR25Dc3pDLEVBQVlELEdBQVdHLEVBQ2hCQSxHQUlYLFNBQVNDLEdBQWFFLEdBQ3BCLElBQUlsb0MsRUFBUWtvQyxFQUFLM3pDLFFBQVF5TCxNQUN6QixJQUFLLElBQUk1TyxLQUFPNE8sRUFDZDAxQixHQUFNd1MsRUFBS3ozQyxVQUFXLFNBQVVXLEdBSXBDLFNBQVM2MkMsR0FBZ0JDLEdBQ3ZCLElBQUkzdUIsRUFBVzJ1QixFQUFLM3pDLFFBQVFnbEIsU0FDNUIsSUFBSyxJQUFJbm9CLEtBQU9tb0IsRUFDZG1zQixHQUFld0MsRUFBS3ozQyxVQUFXVyxFQUFLbW9CLEVBQVNub0IsSUFNakQsU0FBUysyQyxHQUFvQmh0QyxHQUkzQnluQixFQUFZcHZCLFNBQVEsU0FBVTBNLEdBQzVCL0UsRUFBSStFLEdBQVEsU0FDVmduQixFQUNBa2hCLEdBRUEsT0FBS0EsR0FJbUQsY0FBVGxvQyxHQUMzQ2lzQixHQUFzQmpGLEdBRVgsY0FBVGhuQixHQUF3QmxQLEVBQWNvM0MsS0FDeENBLEVBQVc1ekMsS0FBTzR6QyxFQUFXNXpDLE1BQVEweUIsRUFDckNraEIsRUFBYTN4QyxLQUFLbEMsUUFBUXE0QixNQUFNL3VCLE9BQU91cUMsSUFFNUIsY0FBVGxvQyxHQUE4QyxvQkFBZmtvQyxJQUNqQ0EsRUFBYSxDQUFFaHJCLEtBQU1nckIsRUFBWXJ5QixPQUFRcXlCLElBRTNDM3hDLEtBQUtsQyxRQUFRMkwsRUFBTyxLQUFLZ25CLEdBQU1raEIsRUFDeEJBLEdBZEEzeEMsS0FBS2xDLFFBQVEyTCxFQUFPLEtBQUtnbkIsT0F3QnhDLFNBQVNtaEIsR0FBa0J0bkMsR0FDekIsT0FBT0EsSUFBU0EsRUFBS3drQixLQUFLaHhCLFFBQVFDLE1BQVF1TSxFQUFLK21CLEtBR2pELFNBQVN3Z0IsR0FBU0MsRUFBUy96QyxHQUN6QixPQUFJaEMsTUFBTUMsUUFBUTgxQyxHQUNUQSxFQUFRejFDLFFBQVEwQixJQUFTLEVBQ0osa0JBQVorekMsRUFDVEEsRUFBUWxxQyxNQUFNLEtBQUt2TCxRQUFRMEIsSUFBUyxJQUNsQzRyQixFQUFTbW9CLElBQ1hBLEVBQVEzeUMsS0FBS3BCLEdBTXhCLFNBQVNnMEMsR0FBWUMsRUFBbUI3dkMsR0FDdEMsSUFBSXJILEVBQVFrM0MsRUFBa0JsM0MsTUFDMUJnQyxFQUFPazFDLEVBQWtCbDFDLEtBQ3pCcXFDLEVBQVM2SyxFQUFrQjdLLE9BQy9CLElBQUssSUFBSXhzQyxLQUFPRyxFQUFPLENBQ3JCLElBQUltM0MsRUFBYW4zQyxFQUFNSCxHQUN2QixHQUFJczNDLEVBQVksQ0FDZCxJQUFJbDBDLEVBQU82ekMsR0FBaUJLLEVBQVc3aEMsa0JBQ25DclMsSUFBU29FLEVBQU9wRSxJQUNsQm0wQyxHQUFnQnAzQyxFQUFPSCxFQUFLbUMsRUFBTXFxQyxLQU0xQyxTQUFTK0ssR0FDUHAzQyxFQUNBSCxFQUNBbUMsRUFDQWlGLEdBRUEsSUFBSW93QyxFQUFZcjNDLEVBQU1ILElBQ2xCdzNDLEdBQWVwd0MsR0FBV293QyxFQUFVOWdCLE1BQVF0dkIsRUFBUXN2QixLQUN0RDhnQixFQUFVdGdCLGtCQUFrQmpoQixXQUU5QjlWLEVBQU1ILEdBQU8sS0FDYjJ2QixFQUFPeHRCLEVBQU1uQyxHQS9NZmsxQyxHQUFVbnJDLElBQ1Y0cUMsR0FBVzVxQyxJQUNYZ2xDLEdBQVlobEMsSUFDWjRsQyxHQUFlNWxDLElBQ2ZnakMsR0FBWWhqQyxJQThNWixJQUFJMHRDLEdBQWUsQ0FBQzFwQyxPQUFRK2tCLE9BQVExeEIsT0FFaENzMkMsR0FBWSxDQUNkdDBDLEtBQU0sYUFDTjJuQyxVQUFVLEVBRVZuOEIsTUFBTyxDQUNMK29DLFFBQVNGLEdBQ1RHLFFBQVNILEdBQ1R4cEIsSUFBSyxDQUFDbGdCLE9BQVF4SCxTQUdoQnN4QyxRQUFTLFdBQ1B4eUMsS0FBS2xGLE1BQVFmLE9BQU9nQixPQUFPLE1BQzNCaUYsS0FBS2xELEtBQU8sSUFHZDIxQyxVQUFXLFdBQ1QsSUFBSyxJQUFJOTNDLEtBQU9xRixLQUFLbEYsTUFDbkJvM0MsR0FBZ0JseUMsS0FBS2xGLE1BQU9ILEVBQUtxRixLQUFLbEQsT0FJMUN1cUIsUUFBUyxXQUNQLElBQUk3RyxFQUFTeGdCLEtBRWJBLEtBQUtnbEIsT0FBTyxXQUFXLFNBQVV6RyxHQUMvQnd6QixHQUFXdnhCLEdBQVEsU0FBVXppQixHQUFRLE9BQU84ekMsR0FBUXR6QixFQUFLeGdCLFNBRTNEaUMsS0FBS2dsQixPQUFPLFdBQVcsU0FBVXpHLEdBQy9Cd3pCLEdBQVd2eEIsR0FBUSxTQUFVemlCLEdBQVEsT0FBUTh6QyxHQUFRdHpCLEVBQUt4Z0IsVUFJOUQ4OEIsT0FBUSxXQUNOLElBQUlxRCxFQUFPbCtCLEtBQUt1SCxPQUFPZixRQUNuQmlzQixFQUFRd1csR0FBdUIvSyxHQUMvQjl0QixFQUFtQnFpQixHQUFTQSxFQUFNcmlCLGlCQUN0QyxHQUFJQSxFQUFrQixDQUVwQixJQUFJclMsRUFBTzZ6QyxHQUFpQnhoQyxHQUN4QlosRUFBTXhQLEtBQ05zeUMsRUFBVTlpQyxFQUFJOGlDLFFBQ2RDLEVBQVUvaUMsRUFBSStpQyxRQUNsQixHQUVHRCxLQUFhdjBDLElBQVM4ekMsR0FBUVMsRUFBU3YwQyxLQUV2Q3cwQyxHQUFXeDBDLEdBQVE4ekMsR0FBUVUsRUFBU3gwQyxHQUVyQyxPQUFPMDBCLEVBR1QsSUFBSWlnQixFQUFRMXlDLEtBQ1JsRixFQUFRNDNDLEVBQU01M0MsTUFDZGdDLEVBQU80MUMsRUFBTTUxQyxLQUNibkMsRUFBbUIsTUFBYjgzQixFQUFNOTNCLElBR1p5VixFQUFpQjBlLEtBQUtrQixLQUFPNWYsRUFBaUJpaEIsSUFBTyxLQUFRamhCLEVBQW9CLElBQUssSUFDdEZxaUIsRUFBTTkzQixJQUNORyxFQUFNSCxJQUNSODNCLEVBQU1aLGtCQUFvQi8yQixFQUFNSCxHQUFLazNCLGtCQUVyQ3ZILEVBQU94dEIsRUFBTW5DLEdBQ2JtQyxFQUFLUixLQUFLM0IsS0FFVkcsRUFBTUgsR0FBTzgzQixFQUNiMzFCLEVBQUtSLEtBQUszQixHQUVOcUYsS0FBSzRvQixLQUFPOXJCLEVBQUtWLE9BQVMwRixTQUFTOUIsS0FBSzRvQixNQUMxQ3NwQixHQUFnQnAzQyxFQUFPZ0MsRUFBSyxHQUFJQSxFQUFNa0QsS0FBS21uQyxTQUkvQzFVLEVBQU1wMUIsS0FBSyttQyxXQUFZLEVBRXpCLE9BQU8zUixHQUFVeUwsR0FBUUEsRUFBSyxLQUk5QnlVLEdBQW9CLENBQ3RCTixVQUFXQSxJQUtiLFNBQVNPLEdBQWVsdUMsR0FFdEIsSUFBSW11QyxFQUFZLENBQ2hCLElBQWdCLFdBQWMsT0FBT3p3QixHQUVuQyxJQUFnQixXQUNkaGYsR0FDRSwwRUFJTnJKLE9BQU9tVixlQUFleEssRUFBSyxTQUFVbXVDLEdBS3JDbnVDLEVBQUlvdUMsS0FBTyxDQUNUMXZDLEtBQU1BLEdBQ05nRSxPQUFRQSxFQUNSOHVCLGFBQWNBLEdBQ2Q2YyxlQUFnQi9lLElBR2xCdHZCLEVBQUk4TixJQUFNQSxHQUNWOU4sRUFBSW1oQixPQUFTMk8sR0FDYjl2QixFQUFJMmUsU0FBV0EsR0FHZjNlLEVBQUlzdUMsV0FBYSxTQUFVeDRDLEdBRXpCLE9BREFxNUIsR0FBUXI1QixHQUNEQSxHQUdUa0ssRUFBSTVHLFFBQVUvRCxPQUFPZ0IsT0FBTyxNQUM1Qm94QixFQUFZcHZCLFNBQVEsU0FBVTBNLEdBQzVCL0UsRUFBSTVHLFFBQVEyTCxFQUFPLEtBQU8xUCxPQUFPZ0IsT0FBTyxTQUsxQzJKLEVBQUk1RyxRQUFRcTRCLE1BQVF6eEIsRUFFcEIwQyxFQUFPMUMsRUFBSTVHLFFBQVF1UixXQUFZc2pDLElBRS9CL0IsR0FBUWxzQyxHQUNSc3NDLEdBQVl0c0MsR0FDWnVzQyxHQUFXdnNDLEdBQ1hndEMsR0FBbUJodEMsR0FHckJrdUMsR0FBY2x1QyxJQUVkM0ssT0FBT21WLGVBQWV4SyxHQUFJMUssVUFBVyxZQUFhLENBQ2hEbVYsSUFBS3VmLEtBR1AzMEIsT0FBT21WLGVBQWV4SyxHQUFJMUssVUFBVyxjQUFlLENBQ2xEbVYsSUFBSyxXQUVILE9BQU9uUCxLQUFLMm1DLFFBQVUzbUMsS0FBSzJtQyxPQUFPc00sY0FLdENsNUMsT0FBT21WLGVBQWV4SyxHQUFLLDBCQUEyQixDQUNwRHhFLE1BQU8yaUMsS0FHVG4rQixHQUFJNFksUUFBVSxTQUtkLElBQUk0MUIsR0FBWSxpQkFDWkMsR0FBYSxrQkFHakIsU0FBU0MsR0FBS3J4QyxFQUFTNmtDLEdBQ25CLElBQUl6bEMsRUFBUyxHQUdiLE9BRkFreUMsR0FBU3R4QyxFQUFTNmtDLEdBQ2xCME0sR0FBTXZ4QyxFQUFTNmtDLEVBQUssR0FBSXpsQyxHQUNqQkEsRUFHWCxTQUFTa3lDLEdBQVN0eEMsRUFBUzZrQyxHQUN2QixHQUFJN2tDLElBQVk2a0MsRUFBaEIsQ0FDQSxJQUFJMk0sRUFBa0I5cEMsR0FBSzFILEdBQ3ZCeXhDLEVBQWMvcEMsR0FBS205QixHQUN2QixHQUFJMk0sR0FBbUJKLElBQWNLLEdBQWVMLElBQ2hELEdBQUdwNUMsT0FBTytDLEtBQUtpRixHQUFTM0YsUUFBVXJDLE9BQU8rQyxLQUFLOHBDLEdBQUt4cUMsT0FDL0MsSUFBSyxJQUFJekIsS0FBT2lzQyxFQUFLLENBQ2pCLElBQUk2TSxFQUFlMXhDLEVBQVFwSCxRQUNOeVksSUFBakJxZ0MsRUFDQTF4QyxFQUFRcEgsR0FBTyxLQUVmMDRDLEdBQVNJLEVBQWM3TSxFQUFJanNDLFVBSWhDNDRDLEdBQW1CTCxJQUFhTSxHQUFlTixJQUNsRG54QyxFQUFRM0YsUUFBVXdxQyxFQUFJeHFDLFFBQ3RCd3FDLEVBQUk3cEMsU0FBUSxTQUFVcUYsRUFBTTNGLEdBQ3hCNDJDLEdBQVN0eEMsRUFBUXRGLEdBQVEyRixPQU16QyxTQUFTa3hDLEdBQU12eEMsRUFBUzZrQyxFQUFLN21CLEVBQU01ZSxHQUMvQixHQUFJWSxJQUFZNmtDLEVBQWhCLENBQ0EsSUFBSTJNLEVBQWtCOXBDLEdBQUsxSCxHQUN2Qnl4QyxFQUFjL3BDLEdBQUttOUIsR0FDdkIsR0FBSTJNLEdBQW1CSixHQUNuQixHQUFJSyxHQUFlTCxJQUFjcDVDLE9BQU8rQyxLQUFLaUYsR0FBUzNGLE9BQVNyQyxPQUFPK0MsS0FBSzhwQyxHQUFLeHFDLE9BQzVFczNDLEdBQVV2eUMsRUFBUTRlLEVBQU1oZSxPQUNyQixDQUNILElBQUlPLEVBQU8sU0FBVzNILEdBQ2xCLElBQUk4NEMsRUFBZTF4QyxFQUFRcEgsR0FDdkJnNUMsRUFBVy9NLEVBQUlqc0MsR0FDZmk1QyxFQUFjbnFDLEdBQUtncUMsR0FDbkJJLEVBQVVwcUMsR0FBS2txQyxHQUNuQixHQUFJQyxHQUFlVixJQUFhVSxHQUFlVCxHQUN2Q00sR0FBZ0I3TSxFQUFJanNDLElBQ3BCKzRDLEdBQVV2eUMsR0FBaUIsSUFBUjRlLEVBQWEsR0FBS0EsRUFBTyxLQUFPcGxCLEVBQUs4NEMsUUFFekQsR0FBSUcsR0FBZVYsR0FDbEJXLEdBQVdYLEdBQ1hRLEdBQVV2eUMsR0FBaUIsSUFBUjRlLEVBQWEsR0FBS0EsRUFBTyxLQUFPcGxCLEVBQUs4NEMsR0FFcERBLEVBQWFyM0MsT0FBU3UzQyxFQUFTdjNDLE9BQy9CczNDLEdBQVV2eUMsR0FBaUIsSUFBUjRlLEVBQWEsR0FBS0EsRUFBTyxLQUFPcGxCLEVBQUs4NEMsR0FFeERBLEVBQWExMkMsU0FBUSxTQUFVcUYsRUFBTTNGLEdBQ2pDNjJDLEdBQU1seEMsRUFBTXV4QyxFQUFTbDNDLElBQWlCLElBQVJzakIsRUFBYSxHQUFLQSxFQUFPLEtBQU9wbEIsRUFBTSxJQUFNOEIsRUFBUSxJQUFLMEUsV0FJaEcsR0FBSXl5QyxHQUFlVCxHQUN0QixHQUFJVSxHQUFXVixJQUFjcDVDLE9BQU8rQyxLQUFLMjJDLEdBQWNyM0MsT0FBU3JDLE9BQU8rQyxLQUFLNjJDLEdBQVV2M0MsT0FDbEZzM0MsR0FBVXZ5QyxHQUFpQixJQUFSNGUsRUFBYSxHQUFLQSxFQUFPLEtBQU9wbEIsRUFBSzg0QyxRQUV4RCxJQUFLLElBQUlLLEtBQVVMLEVBQ2ZILEdBQU1HLEVBQWFLLEdBQVNILEVBQVNHLElBQWtCLElBQVIvekIsRUFBYSxHQUFLQSxFQUFPLEtBQU9wbEIsRUFBTSxJQUFNbTVDLEVBQVEzeUMsSUFNbkgsSUFBSyxJQUFJeEcsS0FBT29ILEVBQVNPLEVBQU0zSCxRQUU1QjQ0QyxHQUFtQkwsR0FDdEJNLEdBQWVOLEdBQ2ZRLEdBQVV2eUMsRUFBUTRlLEVBQU1oZSxHQUVwQkEsRUFBUTNGLE9BQVN3cUMsRUFBSXhxQyxPQUNyQnMzQyxHQUFVdnlDLEVBQVE0ZSxFQUFNaGUsR0FFeEJBLEVBQVFoRixTQUFRLFNBQVVxRixFQUFNM0YsR0FDNUI2MkMsR0FBTWx4QyxFQUFNd2tDLEVBQUlucUMsR0FBUXNqQixFQUFPLElBQU10akIsRUFBUSxJQUFLMEUsTUFLOUR1eUMsR0FBVXZ5QyxFQUFRNGUsRUFBTWhlLElBSWhDLFNBQVMyeEMsR0FBVXZ5QyxFQUFRNHlDLEVBQUczdUIsR0FFdEJqa0IsRUFBTzR5QyxHQUFLM3VCLEVBSXBCLFNBQVMzYixHQUFLalAsR0FDVixPQUFPVCxPQUFPQyxVQUFVQyxTQUFTUSxLQUFLRCxHQUsxQyxTQUFTdzVDLEdBQWlCL3RDLEdBQ3RCLEdBQUlBLEVBQUdndUMsdUJBQXlCaHVDLEVBQUdndUMsc0JBQXNCNzNDLE9BQVEsQ0FDN0QsR0FBSSx1RUFBWWdNLGNBQWUsQ0FDM0IsSUFBSTNDLEVBQWFRLEVBQUdnSCxPQUNwQjlKLFFBQVFzWSxJQUFJLE1BQVEsSUFBSS9SLEtBQVEsTUFBUWpFLEVBQVdpaEMsSUFBTWpoQyxFQUFXdUosT0FBUyxLQUFPL0ksRUFBRzZwQyxLQUNuRixvQkFBc0I3cEMsRUFBR2d1QyxzQkFBc0I3M0MsT0FBUyxLQUVoRSxJQUFJcTlCLEVBQVN4ekIsRUFBR2d1QyxzQkFBc0I1MUMsTUFBTSxHQUM1QzRILEVBQUdndUMsc0JBQXNCNzNDLE9BQVMsRUFDbEMsSUFBSyxJQUFJRCxFQUFJLEVBQUdBLEVBQUlzOUIsRUFBT3I5QixPQUFRRCxJQUMvQnM5QixFQUFPdDlCLE1BS25CLFNBQVMrM0MsR0FBaUJqdUMsR0FDdEIsT0FBT3pJLEdBQU1vSixNQUFLLFNBQVU0bEMsR0FBVyxPQUFPdm1DLEVBQUdpa0MsV0FBYXNDLEtBR2xFLFNBQVMySCxHQUFXbHVDLEVBQUk0ZSxHQUdwQixJQUFLNWUsRUFBR3lvQyxzQkFBd0J3RixHQUFpQmp1QyxHQUFLLENBQ2xELEdBQUcsdUVBQVltQyxjQUFjLENBQ3pCLElBQUkzQyxFQUFhUSxFQUFHZ0gsT0FDcEI5SixRQUFRc1ksSUFBSSxNQUFRLElBQUkvUixLQUFRLE1BQVFqRSxFQUFXaWhDLElBQU1qaEMsRUFBV3VKLE9BQVMsS0FBTy9JLEVBQUc2cEMsS0FDbkYsaUJBRVIsT0FBT3pzQixHQUFTd0IsRUFBSTVlLEdBRXBCLEdBQUcsdUVBQVltQyxjQUFjLENBQ3pCLElBQUlnc0MsRUFBZW51QyxFQUFHZ0gsT0FDdEI5SixRQUFRc1ksSUFBSSxNQUFRLElBQUkvUixLQUFRLE1BQVEwcUMsRUFBYTFOLElBQU0wTixFQUFhcGxDLE9BQVMsS0FBTy9JLEVBQUc2cEMsS0FDdkYsZ0JBR1osSUFBSTVWLEVBZ0JKLEdBZktqMEIsRUFBR2d1Qyx3QkFDSmh1QyxFQUFHZ3VDLHNCQUF3QixJQUUvQmh1QyxFQUFHZ3VDLHNCQUFzQjMzQyxNQUFLLFdBQzFCLEdBQUl1b0IsRUFDQSxJQUNJQSxFQUFHcHFCLEtBQUt3TCxHQUNWLE1BQU9pQyxJQUNMMHdCLEdBQVkxd0IsR0FBR2pDLEVBQUksaUJBRWhCaTBCLEdBQ1BBLEVBQVNqMEIsT0FJWjRlLEdBQXlCLHFCQUFabm5CLFFBQ2QsT0FBTyxJQUFJQSxTQUFRLFNBQVVDLEdBQ3pCdThCLEVBQVd2OEIsS0FPdkIsU0FBUzAyQyxHQUFjcHVDLEdBRXJCLElBQUlzRyxFQUFNeFMsT0FBT2dCLE9BQU8sTUFDcEJ1NUMsRUFBVyxHQUFHeDRDLE9BQ2hCL0IsT0FBTytDLEtBQUttSixFQUFHbWQsT0FBUyxJQUN4QnJwQixPQUFPK0MsS0FBS21KLEVBQUc2b0MsbUJBQXFCLEtBRXRDd0YsRUFBU2wwQixRQUFPLFNBQVM3VCxFQUFLNVIsR0FFNUIsT0FEQTRSLEVBQUk1UixHQUFPc0wsRUFBR3RMLEdBQ1A0UixJQUNOQSxHQUdILElBQUlnb0MsRUFBY3R1QyxFQUFHdXVDLHNCQUF3QnZ1QyxFQUFHdXVDLHFCQUFxQkQsWUFpQnJFLE9BaEJJQSxHQUNGeDZDLE9BQU8rQyxLQUFLeTNDLEdBQWF4M0MsU0FBUSxTQUFVcEMsR0FDekM0UixFQUFJNVIsR0FBT3NMLEVBQUd0TCxNQUtsQlosT0FBTytGLE9BQU95TSxFQUFLdEcsRUFBR0UsSUFBSTlJLE1BQVEsSUFFaEN0QixNQUFNQyxRQUFRaUssRUFBRytHLFNBQVM5RCxhQUM2QixJQUF2RGpELEVBQUcrRyxTQUFTOUQsVUFBVTdNLFFBQVEsc0JBRTlCa1EsRUFBSSxRQUFVdEcsRUFBR2xJLEtBQ2pCd08sRUFBSSxTQUFXdEcsRUFBRy9GLE9BR2JtSSxLQUFLQyxNQUFNRCxLQUFLRSxVQUFVZ0UsSUFHbkMsSUFBSWtvQyxHQUFRLFNBQVNoUSxFQUFVaFMsR0FDN0IsSUFBSWpTLEVBQVN4Z0IsS0FFYixHQUFjLE9BQVZ5eUIsSUFHZ0IsU0FBaEJ6eUIsS0FBS29HLFFBQXFDLGNBQWhCcEcsS0FBS29HLFFBQXdCLENBQ3pELElBQUlYLEVBQWF6RixLQUFLaU4sT0FDbEI1UCxFQUFPdEQsT0FBT2dCLE9BQU8sTUFDekIsSUFDRXNDLEVBQU9nM0MsR0FBY3IwQyxNQUNyQixNQUFPVCxHQUNQNEQsUUFBUVEsTUFBTXBFLEdBRWhCbEMsRUFBS3EzQyxjQUFnQmp2QyxFQUFXcEksS0FBS3EzQyxjQUNyQyxJQUFJQyxFQUFTNTZDLE9BQU9nQixPQUFPLE1BQzNCaEIsT0FBTytDLEtBQUtPLEdBQU1OLFNBQVEsU0FBVXBDLEdBQ2xDZzZDLEVBQU9oNkMsR0FBTzhLLEVBQVdwSSxLQUFLMUMsTUFFaEMsSUFBSWk2QyxHQUFvQyxJQUF6QjUwQyxLQUFLNjBDLGdCQUE0QngzQyxFQUFPKzFDLEdBQUsvMUMsRUFBTXMzQyxHQUM5RDU2QyxPQUFPK0MsS0FBSzgzQyxHQUFVeDRDLFFBQ3BCLHVFQUFZZ00sZUFDZGpGLFFBQVFzWSxJQUFJLE1BQVEsSUFBSS9SLEtBQVEsTUFBUWpFLEVBQVdpaEMsSUFBTWpoQyxFQUFXdUosT0FBUyxLQUFPaFAsS0FBSzh2QyxLQUN2RixRQUNBem5DLEtBQUtFLFVBQVVxc0MsSUFFbkI1MEMsS0FBSzB1QyxxQkFBc0IsRUFDM0JqcEMsRUFBVzRFLFFBQVF1cUMsR0FBVSxXQUMzQnAwQixFQUFPa3VCLHFCQUFzQixFQUM3QnNGLEdBQWlCeHpCLE9BR25Cd3pCLEdBQWlCaDBDLFFBT3ZCLFNBQVM4MEMsTUFJVCxTQUFTQyxHQUNQOXVDLEVBQ0FtdkIsRUFDQThPLEdBRUEsSUFBS2orQixFQUFHRyxPQUNOLE9BQU9ILEVBRVMsUUFBZEEsRUFBR0csU0FDTEgsRUFBRytHLFNBQVM2dEIsT0FBU2lhLElBRWxCN3VDLEVBQUcrRyxTQUFTNnRCLFNBQ2Y1MEIsRUFBRytHLFNBQVM2dEIsT0FBU2lhLEdBR2Q3dUMsRUFBRytHLFNBQVNnb0MsVUFBK0MsTUFBbkMvdUMsRUFBRytHLFNBQVNnb0MsU0FBUzFuQyxPQUFPLElBQ3ZEckgsRUFBRytHLFNBQVNvb0IsSUFBTUEsRUFDbEJoeUIsR0FDRSx3TEFHQTZDLEdBR0Y3QyxHQUNFLHNFQUNBNkMsS0FNUEEsRUFBR2dxQyxZQUFjckwsR0FBUzMrQixFQUFJLGVBRS9CLElBQUlndkMsRUFBa0IsV0FDcEJodkMsRUFBR3NrQyxRQUFRdGtDLEVBQUcyaEMsVUFBVzFELElBYzNCLE9BUkEsSUFBSWdKLEdBQVFqbkMsRUFBSWd2QyxFQUFpQnI2QyxFQUFNLENBQ3JDNnhDLE9BQVEsV0FDRnhtQyxFQUFHdUksYUFBZXZJLEVBQUdrK0IsY0FDdkJTLEdBQVMzK0IsRUFBSSxtQkFHaEIsR0FDSGkrQixHQUFZLEVBQ0xqK0IsRUFLVCxTQUFTaXZDLEdBQ1BDLEVBQ0FDLEdBRUEsT0FBSTlyQixFQUFNNnJCLElBQWdCN3JCLEVBQU04ckIsR0FDdkJ0NUMsR0FBT3E1QyxFQUFhRSxHQUFlRCxJQUdyQyxHQUdULFNBQVN0NUMsR0FBUTh1QixFQUFHUyxHQUNsQixPQUFPVCxFQUFJUyxFQUFLVCxFQUFJLElBQU1TLEVBQUtULEVBQUtTLEdBQUssR0FHM0MsU0FBU2dxQixHQUFnQm4xQyxHQUN2QixPQUFJbkUsTUFBTUMsUUFBUWtFLEdBQ1RvMUMsR0FBZXAxQyxHQUVwQm9lLEVBQVNwZSxHQUNKcTFDLEdBQWdCcjFDLEdBRUosa0JBQVZBLEVBQ0ZBLEVBR0YsR0FHVCxTQUFTbzFDLEdBQWdCcDFDLEdBR3ZCLElBRkEsSUFDSXMxQyxFQURBMzVDLEVBQU0sR0FFRE0sRUFBSSxFQUFHMHVCLEVBQUkzcUIsRUFBTTlELE9BQVFELEVBQUkwdUIsRUFBRzF1QixJQUNuQ210QixFQUFNa3NCLEVBQWNILEdBQWVuMUMsRUFBTS9ELE1BQXdCLEtBQWhCcTVDLElBQy9DMzVDLElBQU9BLEdBQU8sS0FDbEJBLEdBQU8yNUMsR0FHWCxPQUFPMzVDLEVBR1QsU0FBUzA1QyxHQUFpQnIxQyxHQUN4QixJQUFJckUsRUFBTSxHQUNWLElBQUssSUFBSWxCLEtBQU91RixFQUNWQSxFQUFNdkYsS0FDSmtCLElBQU9BLEdBQU8sS0FDbEJBLEdBQU9sQixHQUdYLE9BQU9rQixFQUtULElBQUk0NUMsR0FBaUI1NkMsR0FBTyxTQUFVNjZDLEdBQ3BDLElBQUk3NUMsRUFBTSxHQUNOODVDLEVBQWdCLGdCQUNoQkMsRUFBb0IsUUFPeEIsT0FOQUYsRUFBUTl0QyxNQUFNK3RDLEdBQWU1NEMsU0FBUSxTQUFVcUYsR0FDN0MsR0FBSUEsRUFBTSxDQUNSLElBQUkwckMsRUFBTTFyQyxFQUFLd0YsTUFBTWd1QyxHQUNyQjlILEVBQUkxeEMsT0FBUyxJQUFNUCxFQUFJaXlDLEVBQUksR0FBRytILFFBQVUvSCxFQUFJLEdBQUcrSCxZQUc1Q2g2QyxLQUlULFNBQVNpNkMsR0FBdUJDLEdBQzlCLE9BQUloNkMsTUFBTUMsUUFBUSs1QyxHQUNUM3FCLEVBQVMycUIsR0FFVSxrQkFBakJBLEVBQ0ZOLEdBQWVNLEdBRWpCQSxFQUtULElBQUlDLEdBQWEsQ0FBQyxzQkFBdUIsNkJBQThCLHNCQUF1QixtQkFFOUYsU0FBU0MsR0FBVXo3QyxFQUFLdWxCLEdBQ3RCLElBQUltMkIsRUFBUW4yQixFQUFLblksTUFBTSxLQUNuQmpOLEVBQU11N0MsRUFBTSxHQUloQixPQUg0QixJQUF4QnY3QyxFQUFJMEIsUUFBUSxVQUNkMUIsRUFBTW1ILFNBQVNuSCxFQUFJUSxRQUFRLE9BQVEsTUFFaEIsSUFBakIrNkMsRUFBTTk1QyxPQUNENUIsRUFBSUcsR0FFTnM3QyxHQUFVejdDLEVBQUlHLEdBQU11N0MsRUFBTTczQyxNQUFNLEdBQUc2aUIsS0FBSyxNQUdqRCxTQUFTaTFCLEdBQWN6eEMsR0FFckJBLEVBQUkwZCxPQUFPb0ssYUFBZSxTQUFTanRCLEVBQUswRyxFQUFJcVQsR0FDMUM1VSxFQUFJb3VDLEtBQUsxdkMsS0FBTSxZQUFja1csRUFBTyxNQUFVL1osRUFBSXRGLFdBQWMsSUFBT2dNLEdBQ3ZFOUMsUUFBUVEsTUFBTXBFLEdBRWQsSUFBSStPLEVBQU04bkMsU0FDTjluQyxHQUFPQSxFQUFJK25DLFNBQ2IvbkMsRUFBSStuQyxRQUFROTJDLElBSWhCLElBQUkrMkMsRUFBVTV4QyxFQUFJMUssVUFBVWdMLE1BRTVCTixFQUFJMUssVUFBVWdMLE1BQVEsU0FBU1ksR0FNN0IsT0FMSTVGLEtBQUtpTixRQUFVckgsR0FDakI1RixLQUFLaU4sT0FBTyxnQkFBZ0JySCxFQUFPLENBQ2pDaUcsU0FBVW1mLEVBQVFubUIsVUFBVyxLQUcxQnl4QyxFQUFRNXlDLE1BQU0xRCxLQUFNNkUsWUFHN0JILEVBQUkxSyxVQUFVMnRDLFVBQVksU0FBU3Z0QyxHQUNqQyxPQUFPKzVDLEdBQVduMEMsS0FBTTVGLElBRzFCNDdDLEdBQVdqNUMsU0FBUSxTQUFVRyxHQUMzQndILEVBQUkxSyxVQUFVa0QsR0FBVSxTQUFTeUUsR0FDL0IsT0FBSTNCLEtBQUtpTixRQUFVak4sS0FBS2lOLE9BQU8vUCxHQUN0QjhDLEtBQUtpTixPQUFPL1AsR0FBUXlFLEdBR1gscUJBQVA0MEMsR0FHSSx3QkFBWHI1QyxFQUVLcTVDLEdBQUd4dEIsb0JBQW9CcG5CLEdBQ1YsK0JBQVh6RSxFQUVGcTVDLEdBQUdDLDJCQUEyQjcwQyxRQUZoQyxPQU5QLE1BY0orQyxFQUFJMUssVUFBVXk4QyxlQUFpQmhaLEdBRS9CLzRCLEVBQUkxSyxVQUFVMDhDLGtCQUFvQi9ZLEdBRWxDajVCLEVBQUkxSyxVQUFVaU4sWUFBYyxTQUFTekssRUFBTW1GLEdBQ3pDLElBQUlzRSxFQUFLakcsS0FFVDB3QixLQUNBLElBRUlua0IsRUFGQXF1QixFQUFXMzBCLEVBQUcrRyxTQUFTeFEsR0FDdkI4YyxFQUFPOWMsRUFBTyxRQUVsQixHQUFJbytCLEVBQ0YsSUFBSyxJQUFJeitCLEVBQUksRUFBR3l2QyxFQUFJaFIsRUFBU3grQixPQUFRRCxFQUFJeXZDLEVBQUd6dkMsSUFDMUNvUSxFQUFNMHNCLEdBQXdCMkIsRUFBU3orQixHQUFJOEosRUFBSXRFLEVBQU8sQ0FBQ0EsR0FBUSxLQUFNc0UsRUFBSXFULEdBTzdFLE9BSklyVCxFQUFHbWpDLGVBQ0xuakMsRUFBR2pCLE1BQU0sUUFBVXhJLEVBQU1tRixHQUUzQmt2QixLQUNPdGtCLEdBR1Q3SCxFQUFJMUssVUFBVTI4QyxZQUFjLFNBQVNoc0MsRUFBUWhRLEVBQUt1RixFQUFPMDJDLEdBQ25ENzZDLE1BQU1DLFFBQVE0NkMsTUFDbUIsSUFBL0JBLEVBQVV2NkMsUUFBUSxVQUNwQjZELEVBQVFBLEVBQU0yMUMsU0FFcUIsSUFBakNlLEVBQVV2NkMsUUFBUSxZQUNwQjZELEVBQVFGLEtBQUs4aEMsR0FBRzVoQyxLQUdmeUssSUFDSEEsRUFBUzNLLE1BRVgySyxFQUFPaFEsR0FBT3VGLEdBR2hCd0UsRUFBSTFLLFVBQVU2OEMsV0FBYSxTQUFTbHNDLEVBQVFoUSxFQUFLdUYsR0FDMUN5SyxJQUNIQSxFQUFTM0ssTUFFWDJLLEVBQU9oUSxHQUFPdUYsR0FHaEJ3RSxFQUFJMUssVUFBVTg4QyxXQUFhLFNBQVMxMEMsR0FDbEMsT0FBSTdILEVBQWM2SCxJQUNUQSxFQUFLLFVBRVBBLEdBR1RzQyxFQUFJMUssVUFBVXVSLFlBQWMsU0FBU04sRUFBVU4sR0FDN0MsT0FBT3NyQyxHQUFVdHJDLEdBQVUzSyxLQUFNaUwsSUFJbkN2RyxFQUFJMUssVUFBVSs4QyxZQUFjLFNBQVMzQixFQUFjRCxHQUNqRCxPQUFPRCxHQUFZQyxFQUFhQyxJQUdsQzF3QyxFQUFJMUssVUFBVWc5QyxZQUFjLFNBQVNDLEVBQWNDLEdBQ2pELElBQUtELElBQWlCQyxFQUNwQixNQUFPLEdBRVQsSUFBSUMsRUFBa0JyQixHQUFzQm1CLEdBQ3hDRyxFQUFXRixFQUFjOXZDLEVBQU84dkMsRUFBYUMsR0FBbUJBLEVBQ3BFLE9BQU9wOUMsT0FBTytDLEtBQUtzNkMsR0FBVTd4QixLQUFJLFNBQVV4bkIsR0FBUSxPQUFTMHNCLEVBQVUxc0IsR0FBUyxJQUFPcTVDLEVBQVNyNUMsTUFBWW1qQixLQUFLLE1BR2xIeGMsRUFBSTFLLFVBQVVxOUMsTUFBUSxTQUFTOTRCLEVBQUsrNEIsR0FFbEMsSUFBSS9xQyxFQUFLcFEsRUFBRzB1QixFQUFHL3RCLEVBQU1uQyxFQUNyQixHQUFJb0IsTUFBTUMsUUFBUXVpQixHQUFNLENBRXRCLElBREFoUyxFQUFNLElBQUl4USxNQUFNd2lCLEVBQUluaUIsUUFDZkQsRUFBSSxFQUFHMHVCLEVBQUl0TSxFQUFJbmlCLE9BQVFELEVBQUkwdUIsRUFBRzF1QixJQUNqQ29RLEVBQUlwUSxHQUFLbTdDLEVBQVMvNEIsRUFBSXBpQixHQUFJQSxHQUU1QixPQUFPb1EsRUFDRixHQUFJK1IsRUFBU0MsR0FBTSxDQUd4QixJQUZBemhCLEVBQU8vQyxPQUFPK0MsS0FBS3loQixHQUNuQmhTLEVBQU14UyxPQUFPZ0IsT0FBTyxNQUNmb0IsRUFBSSxFQUFHMHVCLEVBQUkvdEIsRUFBS1YsT0FBUUQsRUFBSTB1QixFQUFHMXVCLElBQ2xDeEIsRUFBTW1DLEVBQUtYLEdBQ1hvUSxFQUFJNVIsR0FBTzI4QyxFQUFTLzRCLEVBQUk1akIsR0FBTUEsRUFBS3dCLEdBRXJDLE9BQU9vUSxFQUNGLEdBQW1CLGtCQUFSZ1MsRUFBa0IsQ0FFbEMsSUFEQWhTLEVBQU0sSUFBSXhRLE1BQU13aUIsR0FDWHBpQixFQUFJLEVBQUcwdUIsRUFBSXRNLEVBQUtwaUIsRUFBSTB1QixFQUFHMXVCLElBRTFCb1EsRUFBSXBRLEdBQUttN0MsRUFBU243QyxFQUFHQSxHQUV2QixPQUFPb1EsRUFFVCxNQUFPLElBT1gsSUFBSWdyQyxHQUFvQixDQUVwQixXQUNBLFNBQ0EsU0FDQSxvQkFDQSxpQkFDQSxnQkFDQSxVQUNBLHVCQUVBLFNBRUEsVUFFQSxXQUNBLG9CQUNBLGdCQUNBLGVBQ0EsbUJBQ0Esa0JBQ0Esb0JBQ0EsV0FDQSxlQUNBLDJCQUNBLGNBQ0Esb0NBQ0Esc0NBQ0Esb0NBR0EsYUFDQSxhQUNBLGdCQUVKLFNBQVNDLEdBQWlCOXlDLEdBR3RCLElBQUkreUMsRUFBWS95QyxFQUFJMEMsT0FDcEIxQyxFQUFJMEMsT0FBUyxTQUFTWCxHQUNsQkEsRUFBZ0JBLEdBQWlCLEdBRWpDLElBQUl3QixFQUFVeEIsRUFBY3dCLFFBVTVCLE9BVElBLEdBQ0FsTyxPQUFPK0MsS0FBS21MLEdBQVNsTCxTQUFRLFNBQVU2RixJQUNVLElBQXpDMjBDLEdBQWtCbDdDLFFBQVF1RyxLQUMxQjZELEVBQWM3RCxHQUFjcUYsRUFBUXJGLFVBQzdCcUYsRUFBUXJGLE9BS3BCNjBDLEVBQVVoOUMsS0FBS3VGLEtBQU15RyxJQUdoQyxJQUFJaXhDLEVBQWFoekMsRUFBSTBkLE9BQU9pSyxzQkFDeEIzd0IsRUFBWWc4QyxFQUFXbEYsUUFDM0IrRSxHQUFrQng2QyxTQUFRLFNBQVVQLEdBQ2hDazdDLEVBQVdsN0MsR0FBUWQsS0FHdkJnSixFQUFJMUssVUFBVXdPLG9CQUFzQit1QyxHQU14Qzd5QyxHQUFJMUssVUFBVTR3QyxVQUFZNkosR0FHMUIvdkMsR0FBSTFLLFVBQVV5VyxPQUFTLFNBQ25CMmtCLEVBQ0E4TyxHQUVBLE9BQU82USxHQUFpQi8wQyxLQUFNbzFCLEVBQUk4TyxJQUd0Q3NULEdBQWlCOXlDLElBQ2pCeXhDLEdBQWN6eEMsSUFJQyxpQjs7Ozs0REN4NUxmLFlBbUJBLElBK0JJNUUsRUEvQkFzaUIsRUFBUyxDQUNYdTFCLFdBQVksR0FDWkMsV0FBWSxFQUNaQyxZQUFhLEdBQ2JDLGdCQUFpQixHQUNqQkMsYUFBYyxHQUNkQyxnQkFBaUIsR0FDakJDLFFBQVMsQ0FBQyxHQUFJLEdBQUksR0FBSSxJQUN0QnAzQyxXQUFZLEVBQ1pxM0MsUUFBUSxFQUNSQyxjQUFlLEVBQ2ZDLFNBQVUsR0FFVkMsZUFBZ0IsQ0FBQyxTQUFVLFNBQVUsU0FBVSxVQUMvQ0MsT0FBUSxDQUFDLFVBQVcsVUFBVyxVQUFXLFVBQVcsVUFBVyxXQUNoRUMsb0JBQXFCLEdBQ3JCQyxvQkFBcUIsRUFDckJDLGlCQUFrQixFQUNsQkMsV0FBWSxVQUNaQyxjQUFlLEdBQ2ZDLGNBQWUsVUFDZkMsaUJBQWtCLEdBQ2xCQyxlQUFnQixFQUNoQkMsa0JBQW1CLFVBQ25CQyxlQUFnQixHQUNoQkMsa0JBQW1CLEdBQ25CQyxlQUFnQixFQUNoQkMscUJBQXNCLEdBQ3RCQyxxQkFBc0IsSUFLdEJ0NUMsRUFERS9GLE9BQU8rRixPQUNBL0YsT0FBTytGLE9BR1AsU0FBUzZLLEVBQVEwdUMsR0FDeEIsR0FBYyxNQUFWMXVDLEVBQ0YsTUFBTSxJQUFJME8sVUFBVSw4Q0FHdEIsSUFEQSxJQUFJNlIsRUFBS254QixPQUFPNFEsR0FDUGxPLEVBQVEsRUFBR0EsRUFBUW9JLFVBQVV6SSxPQUFRSyxJQUFTLENBQ3JELElBQUk2OEMsRUFBYXowQyxVQUFVcEksR0FDM0IsR0FBa0IsTUFBZDY4QyxFQUNGLElBQUssSUFBSUMsS0FBV0QsRUFDZHYvQyxPQUFPQyxVQUFVRSxlQUFlTyxLQUFLNitDLEVBQVlDLEtBQ25EcnVCLEVBQUdxdUIsR0FBV0QsRUFBV0MsSUFLakMsT0FBT3J1QixHQUlYLElBQUk0bkIsRUFBTyxDQUNUMEcsUUFBUyxTQUFpQjU5QixFQUFLNjlCLEdBSzdCLE9BSkFBLEVBQVFBLEdBQVMsRUFDYno1QyxLQUFLMDVDLFFBQVE5OUIsS0FDZkEsRUFBTUEsRUFBSTQ5QixRQUFRQyxJQUViNzlCLEdBRVQ4OUIsUUFBUyxTQUFpQjk5QixHQUN4QixPQUFPQSxFQUFNLElBQU0sR0FFckIrOUIsbUJBQW9CLFNBQTRCQyxFQUFNQyxHQUNwRCxPQUFPejRDLEtBQUswNEMsSUFBSUYsRUFBT0MsR0FBUSxPQUVqQ0UsV0FBWSxTQUFvQkgsRUFBTUMsR0FDcEMsT0FBT3o0QyxLQUFLMDRDLElBQUlGLEtBQVVBLEdBQVF4NEMsS0FBSzA0QyxJQUFJRCxLQUFVQSxHQUFRejRDLEtBQUswNEMsSUFBSUYsS0FBVUEsR0FBUXg0QyxLQUFLMDRDLElBQUlELEtBQVVBLEdBRTdHRyxzQkFBdUIsU0FBK0JDLEVBQUlDLEdBQ3hELE9BQU9sNkMsS0FBSys1QyxXQUFXRSxFQUFHeHhCLEVBQUd5eEIsRUFBR3p4QixJQUVsQzB4QixZQUFhLFNBQXFCQyxFQUFNQyxHQUN0Q0QsRUFBS0UsSUFBTSxHQUNYRixFQUFLRSxJQUFJN3hCLEVBQUkyeEIsRUFBS252QixNQUFNeEMsRUFBSTJ4QixFQUFLbnlCLE1BQ2pDbXlCLEVBQUtFLElBQUk1eEIsRUFBSTB4QixFQUFLbnZCLE1BQU12QyxFQUFJMHhCLEVBQUtHLE9BQ2pDRixFQUFLQyxJQUFNLEdBQ1hELEVBQUtDLElBQUk3eEIsRUFBSTR4QixFQUFLcHZCLE1BQU14QyxFQUFJNHhCLEVBQUtweUIsTUFDakNveUIsRUFBS0MsSUFBSTV4QixFQUFJMnhCLEVBQUtwdkIsTUFBTXZDLEVBQUkyeEIsRUFBS0UsT0FDakMsSUFBSUMsRUFBT0gsRUFBS3B2QixNQUFNeEMsRUFBSTJ4QixFQUFLRSxJQUFJN3hCLEdBQUs0eEIsRUFBS0MsSUFBSTd4QixFQUFJMnhCLEVBQUtudkIsTUFBTXhDLEdBQUs0eEIsRUFBS0MsSUFBSTV4QixFQUFJMHhCLEVBQUtudkIsTUFBTXZDLEdBQUsyeEIsRUFBS3B2QixNQUFNdkMsRUFBSTB4QixFQUFLRSxJQUFJNXhCLEVBQzFILE9BQVE4eEIsSUFpQlosU0FBU0MsRUFBU0MsRUFBVUMsR0FDMUIsSUFBSUMsRUFBTSxtQ0FDTkMsRUFBTUgsRUFBU3YvQyxRQUFReS9DLEdBQUssU0FBU0UsRUFBR0MsRUFBR2xvQyxFQUFHd1ksR0FDaEQsT0FBTzB2QixFQUFJQSxFQUFJbG9DLEVBQUlBLEVBQUl3WSxFQUFJQSxLQUV6QjJ2QixFQUFNLDRDQUE0Qzd4QixLQUFLMHhCLEdBQ3ZERSxFQUFJajVDLFNBQVNrNUMsRUFBSSxHQUFJLElBQ3JCbm9DLEVBQUkvUSxTQUFTazVDLEVBQUksR0FBSSxJQUNyQjN2QixFQUFJdnBCLFNBQVNrNUMsRUFBSSxHQUFJLElBQ3pCLE1BQU8sUUFBVUQsRUFBSSxJQUFNbG9DLEVBQUksSUFBTXdZLEVBQUksSUFBTXN2QixFQUFNLElBR3ZELFNBQVNNLEVBQVVyL0IsRUFBS25TLEVBQU1nd0MsR0FDNUIsR0FBSXozQyxNQUFNNFosR0FDUixNQUFNLElBQUlqTyxNQUFNLGtDQUVsQjhyQyxFQUFRQSxHQUFTLEdBQ2pCaHdDLEVBQU9BLEdBQWMsUUFDckIsSUFBSXl4QyxFQUFXLEVBQ2YsTUFBT3pCLEVBQVEsRUFDYkEsR0FBUyxHQUNUeUIsR0FBWSxHQUdadC9CLEVBRFcsVUFBVG5TLEVBQ0lySSxLQUFLKzVDLEtBQUt2L0IsRUFBTXMvQixHQUVoQjk1QyxLQUFLQyxNQUFNdWEsRUFBTXMvQixHQUV6QixNQUFPdC9CLEVBQU02OUIsSUFBVSxFQUNSLFVBQVRod0MsRUFDRm1TLElBRUFBLElBR0osT0FBT0EsRUFBTXMvQixFQUdmLFNBQVNFLEVBQVlDLEVBQVFDLEVBQVNDLEVBQVVDLEdBRTlDLElBREEsSUFBSUMsRUFBYSxHQUNSMUgsRUFBSSxFQUFHQSxFQUFJc0gsRUFBT2ovQyxPQUFRMjNDLElBQUssQ0FNdEMsSUFMQSxJQUFJMkgsRUFBYSxDQUNmcitDLEtBQU0sR0FDTlUsS0FBTXU5QyxFQUFRdkgsR0FDZDRILE1BQU9KLEVBQVN4SCxJQUVUNTNDLEVBQUksRUFBRytGLEVBQU1zNUMsRUFBTXAvQyxPQUFRRCxFQUFJK0YsRUFBSy9GLElBQzNDLEdBQUlBLEVBQUlrL0MsRUFBT3RILEdBQ2IySCxFQUFXcitDLEtBQUtmLEtBQUssVUFEdkIsQ0FLQSxJQURBLElBQUlzL0MsRUFBTSxFQUNEaFEsRUFBSSxFQUFHQSxFQUFJeVAsRUFBT3RILEdBQUluSSxJQUM3QmdRLEdBQU9KLEVBQU1yL0MsRUFBSXl2QyxHQUFHLEdBRXRCOFAsRUFBV3IrQyxLQUFLZixPQUFPcy9DLEVBQU1QLEVBQU90SCxJQUFJeUYsUUFBUSxJQUVsRGlDLEVBQVduL0MsS0FBS28vQyxHQUVsQixPQUFPRCxFQUdULFNBQVNJLEVBQWlCQyxFQUFVQyxFQUFXMzVCLEVBQVE5WCxHQUNyRCxJQUFJMHhDLEVBQXFCMXhDLEVBQUsyZCxNQUFRM2QsRUFBSzJ4QyxLQUFLLEdBQUszeEMsRUFBSzJ4QyxLQUFLLEdBQzNEQyxFQUFpQkgsRUFBVUksYUFBZTd4QyxFQUFLeXhDLFVBQVVLLFVBQVVDLFlBQVlqZ0QsT0FBTyxHQUN0RmtnRCxFQUFnQlIsRUFNcEIsT0FMSUEsR0FBWSxFQUNkUSxFQUFnQixFQUNQbDdDLEtBQUswNEMsSUFBSWdDLElBQWFJLEVBQWlCRixJQUNoRE0sRUFBZ0JOLEVBQXFCRSxHQUVoQ0ksRUFHVCxTQUFTQyxFQUFlQyxFQUFPQyxFQUFZQyxHQUN6QyxTQUFTQyxFQUFPSCxHQUNkLE1BQU9BLEVBQVEsRUFDYkEsR0FBUyxFQUFJcDdDLEtBQUt3N0MsR0FFcEIsTUFBT0osRUFBUSxFQUFJcDdDLEtBQUt3N0MsR0FDdEJKLEdBQVMsRUFBSXA3QyxLQUFLdzdDLEdBRXBCLE9BQU9KLEVBV1QsT0FUQUEsRUFBUUcsRUFBT0gsR0FDZkMsRUFBYUUsRUFBT0YsR0FDcEJDLEVBQVdDLEVBQU9ELEdBQ2RELEVBQWFDLElBQ2ZBLEdBQVksRUFBSXQ3QyxLQUFLdzdDLEdBQ2pCSixFQUFRQyxJQUNWRCxHQUFTLEVBQUlwN0MsS0FBS3c3QyxLQUdmSixHQUFTQyxHQUFjRCxHQUFTRSxFQUd6QyxTQUFTRyxFQUFtQnAwQixFQUFHQyxFQUFHbzBCLEdBQ2hDLElBQUlDLEVBQUt0MEIsRUFDTHUwQixFQUFLRixFQUFJcDBCLEVBQ1R1MEIsRUFBU0YsR0FBTUQsRUFBSUUsRUFBS0QsR0FBTTM3QyxLQUFLODdDLEtBQUssR0FDNUNELElBQVcsRUFDWCxJQUFJRSxHQUFVTCxFQUFJRSxJQUFPNTdDLEtBQUs4N0MsS0FBSyxHQUFLLElBQU1KLEVBQUlFLEVBQUtELEdBQU0zN0MsS0FBSzg3QyxLQUFLLEdBQ3ZFLE1BQU8sQ0FDTEQsT0FBUUEsRUFDUkUsT0FBUUEsR0FJWixTQUFTQyxFQUF5QkMsRUFBUWxoRCxHQUV4QyxTQUFTbWhELEVBQWlCRCxFQUFRbGhELEdBQ2hDLFNBQUlraEQsRUFBT2xoRCxFQUFJLEtBQU1raEQsRUFBT2xoRCxFQUFJLE1BQ3ZCa2hELEVBQU9saEQsR0FBR3VzQixHQUFLdG5CLEtBQUt3bkIsSUFBSXkwQixFQUFPbGhELEVBQUksR0FBR3VzQixFQUFHMjBCLEVBQU9saEQsRUFBSSxHQUFHdXNCLElBQU0yMEIsRUFBT2xoRCxHQUFHdXNCLEdBQUt0bkIsS0FBS3luQixJQUFJdzBCLEVBQU9saEQsRUFBSSxHQUFHdXNCLEVBQ3hHMjBCLEVBQ0VsaEQsRUFBSSxHQUFHdXNCLElBS2YsSUFBSWtDLEVBQUksR0FDSlMsRUFBSSxHQUNKa3lCLEVBQU0sS0FDTkMsRUFBTSxLQUNOQyxFQUFNLEtBQ05DLEVBQU0sS0FTVixHQVJJdmhELEVBQUksR0FDTm9oRCxFQUFNRixFQUFPLEdBQUc1MEIsR0FBSzQwQixFQUFPLEdBQUc1MEIsRUFBSTQwQixFQUFPLEdBQUc1MEIsR0FBS21DLEVBQ2xENHlCLEVBQU1ILEVBQU8sR0FBRzMwQixHQUFLMjBCLEVBQU8sR0FBRzMwQixFQUFJMjBCLEVBQU8sR0FBRzMwQixHQUFLa0MsSUFFbEQyeUIsRUFBTUYsRUFBT2xoRCxHQUFHc3NCLEdBQUs0MEIsRUFBT2xoRCxFQUFJLEdBQUdzc0IsRUFBSTQwQixFQUFPbGhELEVBQUksR0FBR3NzQixHQUFLbUMsRUFDMUQ0eUIsRUFBTUgsRUFBT2xoRCxHQUFHdXNCLEdBQUsyMEIsRUFBT2xoRCxFQUFJLEdBQUd1c0IsRUFBSTIwQixFQUFPbGhELEVBQUksR0FBR3VzQixHQUFLa0MsR0FHeER6dUIsRUFBSWtoRCxFQUFPamhELE9BQVMsRUFBRyxDQUN6QixJQUFJazBCLEVBQU8rc0IsRUFBT2poRCxPQUFTLEVBQzNCcWhELEVBQU1KLEVBQU8vc0IsR0FBTTdILEdBQUs0MEIsRUFBTy9zQixHQUFNN0gsRUFBSTQwQixFQUFPL3NCLEVBQU8sR0FBRzdILEdBQUs0QyxFQUMvRHF5QixFQUFNTCxFQUFPL3NCLEdBQU01SCxHQUFLMjBCLEVBQU8vc0IsR0FBTTVILEVBQUkyMEIsRUFBTy9zQixFQUFPLEdBQUc1SCxHQUFLMkMsT0FFL0RveUIsRUFBTUosRUFBT2xoRCxFQUFJLEdBQUdzc0IsR0FBSzQwQixFQUFPbGhELEVBQUksR0FBR3NzQixFQUFJNDBCLEVBQU9saEQsR0FBR3NzQixHQUFLNEMsRUFDMURxeUIsRUFBTUwsRUFBT2xoRCxFQUFJLEdBQUd1c0IsR0FBSzIwQixFQUFPbGhELEVBQUksR0FBR3VzQixFQUFJMjBCLEVBQU9saEQsR0FBR3VzQixHQUFLMkMsRUFRNUQsT0FOSWl5QixFQUFpQkQsRUFBUWxoRCxFQUFJLEtBQy9CdWhELEVBQU1MLEVBQU9saEQsRUFBSSxHQUFHdXNCLEdBRWxCNDBCLEVBQWlCRCxFQUFRbGhELEtBQzNCcWhELEVBQU1ILEVBQU9saEQsR0FBR3VzQixHQUVYLENBQ0xpMUIsS0FBTSxDQUNKbDFCLEVBQUc4MEIsRUFDSDcwQixFQUFHODBCLEdBRUxJLEtBQU0sQ0FDSm4xQixFQUFHZzFCLEVBQ0gvMEIsRUFBR2cxQixJQUtULFNBQVNHLEVBQXdCcDFCLEVBQUdDLEVBQUdvMUIsR0FDckMsTUFBTyxDQUNMcjFCLEVBQUdxMUIsRUFBT3IxQixFQUFJQSxFQUNkQyxFQUFHbzFCLEVBQU9wMUIsRUFBSUEsR0FJbEIsU0FBU3ExQixFQUFldmpELEVBQUttUSxHQUMzQixHQUFJQSxFQUVGLE1BQU9tb0MsRUFBS3FILFlBQVkzL0MsRUFBS21RLEdBQ3ZCblEsRUFBSXl3QixNQUFNeEMsRUFBSSxFQUNoQmp1QixFQUFJeXdCLE1BQU12QyxJQUNEbHVCLEVBQUl5d0IsTUFBTXhDLEVBQUksRUFDdkJqdUIsRUFBSXl3QixNQUFNdkMsSUFFTmx1QixFQUFJeXdCLE1BQU12QyxFQUFJLEVBQ2hCbHVCLEVBQUl5d0IsTUFBTXZDLElBRVZsdUIsRUFBSXl3QixNQUFNdkMsSUFLbEIsT0FBT2x1QixFQUdULFNBQVN3akQsRUFBV0MsRUFBUTN6QyxFQUFNOFgsR0FDaEMsSUFBSTNsQixFQUFRLEVBQ1osT0FBT3doRCxFQUFPMTRCLEtBQUksU0FBU25qQixHQWlCekIsR0FoQktBLEVBQUt1NUMsUUFDUnY1QyxFQUFLdTVDLE1BQVF2NUIsRUFBT2syQixPQUFPNzdDLEdBQzNCQSxHQUFTQSxFQUFRLEdBQUsybEIsRUFBT2syQixPQUFPbDhDLFFBRWpDZ0csRUFBS3FILE9BQ1JySCxFQUFLcUgsS0FBT2EsRUFBS2IsTUFFSyxvQkFBYnJILEVBQUswTyxPQUNkMU8sRUFBSzBPLE1BQU8sR0FFVDFPLEVBQUtxSCxPQUNSckgsRUFBS3FILEtBQU9hLEVBQUtiLE1BRWRySCxFQUFLODdDLGFBQ1I5N0MsRUFBSzg3QyxXQUFhLFdBRWY5N0MsRUFBSys3QyxZQUNSLE9BQVEvN0MsRUFBS3FILE1BQ1gsSUFBSyxPQUNIckgsRUFBSys3QyxZQUFjLE9BQ25CLE1BQ0YsSUFBSyxTQUNILzdDLEVBQUsrN0MsWUFBYyxPQUNuQixNQUNGLElBQUssT0FDSC83QyxFQUFLKzdDLFlBQWMsV0FDbkIsTUFDRixRQUNFLzdDLEVBQUsrN0MsWUFBYyxTQUd6QixPQUFPLzdDLEtBSVgsU0FBU2c4QyxFQUFhQyxFQUFTQyxHQUM3QixJQUFJN0UsRUFBUSxFQUNSOEUsRUFBUUQsRUFBVUQsRUF3QnRCLE9BdEJFNUUsRUFERThFLEdBQVMsSUFDSCxJQUNDQSxHQUFTLElBQ1YsSUFDQ0EsR0FBUyxJQUNWLEdBQ0NBLEdBQVMsR0FDVixFQUNDQSxHQUFTLEVBQ1YsRUFDQ0EsR0FBUyxHQUNWLEdBQ0NBLEdBQVMsSUFDVixJQUNDQSxHQUFTLEtBQ1YsS0FDQ0EsR0FBUyxLQUNWLEtBQ0NBLEdBQVMsS0FDVixLQUVBLEtBRUgsQ0FDTEMsU0FBVXZELEVBQVVvRCxFQUFTLFFBQVM1RSxHQUN0Q2dGLFNBQVV4RCxFQUFVcUQsRUFBUyxRQUFTN0UsSUFJMUMsU0FBU2lGLEVBQVlwdEIsR0FDbkIsSUFBSThtQixFQUFXdnpDLFVBQVV6SSxPQUFTLFFBQXNCZ1gsSUFBakJ2TyxVQUFVLEdBQW1CQSxVQUFVLEdBQUt1ZCxFQUFPZzJCLFNBQzFGOW1CLEVBQU81b0IsT0FBTzRvQixHQUNWQSxFQUFPQSxFQUFLMXBCLE1BQU0sSUFFdEIsSUFGQSxJQUNJcWdCLEVBQVEsRUFDSDlyQixFQUFJLEVBQUdBLEVBQUltMUIsRUFBS2wxQixPQUFRRCxJQUFLLENBQ3BDLElBQUlpRyxFQUFPa3ZCLEVBQUtuMUIsR0FDWixXQUFXZ0QsS0FBS2lELEdBQ2xCNmxCLEdBQVMsRUFDQSxRQUFROW9CLEtBQUtpRCxHQUN0QjZsQixHQUFTLElBQ0EsS0FBSzlvQixLQUFLaUQsR0FDbkI2bEIsR0FBUyxJQUNBLElBQUk5b0IsS0FBS2lELEdBQ2xCNmxCLEdBQVMsS0FDQSxrQkFBa0I5b0IsS0FBS2lELEdBQ2hDNmxCLEdBQVMsR0FDQSxRQUFROW9CLEtBQUtpRCxHQUN0QjZsQixHQUFTLEtBQ0EsS0FBSzlvQixLQUFLaUQsR0FDbkI2bEIsR0FBUyxJQUNBLElBQUk5b0IsS0FBS2lELEdBQ2xCNmxCLEdBQVMsRUFFVEEsR0FBUyxHQUdiLE9BQU9BLEVBQVFtd0IsRUFBVyxHQUc1QixTQUFTdUcsRUFBWVYsR0FDbkIsT0FBT0EsRUFBTzc5QixRQUFPLFNBQVN3SyxFQUFHUyxHQUMvQixPQUFRVCxFQUFFdnRCLEtBQU91dEIsRUFBRXZ0QixLQUFPdXRCLEdBQUc5dUIsT0FBT3V2QixFQUFFaHVCLFFBQ3JDLElBR0wsU0FBU3VoRCxFQUFpQlgsRUFBUS83QyxHQUVoQyxJQURBLElBQUkwNUMsRUFBTSxJQUFJNy9DLE1BQU1tRyxHQUNYMHBDLEVBQUksRUFBR0EsRUFBSWdRLEVBQUl4L0MsT0FBUXd2QyxJQUM5QmdRLEVBQUloUSxHQUFLLEVBRVgsSUFBSyxJQUFJenZDLEVBQUksRUFBR0EsRUFBSThoRCxFQUFPN2hELE9BQVFELElBQ2pDLElBQVN5dkMsRUFBSSxFQUFHQSxFQUFJZ1EsRUFBSXgvQyxPQUFRd3ZDLElBQzlCZ1EsRUFBSWhRLElBQU1xUyxFQUFPOWhELEdBQUdrQixLQUFLdXVDLEdBRzdCLE9BQU9xUyxFQUFPNzlCLFFBQU8sU0FBU3dLLEVBQUdTLEdBQy9CLE9BQVFULEVBQUV2dEIsS0FBT3V0QixFQUFFdnRCLEtBQU91dEIsR0FBRzl1QixPQUFPdXZCLEVBQUVodUIsTUFBTXZCLE9BQU84L0MsS0FDbEQsSUFHTCxTQUFTaUQsRUFBVy8yQixFQUFTeGQsRUFBTXBDLEdBQ2pDLElBQUl1Z0IsRUFBR0MsRUFvQlAsT0FuQklaLEVBQVFnM0IsUUFDTngwQyxFQUFLNHRDLFFBQ1B4dkIsRUFBSXBlLEVBQUtpd0MsT0FBU3p5QixFQUFRZzNCLFFBQVV4MEMsRUFBS3pKLFdBQ3pDNG5CLEdBQUtYLEVBQVFpM0IsTUFBUTcyQyxFQUFFa0UsY0FBYzR5QyxVQUFhMTBDLEVBQUtpd0MsT0FBU2p3QyxFQUFLekosV0FBYSxHQUFNeUosRUFBS3pKLFdBQWEsSUFDeEd5SixFQUFLekosYUFFUDRuQixFQUFJWCxFQUFRZzNCLFFBQVV4MEMsRUFBS3pKLFdBQzNCNm5CLEdBQUtaLEVBQVFpM0IsTUFBUTcyQyxFQUFFa0UsY0FBYzR5QyxVQUFhMTBDLEVBQUtpd0MsT0FBU2p3QyxFQUFLekosV0FBYSxHQUFNeUosRUFBS3pKLFdBQWEsSUFDeEd5SixFQUFLekosWUFHTHlKLEVBQUs0dEMsUUFDUHh2QixFQUFJcGUsRUFBS2l3QyxPQUFTenlCLEVBQVFXLEVBQUluZSxFQUFLekosV0FDbkM0bkIsRUFBSVgsRUFBUVksRUFBSXBlLEVBQUt6SixhQUVyQjRuQixFQUFJWCxFQUFRVyxFQUFJbmUsRUFBS3pKLFdBQ3JCNm5CLEVBQUlaLEVBQVFZLEVBQUlwZSxFQUFLekosWUFHbEIsQ0FDTDRuQixFQUFHQSxFQUNIQyxFQUFHQSxHQUlQLFNBQVN1MkIsRUFBa0JoQixFQUFReGhELEdBRWpDLElBREEsSUFBSVksRUFBTyxHQUNGbEIsRUFBSSxFQUFHQSxFQUFJOGhELEVBQU83aEQsT0FBUUQsSUFBSyxDQUN0QyxJQUFJaUcsRUFBTzY3QyxFQUFPOWhELEdBQ2xCLEdBQXlCLE9BQXJCaUcsRUFBSy9FLEtBQUtaLElBQStDLHFCQUFyQjJGLEVBQUsvRSxLQUFLWixJQUEwQjJGLEVBQUswTyxLQUFNLENBQ3JGLElBQUk0cUMsRUFBYSxHQUNqQkEsRUFBV0MsTUFBUXY1QyxFQUFLdTVDLE1BQ3hCRCxFQUFXanlDLEtBQU9ySCxFQUFLcUgsS0FDdkJpeUMsRUFBVzFVLE1BQVE1a0MsRUFBSzRrQyxNQUN4QjBVLEVBQVd3QyxXQUFhOTdDLEVBQUs4N0MsV0FDN0J4QyxFQUFXd0QsY0FBZ0I5OEMsRUFBSzg4QyxjQUNoQ3hELEVBQVczOUMsS0FBT3FFLEVBQUtyRSxLQUN2QjI5QyxFQUFXNXFDLEtBQU8xTyxFQUFLME8sS0FDdkI0cUMsRUFBV3IrQyxLQUFPK0UsRUFBSys4QyxPQUFTLzhDLEVBQUsrOEMsT0FBTy84QyxFQUFLL0UsS0FBS1osSUFBVTJGLEVBQUsvRSxLQUFLWixHQUMxRVksRUFBS2YsS0FBS28vQyxJQUdkLE9BQU9yK0MsRUFHVCxTQUFTK2hELEVBQXFCMWlDLEdBQzVCLElBQUkyaUMsRUFBYTNpQyxFQUFLNkksS0FBSSxTQUFTbmpCLEdBQ2pDLE9BQU9zOEMsRUFBWXQ4QyxNQUVyQixPQUFPaEIsS0FBS3duQixJQUFJbGxCLE1BQU0sS0FBTTI3QyxHQUc5QixTQUFTQyxFQUF5QmxqRCxHQUdoQyxJQUZBLElBQUltakQsRUFBWSxFQUFJbitDLEtBQUt3N0MsR0FBS3hnRCxFQUMxQm9qRCxFQUFtQixHQUNkcmpELEVBQUksRUFBR0EsRUFBSUMsRUFBUUQsSUFDMUJxakQsRUFBaUJsakQsS0FBS2lqRCxFQUFZcGpELEdBR3BDLE9BQU9xakQsRUFBaUJqNkIsS0FBSSxTQUFTbmpCLEdBQ25DLE9BQVEsRUFBSUEsRUFBT2hCLEtBQUt3N0MsR0FBSyxLQUlqQyxTQUFTNkMsRUFBZUMsRUFBWUMsRUFBV2xqRCxFQUFPbWpELEdBY3BELElBYkEsSUFBSS9pRCxFQUFTZ0ksVUFBVXpJLE9BQVMsUUFBc0JnWCxJQUFqQnZPLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUU3RWc3QyxFQUFXSCxFQUFXbjZCLEtBQUksU0FBU25qQixHQUNyQyxNQUFPLENBQ0xrdkIsS0FBTXowQixFQUFPc2lELE9BQVN0aUQsRUFBT3NpRCxPQUFPLzhDLEVBQU13OUMsRUFBV25qRCxJQUFVMkYsRUFBS3JFLEtBQU8sS0FBT3FFLEVBQUsvRSxLQUN2RnMrQyxNQUFPdjVDLEVBQUt1NUMsVUFHWm1FLEVBQWlCLEdBQ2pCQyxFQUFTLENBQ1h0M0IsRUFBRyxFQUNIQyxFQUFHLEdBRUl2c0IsRUFBSSxFQUFHQSxFQUFJd2pELEVBQVV2akQsT0FBUUQsSUFBSyxDQUN6QyxJQUFJa2hELEVBQVNzQyxFQUFVeGpELEdBQ00scUJBQWxCa2hELEVBQU81Z0QsSUFBNEMsT0FBbEI0Z0QsRUFBTzVnRCxJQUNqRHFqRCxFQUFleGpELEtBQUsrZ0QsRUFBTzVnRCxJQUcvQixJQUFLLElBQUlOLEVBQUksRUFBR0EsRUFBSTJqRCxFQUFlMWpELE9BQVFELElBQUssQ0FDOUMsSUFBSWlHLEVBQU8wOUMsRUFBZTNqRCxHQUMxQjRqRCxFQUFPdDNCLEVBQUlybkIsS0FBSzQrQyxNQUFNNTlDLEVBQUtxbUIsR0FDM0JzM0IsRUFBT3IzQixHQUFLdG1CLEVBQUtzbUIsRUFHbkIsT0FEQXEzQixFQUFPcjNCLEdBQUtvM0IsRUFBZTFqRCxPQUNwQixDQUNMeWpELFNBQVVBLEVBQ1ZFLE9BQVFBLEdBSVosU0FBU0UsRUFBa0JQLEVBQVlDLEVBQVdsakQsRUFBT21qRCxHQUN2RCxJQUFJL2lELEVBQVNnSSxVQUFVekksT0FBUyxRQUFzQmdYLElBQWpCdk8sVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBQzdFZzdDLEVBQVdILEVBQVduNkIsS0FBSSxTQUFTbmpCLEdBQ3JDLE1BQU8sQ0FDTGt2QixLQUFNejBCLEVBQU9zaUQsT0FBU3RpRCxFQUFPc2lELE9BQU8vOEMsRUFBTXc5QyxFQUFXbmpELElBQVUyRixFQUFLckUsS0FBTyxLQUFPcUUsRUFBSy9FLEtBQ3ZGcytDLE1BQU92NUMsRUFBS3U1QyxNQUNadUQsZ0JBQWU5OEMsRUFBSzg4QyxrQkFHeEJXLEVBQVdBLEVBQVMxOUMsUUFBTyxTQUFTQyxHQUNsQyxJQUEyQixJQUF2QkEsRUFBSzg4QyxjQUNQLE9BQU85OEMsS0FRWCxJQUxBLElBQUkwOUMsRUFBaUIsR0FDakJDLEVBQVMsQ0FDWHQzQixFQUFHLEVBQ0hDLEVBQUcsR0FFSXZzQixFQUFJLEVBQUdBLEVBQUl3akQsRUFBVXZqRCxPQUFRRCxJQUFLLENBQ3pDLElBQUlraEQsRUFBU3NDLEVBQVV4akQsR0FDTSxxQkFBbEJraEQsRUFBTzVnRCxJQUE0QyxPQUFsQjRnRCxFQUFPNWdELElBQ2pEcWpELEVBQWV4akQsS0FBSytnRCxFQUFPNWdELElBRy9CLElBQUssSUFBSU4sRUFBSSxFQUFHQSxFQUFJMmpELEVBQWUxakQsT0FBUUQsSUFBSyxDQUM5QyxJQUFJaUcsRUFBTzA5QyxFQUFlM2pELEdBQzFCNGpELEVBQU90M0IsRUFBSXJuQixLQUFLNCtDLE1BQU01OUMsRUFBS3FtQixHQUMzQnMzQixFQUFPcjNCLEdBQUt0bUIsRUFBS3NtQixFQUduQixPQURBcTNCLEVBQU9yM0IsR0FBS28zQixFQUFlMWpELE9BQ3BCLENBQ0x5akQsU0FBVUEsRUFDVkUsT0FBUUEsR0FJWixTQUFTRyxFQUFxQmpDLEVBQVF5QixFQUFZQyxFQUFXbGpELEVBQU9takQsRUFBWWowQyxHQUNqRTlHLFVBQVV6SSxPQUFTLFFBQXNCZ1gsSUFBakJ2TyxVQUFVLElBQW1CQSxVQUFVLEdBQTVFLElBQ0lzN0MsRUFBVXgwQyxFQUFNZ3dDLE1BQU15RSxPQUN0QkMsRUFBWTEwQyxFQUFNZ3dDLE1BQU0yRSxTQUV4QjNFLEVBQVEsQ0FBQ3dFLEVBQVNBLEVBQVNFLEVBQVdGLEdBQ3RDTixFQUFXLEdBQ1hVLEVBQVEsQ0FDVmp2QixLQUFNc3VCLEVBQVduakQsR0FDakJrL0MsTUFBTyxNQUVUa0UsRUFBU3ZqRCxLQUFLaWtELEdBQ2RiLEVBQVduNkIsS0FBSSxTQUFTbmpCLEdBQ1QsR0FBVDNGLEdBQWMyRixFQUFLL0UsS0FBSyxHQUFLK0UsRUFBSy9FLEtBQUssR0FBSyxFQUM5Q3MrQyxFQUFNLEdBQUswRSxHQUVQaitDLEVBQUsvRSxLQUFLLEdBQUs0Z0QsRUFBT3hoRCxFQUFRLEdBQUcsS0FDbkNrL0MsRUFBTSxHQUFLMEUsR0FFVGorQyxFQUFLL0UsS0FBSyxHQUFLK0UsRUFBSy9FLEtBQUssS0FDM0JzK0MsRUFBTSxHQUFLMEUsR0FFVGorQyxFQUFLL0UsS0FBSyxHQUFLNGdELEVBQU94aEQsRUFBUSxHQUFHLEtBQ25Day9DLEVBQU0sR0FBS3dFLEdBRVQvOUMsRUFBSy9FLEtBQUssR0FBSzRnRCxFQUFPeGhELEVBQVEsR0FBRyxLQUNuQ2svQyxFQUFNLEdBQUswRSxJQUdmLElBQUlHLEVBQVEsQ0FDVmx2QixLQUFNLE1BQVFsdkIsRUFBSy9FLEtBQUssR0FDeEJzK0MsTUFBT0EsRUFBTSxJQUVYOEUsRUFBUSxDQUNWbnZCLEtBQU0sTUFBUWx2QixFQUFLL0UsS0FBSyxHQUN4QnMrQyxNQUFPQSxFQUFNLElBRVgrRSxFQUFRLENBQ1ZwdkIsS0FBTSxNQUFRbHZCLEVBQUsvRSxLQUFLLEdBQ3hCcytDLE1BQU9BLEVBQU0sSUFFWGdGLEVBQVEsQ0FDVnJ2QixLQUFNLE1BQVFsdkIsRUFBSy9FLEtBQUssR0FDeEJzK0MsTUFBT0EsRUFBTSxJQUVma0UsRUFBU3ZqRCxLQUFLa2tELEVBQU9DLEVBQU9DLEVBQU9DLE1BT3JDLElBTEEsSUFBSWIsRUFBaUIsR0FDakJDLEVBQVMsQ0FDWHQzQixFQUFHLEVBQ0hDLEVBQUcsR0FFSXZzQixFQUFJLEVBQUdBLEVBQUl3akQsRUFBVXZqRCxPQUFRRCxJQUFLLENBQ3pDLElBQUlraEQsRUFBU3NDLEVBQVV4akQsR0FDTSxxQkFBbEJraEQsRUFBTzVnRCxJQUE0QyxPQUFsQjRnRCxFQUFPNWdELElBQ2pEcWpELEVBQWV4akQsS0FBSytnRCxFQUFPNWdELElBSS9CLE9BREFzakQsRUFBT3QzQixFQUFJcm5CLEtBQUs0K0MsTUFBTUYsRUFBZSxHQUFHLEdBQUdyM0IsR0FDcEMsQ0FDTG8zQixTQUFVQSxFQUNWRSxPQUFRQSxHQUlaLFNBQVNhLEVBQWEzQyxHQUVwQixJQURBLElBQUk0QyxFQUFhLEdBQ1Ixa0QsRUFBSSxFQUFHQSxFQUFJOGhELEVBQU83aEQsT0FBUUQsSUFDWCxHQUFsQjhoRCxFQUFPOWhELEdBQUcyVSxNQUNaK3ZDLEVBQVd2a0QsS0FBSzJoRCxFQUFPOWhELElBRzNCLE9BQU8wa0QsRUFHVCxTQUFTQyxFQUFpQkMsRUFBZTFFLEVBQWEveEMsRUFBTThYLEdBQzFELElBQUkyOUIsRUFBU2w3QyxVQUFVekksT0FBUyxRQUFzQmdYLElBQWpCdk8sVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBQzdFaEQsR0FBZ0IsRUFDaEJtL0MsRUFBVSxFQVdkLE1BVmUsUUFBWDEyQyxFQUFLYixNQUEyQixRQUFYYSxFQUFLYixNQUF5QyxXQUF4QmEsRUFBSzIyQyxNQUFNQyxjQUN4REYsRUFBVTEyQyxFQUFLeXhDLFVBQVVJLFlBQVksR0FFbkNnRixFQUFtQkosRUFBZXoyQyxFQUFNOFgsSUFDMUNpNkIsRUFBWXQvQyxTQUFRLFNBQVNxRixFQUFNM0YsR0FDN0Jza0QsRUFBY3Q0QixFQUFJczNCLEVBQVNpQixFQUFVNStDLElBQ3ZDUCxFQUFlcEYsTUFJZG9GLEVBR1QsU0FBU3UvQyxFQUFnQkwsRUFBZU0sRUFBWS8yQyxHQUNsRCxJQUFJekksR0FBZ0IsRUFDcEIsR0FBSXkvQyxFQUFvQlAsRUFBZU0sRUFBV3BGLE1BQU8sQ0FHdkQsSUFGQSxJQUFJb0IsRUFBU2dFLEVBQVdoRSxPQUNwQjVnRCxHQUFTLEVBQ0pOLEVBQUksRUFBRytGLEVBQU1tN0MsRUFBT2poRCxPQUFRRCxFQUFJK0YsRUFBSy9GLElBRTVDLElBREEsSUFBSWlHLEVBQU9pN0MsRUFBT2xoRCxHQUNUeXZDLEVBQUksRUFBR0EsRUFBSXhwQyxFQUFLaEcsT0FBUXd2QyxJQUFLLENBQ3BDbnZDLEdBQVMsRUFDVCxJQUFJdy9DLEVBQU83NUMsRUFBS3dwQyxHQUFHLFFBQ25CLEdBQUltVixFQUFjdDRCLEVBQUl3ekIsRUFBSyxJQUFNOEUsRUFBY3Q0QixFQUFJd3pCLEVBQUssSUFBTThFLEVBQWNyNEIsRUFBSXV6QixFQUFLLElBQU04RSxFQUFjcjRCLEVBQUl1ekIsRUFBSyxHQUFJLENBQ3BIcDZDLEVBQWVwRixFQUNmLE9BSU4sT0FBT29GLEVBRVQsT0FBT0EsRUFHVCxTQUFTeS9DLEVBQW9CUCxFQUFlOUUsR0FDMUMsT0FBTzhFLEVBQWN0NEIsRUFBSXd6QixFQUFLaHhCLE1BQU14QyxHQUFLczRCLEVBQWN0NEIsRUFBSXd6QixFQUFLM0IsSUFBSTd4QixHQUFLczRCLEVBQWNyNEIsRUFBSXV6QixFQUFLaHhCLE1BQU12QyxHQUNwR3E0QixFQUFjcjRCLEVBQUl1ekIsRUFBSzNCLElBQUk1eEIsRUFHL0IsU0FBU3k0QixFQUFtQkosRUFBZXoyQyxFQUFNOFgsR0FDL0MsT0FBTzIrQixFQUFjdDRCLEVBQUluZSxFQUFLMmQsTUFBUTNkLEVBQUsyeEMsS0FBSyxHQUFLLElBQU04RSxFQUFjdDRCLEVBQUluZSxFQUFLMnhDLEtBQUssR0FBSSxJQUFNOEUsRUFBY3I0QixFQUFJcGUsRUFBSzJ4QyxLQUFLLElBQU04RSxFQUFjcjRCLEVBQUlwZSxFQUFLaXdDLE9BQVNqd0MsRUFBSzJ4QyxLQUFLLEdBRy9LLFNBQVNzRixFQUEyQlIsRUFBZVMsRUFBV0MsR0FDNUQsSUFBSUMsRUFBZ0IsRUFBSXRnRCxLQUFLdzdDLEdBQUs2RSxFQUM5QjUvQyxHQUFnQixFQUNwQixHQUFJOC9DLEVBQXNCWixFQUFlUyxFQUFVMUQsT0FBUTBELEVBQVVJLFFBQVMsQ0FDNUUsSUFBSUMsRUFBVyxTQUFrQnJGLEdBTy9CLE9BTklBLEVBQVEsSUFDVkEsR0FBUyxFQUFJcDdDLEtBQUt3N0MsSUFFaEJKLEVBQVEsRUFBSXA3QyxLQUFLdzdDLEtBQ25CSixHQUFTLEVBQUlwN0MsS0FBS3c3QyxJQUViSixHQUdMQSxFQUFRcDdDLEtBQUswZ0QsTUFBTU4sRUFBVTFELE9BQU9wMUIsRUFBSXE0QixFQUFjcjRCLEVBQUdxNEIsRUFBY3Q0QixFQUFJKzRCLEVBQVUxRCxPQUFPcjFCLEdBQ2hHK3pCLElBQVMsRUFDTEEsRUFBUSxJQUNWQSxHQUFTLEVBQUlwN0MsS0FBS3c3QyxJQUdwQixJQUFJbUYsRUFBWVAsRUFBVU8sVUFBVXg4QixLQUFJLFNBQVNuakIsR0FHL0MsT0FGQUEsRUFBT3kvQyxHQUFVLEVBQUl6L0MsR0FFZEEsS0FHVDIvQyxFQUFVaGxELFNBQVEsU0FBU3FGLEVBQU0zRixHQUMvQixJQUFJdWxELEVBQWFILEVBQVN6L0MsRUFBT3MvQyxFQUFnQixHQUM3Q08sRUFBV0osRUFBU3ovQyxFQUFPcy9DLEVBQWdCLEdBQzNDTyxFQUFXRCxJQUNiQyxHQUFZLEVBQUk3Z0QsS0FBS3c3QyxLQUVuQkosR0FBU3dGLEdBQWN4RixHQUFTeUYsR0FBWXpGLEVBQVEsRUFBSXA3QyxLQUFLdzdDLElBQU1vRixHQUFjeEYsRUFBUSxFQUFJcDdDLEtBQUt3N0MsSUFDcEdxRixLQUNBcGdELEVBQWVwRixNQUtyQixPQUFPb0YsRUFHVCxTQUFTcWdELEVBQTRCbkIsRUFBZW9CLEdBRWxELElBREEsSUFBSXRnRCxHQUFnQixFQUNYMUYsRUFBSSxFQUFHK0YsRUFBTWlnRCxFQUFXbEUsT0FBTzdoRCxPQUFRRCxFQUFJK0YsRUFBSy9GLElBQUssQ0FDNUQsSUFBSWlHLEVBQU8rL0MsRUFBV2xFLE9BQU85aEQsR0FDN0IsR0FBSTRrRCxFQUFjdDRCLEVBQUlybUIsRUFBS2dnRCxXQUFXLElBQU1yQixFQUFjdDRCLEVBQUlybUIsRUFBS2dnRCxXQUFXLElBQU1yQixFQUFjcjRCLEVBQUl0bUIsRUFBS2dnRCxXQUFXLElBQU1yQixFQUFjcjRCLEVBQUl0bUIsRUFBS2dnRCxXQUFXLEdBQUksQ0FDaEt2Z0QsRUFBZTFGLEVBQ2YsT0FHSixPQUFPMEYsRUFHVCxTQUFTd2dELEVBQTBCdEIsRUFBZXVCLEdBRWhELElBREEsSUFBSXpnRCxHQUFnQixFQUNYMUYsRUFBSSxFQUFHK0YsRUFBTW9nRCxFQUFTbG1ELE9BQVFELEVBQUkrRixFQUFLL0YsSUFBSyxDQUNuRCxJQUFJaUcsRUFBT2tnRCxFQUFTbm1ELEdBQ3BCLEdBQUk0a0QsRUFBY3Q0QixFQUFJcm1CLEVBQUs2NUMsS0FBSyxJQUFNOEUsRUFBY3Q0QixFQUFJcm1CLEVBQUs2NUMsS0FBSyxJQUFNOEUsRUFBY3I0QixFQUFJdG1CLEVBQUs2NUMsS0FBSyxJQUFNOEUsRUFBY3I0QixFQUFJdG1CLEVBQUs2NUMsS0FBSyxHQUFJLENBQ3hJcDZDLEVBQWUxRixFQUNmLE9BR0osT0FBTzBGLEVBR1QsU0FBUzBnRCxFQUF5QnhCLEVBQWV6MkMsR0FNL0MsSUFMQSxJQUFJekksR0FBZ0IsRUFDaEIyZ0QsRUFBTWw0QyxFQUFLeXhDLFVBQVUwRyxRQUNyQnBsRCxFQUFLaU4sRUFBSzJ6QyxPQUNWblEsRUFBSTRVLEdBQWtCM0IsRUFBY3I0QixFQUFHcTRCLEVBQWN0NEIsRUFBRSs1QixFQUFNRyxPQUFPSCxFQUFNSSxNQUFNSixFQUFNSyxRQUFRTCxFQUFNTSxTQUNwR0MsRUFBSSxDQUFDalYsRUFBSXJsQixFQUFHcWxCLEVBQUlwbEIsR0FDWHZzQixFQUFJLEVBQUcrRixFQUFNN0UsRUFBS2pCLE9BQVFELEVBQUkrRixFQUFLL0YsSUFBSyxDQUMvQyxJQUFJaUcsRUFBTy9FLEVBQUtsQixHQUFHNm1ELFNBQVNDLFlBQzVCLEdBQUdDLEdBQWdCSCxFQUFJM2dELEdBQU0sQ0FDM0JQLEVBQWUxRixFQUNmLE9BR0osT0FBTzBGLEVBR1QsU0FBU3NoRCxFQUF5QnBDLEVBQWVxQyxHQUMvQyxJQUFJdmhELEdBQWdCLEVBQ3BCLEdBQUk4L0MsRUFBc0JaLEVBQWVxQyxFQUFRdEYsT0FBUXNGLEVBQVF4QixRQUFTLENBQ3hFLElBQUlwRixFQUFRcDdDLEtBQUswZ0QsTUFBTXNCLEVBQVF0RixPQUFPcDFCLEVBQUlxNEIsRUFBY3I0QixFQUFHcTRCLEVBQWN0NEIsRUFBSTI2QixFQUFRdEYsT0FBT3IxQixHQUM1Rit6QixHQUFTQSxFQUNULElBQUssSUFBSXJnRCxFQUFJLEVBQUcrRixFQUFNa2hELEVBQVFuRixPQUFPN2hELE9BQVFELEVBQUkrRixFQUFLL0YsSUFBSyxDQUN6RCxJQUFJaUcsRUFBT2doRCxFQUFRbkYsT0FBTzloRCxHQUMxQixHQUFJb2dELEVBQWVDLEVBQU9wNkMsRUFBS2loRCxRQUFTamhELEVBQUtpaEQsUUFBOEIsRUFBcEJqaEQsRUFBS2toRCxhQUFtQmxpRCxLQUFLdzdDLElBQUssQ0FDdkYvNkMsRUFBZTFGLEVBQ2YsUUFLTixPQUFPMEYsRUFHVCxTQUFTOC9DLEVBQXNCWixFQUFlakQsRUFBUThELEdBQ3BELE9BQU94Z0QsS0FBS21pRCxJQUFJeEMsRUFBY3Q0QixFQUFJcTFCLEVBQU9yMUIsRUFBRyxHQUFLcm5CLEtBQUttaUQsSUFBSXhDLEVBQWNyNEIsRUFBSW8xQixFQUFPcDFCLEVBQUcsSUFBTXRuQixLQUFLbWlELElBQUkzQixFQUFRLEdBRy9HLFNBQVM0QixFQUFZbkcsR0FDbkIsSUFBSW9HLEVBQVksR0FDWmh2QixFQUFRLEdBZVosT0FkQTRvQixFQUFPdGdELFNBQVEsU0FBU3FGLEVBQU0zRixHQUNmLE9BQVQyRixFQUNGcXlCLEVBQU1uNEIsS0FBSzhGLElBRVBxeUIsRUFBTXI0QixRQUNScW5ELEVBQVVubkQsS0FBS200QixHQUVqQkEsRUFBUSxPQUdSQSxFQUFNcjRCLFFBQ1JxbkQsRUFBVW5uRCxLQUFLbTRCLEdBR1ZndkIsRUFHVCxTQUFTQyxFQUFjekYsRUFBUTN6QyxFQUFNOFgsRUFBUTI1QixHQUMzQyxJQUFJc0YsRUFBYSxDQUNmcEYsS0FBTSxDQUNKaHhCLE1BQU8sQ0FDTHhDLEVBQUcsRUFDSEMsRUFBRyxHQUVMNHhCLElBQUssQ0FDSDd4QixFQUFHLEVBQ0hDLEVBQUcsR0FFTFQsTUFBTyxFQUNQc3lCLE9BQVEsRUFDUm9KLFdBQVksRUFDWkMsWUFBYSxHQUVmdkcsT0FBUSxHQUNSd0csU0FBVSxHQUNWQyxVQUFXLElBRWIsSUFBeUIsSUFBckJ4NUMsRUFBS3k1QyxPQUFPanpDLEtBRWQsT0FEQWlyQyxFQUFVc0YsV0FBYUEsRUFDaEJBLEVBR1QsSUFBSXBKLEVBQVUzdEMsRUFBS3k1QyxPQUFPOUwsUUFDdEIrTCxFQUFTMTVDLEVBQUt5NUMsT0FBT0MsT0FDckI1TCxFQUFXOXRDLEVBQUt5NUMsT0FBTzNMLFNBQ3ZCNkwsRUFBYSxHQUFLMzVDLEVBQUt6SixXQUN2QnFqRCxFQUFhLEVBQUk1NUMsRUFBS3pKLFdBQ3RCc2pELEVBQWEvaUQsS0FBS3duQixJQUFJdGUsRUFBS3k1QyxPQUFPSSxXQUFhNzVDLEVBQUt6SixXQUFZdTNDLEdBQ3BFLEdBQTRCLE9BQXhCOXRDLEVBQUt5NUMsT0FBTzk4QixVQUE2QyxVQUF4QjNjLEVBQUt5NUMsT0FBTzk4QixTQUFzQixDQUtyRSxJQUpBLElBQUltOUIsRUFBYSxHQUNiQyxFQUFhLEVBQ2JDLEVBQWdCLEdBQ2hCQyxFQUFhLEdBQ1Jwb0QsRUFBSSxFQUFHQSxFQUFJOGhELEVBQU83aEQsT0FBUUQsSUFBSyxDQUN0QyxJQUFJaUcsRUFBTzY3QyxFQUFPOWhELEdBQ2Rxb0QsRUFBWVAsRUFBYUMsRUFBYXhGLEVBQVl0OEMsRUFBS3JFLE1BQVEsWUFBYXE2QyxHQUFZOXRDLEVBQUt5NUMsT0FBT1UsUUFDcEdKLEVBQWFHLEVBQVlsNkMsRUFBSzJkLE1BQVEzZCxFQUFLMnRDLFFBQVEsR0FBSzN0QyxFQUFLMnRDLFFBQVEsSUFDdkVtTSxFQUFXOW5ELEtBQUtpb0QsR0FDaEJELEVBQWNob0QsS0FBSytuRCxFQUFhLzVDLEVBQUt5NUMsT0FBT1UsU0FDNUNKLEVBQWFHLEVBQ2JELEVBQWEsQ0FBQ25pRCxLQUVkaWlELEdBQWNHLEVBQ2RELEVBQVdqb0QsS0FBSzhGLElBR3BCLEdBQUltaUQsRUFBV25vRCxPQUFRLENBQ3JCZ29ELEVBQVc5bkQsS0FBS2lvRCxHQUNoQkQsRUFBY2hvRCxLQUFLK25ELEVBQWEvNUMsRUFBS3k1QyxPQUFPVSxTQUM1Q3BELEVBQVd3QyxTQUFXUyxFQUN0QixJQUFJSSxFQUFjdGpELEtBQUt3bkIsSUFBSWxsQixNQUFNLEtBQU00Z0QsR0FDdkMsT0FBUWg2QyxFQUFLeTVDLE9BQU9ZLE9BQ2xCLElBQUssT0FDSHRELEVBQVdwRixLQUFLaHhCLE1BQU14QyxFQUFJbmUsRUFBSzJ0QyxRQUFRLEdBQ3ZDb0osRUFBV3BGLEtBQUszQixJQUFJN3hCLEVBQUluZSxFQUFLMnRDLFFBQVEsR0FBSyxFQUFJQSxFQUM5QyxNQUNGLElBQUssUUFDSG9KLEVBQVdwRixLQUFLaHhCLE1BQU14QyxFQUFJbmUsRUFBSzJkLE1BQVEzZCxFQUFLMnRDLFFBQVEsR0FBS3lNLEVBQWMsRUFBSXpNLEVBQzNFb0osRUFBV3BGLEtBQUszQixJQUFJN3hCLEVBQUluZSxFQUFLMmQsTUFBUTNkLEVBQUsydEMsUUFBUSxHQUNsRCxNQUNGLFFBQ0VvSixFQUFXcEYsS0FBS2h4QixNQUFNeEMsR0FBS25lLEVBQUsyZCxNQUFReThCLEdBQWUsRUFBSXpNLEVBQzNEb0osRUFBV3BGLEtBQUszQixJQUFJN3hCLEdBQUtuZSxFQUFLMmQsTUFBUXk4QixHQUFlLEVBQUl6TSxFQUU3RG9KLEVBQVdwRixLQUFLaDBCLE1BQVF5OEIsRUFBYyxFQUFJek0sRUFDMUNvSixFQUFXcEYsS0FBSzBILFdBQWFlLEVBQWMsRUFBSXpNLEVBQy9Db0osRUFBV3BGLEtBQUsxQixPQUFTNkosRUFBV2hvRCxPQUFTK25ELEVBQWEsRUFBSWxNLEVBQzlEb0osRUFBV3BGLEtBQUsySCxZQUFjUSxFQUFXaG9ELE9BQVMrbkQsRUFBYSxFQUFJbE0sRUFBVSxFQUFJK0wsRUFDakYzQyxFQUFXaEUsT0FBUytHLE9BRWpCLENBQ0wsSUFBSWxpRCxFQUFNKzdDLEVBQU83aEQsT0FDYndvRCxFQUFZdDZDLEVBQUtpd0MsT0FBU2p3QyxFQUFLMnRDLFFBQVEsR0FBSzN0QyxFQUFLMnRDLFFBQVEsR0FBSyxFQUFJK0wsRUFBUyxFQUFJL0wsRUFDL0U0TSxFQUFZempELEtBQUt5bkIsSUFBSXpuQixLQUFLQyxNQUFNdWpELEVBQVlULEdBQWFqaUQsR0FHN0QsT0FGQW0vQyxFQUFXcEYsS0FBSzFCLE9BQVNzSyxFQUFZVixFQUF1QixFQUFWbE0sRUFDbERvSixFQUFXcEYsS0FBSzJILFlBQWNpQixFQUFZVixFQUF1QixFQUFWbE0sRUFDL0MzdEMsRUFBS3k1QyxPQUFPWSxPQUNsQixJQUFLLE1BQ0h0RCxFQUFXcEYsS0FBS2h4QixNQUFNdkMsRUFBSXBlLEVBQUsydEMsUUFBUSxHQUFLK0wsRUFDNUMzQyxFQUFXcEYsS0FBSzNCLElBQUk1eEIsRUFBSXBlLEVBQUsydEMsUUFBUSxHQUFLK0wsRUFBUzNDLEVBQVdwRixLQUFLMUIsT0FDbkUsTUFDRixJQUFLLFNBQ0g4RyxFQUFXcEYsS0FBS2h4QixNQUFNdkMsRUFBSXBlLEVBQUtpd0MsT0FBU2p3QyxFQUFLMnRDLFFBQVEsR0FBSytMLEVBQVMzQyxFQUFXcEYsS0FBSzFCLE9BQ25GOEcsRUFBV3BGLEtBQUszQixJQUFJNXhCLEVBQUlwZSxFQUFLaXdDLE9BQVNqd0MsRUFBSzJ0QyxRQUFRLEdBQUsrTCxFQUN4RCxNQUNGLFFBQ0UzQyxFQUFXcEYsS0FBS2h4QixNQUFNdkMsR0FBS3BlLEVBQUtpd0MsT0FBUzhHLEVBQVdwRixLQUFLMUIsUUFBVSxFQUNuRThHLEVBQVdwRixLQUFLM0IsSUFBSTV4QixHQUFLcGUsRUFBS2l3QyxPQUFTOEcsRUFBV3BGLEtBQUsxQixRQUFVLEVBSXJFLElBRkEsSUFBSXVLLEVBQVU1aUQsRUFBTTJpRCxJQUFjLEVBQUkzaUQsRUFBTTJpRCxFQUFZempELEtBQUtDLE1BQU9hLEVBQU0yaUQsRUFBYSxHQUNuRk4sRUFBYSxHQUNScG9ELEVBQUksRUFBR0EsRUFBSTJvRCxFQUFTM29ELElBQUssQ0FDaEMsSUFBSTRvRCxFQUFPOUcsRUFBTzUvQyxNQUFNbEMsRUFBSTBvRCxFQUFXMW9ELEVBQUkwb0QsRUFBWUEsR0FDdkROLEVBQVdqb0QsS0FBS3lvRCxHQUtsQixHQUZBMUQsRUFBV2hFLE9BQVNrSCxFQUVoQkEsRUFBV25vRCxPQUFRLENBQ3JCLElBQUssSUFBSUQsRUFBSSxFQUFHQSxFQUFJb29ELEVBQVdub0QsT0FBUUQsSUFBSyxDQUcxQyxJQUZBLElBQUlpRyxFQUFPbWlELEVBQVdwb0QsR0FDbEI2b0QsRUFBVyxFQUNOcFosRUFBSSxFQUFHQSxFQUFJeHBDLEVBQUtoRyxPQUFRd3ZDLElBQUssQ0FDcEMsSUFBSTRZLEVBQVlQLEVBQWFDLEVBQWF4RixFQUFZdDhDLEVBQUt3cEMsR0FBRzd0QyxNQUFRLFlBQWFxNkMsR0FBWTl0QyxFQUFLeTVDLE9BQU9VLFFBQ3ZHRCxFQUFZUSxJQUNkQSxFQUFXUixHQUdmbkQsRUFBV3dDLFNBQVN2bkQsS0FBSzBvRCxHQUN6QjNELEVBQVd5QyxVQUFVeG5ELEtBQUs4RixFQUFLaEcsT0FBUytuRCxFQUF1QixFQUFWbE0sR0FHdkQsSUFEQSxJQUFJeU0sRUFBYyxFQUNUdm9ELEVBQUksRUFBR0EsRUFBSWtsRCxFQUFXd0MsU0FBU3puRCxPQUFRRCxJQUM5Q3VvRCxHQUFlckQsRUFBV3dDLFNBQVMxbkQsR0FFckNrbEQsRUFBV3BGLEtBQUtoMEIsTUFBUXk4QixFQUFjcDZDLEVBQUt5NUMsT0FBT1UsUUFBVSxFQUFJeE0sRUFDaEVvSixFQUFXcEYsS0FBSzBILFdBQWF0QyxFQUFXcEYsS0FBS2gwQixNQUFRZ3dCLEdBSXpELE9BQVEzdEMsRUFBS3k1QyxPQUFPOThCLFVBQ2xCLElBQUssTUFDSG82QixFQUFXcEYsS0FBS2h4QixNQUFNdkMsRUFBSXBlLEVBQUsydEMsUUFBUSxHQUFLK0wsRUFDNUMzQyxFQUFXcEYsS0FBSzNCLElBQUk1eEIsRUFBSXBlLEVBQUsydEMsUUFBUSxHQUFLK0wsRUFBUzNDLEVBQVdwRixLQUFLMUIsT0FDbkUsTUFDRixJQUFLLFNBQ0g4RyxFQUFXcEYsS0FBS2h4QixNQUFNdkMsRUFBSXBlLEVBQUtpd0MsT0FBU2p3QyxFQUFLMnRDLFFBQVEsR0FBS29KLEVBQVdwRixLQUFLMUIsT0FBU3lKLEVBQ25GM0MsRUFBV3BGLEtBQUszQixJQUFJNXhCLEVBQUlwZSxFQUFLaXdDLE9BQVNqd0MsRUFBSzJ0QyxRQUFRLEdBQUsrTCxFQUN4RCxNQUNGLElBQUssT0FDSDNDLEVBQVdwRixLQUFLaHhCLE1BQU14QyxFQUFJbmUsRUFBSzJ0QyxRQUFRLEdBQ3ZDb0osRUFBV3BGLEtBQUszQixJQUFJN3hCLEVBQUluZSxFQUFLMnRDLFFBQVEsR0FBS29KLEVBQVdwRixLQUFLaDBCLE1BQzFELE1BQ0YsSUFBSyxRQUNIbzVCLEVBQVdwRixLQUFLaHhCLE1BQU14QyxFQUFJbmUsRUFBSzJkLE1BQVEzZCxFQUFLMnRDLFFBQVEsR0FBS29KLEVBQVdwRixLQUFLaDBCLE1BQ3pFbzVCLEVBQVdwRixLQUFLM0IsSUFBSTd4QixFQUFJbmUsRUFBSzJkLE1BQVEzZCxFQUFLMnRDLFFBQVEsR0FDbEQsTUFHSixPQURBOEQsRUFBVXNGLFdBQWFBLEVBQ2hCQSxFQUdULFNBQVM0RCxFQUFrQnJGLEVBQVl0MUMsRUFBTThYLEVBQVErNUIsR0FDbkQsSUFBSWg3QyxFQUFTLENBQ1hxN0MsTUFBTyxFQUNQM0UsWUFBYXoxQixFQUFPeTFCLGFBRWxCcU4sRUFBc0J0RixFQUFXcjZCLEtBQUksU0FBU25qQixHQUNoRCxPQUFPczhDLEVBQVl0OEMsTUFFakIraUQsRUFBZ0IvakQsS0FBS3duQixJQUFJbGxCLE1BQU0xRCxLQUFNa2xELEdBTXpDLE9BSjhCLEdBQTFCNTZDLEVBQUsyMkMsTUFBTW1FLGFBQXVCRCxFQUFnQixFQUFJL2lDLEVBQU9xMkIsaUJBQW1CMEQsSUFDbEZoN0MsRUFBT3E3QyxNQUFRLEdBQUtwN0MsS0FBS3c3QyxHQUFLLElBQzlCejdDLEVBQU8wMkMsWUFBYyxFQUFJejFCLEVBQU9xMkIsaUJBQW1CME0sRUFBZ0IvakQsS0FBS2lrRCxJQUFJbGtELEVBQU9xN0MsUUFFOUVyN0MsRUFHVCxTQUFTbWtELEVBQW1CdkQsRUFBV2pFLEVBQVE4RCxFQUFRM0QsRUFBUTN6QyxHQUM3RCxJQUFJbkMsRUFBVXRELFVBQVV6SSxPQUFTLFFBQXNCZ1gsSUFBakJ2TyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFFOUUwZ0QsRUFBY2o3QyxFQUFLcUIsTUFBTTY1QyxPQUFTLEdBQ3RDRCxFQUFZMzhCLElBQU0yOEIsRUFBWTM4QixLQUFPLEVBSXJDLElBSEEsSUFBSTAxQixFQUFVbDlDLEtBQUt3bkIsSUFBSTI4QixFQUFZMzhCLElBQUt4bkIsS0FBS3duQixJQUFJbGxCLE1BQU0sS0FBTWk3QyxFQUFZVixLQUVyRTVnRCxFQUFPLEdBUHdELFdBUTFEbEIsR0FDUCxJQUFJc3BELEVBQU94SCxFQUFPOWhELEdBQ2R1cEQsRUFBVyxHQUNmQSxFQUFTL0osTUFBUThKLEVBQUs5SixNQUN0QitKLEVBQVNyb0QsS0FBTyxHQUNoQm9vRCxFQUFLcG9ELEtBQUtOLFNBQVEsU0FBU3FGLEVBQU0zRixHQUMvQixJQUFJcXhDLEVBQU0sR0FDVkEsRUFBSTBPLE1BQVF1RixFQUFVdGxELEdBRXRCcXhDLEVBQUk2WCxXQUFhdmpELEVBQU9rOEMsRUFDeEJ4USxFQUFJN21CLFNBQVc0MkIsRUFBd0IrRCxFQUFTOVQsRUFBSTZYLFdBQWF4OUMsRUFBVS9HLEtBQUt3a0QsSUFBSTlYLEVBQUkwTyxPQUFRb0YsRUFBUzlULEVBQUk2WCxXQUMzR3g5QyxFQUFVL0csS0FBS2lrRCxJQUFJdlgsRUFBSTBPLE9BQVFzQixHQUNqQzRILEVBQVNyb0QsS0FBS2YsS0FBS3d4QyxNQUdyQnp3QyxFQUFLZixLQUFLb3BELElBZkh2cEQsRUFBSSxFQUFHQSxFQUFJOGhELEVBQU83aEQsT0FBUUQsSUFBTSxFQUFoQ0EsR0FrQlQsT0FBT2tCLEVBR1QsU0FBU3dvRCxFQUFpQjVILEVBQVEyRCxHQUtoQyxJQUpBLElBQUl6NUMsRUFBVXRELFVBQVV6SSxPQUFTLFFBQXNCZ1gsSUFBakJ2TyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFFOUU0OEMsRUFBUSxFQUNSNEIsRUFBVSxFQUNMbG5ELEVBQUksRUFBR0EsRUFBSThoRCxFQUFPN2hELE9BQVFELElBQUssQ0FDdEMsSUFBSWlHLEVBQU82N0MsRUFBTzloRCxHQUNsQmlHLEVBQUsvRSxLQUFxQixPQUFkK0UsRUFBSy9FLEtBQWdCLEVBQUkrRSxFQUFLL0UsS0FDMUNva0QsR0FBU3IvQyxFQUFLL0UsS0FFaEIsSUFBSyxJQUFJbEIsRUFBSSxFQUFHQSxFQUFJOGhELEVBQU83aEQsT0FBUUQsSUFBSyxDQUN0QyxJQUFJaUcsRUFBTzY3QyxFQUFPOWhELEdBQ2xCaUcsRUFBSy9FLEtBQXFCLE9BQWQrRSxFQUFLL0UsS0FBZ0IsRUFBSStFLEVBQUsvRSxLQUV4QytFLEVBQUtraEQsYUFETyxJQUFWN0IsRUFDa0IsRUFBSXhELEVBQU83aEQsT0FBUytMLEVBRXBCL0YsRUFBSy9FLEtBQU9va0QsRUFBUXQ1QyxFQUUxQy9GLEVBQUswakQsU0FBV2xFLEVBRWxCLElBQUssSUFBSXpsRCxFQUFJLEVBQUdBLEVBQUk4aEQsRUFBTzdoRCxPQUFRRCxJQUFLLENBQ3RDLElBQUlpRyxFQUFPNjdDLEVBQU85aEQsR0FDbEJpRyxFQUFLaWhELFFBQVVBLEVBQ2ZBLEdBQVcsRUFBSWpoRCxFQUFLa2hELGFBQWVsaUQsS0FBS3c3QyxHQUcxQyxPQUFPcUIsRUFHVCxTQUFTOEgsRUFBb0I5SCxFQUFRMkQsR0FDbkMsSUFBSXo1QyxFQUFVdEQsVUFBVXpJLE9BQVMsUUFBc0JnWCxJQUFqQnZPLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxFQUNsRm81QyxFQUFTQSxFQUFPOXNCLE1BQUssU0FBU3ZHLEVBQUVTLEdBQUcsT0FBT3ZwQixTQUFTdXBCLEVBQUVodUIsTUFBTXlFLFNBQVM4b0IsRUFBRXZ0QixTQUN0RSxJQUFLLElBQUlsQixFQUFJLEVBQUdBLEVBQUk4aEQsRUFBTzdoRCxPQUFRRCxJQUNqQzhoRCxFQUFPOWhELEdBQUd5bEQsT0FBUzNELEVBQU85aEQsR0FBR2tCLEtBQUs0Z0QsRUFBTyxHQUFHNWdELEtBQUt1a0QsRUFBT3o1QyxFQUN4RDgxQyxFQUFPOWhELEdBQUdtbkQsYUFBZXJGLEVBQU85aEQsR0FBR2tCLEtBQUs0Z0QsRUFBTyxHQUFHNWdELEtBRXBELE9BQU80Z0QsRUFBTy9uQyxVQUdoQixTQUFTOHZDLEVBQWtCL0gsRUFBUXgwQyxFQUFNdzhDLEVBQVdyRSxHQU1sRCxJQUxBLElBQUl6NUMsRUFBVXRELFVBQVV6SSxPQUFTLFFBQXNCZ1gsSUFBakJ2TyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFDOUU0OEMsRUFBUSxFQUNSNEIsRUFBVSxFQUVWNkMsRUFBVSxHQUNML3BELEVBQUksRUFBR0EsRUFBSThoRCxFQUFPN2hELE9BQVFELElBQUssQ0FDdEMsSUFBSWlHLEVBQU82N0MsRUFBTzloRCxHQUNsQmlHLEVBQUsvRSxLQUFxQixPQUFkK0UsRUFBSy9FLEtBQWdCLEVBQUkrRSxFQUFLL0UsS0FDMUNva0QsR0FBU3IvQyxFQUFLL0UsS0FDZDZvRCxFQUFRNXBELEtBQUs4RixFQUFLL0UsTUFPcEIsSUFKQSxJQUFJZ2hELEVBQVVqOUMsS0FBS3luQixJQUFJbmxCLE1BQU0sS0FBTXdpRCxHQUMvQjVILEVBQVVsOUMsS0FBS3duQixJQUFJbGxCLE1BQU0sS0FBTXdpRCxHQUMvQkMsRUFBZXZFLEVBQVNxRSxFQUVuQjlwRCxFQUFJLEVBQUdBLEVBQUk4aEQsRUFBTzdoRCxPQUFRRCxJQUFLLENBQ3RDLElBQUlpRyxFQUFPNjdDLEVBQU85aEQsR0FDbEJpRyxFQUFLL0UsS0FBcUIsT0FBZCtFLEVBQUsvRSxLQUFnQixFQUFJK0UsRUFBSy9FLEtBQzVCLElBQVZva0QsR0FBdUIsUUFBUmg0QyxHQUNqQnJILEVBQUtraEQsYUFBZWxoRCxFQUFLL0UsS0FBT29rRCxFQUFRdDVDLEVBQ3hDL0YsRUFBS2drRCxrQkFBb0IsRUFBSW5JLEVBQU83aEQsT0FBUytMLElBRTdDL0YsRUFBS2toRCxhQUFlbGhELEVBQUsvRSxLQUFPb2tELEVBQVF0NUMsRUFDeEMvRixFQUFLZ2tELGtCQUFvQmhrRCxFQUFLL0UsS0FBT29rRCxFQUFRdDVDLEdBRS9DL0YsRUFBSzBqRCxTQUFXRyxFQUFZRSxJQUFpQi9qRCxFQUFLL0UsS0FBT2doRCxJQUFZQyxFQUFVRCxJQUVqRixJQUFLLElBQUlsaUQsRUFBSSxFQUFHQSxFQUFJOGhELEVBQU83aEQsT0FBUUQsSUFBSyxDQUN0QyxJQUFJaUcsRUFBTzY3QyxFQUFPOWhELEdBQ2xCaUcsRUFBS2loRCxRQUFVQSxFQUNmQSxHQUFXLEVBQUlqaEQsRUFBS2drRCxrQkFBb0JobEQsS0FBS3c3QyxHQUcvQyxPQUFPcUIsRUFHVCxTQUFTb0ksRUFBb0JwSSxFQUFRcUksR0FDbkMsSUFBSW4rQyxFQUFVdEQsVUFBVXpJLE9BQVMsUUFBc0JnWCxJQUFqQnZPLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxFQUNuRSxHQUFYc0QsSUFDRkEsRUFBVSxTQUVaLElBQUssSUFBSWhNLEVBQUksRUFBR0EsRUFBSThoRCxFQUFPN2hELE9BQVFELElBQUssQ0FDdEMsSUFBSWlHLEVBQU82N0MsRUFBTzloRCxHQUNsQmlHLEVBQUsvRSxLQUFxQixPQUFkK0UsRUFBSy9FLEtBQWdCLEVBQUkrRSxFQUFLL0UsS0FDMUMsSUFBSWtwRCxPQUFVLEVBR1ZBLEVBRnFCLFdBQXJCRCxFQUFhNzhDLEtBQ1g2OEMsRUFBYTVKLFNBQVc0SixFQUFhN0osV0FDMUIsRUFBSTZKLEVBQWE1SixTQUFXNEosRUFBYTdKLFdBRXpDNkosRUFBYTdKLFdBQWE2SixFQUFhNUosU0FHekMsRUFFZnQ2QyxFQUFLa2hELGFBQWVpRCxFQUFhbmtELEVBQUsvRSxLQUFPOEssRUFBVW0rQyxFQUFhN0osV0FDaEVyNkMsRUFBS2toRCxjQUFnQixJQUN2QmxoRCxFQUFLa2hELGFBQWVsaEQsRUFBS2toRCxhQUFlLEdBRzVDLE9BQU9yRixFQUdULFNBQVN1SSxFQUFtQjVHLEVBQVluRCxFQUFZQyxHQUdsRCxJQUZBLElBQUk2SixFQUFhOUosRUFBYUMsRUFBVyxFQUNyQytKLEVBQWlCaEssRUFDWnRnRCxFQUFJLEVBQUdBLEVBQUl5akQsRUFBV3hqRCxPQUFRRCxJQUNyQ3lqRCxFQUFXempELEdBQUcrRCxNQUFnQyxPQUF4QjAvQyxFQUFXempELEdBQUcrRCxNQUFpQixFQUFJMC9DLEVBQVd6akQsR0FBRytELE1BQ3ZFMC9DLEVBQVd6akQsR0FBR3VxRCxhQUFlRCxFQUM3QjdHLEVBQVd6akQsR0FBR3dxRCxXQUFhSixFQUFhM0csRUFBV3pqRCxHQUFHK0QsTUFBUXU4QyxFQUMxRG1ELEVBQVd6akQsR0FBR3dxRCxZQUFjLElBQzlCL0csRUFBV3pqRCxHQUFHd3FELFdBQWEvRyxFQUFXempELEdBQUd3cUQsV0FBYSxHQUV4REYsRUFBaUI3RyxFQUFXempELEdBQUd3cUQsV0FFakMsT0FBTy9HLEVBR1QsU0FBU2dILEVBQW1CM0ksRUFBUTJCLEVBQVlpSCxHQUU5QyxJQURBLElBQUkxK0MsRUFBVXRELFVBQVV6SSxPQUFTLFFBQXNCZ1gsSUFBakJ2TyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFDekUxSSxFQUFJLEVBQUdBLEVBQUk4aEQsRUFBTzdoRCxPQUFRRCxJQUFLLENBQ3RDLElBQUlpRyxFQUFPNjdDLEVBQU85aEQsR0FFbEIsR0FEQWlHLEVBQUsvRSxLQUFxQixPQUFkK0UsRUFBSy9FLEtBQWdCLEVBQUkrRSxFQUFLL0UsS0FDVCxRQUE3QndwRCxFQUFZQyxRQUFRbkwsT0FDdEIsSUFBSyxJQUFJeC9DLEVBQUksRUFBR0EsRUFBSXlqRCxFQUFXeGpELE9BQVFELElBQ3JDLEdBQUlpRyxFQUFLL0UsTUFBUXVpRCxFQUFXempELEdBQUcrRCxNQUFPLENBQ3BDa0MsRUFBS3U1QyxNQUFRaUUsRUFBV3pqRCxHQUFHdy9DLE1BQzNCLFlBSUp2NUMsRUFBS3U1QyxNQUFRa0wsRUFBWUMsUUFBUW5MLE1BRW5DLElBQUk0SyxFQUFhTSxFQUFZcEssV0FBYW9LLEVBQVluSyxTQUFXLEVBQ2pFdDZDLEVBQUt1a0QsV0FBYUosRUFBYW5rRCxFQUFLL0UsS0FBT3dwRCxFQUFZcEssV0FDdkRyNkMsRUFBSzJrRCxXQUFhRixFQUFZRyxTQUMxQkgsRUFBWUcsU0FBV0gsRUFBWW5LLFdBQ3JDdDZDLEVBQUsya0QsWUFBYyxHQUVqQjNrRCxFQUFLL0UsTUFBUXdwRCxFQUFZSSxRQUMzQjdrRCxFQUFLa2hELGNBQWdCbGhELEVBQUt1a0QsV0FBYXZrRCxFQUFLMmtELFlBQWM1K0MsRUFBVTArQyxFQUFZRyxTQUVoRjVrRCxFQUFLa2hELGFBQWVsaEQsRUFBSzJrRCxZQUFjM2tELEVBQUsya0QsV0FBYTNrRCxFQUFLdWtELFlBQWN4K0MsRUFFMUUvRixFQUFLa2hELGNBQWdCLElBQ3ZCbGhELEVBQUtraEQsYUFBZWxoRCxFQUFLa2hELGFBQWUsR0FHNUMsT0FBT3JGLEVBR1QsU0FBU2lKLEVBQW9CakosR0FDM0JBLEVBQVM0SCxFQUFpQjVILEdBRTFCLElBREEsSUFBSTRHLEVBQVksRUFDUDFvRCxFQUFJLEVBQUdBLEVBQUk4aEQsRUFBTzdoRCxPQUFRRCxJQUFLLENBQ3RDLElBQUlpRyxFQUFPNjdDLEVBQU85aEQsR0FDZG0xQixFQUFPbHZCLEVBQUsrOEMsT0FBUy84QyxFQUFLKzhDLFFBQVEvOEMsRUFBS2toRCxhQUFhOUosUUFBUSxJQUFNMUcsRUFBSzBHLFFBQTRCLElBQXBCcDNDLEVBQUtraEQsY0FBc0IsSUFDOUd1QixFQUFZempELEtBQUt3bkIsSUFBSWk4QixFQUFXbkcsRUFBWXB0QixJQUc5QyxPQUFPdXpCLEVBR1QsU0FBU3NDLEVBQWM5SixFQUFRbEIsRUFBYWlMLEVBQVczcUQsRUFBTzJsQixFQUFROVgsR0FDcEUsT0FBTyt5QyxFQUFPOTNCLEtBQUksU0FBU25qQixHQUN6QixPQUFhLE9BQVRBLEVBQ0ssTUFFVEEsRUFBSzZsQixNQUFRN21CLEtBQUsrNUMsTUFBTWdCLEVBQWMsRUFBSS81QixFQUFPKzFCLGVBQWlCaVAsR0FFOUQ5OEMsRUFBS3FCLE1BQU0wN0MsUUFBVS84QyxFQUFLcUIsTUFBTTA3QyxPQUFPcC9CLFFBQVUzZCxFQUFLcUIsTUFBTTA3QyxPQUFPcC9CLE1BQVEsSUFDN0U3bEIsRUFBSzZsQixNQUFRN21CLEtBQUt5bkIsSUFBSXptQixFQUFLNmxCLE9BQVEzZCxFQUFLcUIsTUFBTTA3QyxPQUFPcC9CLFFBRW5EN2xCLEVBQUs2bEIsT0FBUyxJQUNoQjdsQixFQUFLNmxCLE1BQVEsR0FFZjdsQixFQUFLcW1CLElBQU1oc0IsRUFBUSxHQUFNMnFELEVBQVksR0FBS2hsRCxFQUFLNmxCLE1BQ3hDN2xCLE1BSVgsU0FBU2tsRCxFQUFtQmpLLEVBQVFsQixFQUFhaUwsRUFBVzNxRCxFQUFPMmxCLEVBQVE5WCxFQUFNaTlDLEdBQy9FLE9BQU9sSyxFQUFPOTNCLEtBQUksU0FBU25qQixHQUN6QixPQUFhLE9BQVRBLEVBQ0ssTUFFVEEsRUFBSzZsQixNQUFRN21CLEtBQUsrNUMsTUFBTWdCLEVBQWMsRUFBSS81QixFQUFPKzFCLGVBQWlCLEdBRTlEN3RDLEVBQUtxQixNQUFNMDdDLFFBQVUvOEMsRUFBS3FCLE1BQU0wN0MsT0FBT3AvQixRQUFVM2QsRUFBS3FCLE1BQU0wN0MsT0FBT3AvQixNQUFRLElBQzdFN2xCLEVBQUs2bEIsTUFBUTdtQixLQUFLeW5CLElBQUl6bUIsRUFBSzZsQixPQUFRM2QsRUFBS3FCLE1BQU0wN0MsT0FBT3AvQixRQUduRHhyQixFQUFRLElBQ1YyRixFQUFLNmxCLE9BQVMsRUFBSXMvQixHQUVibmxELE1BSVgsU0FBU29sRCxFQUFtQm5LLEVBQVFsQixFQUFhaUwsRUFBVzNxRCxFQUFPMmxCLEVBQVE5WCxFQUFNMnpDLEdBRS9FLE9BQU9aLEVBQU85M0IsS0FBSSxTQUFTbmpCLEVBQU1xbEQsR0FFL0IsT0FBYSxPQUFUcmxELEVBQ0ssTUFFVEEsRUFBSzZsQixNQUFRN21CLEtBQUsrNUMsTUFBTWdCLEVBQWMsRUFBSS81QixFQUFPKzFCLGVBQWlCLEdBRTlEN3RDLEVBQUtxQixNQUFNMDdDLFFBQVUvOEMsRUFBS3FCLE1BQU0wN0MsT0FBT3AvQixRQUFVM2QsRUFBS3FCLE1BQU0wN0MsT0FBT3AvQixNQUFRLElBQzdFN2xCLEVBQUs2bEIsTUFBUTdtQixLQUFLeW5CLElBQUl6bUIsRUFBSzZsQixPQUFRM2QsRUFBS3FCLE1BQU0wN0MsT0FBT3AvQixRQUVoRDdsQixNQUlYLFNBQVNzbEQsRUFBZTlILEVBQVl0MUMsRUFBTThYLEdBQ2xCQSxFQUFPdTFCLFdBQWF2MUIsRUFBTzQxQixnQkFBakQsSUFDSTJQLEVBQWVyOUMsRUFBSzJkLE1BQVEzZCxFQUFLMnhDLEtBQUssR0FBSzN4QyxFQUFLMnhDLEtBQUssR0FDckQyTCxFQUFZdDlDLEVBQUt1OUMsYUFBZXptRCxLQUFLeW5CLElBQUl2ZSxFQUFLMjJDLE1BQU02RyxVQUFXbEksRUFBV3hqRCxRQUFVd2pELEVBQVd4akQsUUFDcEYsUUFBWGtPLEVBQUtiLE1BQTJCLFFBQVhhLEVBQUtiLE9BQWlCbStDLEVBQVUsR0FBNkIsV0FBeEJ0OUMsRUFBSzIyQyxNQUFNQyxjQUN2RTBHLEdBQVksR0FFZCxJQUFJekwsRUFBY3dMLEVBQWVDLEVBRTdCdkwsRUFBYyxHQUNkMEwsRUFBU3o5QyxFQUFLMnhDLEtBQUssR0FDbkIrTCxFQUFPMTlDLEVBQUsyZCxNQUFRM2QsRUFBSzJ4QyxLQUFLLEdBV2xDLE9BVkEyRCxFQUFXN2lELFNBQVEsU0FBU3FGLEVBQU0zRixHQUNoQzQvQyxFQUFZLy9DLEtBQUt5ckQsRUFBU3RyRCxFQUFRMC9DLE1BRVAsWUFBMUI3eEMsRUFBSzIyQyxNQUFNQyxlQUNjLElBQXRCNTJDLEVBQUt1OUMsYUFDUHhMLEVBQVkvL0MsS0FBS3lyRCxFQUFTbkksRUFBV3hqRCxPQUFTKy9DLEdBRTlDRSxFQUFZLy9DLEtBQUswckQsSUFHZCxDQUNMM0wsWUFBYUEsRUFDYjBMLE9BQVFBLEVBQ1JDLEtBQU1BLEVBQ043TCxZQUFhQSxHQUlqQixTQUFTOEwsRUFBb0I1cUQsRUFBTW1oRCxFQUFVQyxFQUFVcEMsRUFBYUYsRUFBYTd4QyxFQUFNOFgsR0FDckYsSUFBSWphLEVBQVV0RCxVQUFVekksT0FBUyxRQUFzQmdYLElBQWpCdk8sVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBQzlFdzRDLEVBQVMsR0FDVDZLLEVBQWM1OUMsRUFBS2l3QyxPQUFTandDLEVBQUsyeEMsS0FBSyxHQUFLM3hDLEVBQUsyeEMsS0FBSyxHQW1CekQsT0FsQkE1K0MsRUFBS04sU0FBUSxTQUFTcUYsRUFBTTNGLEdBQzFCLEdBQWEsT0FBVDJGLEVBQ0ZpN0MsRUFBTy9nRCxLQUFLLFVBQ1AsQ0FDTCxJQUFJNnJELEVBQVUsR0FDZC9sRCxFQUFLckYsU0FBUSxTQUFTMDNCLEVBQU8yekIsR0FDM0IsSUFBSUMsRUFBUSxHQUNaQSxFQUFNNS9CLEVBQUk0ekIsRUFBWTUvQyxHQUFTMkUsS0FBSzQrQyxNQUFNN0QsRUFBYyxHQUN4RCxJQUFJajhDLEVBQVF1MEIsRUFBTXYwQixPQUFTdTBCLEVBQ3ZCOGxCLEVBQVMyTixHQUFlaG9ELEVBQVFzK0MsSUFBYUMsRUFBV0QsR0FDNURqRSxHQUFVcHlDLEVBQ1ZrZ0QsRUFBTTMvQixFQUFJcGUsRUFBS2l3QyxPQUFTbjVDLEtBQUs0K0MsTUFBTXpGLEdBQVVqd0MsRUFBSzJ4QyxLQUFLLEdBQ3ZEa00sRUFBUTdyRCxLQUFLK3JELE1BRWZoTCxFQUFPL2dELEtBQUs2ckQsT0FJVDlLLEVBR1QsU0FBU2lMLEVBQWNqckQsRUFBTW1oRCxFQUFVQyxFQUFVcEMsRUFBYUYsRUFBYTd4QyxFQUFNOFgsR0FDL0UsSUFBSWphLEVBQVV0RCxVQUFVekksT0FBUyxRQUFzQmdYLElBQWpCdk8sVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBQzlFcThDLEVBQVksU0FDQyxRQUFiNTJDLEVBQUtiLE1BQTZCLFFBQWJhLEVBQUtiLE9BQzVCeTNDLEVBQVk1MkMsRUFBSzIyQyxNQUFNQyxhQUV6QixJQUFJN0QsRUFBUyxHQUNUNkssRUFBYzU5QyxFQUFLaXdDLE9BQVNqd0MsRUFBSzJ4QyxLQUFLLEdBQUszeEMsRUFBSzJ4QyxLQUFLLEdBc0J6RCxPQXJCQTUrQyxFQUFLTixTQUFRLFNBQVNxRixFQUFNM0YsR0FDMUIsR0FBYSxPQUFUMkYsRUFDRmk3QyxFQUFPL2dELEtBQUssVUFDUCxDQUNMLElBQUkrckQsRUFBUSxHQUNaQSxFQUFNMU0sTUFBUXY1QyxFQUFLdTVDLE1BQ25CME0sRUFBTTUvQixFQUFJNHpCLEVBQVk1L0MsR0FDTixVQUFieWtELElBQ0RtSCxFQUFNNS9CLEdBQUtybkIsS0FBSzQrQyxNQUFNN0QsRUFBYyxJQUV0QyxJQUFJajhDLEVBQVFrQyxFQUNRLGtCQUFUQSxHQUE4QixPQUFUQSxJQUM5QmxDLEVBQVFrQyxFQUFLbEMsT0FFZixJQUFJcTZDLEVBQVMyTixHQUFlaG9ELEVBQVFzK0MsSUFBYUMsRUFBV0QsR0FDNURqRSxHQUFVcHlDLEVBQ1ZrZ0QsRUFBTTMvQixFQUFJcGUsRUFBS2l3QyxPQUFTbjVDLEtBQUs0K0MsTUFBTXpGLEdBQVVqd0MsRUFBSzJ4QyxLQUFLLEdBQ3ZEb0IsRUFBTy9nRCxLQUFLK3JELE9BSVRoTCxFQUdULFNBQVNrTCxHQUFtQmxyRCxFQUFNbWhELEVBQVVDLEVBQVVwQyxFQUFhRixFQUFhN3hDLEVBQU04WCxFQUFRb21DLEVBQWFDLEdBQ3pHLElBQUl0Z0QsRUFBVXRELFVBQVV6SSxPQUFTLFFBQXNCZ1gsSUFBakJ2TyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFDOUV3NEMsRUFBUyxHQUNUNkssRUFBYzU5QyxFQUFLaXdDLE9BQVNqd0MsRUFBSzJ4QyxLQUFLLEdBQUszeEMsRUFBSzJ4QyxLQUFLLEdBZ0N6RCxPQTlCQTUrQyxFQUFLTixTQUFRLFNBQVNxRixFQUFNM0YsR0FDMUIsR0FBYSxPQUFUMkYsRUFDRmk3QyxFQUFPL2dELEtBQUssVUFDUCxDQUNMLElBQUkrckQsRUFBUSxHQUlaLEdBSEFBLEVBQU0xTSxNQUFRdjVDLEVBQUt1NUMsTUFDbkIwTSxFQUFNNS9CLEVBQUk0ekIsRUFBWTUvQyxHQUFTMkUsS0FBSzQrQyxNQUFNN0QsRUFBYyxHQUVwRHFNLEVBQWMsRUFBRyxDQUVuQixJQURBLElBQUl0b0QsRUFBUSxFQUNIL0QsRUFBSSxFQUFHQSxHQUFLcXNELEVBQWFyc0QsSUFDaEMrRCxHQUFTdW9ELEVBQVl0c0QsR0FBR2tCLEtBQUtaLEdBRS9CLElBQUlpc0QsRUFBU3hvRCxFQUFRa0MsRUFDakJtNEMsRUFBUzJOLEdBQWVob0QsRUFBUXMrQyxJQUFhQyxFQUFXRCxHQUN4RG1LLEVBQVVULEdBQWVRLEVBQVNsSyxJQUFhQyxFQUFXRCxRQUUxRHQrQyxFQUFRa0MsRUFDUm00QyxFQUFTMk4sR0FBZWhvRCxFQUFRcytDLElBQWFDLEVBQVdELEdBQ3hEbUssRUFBVSxFQUVoQixJQUFJQyxFQUFVRCxFQUNkcE8sR0FBVXB5QyxFQUNWeWdELEdBQVd6Z0QsRUFDWGtnRCxFQUFNMy9CLEVBQUlwZSxFQUFLaXdDLE9BQVNuNUMsS0FBSzQrQyxNQUFNekYsR0FBVWp3QyxFQUFLMnhDLEtBQUssR0FDdkRvTSxFQUFNUSxHQUFLditDLEVBQUtpd0MsT0FBU241QyxLQUFLNCtDLE1BQU00SSxHQUFXdCtDLEVBQUsyeEMsS0FBSyxHQUN6RG9CLEVBQU8vZ0QsS0FBSytyRCxPQUlUaEwsRUFHVCxTQUFTeUwsR0FBaUI3SyxFQUFRM3pDLEVBQU04WCxFQUFRMm1DLEdBQzlDLElBQUkxckQsRUFFRkEsRUFEVyxTQUFUMHJELEVBQ0tuSyxFQUFpQlgsRUFBUTN6QyxFQUFLczFDLFdBQVd4akQsUUFFekN1aUQsRUFBWVYsR0FFckIsSUFBSStLLEVBQVMsR0FFYjNyRCxFQUFPQSxFQUFLOEUsUUFBTyxTQUFTQyxHQUUxQixNQUFvQixrQkFBVEEsR0FBOEIsT0FBVEEsRUFDMUJyRyxNQUFNQyxRQUFRb0csR0FDQSxPQUFUQSxFQUVlLE9BQWZBLEVBQUtsQyxNQUdFLE9BQVRrQyxLQUdYL0UsRUFBS2tvQixLQUFJLFNBQVNuakIsR0FDSSxrQkFBVEEsRUFDTHJHLE1BQU1DLFFBQVFvRyxHQUNoQkEsRUFBS21qQixLQUFJLFNBQVMwakMsR0FDaEJELEVBQU8xc0QsS0FBSzJzRCxNQUdkRCxFQUFPMXNELEtBQUs4RixFQUFLbEMsT0FHbkI4b0QsRUFBTzFzRCxLQUFLOEYsTUFHaEIsSUFBSWk4QyxFQUFVLEVBQ1ZDLEVBQVUsRUFZZCxHQVhJMEssRUFBTzVzRCxPQUFTLElBQ2xCaWlELEVBQVVqOUMsS0FBS3luQixJQUFJbmxCLE1BQU0xRCxLQUFNZ3BELEdBQy9CMUssRUFBVWw5QyxLQUFLd25CLElBQUlsbEIsTUFBTTFELEtBQU1ncEQsSUFFSCxrQkFBbkIxK0MsRUFBSzQrQyxNQUFNcmdDLE1BQ3BCdzFCLEVBQVVqOUMsS0FBS3luQixJQUFJdmUsRUFBSzQrQyxNQUFNcmdDLElBQUt3MUIsSUFFUCxrQkFBbkIvekMsRUFBSzQrQyxNQUFNdGdDLE1BQ3BCMDFCLEVBQVVsOUMsS0FBS3duQixJQUFJdGUsRUFBSzQrQyxNQUFNdGdDLElBQUswMUIsSUFHakNELElBQVlDLEVBQVMsQ0FDdkIsSUFBSTZLLEVBQVk3SyxHQUFXLEdBQzNCQSxHQUFXNkssRUFVYixJQVBBLElBQUlDLEVBQVloTCxFQUFhQyxFQUFTQyxHQUNsQ0UsRUFBVzRLLEVBQVU1SyxTQUNyQkMsRUFBVzJLLEVBQVUzSyxTQUVyQkYsRUFBUSxHQUNSOEssR0FBYTVLLEVBQVdELEdBQVlwOEIsRUFBT3cxQixXQUV0Q3o3QyxFQUFJLEVBQUdBLEdBQUtpbUIsRUFBT3cxQixXQUFZejdDLElBQ3RDb2lELEVBQU1qaUQsS0FBS2tpRCxFQUFXNkssRUFBWWx0RCxHQUVwQyxPQUFPb2lELEVBQU1yb0MsVUFHZixTQUFTb3pDLEdBQWFyTCxFQUFRM3pDLEVBQU04WCxHQUVsQyxJQUFJbW5DLEVBQWN6cEQsRUFBTyxHQUFJLENBQzNCMkosS0FBTSxJQUNMYSxFQUFLcUIsTUFBTTA3QyxRQUNWbUMsRUFBU1YsR0FBaUI3SyxFQUFRM3pDLEVBQU04WCxFQUFRbW5DLEVBQVk5L0MsTUFDNURrdUMsRUFBYXYxQixFQUFPdTFCLFdBQ3BCOFIsRUFBZ0JuL0MsRUFBSzQrQyxNQUFNOVEsVUFBWWgyQixFQUFPZzJCLFNBQzlDc1IsRUFBZUYsRUFBT2prQyxLQUFJLFNBQVNuakIsR0FJckMsT0FIQUEsRUFBTzB3QyxFQUFLMEcsUUFBUXAzQyxFQUFNLEdBQzFCQSxFQUFPa0ksRUFBSzQrQyxNQUFNL0osT0FBUzcwQyxFQUFLNCtDLE1BQU0vSixPQUFPaitDLE9BQU9rQixJQUFTQSxFQUM3RHUxQyxFQUFhdjJDLEtBQUt3bkIsSUFBSSt1QixFQUFZK0csRUFBWXQ4QyxFQUFNcW5ELEdBQWlCLEdBQzlEcm5ELEtBTVQsT0FKNEIsSUFBeEJrSSxFQUFLNCtDLE1BQU1uaEMsV0FDYjR2QixFQUFhLEdBR1IsQ0FDTCtSLGFBQWNBLEVBQ2RGLE9BQVFBLEVBQ1I3UixXQUFZQSxHQUloQixTQUFTZ1MsR0FBb0J0QixFQUFPcEssRUFBUTN6QyxFQUFNOFgsRUFBUSs1QixHQUN4RCxJQUFJcU4sRUFBU1YsR0FBaUI3SyxFQUFRM3pDLEVBQU04WCxHQUN4Q3VsQyxFQUFlcjlDLEVBQUtpd0MsT0FBU2p3QyxFQUFLMnhDLEtBQUssR0FBSzN4QyxFQUFLMnhDLEtBQUssR0FDdEQyTixFQUFTSixFQUFPLEdBQ2hCSyxFQUFTTCxFQUFPQSxFQUFPcHRELE9BQVMsR0FDaEMwdEQsRUFBVXgvQyxFQUFLMnRDLFFBQVEsR0FDdkI4UixFQUFVei9DLEVBQUsydEMsUUFBUSxHQUFLMFAsRUFDNUJ2bEQsRUFBT3duRCxHQUFVQSxFQUFTQyxJQUFXeEIsRUFBUXlCLElBQVlDLEVBQVVELEdBRXZFLE9BREExbkQsRUFBT2tJLEVBQUs0K0MsTUFBTS9KLE9BQVM3MEMsRUFBSzQrQyxNQUFNL0osT0FBT2orQyxPQUFPa0IsSUFBU0EsRUFDdERBLEVBR1QsU0FBUzRuRCxHQUFnQnhMLEVBQVVDLEVBQVVwQixFQUFRL3lDLEdBRW5ELElBREEsSUFBSXE5QyxFQUFlcjlDLEVBQUtpd0MsT0FBU2p3QyxFQUFLMnhDLEtBQUssR0FBSzN4QyxFQUFLMnhDLEtBQUssR0FDakQ5L0MsRUFBSSxFQUFHQSxFQUFJa2hELEVBQU9qaEQsT0FBUUQsSUFBSyxDQUN0QyxJQUFJbytDLEVBQVNvTixHQUFnQnRLLEVBQU9saEQsR0FBRytELE1BQVFzK0MsSUFBYUMsRUFBV0QsR0FDdkVuQixFQUFPbGhELEdBQUd1c0IsRUFBSXBlLEVBQUtpd0MsT0FBU241QyxLQUFLNCtDLE1BQU16RixHQUFVandDLEVBQUsyeEMsS0FBSyxHQUU3RCxPQUFPb0IsRUFHVCxTQUFTNE0sR0FBY2ppRCxFQUFTc0MsSUFDTixJQUFwQkEsRUFBSzQvQyxZQUNQbGlELEVBQVFtaUQsVUFBVTcvQyxFQUFLaXdDLE9BQVEsR0FDL0J2eUMsRUFBUWt3QyxPQUFPLEdBQUs5MkMsS0FBS3c3QyxHQUFLLE9BQ0gsSUFBbEJ0eUMsRUFBSzgvQyxXQUNkcGlELEVBQVFtaUQsVUFBVTcvQyxFQUFLaXdDLE9BQVEsR0FDL0J2eUMsRUFBUWt3QyxPQUFPLEdBQUs5MkMsS0FBS3c3QyxHQUFLLEtBQzlCdHlDLEVBQUs4L0MsVUFBVyxHQUlwQixTQUFTQyxHQUFlaE4sRUFBUTFCLEVBQU8yTyxFQUFPdGlELEVBQVNzQyxHQUNyRHRDLEVBQVF1aUQsWUFDUnZpRCxFQUFRd2lELGVBQWUsV0FDdkJ4aUQsRUFBUXlpRCxhQUFhLEVBQUluZ0QsRUFBS3pKLFlBQzlCbUgsRUFBUTBpRCxhQUFhL08sR0FDUCxZQUFWMk8sRUFDRmpOLEVBQU90Z0QsU0FBUSxTQUFTcUYsRUFBTTNGLEdBQ2YsT0FBVDJGLElBQ0Y0RixFQUFRMmlELE9BQU92b0QsRUFBS3FtQixFQUFHcm1CLEVBQUtzbUIsRUFBSSxLQUNoQzFnQixFQUFRNGlELE9BQU94b0QsRUFBS3FtQixFQUFJLElBQUtybUIsRUFBS3NtQixHQUNsQzFnQixFQUFRNGlELE9BQU94b0QsRUFBS3FtQixFQUFHcm1CLEVBQUtzbUIsRUFBSSxLQUNoQzFnQixFQUFRNGlELE9BQU94b0QsRUFBS3FtQixFQUFJLElBQUtybUIsRUFBS3NtQixHQUNsQzFnQixFQUFRNGlELE9BQU94b0QsRUFBS3FtQixFQUFHcm1CLEVBQUtzbUIsRUFBSSxTQUdqQixXQUFWNGhDLEVBQ1RqTixFQUFPdGdELFNBQVEsU0FBU3FGLEVBQU0zRixHQUNmLE9BQVQyRixJQUNGNEYsRUFBUTJpRCxPQUFPdm9ELEVBQUtxbUIsRUFBSSxJQUFNbmUsRUFBS3pKLFdBQVl1QixFQUFLc21CLEdBQ3BEMWdCLEVBQVE2aUQsSUFBSXpvRCxFQUFLcW1CLEVBQUdybUIsRUFBS3NtQixFQUFHLEVBQUlwZSxFQUFLekosV0FBWSxFQUFHLEVBQUlPLEtBQUt3N0MsSUFBSSxPQUdsRCxTQUFWME4sRUFDVGpOLEVBQU90Z0QsU0FBUSxTQUFTcUYsRUFBTTNGLEdBQ2YsT0FBVDJGLElBQ0Y0RixFQUFRMmlELE9BQU92b0QsRUFBS3FtQixFQUFJLElBQUtybUIsRUFBS3NtQixFQUFJLEtBQ3RDMWdCLEVBQVE4aUQsS0FBSzFvRCxFQUFLcW1CLEVBQUksSUFBS3JtQixFQUFLc21CLEVBQUksSUFBSyxFQUFHLE9BRzdCLGFBQVY0aEMsR0FDVGpOLEVBQU90Z0QsU0FBUSxTQUFTcUYsRUFBTTNGLEdBQ2YsT0FBVDJGLElBQ0Y0RixFQUFRMmlELE9BQU92b0QsRUFBS3FtQixFQUFHcm1CLEVBQUtzbUIsRUFBSSxLQUNoQzFnQixFQUFRNGlELE9BQU94b0QsRUFBS3FtQixFQUFJLElBQUtybUIsRUFBS3NtQixFQUFJLEtBQ3RDMWdCLEVBQVE0aUQsT0FBT3hvRCxFQUFLcW1CLEVBQUksSUFBS3JtQixFQUFLc21CLEVBQUksS0FDdEMxZ0IsRUFBUTRpRCxPQUFPeG9ELEVBQUtxbUIsRUFBR3JtQixFQUFLc21CLEVBQUksU0FJdEMxZ0IsRUFBUStpRCxZQUNSL2lELEVBQVFnakQsT0FDUmhqRCxFQUFRaWpELFNBR1YsU0FBU0MsR0FBYzVnRCxFQUFNOFgsRUFBUXBhLEVBQVM4MUMsR0FDNUMsSUFBSXFOLEVBQWdCN2dELEVBQUs4Z0QsTUFBTWhULFVBQVloMkIsRUFBT3UyQixjQUM5QzBTLEVBQW1CL2dELEVBQUtnaEQsU0FBU2xULFVBQVloMkIsRUFBT3kyQixpQkFDcER1UyxFQUFROWdELEVBQUs4Z0QsTUFBTXJ0RCxNQUFRLEdBQzNCdXRELEVBQVdoaEQsRUFBS2doRCxTQUFTdnRELE1BQVEsR0FDakN3dEQsRUFBaUJqaEQsRUFBSzhnRCxNQUFNelAsT0FBU3Y1QixFQUFPczJCLFdBQzVDOFMsRUFBb0JsaEQsRUFBS2doRCxTQUFTM1AsT0FBU3Y1QixFQUFPdzJCLGNBQ2xENlMsRUFBY0wsRUFBUUQsRUFBZ0IsRUFDdENPLEVBQWlCSixFQUFXRCxFQUFtQixFQUMvQ3JILEVBQVMsRUFFYixHQUFJc0gsRUFBVSxDQUNaLElBQUlLLEVBQVlqTixFQUFZNE0sRUFBVUQsR0FDbEN0RCxFQUFTakssRUFBT3IxQixFQUFJa2pDLEVBQVksR0FBS3JoRCxFQUFLZ2hELFNBQVNNLFNBQVcsR0FDOURDLEVBQVMvTixFQUFPcDFCLEVBQUkyaUMsRUFBbUIsR0FBSy9nRCxFQUFLZ2hELFNBQVNRLFNBQVcsR0FDckVWLElBQ0ZTLElBQVdKLEVBQWN6SCxHQUFVLEdBRXJDaDhDLEVBQVF1aUQsWUFDUnZpRCxFQUFRK2pELFlBQVlWLEdBQ3BCcmpELEVBQVEwaUQsYUFBYWMsR0FDckJ4akQsRUFBUWdrRCxTQUFTVixFQUFVdkQsRUFBUThELEdBQ25DN2pELEVBQVEraUQsWUFDUi9pRCxFQUFRaWpELFNBRVYsR0FBSUcsRUFBTyxDQUNULElBQUlhLEVBQWF2TixFQUFZME0sRUFBT0QsR0FDaENlLEVBQVVwTyxFQUFPcjFCLEVBQUl3akMsRUFBYSxHQUFLM2hELEVBQUs4Z0QsTUFBTVEsU0FBVyxHQUM3RE8sRUFBVXJPLEVBQU9wMUIsRUFBSXlpQyxFQUFnQixHQUFLN2dELEVBQUs4Z0QsTUFBTVUsU0FBVyxHQUNoRVIsSUFDRmEsSUFBWVQsRUFBaUIxSCxHQUFVLEdBRXpDaDhDLEVBQVF1aUQsWUFDUnZpRCxFQUFRK2pELFlBQVlaLEdBQ3BCbmpELEVBQVEwaUQsYUFBYWEsR0FDckJ2akQsRUFBUWdrRCxTQUFTWixFQUFPYyxFQUFTQyxHQUNqQ25rRCxFQUFRK2lELFlBQ1IvaUQsRUFBUWlqRCxVQUlaLFNBQVNtQixHQUFjL08sRUFBUVksRUFBUTc3QixFQUFRcGEsR0FFN0MsSUFBSTNLLEVBQU80Z0QsRUFBTzVnRCxLQUNsQmdnRCxFQUFPdGdELFNBQVEsU0FBU3FGLEVBQU0zRixHQUM1QixHQUFhLE9BQVQyRixFQUFlLENBRWpCNEYsRUFBUXVpRCxZQUNSdmlELEVBQVErakQsWUFBWTlOLEVBQU9vTyxVQUFZanFDLEVBQU9nMkIsVUFDOUNwd0MsRUFBUTBpRCxhQUFhek0sRUFBT3FPLFdBQWEsV0FDekMsSUFBSXBzRCxFQUFRN0MsRUFBS1osR0FDVSxrQkFBaEJZLEVBQUtaLElBQXVDLE9BQWhCWSxFQUFLWixLQUMxQ3lELEVBQVE3QyxFQUFLWixHQUFPeUQsT0FFdEIsSUFBSXFzRCxFQUFZdE8sRUFBT2tCLE9BQVNsQixFQUFPa0IsT0FBT2ovQyxHQUFTQSxFQUN2RDhILEVBQVFna0QsU0FBU3RqRCxPQUFPNmpELEdBQVlucUQsRUFBS3FtQixFQUFJaTJCLEVBQVk2TixFQUFXdE8sRUFBT29PLFVBQVlqcUMsRUFBT2cyQixVQUFZLEVBQUdoMkMsRUFBS3NtQixFQUNoSCxHQUNGMWdCLEVBQVEraUQsWUFDUi9pRCxFQUFRaWpELGFBTWQsU0FBU3VCLEdBQWUzRixFQUFhakYsRUFBUTZLLEVBQWdCbmlELEVBQU04WCxFQUFRcGEsR0FDekU0NUMsR0FBVWlGLEVBQVk1K0IsTUFBUSxFQUFJN0YsRUFBT2czQixxQkFRekMsSUFOQSxJQUFJbU4sRUFBYU0sRUFBWXBLLFdBQWFvSyxFQUFZbkssU0FBVyxFQUM3RGdRLEVBQWFuRyxFQUFhTSxFQUFZOEYsVUFBVUMsWUFDaERDLEVBQWNoRyxFQUFZaUcsVUFBWWpHLEVBQVlrRyxZQUNsREgsRUFBY0MsRUFBY2hHLEVBQVk4RixVQUFVQyxZQUNsREksRUFBV25HLEVBQVlwSyxXQUN2QndRLEVBQVlwRyxFQUFZa0csWUFDbkI1d0QsRUFBSSxFQUFHQSxFQUFJMHFELEVBQVk4RixVQUFVQyxZQUFjLEVBQUd6d0QsSUFBSyxDQUM5RCxJQUFJK3dELEVBQU0sQ0FDUnprQyxFQUFHbTVCLEVBQVN4Z0QsS0FBS3drRCxJQUFJb0gsRUFBVzVyRCxLQUFLdzdDLElBQ3JDbDBCLEVBQUdrNUIsRUFBU3hnRCxLQUFLaWtELElBQUkySCxFQUFXNXJELEtBQUt3N0MsS0FFbkN1USxFQUFZdEcsRUFBWXVHLFlBQWN2RyxFQUFZdUcsWUFBWUgsR0FBYUEsRUFDL0VDLEVBQUl6a0MsR0FBS2drQyxFQUFlaGtDLEVBQUlpMkIsRUFBWXlPLEdBQWEsRUFDckRELEVBQUl4a0MsR0FBSytqQyxFQUFlL2pDLEVBQ3hCLElBQUlxL0IsRUFBU21GLEVBQUl6a0MsRUFDYm9qQyxFQUFTcUIsRUFBSXhrQyxFQUNqQjFnQixFQUFRdWlELFlBQ1J2aUQsRUFBUStqRCxZQUFZM3BDLEVBQU9nMkIsVUFDM0Jwd0MsRUFBUTBpRCxhQUFhN0QsRUFBWXdHLFlBQWMsV0FDL0NybEQsRUFBUWdrRCxTQUFTbUIsRUFBV3BGLEVBQVE4RCxFQUFTenBDLEVBQU9nMkIsU0FBVyxHQUMvRHB3QyxFQUFRK2lELFlBQ1IvaUQsRUFBUWlqRCxTQUVSK0IsR0FBWU4sRUFDUk0sR0FBWSxJQUNkQSxHQUFzQixHQUV4QkMsR0FBYUwsR0FLakIsU0FBU1UsR0FBZXZMLEVBQVdILEVBQVE2SyxFQUFnQm5pRCxFQUFNOFgsRUFBUXBhLEdBQ3ZFLElBQUl1OUMsRUFBY2o3QyxFQUFLcUIsTUFBTTY1QyxPQUFTLEdBQ3RDNUQsR0FBVXgvQixFQUFPKzJCLHFCQUVqQjRJLEVBQVVobEQsU0FBUSxTQUFTeS9DLEVBQU8vL0MsR0FDaEMsSUFBSXl3RCxFQUFNLENBQ1J6a0MsRUFBR201QixFQUFTeGdELEtBQUt3a0QsSUFBSXBKLEdBQ3JCOXpCLEVBQUdrNUIsRUFBU3hnRCxLQUFLaWtELElBQUk3SSxJQUVuQitRLEVBQW9CMVAsRUFBd0JxUCxFQUFJemtDLEVBQUd5a0MsRUFBSXhrQyxFQUFHK2pDLEdBQzFEMUUsRUFBU3dGLEVBQWtCOWtDLEVBQzNCb2pDLEVBQVMwQixFQUFrQjdrQyxFQUMzQm9xQixFQUFLNkcsbUJBQW1CdVQsRUFBSXprQyxFQUFHLEdBQ2pDcy9CLEdBQVVySixFQUFZcDBDLEVBQUtzMUMsV0FBV25qRCxJQUFVLElBQU0sRUFDN0N5d0QsRUFBSXprQyxFQUFJLElBQ2pCcy9CLEdBQVVySixFQUFZcDBDLEVBQUtzMUMsV0FBV25qRCxJQUFVLEtBRWxEdUwsRUFBUXVpRCxZQUNSdmlELEVBQVErakQsWUFBWTNwQyxFQUFPZzJCLFVBQzNCcHdDLEVBQVEwaUQsYUFBYW5GLEVBQVk4SCxZQUFjLFdBQy9DcmxELEVBQVFna0QsU0FBUzFoRCxFQUFLczFDLFdBQVduakQsSUFBVSxHQUFJc3JELEVBQVE4RCxFQUFTenBDLEVBQU9nMkIsU0FBVyxHQUNsRnB3QyxFQUFRK2lELFlBQ1IvaUQsRUFBUWlqRCxZQUtaLFNBQVN1QyxHQUFZdlAsRUFBUTN6QyxFQUFNOFgsRUFBUXBhLEVBQVM0NUMsRUFBUTlELEdBb0IxRCxJQW5CQSxJQUFJMlAsRUFBYXJyQyxFQUFPbTJCLG9CQUNwQm1WLEVBQXVCLEdBQ3ZCQyxFQUFpQixLQUVqQkMsRUFBZ0IzUCxFQUFPMTRCLEtBQUksU0FBU25qQixHQUN0QyxJQUFJa3ZCLEVBQU9sdkIsRUFBSys4QyxPQUFTLzhDLEVBQUsrOEMsUUFBUS84QyxFQUFLa2hELGFBQWE5SixRQUFRLElBQU0xRyxFQUFLMEcsUUFBdUMsSUFBL0JwM0MsRUFBS2toRCxhQUFhOUosUUFBUSxJQUFXLElBQ3JIcDNDLEVBQUtna0Qsb0JBQW1CaGtELEVBQUtraEQsYUFBYWxoRCxFQUFLZ2tELG1CQUNsRCxJQUFJeUUsRUFBTSxFQUFJenBELEtBQUt3N0MsSUFBTXg2QyxFQUFLaWhELFFBQVUsRUFBSWppRCxLQUFLdzdDLEdBQUt4NkMsRUFBS2toRCxhQUFlLEdBQ3RFM0gsRUFBUXY1QyxFQUFLdTVDLE1BQ2JpRyxFQUFTeC9DLEVBQUswakQsU0FDbEIsTUFBTyxDQUNMK0UsSUFBS0EsRUFDTHY1QixLQUFNQSxFQUNOcXFCLE1BQU9BLEVBQ1BpRyxPQUFRQSxFQUNSMEssVUFBV2xxRCxFQUFLa3FELFVBQ2hCRCxTQUFVanFELEVBQUtpcUQsYUFHVmx3RCxFQUFJLEVBQUdBLEVBQUl5eEQsRUFBY3h4RCxPQUFRRCxJQUFLLENBQzdDLElBQUlpRyxFQUFPd3JELEVBQWN6eEQsR0FFckIweEQsRUFBVXpzRCxLQUFLd2tELElBQUl4akQsRUFBS3lvRCxNQUFRem9ELEVBQUt3L0MsT0FBUzZMLEdBQzlDSyxFQUFVMXNELEtBQUtpa0QsSUFBSWpqRCxFQUFLeW9ELE1BQVF6b0QsRUFBS3cvQyxPQUFTNkwsR0FHOUNNLEVBQVUzc0QsS0FBS3drRCxJQUFJeGpELEVBQUt5b0QsS0FBT3pvRCxFQUFLdy9DLE9BQ3BDb00sRUFBVTVzRCxLQUFLaWtELElBQUlqakQsRUFBS3lvRCxLQUFPem9ELEVBQUt3L0MsT0FHcENxTSxFQUFVSixHQUFXLEVBQUlBLEVBQVV6ckMsRUFBT28yQixvQkFBc0JxVixFQUFVenJDLEVBQU9vMkIsb0JBQ2pGMFYsRUFBVUosRUFDVm5DLEVBQVlqTixFQUFZdDhDLEVBQUtrdkIsTUFDN0J1NkIsRUFBU3FDLEVBRVRQLEdBQWtCN2EsRUFBS2tILHNCQUFzQjJULEVBQWUxaUMsTUFBTyxDQUNuRXhDLEVBQUd3bEMsTUFHSHBDLEVBREVvQyxFQUFVLEVBQ0g3c0QsS0FBS3luQixJQUFJcWxDLEVBQVNQLEVBQWUxaUMsTUFBTXZDLEdBQ3ZDbWxDLEVBQVUsRUFDVnpzRCxLQUFLd25CLElBQUlzbEMsRUFBU1AsRUFBZTFpQyxNQUFNdkMsR0FFNUN3bEMsRUFBVSxFQUNIOXNELEtBQUt3bkIsSUFBSXNsQyxFQUFTUCxFQUFlMWlDLE1BQU12QyxHQUV2Q3RuQixLQUFLeW5CLElBQUlxbEMsRUFBU1AsRUFBZTFpQyxNQUFNdkMsSUFJbER1bEMsRUFBVSxJQUNaQSxHQUFXdEMsR0FHYixJQUFJd0MsRUFBYSxDQUNmQyxVQUFXLENBQ1QzbEMsRUFBR3NsQyxFQUNIcmxDLEVBQUdzbEMsR0FFTEssUUFBUyxDQUNQNWxDLEVBQUdvbEMsRUFDSG5sQyxFQUFHb2xDLEdBRUw3aUMsTUFBTyxDQUNMeEMsRUFBR3dsQyxFQUNIdmxDLEVBQUdtakMsR0FFTDVqQyxNQUFPMGpDLEVBQ1BwUixPQUFRbjRCLEVBQU9nMkIsU0FDZjltQixLQUFNbHZCLEVBQUtrdkIsS0FDWHFxQixNQUFPdjVDLEVBQUt1NUMsTUFDWjJRLFVBQVdscUQsRUFBS2txRCxVQUNoQkQsU0FBVWpxRCxFQUFLaXFELFVBRWpCc0IsRUFBaUI1UCxFQUFlb1EsRUFBWVIsR0FDNUNELEVBQXFCcHhELEtBQUtxeEQsR0FHNUIsSUFBSyxJQUFJeHhELEVBQUksRUFBR0EsRUFBSXV4RCxFQUFxQnR4RCxPQUFRRCxJQUFLLENBQ3BELElBQUlpRyxFQUFPc3JELEVBQXFCdnhELEdBQzVCbXlELEVBQW9CelEsRUFBd0J6N0MsRUFBS2dzRCxVQUFVM2xDLEVBQUdybUIsRUFBS2dzRCxVQUFVMWxDLEVBQUdvMUIsR0FDaEZ5USxFQUFrQjFRLEVBQXdCejdDLEVBQUtpc0QsUUFBUTVsQyxFQUFHcm1CLEVBQUtpc0QsUUFBUTNsQyxFQUFHbzFCLEdBQzFFMFEsRUFBZTNRLEVBQXdCejdDLEVBQUs2b0IsTUFBTXhDLEVBQUdybUIsRUFBSzZvQixNQUFNdkMsRUFBR28xQixHQUN2RTkxQyxFQUFReWlELGFBQWEsRUFBSW5nRCxFQUFLekosWUFDOUJtSCxFQUFRK2pELFlBQVkzcEMsRUFBT2cyQixVQUMzQnB3QyxFQUFRdWlELFlBQ1J2aUQsRUFBUXdpRCxlQUFlcG9ELEVBQUt1NUMsT0FDNUIzekMsRUFBUTBpRCxhQUFhdG9ELEVBQUt1NUMsT0FDMUIzekMsRUFBUTJpRCxPQUFPMkQsRUFBa0I3bEMsRUFBRzZsQyxFQUFrQjVsQyxHQUN0RCxJQUFJK2xDLEVBQWNyc0QsRUFBSzZvQixNQUFNeEMsRUFBSSxFQUFJK2xDLEVBQWEvbEMsRUFBSXJtQixFQUFLNmxCLE1BQVF1bUMsRUFBYS9sQyxFQUM1RWltQyxFQUFhdHNELEVBQUs2b0IsTUFBTXhDLEVBQUksRUFBSStsQyxFQUFhL2xDLEVBQUksRUFBSStsQyxFQUFhL2xDLEVBQUksRUFDMUV6Z0IsRUFBUTJtRCxpQkFBaUJKLEVBQWdCOWxDLEVBQUc4bEMsRUFBZ0I3bEMsRUFBRytsQyxFQUFhRCxFQUFhOWxDLEdBQ3pGMWdCLEVBQVEyaUQsT0FBTzJELEVBQWtCN2xDLEVBQUc2bEMsRUFBa0I1bEMsR0FDdEQxZ0IsRUFBUWlqRCxTQUNSampELEVBQVEraUQsWUFDUi9pRCxFQUFRdWlELFlBQ1J2aUQsRUFBUTJpRCxPQUFPNkQsRUFBYS9sQyxFQUFJcm1CLEVBQUs2bEIsTUFBT3VtQyxFQUFhOWxDLEdBQ3pEMWdCLEVBQVE2aUQsSUFBSTRELEVBQWFELEVBQWE5bEMsRUFBRyxFQUFHLEVBQUcsRUFBSXRuQixLQUFLdzdDLElBQ3hENTBDLEVBQVEraUQsWUFDUi9pRCxFQUFRZ2pELE9BQ1JoakQsRUFBUXVpRCxZQUNSdmlELEVBQVErakQsWUFBWTNwRCxFQUFLaXFELFVBQVlqcUMsRUFBT2cyQixVQUM1Q3B3QyxFQUFRMGlELGFBQWF0b0QsRUFBS2txRCxXQUFhLFdBQ3ZDdGtELEVBQVFna0QsU0FBUzVwRCxFQUFLa3ZCLEtBQU1vOUIsRUFBWUYsRUFBYTlsQyxFQUFJLEdBQ3pEMWdCLEVBQVEraUQsWUFDUi9pRCxFQUFRaWpELFNBQ1JqakQsRUFBUStpRCxhQUlaLFNBQVM2RCxHQUFxQmhELEVBQVN0aEQsRUFBTThYLEVBQVFwYSxHQUNuRCxJQUFJNm1ELEVBQWdCdmtELEVBQUtxQixNQUFNbWpELFNBQVcsR0FDMUNELEVBQWNFLGNBQXFDMzdDLEdBQTFCeTdDLEVBQWNFLFNBQXdCLFFBQVVGLEVBQWNFLFNBQ3ZGRixFQUFjRyxnQkFBeUM1N0MsR0FBNUJ5N0MsRUFBY0csV0FBMEIsRUFBSUgsRUFBY0csV0FDckYsSUFBSW5ELEVBQVN2aEQsRUFBSzJ4QyxLQUFLLEdBQ25CZ1QsRUFBTzNrRCxFQUFLaXdDLE9BQVNqd0MsRUFBSzJ4QyxLQUFLLEdBYW5DLEdBWDhCLFFBQTFCNFMsRUFBY0UsVUFDaEIvbUQsRUFBUWtuRCxZQUFZLENBQUNMLEVBQWNHLFdBQVlILEVBQWNHLGFBRS9EaG5ELEVBQVF3aUQsZUFBZXFFLEVBQWNNLFdBQWEsV0FDbERubkQsRUFBUXlpRCxhQUFhLEVBQUluZ0QsRUFBS3pKLFlBQzlCbUgsRUFBUXVpRCxZQUNSdmlELEVBQVEyaUQsT0FBT2lCLEVBQVNDLEdBQ3hCN2pELEVBQVE0aUQsT0FBT2dCLEVBQVNxRCxHQUN4QmpuRCxFQUFRaWpELFNBQ1JqakQsRUFBUWtuRCxZQUFZLElBRWhCTCxFQUFjTyxXQUFZLENBQzVCLElBQUlqQyxFQUFZN2lELEVBQUtzMUMsV0FBV3QxQyxFQUFLd2tELFFBQVFyeUQsT0FDN0N1TCxFQUFRK2pELFlBQVkzcEMsRUFBT2cyQixVQUMzQixJQUFJdVQsRUFBWWpOLEVBQVl5TyxFQUFXL3FDLEVBQU9nMkIsVUFFMUNpWCxFQUFRekQsRUFBVSxHQUFNRCxFQUN4QjJELEVBQVFMLEVBQ1pqbkQsRUFBUXVpRCxZQUNSdmlELEVBQVEwaUQsYUFBYWpRLEVBQVNvVSxFQUFjVSxjQUFnQm50QyxFQUFPMjJCLGtCQUFtQjhWLEVBQWNXLGdCQUFrQnB0QyxFQUFPNDJCLGlCQUM3SGh4QyxFQUFRd2lELGVBQWVxRSxFQUFjVSxjQUFnQm50QyxFQUFPMjJCLG1CQUM1RC93QyxFQUFReWlELGFBQWEsRUFBSW5nRCxFQUFLekosWUFDOUJtSCxFQUFROGlELEtBQUt1RSxFQUFRanRDLEVBQU8wMkIsZUFBZ0J3VyxFQUFPM0QsRUFBWSxFQUFJdnBDLEVBQU8wMkIsZUFBZ0IxMkIsRUFBT2cyQixTQUFXLEVBQUloMkIsRUFBTzAyQixnQkFDdkg5d0MsRUFBUStpRCxZQUNSL2lELEVBQVFpakQsU0FDUmpqRCxFQUFRZ2pELE9BRVJoakQsRUFBUXVpRCxZQUNSdmlELEVBQVErakQsWUFBWTNwQyxFQUFPZzJCLFVBQzNCcHdDLEVBQVEwaUQsYUFBYW1FLEVBQWNZLGdCQUFrQnJ0QyxFQUFPc3RDLFdBQzVEMW5ELEVBQVFna0QsU0FBU3RqRCxPQUFPeWtELEdBQVlrQyxFQUFPQyxFQUFRbHRDLEVBQU8wMkIsZUFBaUIxMkIsRUFBT2cyQixVQUNsRnB3QyxFQUFRK2lELFlBQ1IvaUQsRUFBUWlqRCxVQUlaLFNBQVMwRSxHQUFhblIsRUFBVUMsRUFBVW4wQyxFQUFNOFgsRUFBUXBhLEdBVXRELElBVEEsSUFBSTRuRCxFQUFpQjl2RCxFQUFPLEdBQUksQ0FDOUIySixLQUFNLFFBQ051bEQsV0FBWSxFQUNaM3hELEtBQU0sSUFDTGlOLEVBQUtxQixNQUFNa2tELFVBQ1Y5SCxFQUFTejlDLEVBQUsyeEMsS0FBSyxHQUNuQitMLEVBQU8xOUMsRUFBSzJkLE1BQVEzZCxFQUFLMnRDLFFBQVEsR0FDakNvRixFQUFTMk0sR0FBZ0J4TCxFQUFVQyxFQUFVbVIsRUFBZXZ5RCxLQUFNaU4sR0FFN0RuTyxFQUFJLEVBQUdBLEVBQUlraEQsRUFBT2poRCxPQUFRRCxJQUFLLENBQ3RDLElBQUlpRyxFQUFPdEMsRUFBTyxHQUFJLENBQ3BCZ3dELFVBQVcsVUFDWEMsV0FBVyxFQUNYTixlQUFnQixVQUNoQkYsYUFBYyxVQUNkQyxlQUFnQixHQUNoQlEsV0FBWSxHQUNYM1MsRUFBT2xoRCxJQVlWLEdBVjJCLFFBQXZCeXpELEVBQWVubUQsTUFDakJ6QixFQUFRa25ELFlBQVksQ0FBQ1UsRUFBZVosV0FBWVksRUFBZVosYUFFakVobkQsRUFBUXdpRCxlQUFlcG9ELEVBQUswdEQsV0FDNUI5bkQsRUFBUXlpRCxhQUFhLEVBQUluZ0QsRUFBS3pKLFlBQzlCbUgsRUFBUXVpRCxZQUNSdmlELEVBQVEyaUQsT0FBTzVDLEVBQVEzbEQsRUFBS3NtQixHQUM1QjFnQixFQUFRNGlELE9BQU81QyxFQUFNNWxELEVBQUtzbUIsR0FDMUIxZ0IsRUFBUWlqRCxTQUNSampELEVBQVFrbkQsWUFBWSxJQUNoQjlzRCxFQUFLMnRELFVBQVcsQ0FDbEIsSUFBSTVDLEVBQVk3aUQsRUFBSzQrQyxNQUFNL0osT0FBUzcwQyxFQUFLNCtDLE1BQU0vSixPQUFPaitDLE9BQU9rQixFQUFLbEMsUUFBVWtDLEVBQUtsQyxNQUNqRjhILEVBQVErakQsWUFBWTNwQyxFQUFPZzJCLFVBQzNCLElBQUl1VCxFQUFZak4sRUFBWXlPLEVBQVcvcUMsRUFBT2cyQixVQUMxQzZYLEVBQVczbEQsRUFBSzJ0QyxRQUFRLEdBQUs3MUIsRUFBTzQxQixnQkFBa0I1MUIsRUFBTzAyQixlQUM3RG9YLEVBQVM5dUQsS0FBS3duQixJQUFJdGUsRUFBSzJ4QyxLQUFLLEdBQUkwUCxFQUFvQyxFQUF4QnZwQyxFQUFPMDJCLGdCQUNuRHFYLEVBQVVELEVBQVNELEVBRW5CWixFQUFRWSxHQUFZRSxFQUFVeEUsR0FBYSxFQUMzQzJELEVBQVFsdEQsRUFBS3NtQixFQUNqQjFnQixFQUFRMGlELGFBQWFqUSxFQUFTcjRDLEVBQUttdEQsYUFBY250RCxFQUFLb3RELGlCQUN0RHhuRCxFQUFRd2lELGVBQWVwb0QsRUFBS210RCxjQUM1QnZuRCxFQUFReWlELGFBQWEsRUFBSW5nRCxFQUFLekosWUFDOUJtSCxFQUFRdWlELFlBQ1J2aUQsRUFBUThpRCxLQUFLbUYsRUFBVVgsRUFBUSxHQUFNbHRDLEVBQU9nMkIsU0FBV2gyQixFQUFPMDJCLGVBQWdCcVgsRUFBUy90QyxFQUFPZzJCLFNBQVcsRUFBSWgyQixFQUFPMDJCLGdCQUNwSDl3QyxFQUFRK2lELFlBQ1IvaUQsRUFBUWlqRCxTQUNSampELEVBQVFnakQsT0FFUmhqRCxFQUFRdWlELFlBQ1J2aUQsRUFBUStqRCxZQUFZM3BDLEVBQU9nMkIsVUFDM0Jwd0MsRUFBUTBpRCxhQUFhdG9ELEVBQUtxdEQsZ0JBQzFCem5ELEVBQVFna0QsU0FBU3RqRCxPQUFPeWtELEdBQVlrQyxFQUFPQyxFQUFRLEdBQU1sdEMsRUFBT2cyQixVQUNoRXB3QyxFQUFRaWpELFdBS2QsU0FBU21GLEdBQTBCOWxELEVBQU04WCxFQUFRcGEsRUFBU20wQyxFQUFhRSxHQUNyRSxJQUFJd1MsRUFBZ0IvdUQsRUFBTyxHQUFJLENBQzdCaXZELFNBQVUsUUFDVkMsV0FBWSxHQUNYMWtELEVBQUtxQixNQUFNbWpELFNBRVYvRyxFQUFTejlDLEVBQUsyeEMsS0FBSyxHQUNuQitMLEVBQU8xOUMsRUFBSzJkLE1BQVEzZCxFQUFLMnRDLFFBQVEsR0FhckMsR0FYOEIsUUFBMUI0VyxFQUFjRSxVQUNoQi9tRCxFQUFRa25ELFlBQVksQ0FBQ0wsRUFBY0csV0FBWUgsRUFBY0csYUFFL0RobkQsRUFBUXdpRCxlQUFlcUUsRUFBY00sV0FBYSxXQUNsRG5uRCxFQUFReWlELGFBQWEsRUFBSW5nRCxFQUFLekosWUFDOUJtSCxFQUFRdWlELFlBQ1J2aUQsRUFBUTJpRCxPQUFPNUMsRUFBUXo5QyxFQUFLd2tELFFBQVEvTyxPQUFPcjNCLEdBQzNDMWdCLEVBQVE0aUQsT0FBTzVDLEVBQU0xOUMsRUFBS3drRCxRQUFRL08sT0FBT3IzQixHQUN6QzFnQixFQUFRaWpELFNBQ1JqakQsRUFBUWtuRCxZQUFZLElBRWhCTCxFQUFjd0IsV0FBWSxDQUM1QixJQUFJbEQsRUFBWXhELEdBQW9Cci9DLEVBQUt3a0QsUUFBUS9PLE9BQU9yM0IsRUFBR3BlLEVBQUsyekMsT0FBUTN6QyxFQUFNOFgsRUFBUSs1QixHQUN0Rm4wQyxFQUFRK2pELFlBQVkzcEMsRUFBT2cyQixVQUMzQixJQUFJdVQsRUFBWWpOLEVBQVl5TyxFQUFXL3FDLEVBQU9nMkIsVUFDMUM2WCxFQUFXM2xELEVBQUsydEMsUUFBUSxHQUFLNzFCLEVBQU80MUIsZ0JBQWtCNTFCLEVBQU8wMkIsZUFDN0RvWCxFQUFTOXVELEtBQUt3bkIsSUFBSXRlLEVBQUsyeEMsS0FBSyxHQUFJMFAsRUFBb0MsRUFBeEJ2cEMsRUFBTzAyQixnQkFDbkRxWCxFQUFVRCxFQUFTRCxFQUVuQlosRUFBUVksR0FBWUUsRUFBVXhFLEdBQWEsRUFDM0MyRCxFQUFRaGxELEVBQUt3a0QsUUFBUS9PLE9BQU9yM0IsRUFDaEMxZ0IsRUFBUXVpRCxZQUNSdmlELEVBQVEwaUQsYUFBYWpRLEVBQVNvVSxFQUFjVSxjQUFnQm50QyxFQUFPMjJCLGtCQUFtQjhWLEVBQWNXLGdCQUFrQnB0QyxFQUFPNDJCLGlCQUM3SGh4QyxFQUFRd2lELGVBQWVxRSxFQUFjVSxjQUFnQm50QyxFQUFPMjJCLG1CQUM1RC93QyxFQUFReWlELGFBQWEsRUFBSW5nRCxFQUFLekosWUFDOUJtSCxFQUFROGlELEtBQUttRixFQUFVWCxFQUFRLEdBQU1sdEMsRUFBT2cyQixTQUFXaDJCLEVBQU8wMkIsZUFBZ0JxWCxFQUFTL3RDLEVBQU9nMkIsU0FBVyxFQUFJaDJCLEVBQU8wMkIsZ0JBQ3BIOXdDLEVBQVEraUQsWUFDUi9pRCxFQUFRaWpELFNBQ1JqakQsRUFBUWdqRCxPQUVSaGpELEVBQVF1aUQsWUFDUnZpRCxFQUFRK2pELFlBQVkzcEMsRUFBT2cyQixVQUMzQnB3QyxFQUFRMGlELGFBQWFtRSxFQUFjWSxnQkFBa0JydEMsRUFBT3N0QyxXQUM1RDFuRCxFQUFRZ2tELFNBQVNtQixFQUFXa0MsRUFBT0MsRUFBUSxHQUFNbHRDLEVBQU9nMkIsVUFDeERwd0MsRUFBUStpRCxZQUNSL2lELEVBQVFpakQsVUFJWixTQUFTcUYsR0FBcUIxRSxFQUFTdGhELEVBQU04WCxFQUFRcGEsRUFBU20wQyxHQUM1RCxJQUFJMFMsRUFBZ0IvdUQsRUFBTyxHQUFJLENBQzdCeXdELGNBQWUsVUFDZkMsZ0JBQWlCLEtBQ2hCbG1ELEVBQUtxQixNQUFNbWpELFNBQ1ZqRCxFQUFTdmhELEVBQUsyeEMsS0FBSyxHQUNuQmdULEVBQU8za0QsRUFBS2l3QyxPQUFTandDLEVBQUsyeEMsS0FBSyxHQUNuQ2owQyxFQUFRdWlELFlBQ1J2aUQsRUFBUTBpRCxhQUFhalEsRUFBU29VLEVBQWMwQixjQUFlMUIsRUFBYzJCLGtCQUN6RXhvRCxFQUFROGlELEtBQUtjLEVBQVV6UCxFQUFjLEVBQUcwUCxFQUFRMVAsRUFBYThTLEVBQU9wRCxHQUNwRTdqRCxFQUFRK2lELFlBQ1IvaUQsRUFBUWdqRCxPQUdWLFNBQVN5RixHQUFZNVEsRUFBVUUsRUFBUXoxQyxFQUFNOFgsRUFBUXBhLEVBQVNtMEMsRUFBYUUsR0FDekUsSUFBSXdTLEVBQWdCL3VELEVBQU8sR0FBSSxDQUM3QjR3RCxRQUFTLFVBQ1RDLFVBQVcsR0FDWGpCLFVBQVcsV0FDVnBsRCxFQUFLcUIsTUFBTW1qRCxTQUNWcEssRUFBYyxFQUFJcDZDLEVBQUt6SixXQUN2Qit2RCxFQUFvQixFQUFJdG1ELEVBQUt6SixXQUM3Qmd3RCxFQUFhLEVBQUl2bUQsRUFBS3pKLFdBQ3RCaXdELEdBQW9CLEVBQ1AsUUFBYnhtRCxFQUFLYixNQUErQixRQUFiYSxFQUFLYixNQUErQixVQUFiYSxFQUFLYixNQUFpQyxPQUFiYSxFQUFLYixNQUM5RW1sRCxHQUFxQnRrRCxFQUFLd2tELFFBQVEvTyxPQUFPdDNCLEVBQUduZSxFQUFNOFgsRUFBUXBhLEdBRzVEKzNDLEVBQVNqZ0QsRUFBTyxDQUNkMm9CLEVBQUcsRUFDSEMsRUFBRyxHQUNGcTNCLEdBQ0hBLEVBQU9yM0IsR0FBSyxFQUFJcGUsRUFBS3pKLFdBQ3JCLElBQUk4cUQsRUFBWTlMLEVBQVN0NkIsS0FBSSxTQUFTbmpCLEdBQ3BDLE9BQU9zOEMsRUFBWXQ4QyxFQUFLa3ZCLEtBQU1sUCxFQUFPZzJCLGFBRW5DMlksRUFBZXJNLEVBQWNrTSxFQUFvQixFQUFJeHVDLEVBQU8wMkIsZUFBaUIxM0MsS0FBS3duQixJQUFJbGxCLE1BQU0sS0FBTWlvRCxHQUNsR3FGLEVBQWdCLEVBQUk1dUMsRUFBTzAyQixlQUFpQitHLEVBQVN6akQsT0FBU2dtQixFQUFPNjJCLGtCQUdyRThHLEVBQU90M0IsRUFBSXJuQixLQUFLMDRDLElBQUl4dkMsRUFBSzJtRCxrQkFBb0JKLEVBQWFFLEVBQWV6bUQsRUFBSzJkLFFBQ2hGNm9DLEdBQW9CLEdBRWxCRSxFQUFnQmpSLEVBQU9yM0IsRUFBSXBlLEVBQUtpd0MsU0FDbEN3RixFQUFPcjNCLEVBQUlwZSxFQUFLaXdDLE9BQVN5VyxHQUczQmhwRCxFQUFRdWlELFlBQ1J2aUQsRUFBUTBpRCxhQUFhalEsRUFBU29VLEVBQWM2QixTQUFXdHVDLEVBQU8yMkIsa0JBQW1COFYsRUFBYzhCLFdBQWF2dUMsRUFBTzQyQixpQkFDL0c4WCxHQUNGOW9ELEVBQVEyaUQsT0FBTzVLLEVBQU90M0IsRUFBR3MzQixFQUFPcjNCLEVBQUksR0FBS3BlLEVBQUt6SixZQUM5Q21ILEVBQVE0aUQsT0FBTzdLLEVBQU90M0IsRUFBSW9vQyxFQUFZOVEsRUFBT3IzQixFQUFJLEdBQUtwZSxFQUFLekosV0FBYSxFQUFJeUosRUFBS3pKLFlBQ2pGbUgsRUFBUTRpRCxPQUFPN0ssRUFBT3QzQixFQUFJb29DLEVBQVk5USxFQUFPcjNCLEdBQzdDMWdCLEVBQVE0aUQsT0FBTzdLLEVBQU90M0IsRUFBSW9vQyxFQUFhenZELEtBQUs0K0MsTUFBTStRLEdBQWVoUixFQUFPcjNCLEdBQ3hFMWdCLEVBQVE0aUQsT0FBTzdLLEVBQU90M0IsRUFBSW9vQyxFQUFhenZELEtBQUs0K0MsTUFBTStRLEdBQWVoUixFQUFPcjNCLEVBQUlzb0MsR0FDNUVocEQsRUFBUTRpRCxPQUFPN0ssRUFBT3QzQixFQUFJb29DLEVBQVk5USxFQUFPcjNCLEVBQUlzb0MsR0FDakRocEQsRUFBUTRpRCxPQUFPN0ssRUFBT3QzQixFQUFJb29DLEVBQVk5USxFQUFPcjNCLEVBQUksR0FBS3BlLEVBQUt6SixXQUFhLEVBQUl5SixFQUFLekosWUFDakZtSCxFQUFRNGlELE9BQU83SyxFQUFPdDNCLEVBQUdzM0IsRUFBT3IzQixFQUFJLEdBQUtwZSxFQUFLekosY0FFOUNtSCxFQUFRMmlELE9BQU81SyxFQUFPdDNCLEVBQUdzM0IsRUFBT3IzQixFQUFJLEdBQUtwZSxFQUFLekosWUFDOUNtSCxFQUFRNGlELE9BQU83SyxFQUFPdDNCLEVBQUlvb0MsRUFBWTlRLEVBQU9yM0IsRUFBSSxHQUFLcGUsRUFBS3pKLFdBQWEsRUFBSXlKLEVBQUt6SixZQUNqRm1ILEVBQVE0aUQsT0FBTzdLLEVBQU90M0IsRUFBSW9vQyxFQUFZOVEsRUFBT3IzQixHQUM3QzFnQixFQUFRNGlELE9BQU83SyxFQUFPdDNCLEVBQUlvb0MsRUFBYXp2RCxLQUFLNCtDLE1BQU0rUSxHQUFlaFIsRUFBT3IzQixHQUN4RTFnQixFQUFRNGlELE9BQU83SyxFQUFPdDNCLEVBQUlvb0MsRUFBYXp2RCxLQUFLNCtDLE1BQU0rUSxHQUFlaFIsRUFBT3IzQixFQUFJc29DLEdBQzVFaHBELEVBQVE0aUQsT0FBTzdLLEVBQU90M0IsRUFBSW9vQyxFQUFZOVEsRUFBT3IzQixFQUFJc29DLEdBQ2pEaHBELEVBQVE0aUQsT0FBTzdLLEVBQU90M0IsRUFBSW9vQyxFQUFZOVEsRUFBT3IzQixFQUFJLEdBQUtwZSxFQUFLekosV0FBYSxFQUFJeUosRUFBS3pKLFlBQ2pGbUgsRUFBUTRpRCxPQUFPN0ssRUFBT3QzQixFQUFHczNCLEVBQU9yM0IsRUFBSSxHQUFLcGUsRUFBS3pKLGFBR2hEbUgsRUFBUStpRCxZQUNSL2lELEVBQVFnakQsT0FHUm5MLEVBQVM5aUQsU0FBUSxTQUFTcUYsRUFBTTNGLEdBQzlCLEdBQW1CLE9BQWYyRixFQUFLdTVDLE1BQWdCLENBQ3ZCM3pDLEVBQVF1aUQsWUFDUnZpRCxFQUFRMGlELGFBQWF0b0QsRUFBS3U1QyxPQUMxQixJQUFJb00sRUFBU2hJLEVBQU90M0IsRUFBSW9vQyxFQUFhLEVBQUl6dUMsRUFBTzAyQixlQUM1QytTLEVBQVM5TCxFQUFPcjNCLEdBQUt0RyxFQUFPNjJCLGtCQUFvQjcyQixFQUFPZzJCLFVBQVksRUFBSWgyQixFQUFPNjJCLGtCQUFvQng4QyxFQUNwRzJsQixFQUFPMDJCLGVBQWlCLEVBQ3RCZ1ksSUFDRi9JLEVBQVNoSSxFQUFPdDNCLEVBQUlzb0MsRUFBZUYsRUFBYSxFQUFJenVDLEVBQU8wMkIsZ0JBRTdEOXdDLEVBQVFrcEQsU0FBU25KLEVBQVE4RCxFQUFRbkgsRUFBYXRpQyxFQUFPZzJCLFVBQ3JEcHdDLEVBQVEraUQsZ0JBTVpsTCxFQUFTOWlELFNBQVEsU0FBU3FGLEVBQU0zRixHQUM5QixJQUFJc3JELEVBQVNoSSxFQUFPdDNCLEVBQUlvb0MsRUFBYSxFQUFJenVDLEVBQU8wMkIsZUFBaUI0TCxFQUFja00sRUFDM0VFLElBQ0YvSSxFQUFTaEksRUFBT3QzQixFQUFJc29DLEVBQWVGLEVBQWEsRUFBSXp1QyxFQUFPMDJCLGlCQUFrQjRMLEVBQWNrTSxHQUU3RixJQUFJL0UsRUFBUzlMLEVBQU9yM0IsR0FBS3RHLEVBQU82MkIsa0JBQW9CNzJCLEVBQU9nMkIsVUFBWSxFQUFJaDJCLEVBQU82MkIsa0JBQW9CeDhDLEVBQ3BHMmxCLEVBQU8wMkIsZUFDVDl3QyxFQUFRdWlELFlBQ1J2aUQsRUFBUStqRCxZQUFZM3BDLEVBQU9nMkIsVUFDM0Jwd0MsRUFBUTBpRCxhQUFhbUUsRUFBY2EsV0FDbkMxbkQsRUFBUWdrRCxTQUFTNXBELEVBQUtrdkIsS0FBTXkyQixFQUFROEQsRUFBU3pwQyxFQUFPZzJCLFVBQ3BEcHdDLEVBQVEraUQsWUFDUi9pRCxFQUFRaWpELFlBSVosU0FBU2tHLEdBQWUvRixFQUFPOWdELEVBQU04WCxFQUFRcGEsR0FDM0MsSUFBSSsvQyxFQUFTM2xDLEVBQU95MUIsYUFBZXZ0QyxFQUFLaXdDLE9BQVNuNEIsRUFBT3kxQixZQUFjNkcsRUFBWTBNLElBQVUsRUFDNUZwakQsRUFBUW9wRCxPQUNScHBELEVBQVF1aUQsWUFDUnZpRCxFQUFRK2pELFlBQVkzcEMsRUFBT2cyQixVQUMzQnB3QyxFQUFRMGlELGFBQWFwZ0QsRUFBSzQrQyxNQUFNcUMsZ0JBQWtCLFdBQ2xEdmpELEVBQVFtaUQsVUFBVSxFQUFHNy9DLEVBQUtpd0MsUUFDMUJ2eUMsRUFBUWt3QyxRQUFRLEdBQUs5MkMsS0FBS3c3QyxHQUFLLEtBQy9CNTBDLEVBQVFna0QsU0FBU1osRUFBT3JELEVBQVF6OUMsRUFBSzJ0QyxRQUFRLEdBQUssR0FBTTcxQixFQUFPZzJCLFVBQy9EcHdDLEVBQVEraUQsWUFDUi9pRCxFQUFRaWpELFNBQ1JqakQsRUFBUXFwRCxVQUdWLFNBQVNDLEdBQXFCclQsRUFBUTN6QyxFQUFNOFgsRUFBUXBhLEdBQ2xELElBQUlHLEVBQVV0RCxVQUFVekksT0FBUyxRQUFzQmdYLElBQWpCdk8sVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBQzlFMmtELEVBQVMsR0FBRzF0RCxPQUFPd08sRUFBS3l4QyxVQUFVd1YsVUFBVS9ILFFBQzVDcE4sRUFBWTl4QyxFQUFLeXhDLFVBQVVLLFVBQzdCQyxFQUFjRCxFQUFVQyxZQUN4QkYsRUFBY0MsRUFBVUQsWUFDdEJxVixFQUFlMXhELEVBQU8sR0FBSSxDQUM1QjJKLEtBQU0sUUFDTndlLE1BQU9rMEIsRUFBYyxFQUNyQnNWLE1BQU8sQ0FDTGxLLE9BQVEsRUFDUm1LLFVBQVcsWUFFWnBuRCxFQUFLcUIsTUFBTTA3QyxRQUNWN0ksRUFBV2dMLEVBQU9yekMsTUFDbEJzb0MsRUFBVytLLEVBQU9qc0IsUUFDbEJvaUIsRUFBWSxHQTBJaEIsT0F4SUEzM0MsRUFBUW9wRCxPQUNKOW1ELEVBQUsybUQsa0JBQThDLElBQTFCM21ELEVBQUsybUQsbUJBQWdELElBQXRCM21ELEVBQUt1OUMsY0FDL0Q3L0MsRUFBUW1pRCxVQUFVNy9DLEVBQUsybUQsaUJBQWtCLEdBRXZDM21ELEVBQUt3a0QsU0FBV3hrRCxFQUFLd2tELFFBQVFqUCxVQUFZdjFDLEVBQUt3a0QsUUFBUWpQLFNBQVN6akQsUUFBc0IsSUFBWitMLEdBQzNFbW9ELEdBQXFCaG1ELEVBQUt3a0QsUUFBUS9PLE9BQU90M0IsRUFBR25lLEVBQU04WCxFQUFRcGEsRUFBU20wQyxHQUdyRThCLEVBQU9saEQsU0FBUSxTQUFTNDBELEVBQVluSixHQUNsQyxJQUFJbnJELEVBQU9zMEQsRUFBV3QwRCxLQUN0QixPQUFRbTBELEVBQWEvbkQsTUFDbkIsSUFBSyxRQUNILElBQUk0ekMsRUFBU2lMLEVBQWNqckQsRUFBTW1oRCxFQUFVQyxFQUFVcEMsRUFBYUYsRUFBYTd4QyxFQUFNOFgsRUFBUWphLEdBQ3pGeXBELEVBQWdCckosR0FBbUJsckQsRUFBTW1oRCxFQUFVQyxFQUFVcEMsRUFBYUYsRUFBYTd4QyxFQUFNOFgsRUFBUW9tQyxFQUFhdkssRUFBUTkxQyxHQUM5SHczQyxFQUFVcmpELEtBQUtzMUQsR0FDZnZVLEVBQVM4SixFQUFjOUosRUFBUWxCLEVBQWE4QixFQUFPN2hELE9BQVFvc0QsRUFBYXBtQyxFQUFROVgsR0FDaEYreUMsRUFBT3RnRCxTQUFRLFNBQVNxRixFQUFNM0YsR0FDNUIsR0FBYSxPQUFUMkYsRUFBZSxDQUNqQjRGLEVBQVF1aUQsWUFDUnZpRCxFQUFRd2lELGVBQWVwb0QsRUFBS3U1QyxPQUFTZ1csRUFBV2hXLE9BQ2hEM3pDLEVBQVF5aUQsYUFBYSxHQUNyQnppRCxFQUFRMGlELGFBQWF0b0QsRUFBS3U1QyxPQUFTZ1csRUFBV2hXLE9BQzlDLElBQUlvTSxFQUFTM2xELEVBQUtxbUIsRUFBSXJtQixFQUFLNmxCLE1BQVEsRUFDdEIzZCxFQUFLaXdDLE9BQVNuNEMsRUFBS3NtQixFQUFJcGUsRUFBSzJ4QyxLQUFLLEdBQzlDajBDLEVBQVEyaUQsT0FBTzVDLEVBQU8sRUFBRzNsRCxFQUFLc21CLEdBQzlCMWdCLEVBQVE0aUQsT0FBTzdDLEVBQU8zbEQsRUFBSzZsQixNQUFNLEVBQUU3bEIsRUFBS3NtQixHQUN4QzFnQixFQUFRNGlELE9BQU83QyxFQUFPM2xELEVBQUs2bEIsTUFBTSxFQUFFM2QsRUFBS2l3QyxPQUFTandDLEVBQUsyeEMsS0FBSyxJQUMzRGowQyxFQUFRNGlELE9BQU83QyxFQUFPejlDLEVBQUtpd0MsT0FBU2p3QyxFQUFLMnhDLEtBQUssSUFDOUNqMEMsRUFBUTRpRCxPQUFPN0MsRUFBTzNsRCxFQUFLc21CLEdBRTNCMWdCLEVBQVEraUQsWUFDUi9pRCxFQUFRaWpELFNBQ1JqakQsRUFBUWdqRCxXQUdaLE1BQ0YsSUFBSyxRQUVDM04sRUFBU2tMLEdBQW1CbHJELEVBQU1taEQsRUFBVUMsRUFBVXBDLEVBQWFGLEVBQWE3eEMsRUFBTThYLEVBQ3hGb21DLEVBQ0F2SyxFQUFROTFDLEdBQ1Z3M0MsRUFBVXJqRCxLQUFLK2dELEdBQ2ZBLEVBQVNtSyxFQUFtQm5LLEVBQVFsQixFQUFhOEIsRUFBTzdoRCxPQUFRb3NELEVBQWFwbUMsRUFBUTlYLEVBQU0yekMsR0FFM0ZaLEVBQU90Z0QsU0FBUSxTQUFTcUYsRUFBTTNGLEdBQzVCLEdBQWEsT0FBVDJGLEVBQWUsQ0FDakI0RixFQUFRdWlELFlBQ1J2aUQsRUFBUTBpRCxhQUFhdG9ELEVBQUt1NUMsT0FBU2dXLEVBQVdoVyxPQUM5QyxJQUFJb00sRUFBUzNsRCxFQUFLcW1CLEVBQUlybUIsRUFBSzZsQixNQUFRLEVBQUksRUFDbkNzeUIsRUFBU2p3QyxFQUFLaXdDLE9BQVNuNEMsRUFBS3NtQixFQUFJcGUsRUFBSzJ4QyxLQUFLLEdBQzFDME0sRUFBVXIrQyxFQUFLaXdDLE9BQVNuNEMsRUFBS3ltRCxHQUFLditDLEVBQUsyeEMsS0FBSyxHQUM1Q3VNLEVBQWMsSUFDaEJqTyxHQUFVb08sR0FFWjNnRCxFQUFRMmlELE9BQU81QyxFQUFRM2xELEVBQUtzbUIsR0FDNUIxZ0IsRUFBUWtwRCxTQUFTbkosRUFBUTNsRCxFQUFLc21CLEVBQUd0bUIsRUFBSzZsQixNQUFRLEVBQUdzeUIsR0FDakR2eUMsRUFBUStpRCxZQUNSL2lELEVBQVFnakQsV0FHWixNQUNGLElBQUssUUFFQzNOLEVBQVNpTCxFQUFjanJELEVBQU1taEQsRUFBVUMsRUFBVXBDLEVBQWFGLEVBQWE3eEMsRUFBTThYLEVBQVFqYSxHQUM3RnczQyxFQUFVcmpELEtBQUsrZ0QsR0FDZkEsRUFBU2lLLEVBQW1CakssRUFBUWxCLEVBQWE4QixFQUFPN2hELE9BQVFvc0QsRUFBYXBtQyxFQUFROVgsRUFBTWtuRCxFQUFhQyxNQUNyR2xLLFFBQ2dCLEdBQWZpQixFQUNGbkwsRUFBT3RnRCxTQUFRLFNBQVNxRixFQUFNM0YsR0FDNUIsR0FBYSxPQUFUMkYsRUFBZSxDQUVqQjRGLEVBQVF1aUQsWUFDUnZpRCxFQUFRMGlELGFBQWE4RyxFQUFhQyxNQUFNQyxXQUN4QyxJQUFJM0osRUFBUzNsRCxFQUFLcW1CLEVBQUlybUIsRUFBSzZsQixNQUFRLEVBQy9Cc3lCLEVBQVNqd0MsRUFBS2l3QyxPQUFTbjRDLEVBQUtzbUIsRUFBSXBlLEVBQUsyeEMsS0FBSyxHQUM5Q2owQyxFQUFRMmlELE9BQU81QyxFQUFRM2xELEVBQUtzbUIsR0FDNUIxZ0IsRUFBUWtwRCxTQUFTbkosRUFBUTNsRCxFQUFLc21CLEVBQUd0bUIsRUFBSzZsQixNQUFPc3lCLEdBQzdDdnlDLEVBQVEraUQsWUFDUi9pRCxFQUFRZ2pELE9BRUp3RyxFQUFhQyxNQUFNbEssT0FBUyxJQUM5QnYvQyxFQUFRdWlELFlBQ1J2aUQsRUFBUXdpRCxlQUFlbUgsRUFBV2hXLE9BQ2xDM3pDLEVBQVF5aUQsYUFBYStHLEVBQWFDLE1BQU1sSyxPQUFTajlDLEVBQUt6SixZQUN0RG1ILEVBQVEyaUQsT0FBTzVDLEVBQXFDLEdBQTVCeUosRUFBYUMsTUFBTWxLLE9BQWNubEQsRUFBS3NtQixFQUFJNnhCLEdBQ2xFdnlDLEVBQVE0aUQsT0FBTzdDLEVBQXFDLEdBQTVCeUosRUFBYUMsTUFBTWxLLE9BQWNubEQsRUFBS3NtQixFQUFnQyxHQUE1QjhvQyxFQUFhQyxNQUFNbEssUUFDckZ2L0MsRUFBUTRpRCxPQUFPN0MsRUFBUzNsRCxFQUFLNmxCLE1BQW9DLEdBQTVCdXBDLEVBQWFDLE1BQU1sSyxPQUFjbmxELEVBQUtzbUIsRUFBZ0MsR0FBNUI4b0MsRUFBYUMsTUFBTWxLLFFBQ2xHdi9DLEVBQVE0aUQsT0FBTzdDLEVBQVMzbEQsRUFBSzZsQixNQUFvQyxHQUE1QnVwQyxFQUFhQyxNQUFNbEssT0FBY25sRCxFQUFLc21CLEVBQUk2eEIsR0FDL0V2eUMsRUFBUWlqRCxjQUtkNU4sRUFBT3RnRCxTQUFRLFNBQVNxRixFQUFNM0YsR0FDNUIsR0FBYSxPQUFUMkYsRUFBZSxDQUNqQjRGLEVBQVF1aUQsWUFDUnZpRCxFQUFRMGlELGFBQWF0b0QsRUFBS3U1QyxPQUFTZ1csRUFBV2hXLE9BQzlDLElBQUlvTSxFQUFTM2xELEVBQUtxbUIsRUFBSXJtQixFQUFLNmxCLE1BQVEsRUFDL0JzeUIsRUFBU2p3QyxFQUFLaXdDLE9BQVNuNEMsRUFBS3NtQixFQUFJcGUsRUFBSzJ4QyxLQUFLLEdBQzlDajBDLEVBQVEyaUQsT0FBTzVDLEVBQVEzbEQsRUFBS3NtQixHQUM1QjFnQixFQUFRa3BELFNBQVNuSixFQUFRM2xELEVBQUtzbUIsRUFBR3RtQixFQUFLNmxCLE1BQU9zeUIsR0FDN0N2eUMsRUFBUStpRCxZQUNSL2lELEVBQVFnakQsV0FJZCxXQUlpQixJQUFuQjFnRCxFQUFLdW5ELFdBQW1DLElBQVoxcEQsR0FDOUI4MUMsRUFBT2xoRCxTQUFRLFNBQVM0MEQsRUFBWW5KLEdBQ2xDLElBQUluckQsRUFBT3MwRCxFQUFXdDBELEtBQ3RCLE9BQVFtMEQsRUFBYS9uRCxNQUNuQixJQUFLLFFBQ0gsSUFBSTR6QyxFQUFTaUwsRUFBY2pyRCxFQUFNbWhELEVBQVVDLEVBQVVwQyxFQUFhRixFQUFhN3hDLEVBQU04WCxFQUFRamEsR0FDN0ZrMUMsRUFBUzhKLEVBQWM5SixFQUFRbEIsRUFBYThCLEVBQU83aEQsT0FBUW9zRCxFQUFhcG1DLEVBQVE5WCxHQUVoRjhoRCxHQUFjL08sRUFBUXNVLEVBQVl2dkMsRUFBUXBhLEdBQzFDLE1BQ0YsSUFBSyxRQUNDcTFDLEVBQVNrTCxHQUFtQmxyRCxFQUFNbWhELEVBQVVDLEVBQVVwQyxFQUFhRixFQUFhN3hDLEVBQU04WCxFQUN4Rm9tQyxFQUNBdkssRUFBUTkxQyxHQUNWaWtELEdBQWMvTyxFQUFRc1UsRUFBWXZ2QyxFQUFRcGEsR0FDMUMsTUFDRixJQUFLLFFBQ0NxMUMsRUFBU2lMLEVBQWNqckQsRUFBTW1oRCxFQUFVQyxFQUFVcEMsRUFBYUYsRUFBYTd4QyxFQUFNOFgsRUFBUWphLEdBQzdGaWtELEdBQWMvTyxFQUFRc1UsRUFBWXZ2QyxFQUFRcGEsR0FDMUMsVUFLUkEsRUFBUXFwRCxVQUVELENBQ0xoVixZQUFhQSxFQUNic0QsVUFBV0EsRUFDWHhELFlBQWFBLEVBQ2JxQyxTQUFVQSxFQUNWQyxTQUFVQSxHQUlkLFNBQVNxVCxHQUFxQjdULEVBQVE4VCxFQUFVem5ELEVBQU04WCxFQUFRcGEsR0FDNUQsSUFBSUcsRUFBVXRELFVBQVV6SSxPQUFTLFFBQXNCZ1gsSUFBakJ2TyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFDOUVtdEQsRUFBZWx5RCxFQUFPLEdBQUksQ0FDNUI2N0MsTUFBTyxHQUNQc1csUUFBUyxJQUNSM25ELEVBQUtxQixNQUFNdW1ELFFBQ2RGLEVBQWFyVyxNQUFRNzdDLEVBQU8sR0FBSSxDQUM5QnF5RCxPQUFRLFVBQ1IvUixPQUFRLFVBQ1JnUyxTQUFVLFVBQ1Y5UixTQUFVLFdBQ1QwUixFQUFhclcsT0FDaEJxVyxFQUFhQyxRQUFVbnlELEVBQU8sR0FBSSxDQUNoQ2dSLE1BQU0sRUFDTi9TLEtBQU0sR0FDTnMwRCxJQUFLLEdBQ0wxVyxNQUFPdjVCLEVBQU9rMkIsUUFDYjBaLEVBQWFDLFNBQ2hCM25ELEVBQUtxQixNQUFNdW1ELE9BQVNGLEVBRXBCLElBQUl4SSxFQUFTLEdBQUcxdEQsT0FBT3dPLEVBQUt5eEMsVUFBVXdWLFVBQVUvSCxRQUM1Q3BOLEVBQVk5eEMsRUFBS3l4QyxVQUFVSyxVQUM3QkMsRUFBY0QsRUFBVUMsWUFDeEJGLEVBQWNDLEVBQVVELFlBRXRCcUMsRUFBV2dMLEVBQU9yekMsTUFDbEJzb0MsRUFBVytLLEVBQU9qc0IsUUFDbEJvaUIsRUFBWSxHQXdGaEIsT0F0RkEzM0MsRUFBUW9wRCxPQUNKOW1ELEVBQUsybUQsa0JBQThDLElBQTFCM21ELEVBQUsybUQsbUJBQWdELElBQXRCM21ELEVBQUt1OUMsY0FDL0Q3L0MsRUFBUW1pRCxVQUFVNy9DLEVBQUsybUQsaUJBQWtCLEdBR3ZDZSxFQUFhQyxRQUFRbmhELE1BQ3ZCaWhELEVBQVNoMUQsU0FBUSxTQUFTNDBELEVBQVluSixHQUNwQyxJQUFJbnJELEVBQU9zMEQsRUFBV3QwRCxLQUNsQmdnRCxFQUFTaUwsRUFBY2pyRCxFQUFNbWhELEVBQVVDLEVBQVVwQyxFQUFhRixFQUFhN3hDLEVBQU04WCxFQUFRamEsR0FFekZtcUQsRUFBaUI5TyxFQUFZbkcsR0FFakNpVixFQUFldjFELFNBQVEsU0FBU3NnRCxFQUFRNWdELEdBQ3RDdUwsRUFBUXVpRCxZQUNSdmlELEVBQVF3aUQsZUFBZW1ILEVBQVdoVyxPQUNsQzN6QyxFQUFReWlELGFBQWEsR0FDQyxJQUFsQnBOLEVBQU9qaEQsUUFDVDRMLEVBQVEyaUQsT0FBT3ROLEVBQU8sR0FBRzUwQixFQUFHNDBCLEVBQU8sR0FBRzMwQixHQUN0QzFnQixFQUFRNmlELElBQUl4TixFQUFPLEdBQUc1MEIsRUFBRzQwQixFQUFPLEdBQUczMEIsRUFBRyxFQUFHLEVBQUcsRUFBSXRuQixLQUFLdzdDLE1BRXJENTBDLEVBQVEyaUQsT0FBT3ROLEVBQU8sR0FBRzUwQixFQUFHNDBCLEVBQU8sR0FBRzMwQixHQUN0QzIwQixFQUFPdGdELFNBQVEsU0FBU3FGLEVBQU0zRixHQUM1QixHQUFJQSxFQUFRLEVBQUcsQ0FDYixJQUFJODFELEVBQVluVixFQUF5QkMsRUFBUTVnRCxFQUFRLEdBQ3pEdUwsRUFBUXdxRCxjQUFjRCxFQUFVNVUsS0FBS2wxQixFQUFHOHBDLEVBQVU1VSxLQUFLajFCLEVBQUc2cEMsRUFBVTNVLEtBQUtuMUIsRUFBRzhwQyxFQUFVM1UsS0FBS2wxQixFQUN6RnRtQixFQUFLcW1CLEVBQUdybUIsRUFDUHNtQixPQUdQMWdCLEVBQVEyaUQsT0FBT3ROLEVBQU8sR0FBRzUwQixFQUFHNDBCLEVBQU8sR0FBRzMwQixJQUV4QzFnQixFQUFRK2lELFlBQ1IvaUQsRUFBUWlqRCxlQUtkaE4sRUFBT2xoRCxTQUFRLFNBQVM0MEQsRUFBWW5KLEdBQ2xDLElBQUluckQsRUFBT3MwRCxFQUFXdDBELEtBQ2xCZ2dELEVBQVM0SyxFQUFvQjVxRCxFQUFNbWhELEVBQVVDLEVBQVVwQyxFQUFhRixFQUFhN3hDLEVBQU04WCxFQUFRamEsR0FDbkd3M0MsRUFBVXJqRCxLQUFLK2dELEdBQ2YsSUFBSWlWLEVBQWlCOU8sRUFBWW5HLEdBQ2pDaVYsRUFBaUJBLEVBQWUsR0FFaENBLEVBQWV2MUQsU0FBUSxTQUFTc2dELEVBQVE1Z0QsR0FDdEN1TCxFQUFRdWlELFlBRUpsdEQsRUFBS1osR0FBTyxHQUFLWSxFQUFLWixHQUFPLEdBQUssR0FDcEN1TCxFQUFRd2lELGVBQWV3SCxFQUFhclcsTUFBTXdXLFFBQzFDbnFELEVBQVEwaUQsYUFBYXNILEVBQWFyVyxNQUFNeUUsUUFDeENwNEMsRUFBUXlpRCxhQUFhLEVBQUluZ0QsRUFBS3pKLFlBQzlCbUgsRUFBUTJpRCxPQUFPdE4sRUFBTyxHQUFHNTBCLEVBQUc0MEIsRUFBTyxHQUFHMzBCLEdBQ3RDMWdCLEVBQVE0aUQsT0FBT3ZOLEVBQU8sR0FBRzUwQixFQUFHNDBCLEVBQU8sR0FBRzMwQixHQUN0QzFnQixFQUFRNGlELE9BQU92TixFQUFPLEdBQUc1MEIsRUFBSTB6QixFQUFjLEVBQUdrQixFQUFPLEdBQUczMEIsR0FDeEQxZ0IsRUFBUTRpRCxPQUFPdk4sRUFBTyxHQUFHNTBCLEVBQUkwekIsRUFBYyxFQUFHa0IsRUFBTyxHQUFHMzBCLEdBQ3hEMWdCLEVBQVE0aUQsT0FBT3ZOLEVBQU8sR0FBRzUwQixFQUFHNDBCLEVBQU8sR0FBRzMwQixHQUN0QzFnQixFQUFRNGlELE9BQU92TixFQUFPLEdBQUc1MEIsRUFBRzQwQixFQUFPLEdBQUczMEIsR0FDdEMxZ0IsRUFBUTRpRCxPQUFPdk4sRUFBTyxHQUFHNTBCLEVBQUc0MEIsRUFBTyxHQUFHMzBCLEdBQ3RDMWdCLEVBQVE0aUQsT0FBT3ZOLEVBQU8sR0FBRzUwQixFQUFJMHpCLEVBQWMsRUFBR2tCLEVBQU8sR0FBRzMwQixHQUN4RDFnQixFQUFRNGlELE9BQU92TixFQUFPLEdBQUc1MEIsRUFBSTB6QixFQUFjLEVBQUdrQixFQUFPLEdBQUczMEIsR0FDeEQxZ0IsRUFBUTRpRCxPQUFPdk4sRUFBTyxHQUFHNTBCLEVBQUc0MEIsRUFBTyxHQUFHMzBCLEdBQ3RDMWdCLEVBQVEyaUQsT0FBT3ROLEVBQU8sR0FBRzUwQixFQUFHNDBCLEVBQU8sR0FBRzMwQixLQUV0QzFnQixFQUFRd2lELGVBQWV3SCxFQUFhclcsTUFBTXlXLFVBQzFDcHFELEVBQVEwaUQsYUFBYXNILEVBQWFyVyxNQUFNMkUsVUFDeEN0NEMsRUFBUXlpRCxhQUFhLEVBQUluZ0QsRUFBS3pKLFlBQzlCbUgsRUFBUTJpRCxPQUFPdE4sRUFBTyxHQUFHNTBCLEVBQUc0MEIsRUFBTyxHQUFHMzBCLEdBQ3RDMWdCLEVBQVE0aUQsT0FBT3ZOLEVBQU8sR0FBRzUwQixFQUFHNDBCLEVBQU8sR0FBRzMwQixHQUN0QzFnQixFQUFRNGlELE9BQU92TixFQUFPLEdBQUc1MEIsRUFBSTB6QixFQUFjLEVBQUdrQixFQUFPLEdBQUczMEIsR0FDeEQxZ0IsRUFBUTRpRCxPQUFPdk4sRUFBTyxHQUFHNTBCLEVBQUkwekIsRUFBYyxFQUFHa0IsRUFBTyxHQUFHMzBCLEdBQ3hEMWdCLEVBQVE0aUQsT0FBT3ZOLEVBQU8sR0FBRzUwQixFQUFHNDBCLEVBQU8sR0FBRzMwQixHQUN0QzFnQixFQUFRNGlELE9BQU92TixFQUFPLEdBQUc1MEIsRUFBRzQwQixFQUFPLEdBQUczMEIsR0FDdEMxZ0IsRUFBUTRpRCxPQUFPdk4sRUFBTyxHQUFHNTBCLEVBQUc0MEIsRUFBTyxHQUFHMzBCLEdBQ3RDMWdCLEVBQVE0aUQsT0FBT3ZOLEVBQU8sR0FBRzUwQixFQUFJMHpCLEVBQWMsRUFBR2tCLEVBQU8sR0FBRzMwQixHQUN4RDFnQixFQUFRNGlELE9BQU92TixFQUFPLEdBQUc1MEIsRUFBSTB6QixFQUFjLEVBQUdrQixFQUFPLEdBQUczMEIsR0FDeEQxZ0IsRUFBUTRpRCxPQUFPdk4sRUFBTyxHQUFHNTBCLEVBQUc0MEIsRUFBTyxHQUFHMzBCLEdBQ3RDMWdCLEVBQVEyaUQsT0FBT3ROLEVBQU8sR0FBRzUwQixFQUFHNDBCLEVBQU8sR0FBRzMwQixJQUV4QzFnQixFQUFRK2lELFlBQ1IvaUQsRUFBUWdqRCxPQUNSaGpELEVBQVFpakQsZUFJWmpqRCxFQUFRcXBELFVBRUQsQ0FDTGhWLFlBQWFBLEVBQ2JzRCxVQUFXQSxFQUNYeEQsWUFBYUEsRUFDYnFDLFNBQVVBLEVBQ1ZDLFNBQVVBLEdBSWQsU0FBU2dVLEdBQW1CeFUsRUFBUTN6QyxFQUFNOFgsRUFBUXBhLEdBQ2hELElBQUlHLEVBQVV0RCxVQUFVekksT0FBUyxRQUFzQmdYLElBQWpCdk8sVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBQzlFNnRELEVBQWE1eUQsRUFBTyxHQUFHLENBQ3pCMkosS0FBTSxXQUNOa3BELFFBQVMsR0FDVEMsU0FBUyxFQUNUM3FDLE1BQU8sR0FDUDNkLEVBQUtxQixNQUFNc3dDLE1BRVR1TixFQUFTLEdBQUcxdEQsT0FBT3dPLEVBQUt5eEMsVUFBVXdWLFVBQVUvSCxRQUM1Q3BOLEVBQVk5eEMsRUFBS3l4QyxVQUFVSyxVQUM3QkMsRUFBY0QsRUFBVUMsWUFDeEJGLEVBQWNDLEVBQVVELFlBRXRCcUMsRUFBV2dMLEVBQU9yekMsTUFDbEJzb0MsRUFBVytLLEVBQU9qc0IsUUFDbEIweEIsRUFBTzNrRCxFQUFLaXdDLE9BQVNqd0MsRUFBSzJ4QyxLQUFLLEdBQy9CMEQsRUFBWSxHQXdHaEIsT0F0R0EzM0MsRUFBUW9wRCxPQUNKOW1ELEVBQUsybUQsa0JBQThDLElBQTFCM21ELEVBQUsybUQsbUJBQWdELElBQXRCM21ELEVBQUt1OUMsY0FDL0Q3L0MsRUFBUW1pRCxVQUFVNy9DLEVBQUsybUQsaUJBQWtCLEdBRzNDaFQsRUFBT2xoRCxTQUFRLFNBQVM0MEQsRUFBWW5KLEdBQ2xDLElBQUluckQsRUFBT3MwRCxFQUFXdDBELEtBQ2xCZ2dELEVBQVNpTCxFQUFjanJELEVBQU1taEQsRUFBVUMsRUFBVXBDLEVBQWFGLEVBQWE3eEMsRUFBTThYLEVBQVFqYSxHQUM3RnczQyxFQUFVcmpELEtBQUsrZ0QsR0FJZixJQUZBLElBQUlpVixFQUFpQjlPLEVBQVluRyxHQUxjLFdBT3RDbGhELEdBQ1AsSUFBSWtoRCxFQUFTaVYsRUFBZW4yRCxHQU01QixHQUpBNkwsRUFBUXVpRCxZQUNSdmlELEVBQVF3aUQsZUFBZS9QLEVBQVNrWCxFQUFXaFcsTUFBTytXLEVBQVdDLFVBQzdEM3FELEVBQVEwaUQsYUFBYWpRLEVBQVNrWCxFQUFXaFcsTUFBTytXLEVBQVdDLFVBQzNEM3FELEVBQVF5aUQsYUFBYWlJLEVBQVd6cUMsTUFBUTNkLEVBQUt6SixZQUN6Q3c4QyxFQUFPamhELE9BQVMsRUFBRyxDQUNyQixJQUFJeTJELEVBQWF4VixFQUFPLEdBQ3BCeVYsRUFBWXpWLEVBQU9BLEVBQU9qaEQsT0FBUyxHQUV2QzRMLEVBQVEyaUQsT0FBT2tJLEVBQVdwcUMsRUFBR29xQyxFQUFXbnFDLEdBQ2hCLFVBQXBCZ3FDLEVBQVdqcEQsS0FDYjR6QyxFQUFPdGdELFNBQVEsU0FBU3FGLEVBQU0zRixHQUM1QixHQUFJQSxFQUFRLEVBQUcsQ0FDYixJQUFJODFELEVBQVluVixFQUF5QkMsRUFBUTVnRCxFQUFRLEdBQ3pEdUwsRUFBUXdxRCxjQUFjRCxFQUFVNVUsS0FBS2wxQixFQUFHOHBDLEVBQVU1VSxLQUFLajFCLEVBQUc2cEMsRUFBVTNVLEtBQUtuMUIsRUFBRzhwQyxFQUFVM1UsS0FBS2wxQixFQUFFdG1CLEVBQUtxbUIsRUFBR3JtQixFQUFLc21CLE9BSTlHMjBCLEVBQU90Z0QsU0FBUSxTQUFTcUYsRUFBTTNGLEdBQ3hCQSxFQUFRLEdBQ1Z1TCxFQUFRNGlELE9BQU94b0QsRUFBS3FtQixFQUFHcm1CLEVBQUtzbUIsTUFLbEMxZ0IsRUFBUTRpRCxPQUFPa0ksRUFBVXJxQyxFQUFHd21DLEdBQzVCam5ELEVBQVE0aUQsT0FBT2lJLEVBQVdwcUMsRUFBR3dtQyxHQUM3QmpuRCxFQUFRNGlELE9BQU9pSSxFQUFXcHFDLEVBQUdvcUMsRUFBV25xQyxPQUNuQyxDQUNMLElBQUl0bUIsRUFBT2k3QyxFQUFPLEdBQ2xCcjFDLEVBQVEyaUQsT0FBT3ZvRCxFQUFLcW1CLEVBQUkwekIsRUFBYyxFQUFHLzVDLEVBQUtzbUIsR0FDOUMxZ0IsRUFBUTRpRCxPQUFPeG9ELEVBQUtxbUIsRUFBSTB6QixFQUFjLEVBQUcvNUMsRUFBS3NtQixHQUM5QzFnQixFQUFRNGlELE9BQU94b0QsRUFBS3FtQixFQUFJMHpCLEVBQWMsRUFBRzhTLEdBQ3pDam5ELEVBQVE0aUQsT0FBT3hvRCxFQUFLcW1CLEVBQUkwekIsRUFBYyxFQUFHOFMsR0FDekNqbkQsRUFBUTJpRCxPQUFPdm9ELEVBQUtxbUIsRUFBSTB6QixFQUFjLEVBQUcvNUMsRUFBS3NtQixHQUVoRDFnQixFQUFRK2lELFlBQ1IvaUQsRUFBUWdqRCxPQUdKMEgsRUFBV0UsVUFDYjVxRCxFQUFRdWlELFlBQ1J2aUQsRUFBUXdpRCxlQUFlbUgsRUFBV2hXLE9BQ2xDM3pDLEVBQVF5aUQsYUFBYWlJLEVBQVd6cUMsTUFBUTNkLEVBQUt6SixZQUN2QixJQUFsQnc4QyxFQUFPamhELFFBQ1Q0TCxFQUFRMmlELE9BQU90TixFQUFPLEdBQUc1MEIsRUFBRzQwQixFQUFPLEdBQUczMEIsR0FDdEMxZ0IsRUFBUTZpRCxJQUFJeE4sRUFBTyxHQUFHNTBCLEVBQUc0MEIsRUFBTyxHQUFHMzBCLEVBQUcsRUFBRyxFQUFHLEVBQUl0bkIsS0FBS3c3QyxNQUVyRDUwQyxFQUFRMmlELE9BQU90TixFQUFPLEdBQUc1MEIsRUFBRzQwQixFQUFPLEdBQUczMEIsR0FDZCxVQUFwQmdxQyxFQUFXanBELEtBQ2I0ekMsRUFBT3RnRCxTQUFRLFNBQVNxRixFQUFNM0YsR0FDNUIsR0FBSUEsRUFBUSxFQUFHLENBQ2IsSUFBSTgxRCxFQUFZblYsRUFBeUJDLEVBQVE1Z0QsRUFBUSxHQUN6RHVMLEVBQVF3cUQsY0FBY0QsRUFBVTVVLEtBQUtsMUIsRUFBRzhwQyxFQUFVNVUsS0FBS2oxQixFQUFHNnBDLEVBQVUzVSxLQUFLbjFCLEVBQUc4cEMsRUFBVTNVLEtBQUtsMUIsRUFBRXRtQixFQUFLcW1CLEVBQUVybUIsRUFBS3NtQixPQUk3RzIwQixFQUFPdGdELFNBQVEsU0FBU3FGLEVBQU0zRixHQUN4QkEsRUFBUSxHQUNWdUwsRUFBUTRpRCxPQUFPeG9ELEVBQUtxbUIsRUFBR3JtQixFQUFLc21CLE1BSWxDMWdCLEVBQVEyaUQsT0FBT3ROLEVBQU8sR0FBRzUwQixFQUFHNDBCLEVBQU8sR0FBRzMwQixJQUV4QzFnQixFQUFRK2lELFlBQ1IvaUQsRUFBUWlqRCxXQXBFSDl1RCxFQUFJLEVBQUdBLEVBQUltMkQsRUFBZWwyRCxPQUFRRCxJQUFNLEVBQXhDQSxHQXlFVCxJQUE0QixJQUF4Qm1PLEVBQUsrdEMsZUFBMEIsQ0FDakMsSUFBSWlTLEVBQVFsb0MsRUFBT2kyQixlQUFlbVEsRUFBY3BtQyxFQUFPaTJCLGVBQWVqOEMsUUFDdEVpdUQsR0FBZWhOLEVBQVFzVSxFQUFXaFcsTUFBTzJPLEVBQU90aUQsRUFBU3NDLFFBS3RDLElBQW5CQSxFQUFLdW5ELFdBQW1DLElBQVoxcEQsR0FDOUI4MUMsRUFBT2xoRCxTQUFRLFNBQVM0MEQsRUFBWW5KLEdBQ2xDLElBQUluckQsRUFBT3MwRCxFQUFXdDBELEtBQ2xCZ2dELEVBQVNpTCxFQUFjanJELEVBQU1taEQsRUFBVUMsRUFBVXBDLEVBQWFGLEVBQWE3eEMsRUFBTThYLEVBQVFqYSxHQUM3RmlrRCxHQUFjL08sRUFBUXNVLEVBQVl2dkMsRUFBUXBhLE1BSTlDQSxFQUFRcXBELFVBRUQsQ0FDTGhWLFlBQWFBLEVBQ2JzRCxVQUFXQSxFQUNYeEQsWUFBYUEsRUFDYnFDLFNBQVVBLEVBQ1ZDLFNBQVVBLEdBSWQsU0FBU3NVLEdBQW1COVUsRUFBUTN6QyxFQUFNOFgsRUFBUXBhLEdBQ2hELElBQUlHLEVBQVV0RCxVQUFVekksT0FBUyxRQUFzQmdYLElBQWpCdk8sVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBQzlFbXVELEVBQWExb0QsRUFBS3FCLE1BQU1zbkQsTUFBUSxDQUNsQ3hwRCxLQUFNLFdBQ053ZSxNQUFPLEdBRVQrcUMsRUFBV3ZwRCxLQUFPdXBELEVBQVd2cEQsS0FBT3VwRCxFQUFXdnBELEtBQU8sV0FDdER1cEQsRUFBVy9xQyxNQUFRK3FDLEVBQVcvcUMsTUFBUStxQyxFQUFXL3FDLE1BQVEsRUFFekQsSUFBSXVoQyxFQUFTLEdBQUcxdEQsT0FBT3dPLEVBQUt5eEMsVUFBVXdWLFVBQVUvSCxRQUM1Q3BOLEVBQVk5eEMsRUFBS3l4QyxVQUFVSyxVQUM3QkMsRUFBY0QsRUFBVUMsWUFDeEJGLEVBQWNDLEVBQVVELFlBRXRCcUMsRUFBV2dMLEVBQU9yekMsTUFDbEJzb0MsRUFBVytLLEVBQU9qc0IsUUFDbEJvaUIsRUFBWSxHQTREaEIsT0ExREEzM0MsRUFBUW9wRCxPQUNKOW1ELEVBQUsybUQsa0JBQThDLElBQTFCM21ELEVBQUsybUQsbUJBQWdELElBQXRCM21ELEVBQUt1OUMsY0FDL0Q3L0MsRUFBUW1pRCxVQUFVNy9DLEVBQUsybUQsaUJBQWtCLEdBRzNDaFQsRUFBT2xoRCxTQUFRLFNBQVM0MEQsRUFBWW5KLEdBQ2xDLElBQUluckQsRUFBT3MwRCxFQUFXdDBELEtBQ2xCZ2dELEVBQVNpTCxFQUFjanJELEVBQU1taEQsRUFBVUMsRUFBVXBDLEVBQWFGLEVBQWE3eEMsRUFBTThYLEVBQVFqYSxHQUM3RnczQyxFQUFVcmpELEtBQUsrZ0QsR0FDZixJQUFJaVYsRUFBaUI5TyxFQUFZbkcsR0FpQ2pDLEdBL0JBaVYsRUFBZXYxRCxTQUFRLFNBQVNzZ0QsRUFBUTVnRCxHQUN0Q3VMLEVBQVF1aUQsWUFDUnZpRCxFQUFRd2lELGVBQWVtSCxFQUFXaFcsT0FDbEMzekMsRUFBUXlpRCxhQUFhdUksRUFBVy9xQyxNQUFRM2QsRUFBS3pKLFlBQ3ZCLElBQWxCdzhDLEVBQU9qaEQsUUFDVDRMLEVBQVEyaUQsT0FBT3ROLEVBQU8sR0FBRzUwQixFQUFHNDBCLEVBQU8sR0FBRzMwQixHQUN0QzFnQixFQUFRNmlELElBQUl4TixFQUFPLEdBQUc1MEIsRUFBRzQwQixFQUFPLEdBQUczMEIsRUFBRyxFQUFHLEVBQUcsRUFBSXRuQixLQUFLdzdDLE1BRXJENTBDLEVBQVEyaUQsT0FBT3ROLEVBQU8sR0FBRzUwQixFQUFHNDBCLEVBQU8sR0FBRzMwQixHQUNkLFVBQXBCc3FDLEVBQVd2cEQsS0FDYjR6QyxFQUFPdGdELFNBQVEsU0FBU3FGLEVBQU0zRixHQUM1QixHQUFJQSxFQUFRLEVBQUcsQ0FDYixJQUFJODFELEVBQVluVixFQUF5QkMsRUFBUTVnRCxFQUFRLEdBQ3pEdUwsRUFBUXdxRCxjQUFjRCxFQUFVNVUsS0FBS2wxQixFQUFHOHBDLEVBQVU1VSxLQUFLajFCLEVBQUc2cEMsRUFBVTNVLEtBQUtuMUIsRUFBRzhwQyxFQUFVM1UsS0FBS2wxQixFQUN6RnRtQixFQUFLcW1CLEVBQUdybUIsRUFDUHNtQixPQUlQMjBCLEVBQU90Z0QsU0FBUSxTQUFTcUYsRUFBTTNGLEdBQ3hCQSxFQUFRLEdBQ1Z1TCxFQUFRNGlELE9BQU94b0QsRUFBS3FtQixFQUFHcm1CLEVBQUtzbUIsTUFJbEMxZ0IsRUFBUTJpRCxPQUFPdE4sRUFBTyxHQUFHNTBCLEVBQUc0MEIsRUFBTyxHQUFHMzBCLElBRXhDMWdCLEVBQVEraUQsWUFDUi9pRCxFQUFRaWpELGFBR2tCLElBQXhCM2dELEVBQUsrdEMsZUFBMEIsQ0FDakMsSUFBSWlTLEVBQVFsb0MsRUFBT2kyQixlQUFlbVEsRUFBY3BtQyxFQUFPaTJCLGVBQWVqOEMsUUFDdEVpdUQsR0FBZWhOLEVBQVFzVSxFQUFXaFcsTUFBTzJPLEVBQU90aUQsRUFBU3NDLFFBSXRDLElBQW5CQSxFQUFLdW5ELFdBQW1DLElBQVoxcEQsR0FDOUI4MUMsRUFBT2xoRCxTQUFRLFNBQVM0MEQsRUFBWW5KLEdBQ2xDLElBQUluckQsRUFBT3MwRCxFQUFXdDBELEtBQ2xCZ2dELEVBQVNpTCxFQUFjanJELEVBQU1taEQsRUFBVUMsRUFBVXBDLEVBQWFGLEVBQWE3eEMsRUFBTThYLEVBQVFqYSxHQUM3RmlrRCxHQUFjL08sRUFBUXNVLEVBQVl2dkMsRUFBUXBhLE1BSTlDQSxFQUFRcXBELFVBRUQsQ0FDTGhWLFlBQWFBLEVBQ2JzRCxVQUFXQSxFQUNYeEQsWUFBYUEsRUFDYnFDLFNBQVVBLEVBQ1ZDLFNBQVVBLEdBSWQsU0FBU3lVLEdBQWtCalYsRUFBUTN6QyxFQUFNOFgsRUFBUXBhLEdBQy9DLElBQUlHLEVBQVV0RCxVQUFVekksT0FBUyxRQUFzQmdYLElBQWpCdk8sVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBQzlFMmtELEVBQVMsR0FBRzF0RCxPQUFPd08sRUFBS3l4QyxVQUFVd1YsVUFBVS9ILFFBQzVDcE4sRUFBWTl4QyxFQUFLeXhDLFVBQVVLLFVBQzdCQyxFQUFjRCxFQUFVQyxZQUN4QkYsRUFBY0MsRUFBVUQsWUFFdEJxQyxFQUFXZ0wsRUFBT3J6QyxNQUNsQnNvQyxFQUFXK0ssRUFBT2pzQixRQUNsQjB4QixFQUFPM2tELEVBQUtpd0MsT0FBU2p3QyxFQUFLMnhDLEtBQUssR0FDL0IwRCxFQUFZLEdBRVp3VCxFQUFjLEVBQ2RDLEVBQWUsRUFrSm5CLEdBakpBblYsRUFBT2xoRCxTQUFRLFNBQVM0MEQsRUFBWW5KLEdBQ1gsVUFBbkJtSixFQUFXbG9ELE9BQ2IycEQsR0FBZ0IsTUFHcEJwckQsRUFBUW9wRCxPQUNKOW1ELEVBQUsybUQsa0JBQThDLElBQTFCM21ELEVBQUsybUQsbUJBQWdELElBQXRCM21ELEVBQUt1OUMsY0FDL0Q3L0MsRUFBUW1pRCxVQUFVNy9DLEVBQUsybUQsaUJBQWtCLEdBRzNDaFQsRUFBT2xoRCxTQUFRLFNBQVM0MEQsRUFBWW5KLEdBQ2xDLElBQUluckQsRUFBT3MwRCxFQUFXdDBELEtBQ2xCZ2dELEVBQVNpTCxFQUFjanJELEVBQU1taEQsRUFBVUMsRUFBVXBDLEVBQWFGLEVBQWE3eEMsRUFBTThYLEVBQVFqYSxHQWlDN0YsR0FoQ0F3M0MsRUFBVXJqRCxLQUFLK2dELEdBR1EsVUFBbkJzVSxFQUFXbG9ELE9BQ2I0ekMsRUFBUzhKLEVBQWM5SixFQUFRbEIsRUFBYWlYLEVBQWNELEVBQWEvd0MsRUFBUTlYLEdBQy9FK3lDLEVBQU90Z0QsU0FBUSxTQUFTcUYsRUFBTTNGLEdBQzVCLEdBQWEsT0FBVDJGLEVBQWUsQ0FDakI0RixFQUFRdWlELFlBQ1J2aUQsRUFBUXdpRCxlQUFlcG9ELEVBQUt1NUMsT0FBU2dXLEVBQVdoVyxPQUNoRDN6QyxFQUFReWlELGFBQWEsR0FDckJ6aUQsRUFBUTBpRCxhQUFhdG9ELEVBQUt1NUMsT0FBU2dXLEVBQVdoVyxPQUM5QyxJQUFJb00sRUFBUzNsRCxFQUFLcW1CLEVBQUlybUIsRUFBSzZsQixNQUFRLEVBQ3RCM2QsRUFBS2l3QyxPQUFTbjRDLEVBQUtzbUIsRUFBSXBlLEVBQUsyeEMsS0FBSyxHQUM5Q2owQyxFQUFRMmlELE9BQU81QyxFQUFRM2xELEVBQUtzbUIsR0FDNUIxZ0IsRUFBUTJpRCxPQUFPNUMsRUFBTyxFQUFHM2xELEVBQUtzbUIsR0FDOUIxZ0IsRUFBUTRpRCxPQUFPN0MsRUFBTzNsRCxFQUFLNmxCLE1BQU0sRUFBRTdsQixFQUFLc21CLEdBQ3hDMWdCLEVBQVE0aUQsT0FBTzdDLEVBQU8zbEQsRUFBSzZsQixNQUFNLEVBQUUzZCxFQUFLaXdDLE9BQVNqd0MsRUFBSzJ4QyxLQUFLLElBQzNEajBDLEVBQVE0aUQsT0FBTzdDLEVBQU96OUMsRUFBS2l3QyxPQUFTandDLEVBQUsyeEMsS0FBSyxJQUM5Q2owQyxFQUFRNGlELE9BQU83QyxFQUFPM2xELEVBQUtzbUIsR0FFM0IxZ0IsRUFBUStpRCxZQUNSL2lELEVBQVFpakQsU0FDUmpqRCxFQUFRZ2pELE9BQ1JoakQsRUFBUStpRCxZQUNSL2lELEVBQVFnakQsV0FHWm1JLEdBQWUsR0FLTSxRQUFuQnhCLEVBQVdsb0QsS0FFYixJQURBLElBQUk2b0QsRUFBaUI5TyxFQUFZbkcsR0FESixXQUVwQmxoRCxHQUNQLElBQUlraEQsRUFBU2lWLEVBQWVuMkQsR0FNNUIsR0FKQTZMLEVBQVF1aUQsWUFDUnZpRCxFQUFRd2lELGVBQWVtSCxFQUFXaFcsT0FDbEMzekMsRUFBUTBpRCxhQUFhalEsRUFBU2tYLEVBQVdoVyxNQUFPLEtBQ2hEM3pDLEVBQVF5aUQsYUFBYSxFQUFJbmdELEVBQUt6SixZQUMxQnc4QyxFQUFPamhELE9BQVMsRUFBRyxDQUNqQnkyRCxFQUFheFYsRUFBTyxHQUN4QixJQUFJeVYsRUFBWXpWLEVBQU9BLEVBQU9qaEQsT0FBUyxHQUN2QzRMLEVBQVEyaUQsT0FBT2tJLEVBQVdwcUMsRUFBR29xQyxFQUFXbnFDLEdBQ2YsVUFBckJpcEMsRUFBVzNxQixNQUNicVcsRUFBT3RnRCxTQUFRLFNBQVNxRixFQUFNM0YsR0FDNUIsR0FBSUEsRUFBUSxFQUFHLENBQ2IsSUFBSTgxRCxFQUFZblYsRUFBeUJDLEVBQVE1Z0QsRUFBUSxHQUN6RHVMLEVBQVF3cUQsY0FBY0QsRUFBVTVVLEtBQUtsMUIsRUFBRzhwQyxFQUFVNVUsS0FBS2oxQixFQUFHNnBDLEVBQVUzVSxLQUFLbjFCLEVBQUc4cEMsRUFBVTNVLEtBQUtsMUIsRUFBR3RtQixFQUFLcW1CLEVBQUdybUIsRUFBS3NtQixPQUkvRzIwQixFQUFPdGdELFNBQVEsU0FBU3FGLEVBQU0zRixHQUN4QkEsRUFBUSxHQUNWdUwsRUFBUTRpRCxPQUFPeG9ELEVBQUtxbUIsRUFBR3JtQixFQUFLc21CLE1BSWxDMWdCLEVBQVE0aUQsT0FBT2tJLEVBQVVycUMsRUFBR3dtQyxHQUM1QmpuRCxFQUFRNGlELE9BQU9pSSxFQUFXcHFDLEVBQUd3bUMsR0FDN0JqbkQsRUFBUTRpRCxPQUFPaUksRUFBV3BxQyxFQUFHb3FDLEVBQVducUMsT0FDbkMsQ0FDTCxJQUFJdG1CLEVBQU9pN0MsRUFBTyxHQUNsQnIxQyxFQUFRMmlELE9BQU92b0QsRUFBS3FtQixFQUFJMHpCLEVBQWMsRUFBRy81QyxFQUFLc21CLEdBQzlDMWdCLEVBQVE0aUQsT0FBT3hvRCxFQUFLcW1CLEVBQUkwekIsRUFBYyxFQUFHLzVDLEVBQUtzbUIsR0FDOUMxZ0IsRUFBUTRpRCxPQUFPeG9ELEVBQUtxbUIsRUFBSTB6QixFQUFjLEVBQUc4UyxHQUN6Q2puRCxFQUFRNGlELE9BQU94b0QsRUFBS3FtQixFQUFJMHpCLEVBQWMsRUFBRzhTLEdBQ3pDam5ELEVBQVEyaUQsT0FBT3ZvRCxFQUFLcW1CLEVBQUkwekIsRUFBYyxFQUFHLzVDLEVBQUtzbUIsR0FFaEQxZ0IsRUFBUStpRCxZQUNSL2lELEVBQVFnakQsUUFyQ0Q3dUQsRUFBSSxFQUFHQSxFQUFJbTJELEVBQWVsMkQsT0FBUUQsSUFBSyxDQUFDLElBUXpDMDJELEVBUndDLEVBQXZDMTJELEdBMENYLEdBQXVCLFFBQW5CdzFELEVBQVdsb0QsS0FBZ0IsQ0FDN0IsSUFBSTZvRCxFQUFpQjlPLEVBQVluRyxHQUNqQ2lWLEVBQWV2MUQsU0FBUSxTQUFTc2dELEVBQVE1Z0QsR0FDdEN1TCxFQUFRdWlELFlBQ1J2aUQsRUFBUXdpRCxlQUFlbUgsRUFBV2hXLE9BQ2xDM3pDLEVBQVF5aUQsYUFBYSxFQUFJbmdELEVBQUt6SixZQUNSLElBQWxCdzhDLEVBQU9qaEQsUUFDVDRMLEVBQVEyaUQsT0FBT3ROLEVBQU8sR0FBRzUwQixFQUFHNDBCLEVBQU8sR0FBRzMwQixHQUN0QzFnQixFQUFRNmlELElBQUl4TixFQUFPLEdBQUc1MEIsRUFBRzQwQixFQUFPLEdBQUczMEIsRUFBRyxFQUFHLEVBQUcsRUFBSXRuQixLQUFLdzdDLE1BRXJENTBDLEVBQVEyaUQsT0FBT3ROLEVBQU8sR0FBRzUwQixFQUFHNDBCLEVBQU8sR0FBRzMwQixHQUNkLFNBQXBCaXBDLEVBQVczcUIsTUFDYnFXLEVBQU90Z0QsU0FBUSxTQUFTcUYsRUFBTTNGLEdBQzVCLEdBQUlBLEVBQVEsRUFBRyxDQUNiLElBQUk4MUQsRUFBWW5WLEVBQXlCQyxFQUFRNWdELEVBQVEsR0FDekR1TCxFQUFRd3FELGNBQWNELEVBQVU1VSxLQUFLbDFCLEVBQUc4cEMsRUFBVTVVLEtBQUtqMUIsRUFBRzZwQyxFQUFVM1UsS0FBS24xQixFQUFHOHBDLEVBQVUzVSxLQUFLbDFCLEVBQ3pGdG1CLEVBQUtxbUIsRUFDTHJtQixFQUFLc21CLE9BSVgyMEIsRUFBT3RnRCxTQUFRLFNBQVNxRixFQUFNM0YsR0FDeEJBLEVBQVEsR0FDVnVMLEVBQVE0aUQsT0FBT3hvRCxFQUFLcW1CLEVBQUdybUIsRUFBS3NtQixNQUlsQzFnQixFQUFRMmlELE9BQU90TixFQUFPLEdBQUc1MEIsRUFBRzQwQixFQUFPLEdBQUczMEIsSUFFeEMxZ0IsRUFBUStpRCxZQUNSL2lELEVBQVFpakQsWUFxQlosR0FoQnVCLFNBQW5CMEcsRUFBV2xvRCxNQUNiNHpDLEVBQU90Z0QsU0FBUSxTQUFTczJELEVBQVM1MkQsR0FDM0I0MkQsSUFDRnJyRCxFQUFRdWlELFlBQ1J2aUQsRUFBUTBpRCxhQUFhaUgsRUFBV2hXLE9BQ2hDM3pDLEVBQVF3aUQsZUFBZSxXQUN2QnhpRCxFQUFReWlELGFBQWEsRUFBSW5nRCxFQUFLekosWUFDOUJtSCxFQUFRMmlELE9BQU8wSSxFQUFRNXFDLEVBQUksSUFBTW5lLEVBQUt6SixXQUFZd3lELEVBQVEzcUMsR0FDMUQxZ0IsRUFBUTZpRCxJQUFJd0ksRUFBUTVxQyxFQUFHNHFDLEVBQVEzcUMsRUFBRyxFQUFJcGUsRUFBS3pKLFdBQVksRUFBRyxFQUFJTyxLQUFLdzdDLElBQ25FNTBDLEVBQVEraUQsWUFDUi9pRCxFQUFRZ2pELE9BQ1JoakQsRUFBUWlqRCxhQUthLEdBQXZCMEcsRUFBVzJCLFVBQXdDLFdBQXBCM0IsRUFBV2xvRCxLQUFtQixDQUMvRCxJQUFJNmdELEVBQVFsb0MsRUFBT2kyQixlQUFlbVEsRUFBY3BtQyxFQUFPaTJCLGVBQWVqOEMsUUFDdEVpdUQsR0FBZWhOLEVBQVFzVSxFQUFXaFcsTUFBTzJPLEVBQU90aUQsRUFBU3NDLFFBR3RDLElBQW5CQSxFQUFLdW5ELFdBQW1DLElBQVoxcEQsRUFBZSxDQUN6Q2dyRCxFQUFjLEVBQ2xCbFYsRUFBT2xoRCxTQUFRLFNBQVM0MEQsRUFBWW5KLEdBQ2xDLElBQUluckQsRUFBT3MwRCxFQUFXdDBELEtBQ2xCZ2dELEVBQVNpTCxFQUFjanJELEVBQU1taEQsRUFBVUMsRUFBVXBDLEVBQWFGLEVBQWE3eEMsRUFBTThYLEVBQVFqYSxHQUNyRSxXQUFwQndwRCxFQUFXbG9ELEtBQ2IyaUQsR0FBYy9PLEVBQVFzVSxFQUFZdnZDLEVBQVFwYSxJQUUxQ3ExQyxFQUFTOEosRUFBYzlKLEVBQVFsQixFQUFhaVgsRUFBY0QsRUFBYS93QyxFQUFROVgsR0FDL0U4aEQsR0FBYy9PLEVBQVFzVSxFQUFZdnZDLEVBQVFwYSxHQUMxQ21yRCxHQUFlLE1BUXJCLE9BRkFuckQsRUFBUXFwRCxVQUVELENBQ0xoVixZQUFhQSxFQUNic0QsVUFBV0EsRUFDWHhELFlBQWFBLEVBQ2JxQyxTQUFVQSxFQUNWQyxTQUFVQSxHQUlkLFNBQVM4VSxHQUFrQmpwRCxFQUFNOFgsRUFBUXBhLEVBQVNHLEVBQVNnMEMsRUFBYUUsR0FDdEUsSUFBSXdTLEVBQWdCdmtELEVBQUtxQixNQUFNbWpELFNBQVcsR0FDdENELEVBQWMyRSxnQkFBa0JscEQsRUFBS3drRCxTQUF1QixJQUFaM21ELElBQStCLFFBQWJtQyxFQUFLYixNQUErQixRQUFiYSxFQUFLYixNQUErQixVQUFiYSxFQUFLYixNQUFpQyxVQUFiYSxFQUFLYixNQUFpQyxPQUFiYSxFQUFLYixPQUN6SzJtRCxHQUEwQjlsRCxFQUFNOFgsRUFBUXBhLEVBQVNtMEMsRUFBYUUsR0FFaEVyMEMsRUFBUW9wRCxPQUNKOW1ELEVBQUsybUQsa0JBQThDLElBQTFCM21ELEVBQUsybUQsbUJBQWdELElBQXRCM21ELEVBQUt1OUMsY0FDL0Q3L0MsRUFBUW1pRCxVQUFVNy9DLEVBQUsybUQsaUJBQWtCLEdBRXZDM21ELEVBQUt3a0QsU0FBV3hrRCxFQUFLd2tELFFBQVFqUCxVQUFZdjFDLEVBQUt3a0QsUUFBUWpQLFNBQVN6akQsUUFBc0IsSUFBWitMLEdBQzNFc29ELEdBQVlubUQsRUFBS3drRCxRQUFRalAsU0FBVXYxQyxFQUFLd2tELFFBQVEvTyxPQUFRejFDLEVBQU04WCxFQUFRcGEsRUFBU20wQyxFQUFhRSxHQUU5RnIwQyxFQUFRcXBELFVBSVYsU0FBU29DLEdBQVU3VCxFQUFZdDFDLEVBQU04WCxFQUFRcGEsR0FFM0MsSUFBSW8wQyxFQUFZOXhDLEVBQUt5eEMsVUFBVUssVUFDN0JDLEVBQWNELEVBQVVDLFlBQ3hCMEwsRUFBUzNMLEVBQVUyTCxPQUNuQkMsRUFBTzVMLEVBQVU0TCxLQUNqQjdMLEVBQWNDLEVBQVVELFlBQ3RCK0UsRUFBWSxTQUNDLFFBQWI1MkMsRUFBS2IsTUFBNkIsUUFBYmEsRUFBS2IsT0FDNUJ5M0MsRUFBWTUyQyxFQUFLMjJDLE1BQU1DLGFBRXpCLElBQUkySyxFQUFTdmhELEVBQUtpd0MsT0FBU2p3QyxFQUFLMnhDLEtBQUssR0FDakNnVCxFQUFPM2tELEVBQUsyeEMsS0FBSyxHQUdyQixHQUFJM3hDLEVBQUt1OUMsY0FBZ0J2OUMsRUFBSzIyQyxNQUFNeVMsV0FBWSxDQUM5QyxJQUFJQyxFQUFVcnBELEVBQUtpd0MsT0FBU2p3QyxFQUFLMnhDLEtBQUssR0FBSzc1QixFQUFPeTFCLFlBQzlDK2IsRUFBb0I1TCxFQUFPRCxFQUMzQjhMLEVBQW1CMVgsR0FBZUUsRUFBWWpnRCxPQUFTLEdBQ3ZEMDNELEVBQWNGLEVBQW9CQSxFQUFvQkMsRUFDdERFLEVBQWEsRUFDYnpwRCxFQUFLMm1ELG1CQUNQOEMsR0FBY3pwRCxFQUFLMm1ELGlCQUFvQjJDLEVBQXFCQyxHQUU5RDdyRCxFQUFRdWlELFlBQ1J2aUQsRUFBUWdzRCxXQUFXLFNBQ25CaHNELEVBQVF5aUQsYUFBYSxFQUFJbmdELEVBQUt6SixZQUM5Qm1ILEVBQVF3aUQsZUFBZWxnRCxFQUFLMjJDLE1BQU1nVCx1QkFBeUIsV0FDM0Rqc0QsRUFBUTJpRCxPQUFPNUMsRUFBUTRMLEdBQ3ZCM3JELEVBQVE0aUQsT0FBTzVDLEVBQU0yTCxHQUNyQjNyRCxFQUFRaWpELFNBQ1JqakQsRUFBUStpRCxZQUNSL2lELEVBQVF1aUQsWUFDUnZpRCxFQUFRZ3NELFdBQVcsU0FDbkJoc0QsRUFBUXlpRCxhQUFhLEVBQUluZ0QsRUFBS3pKLFlBQzlCbUgsRUFBUXdpRCxlQUFlbGdELEVBQUsyMkMsTUFBTWlULGFBQWUsV0FDakRsc0QsRUFBUTJpRCxPQUFPNUMsRUFBU2dNLEVBQVlKLEdBQ3BDM3JELEVBQVE0aUQsT0FBTzdDLEVBQVNnTSxFQUFhRCxFQUFhSCxHQUNsRDNyRCxFQUFRaWpELFNBQ1JqakQsRUFBUStpRCxZQUNSL2lELEVBQVFnc0QsV0FBVyxRQTJDckIsR0F4Q0Foc0QsRUFBUW9wRCxPQUVKOW1ELEVBQUsybUQsa0JBQThDLElBQTFCM21ELEVBQUsybUQsa0JBQ2hDanBELEVBQVFtaUQsVUFBVTcvQyxFQUFLMm1ELGlCQUFrQixJQUlaLElBQTNCM21ELEVBQUsyMkMsTUFBTWtULGNBQ2Juc0QsRUFBUXdpRCxlQUFlbGdELEVBQUsyMkMsTUFBTWtPLFdBQWEsV0FDL0NubkQsRUFBUWdzRCxXQUFXLFFBQ25CaHNELEVBQVF5aUQsYUFBYSxFQUFJbmdELEVBQUt6SixZQUNILFFBQXZCeUosRUFBSzIyQyxNQUFNOE4sVUFDYi9tRCxFQUFRa25ELFlBQVksQ0FBQzVrRCxFQUFLMjJDLE1BQU0rTixXQUFZMWtELEVBQUsyMkMsTUFBTStOLGFBRWpDLGdCQUFwQjFrRCxFQUFLMjJDLE1BQU14M0MsS0FDYjR5QyxFQUFZdC9DLFNBQVEsU0FBU3FGLEVBQU0zRixHQUM3QkEsRUFBUSxJQUNWdUwsRUFBUXVpRCxZQUNSdmlELEVBQVEyaUQsT0FBT3ZvRCxFQUFPKzVDLEVBQWMsRUFBRzBQLEdBQ3ZDN2pELEVBQVE0aUQsT0FBT3hvRCxFQUFPKzVDLEVBQWMsRUFBRzBQLEVBQVMsRUFBSXZoRCxFQUFLekosWUFDekRtSCxFQUFRK2lELFlBQ1IvaUQsRUFBUWlqRCxjQUlaM2dELEVBQUsyMkMsTUFBTW1ULFNBQVc5cEQsRUFBSzIyQyxNQUFNbVQsVUFBWSxFQUM3Qy9YLEVBQVl0L0MsU0FBUSxTQUFTcUYsRUFBTTNGLEdBQzdCQSxFQUFRNk4sRUFBSzIyQyxNQUFNbVQsVUFBWSxJQUNqQ3BzRCxFQUFRdWlELFlBQ1J2aUQsRUFBUTJpRCxPQUFPdm9ELEVBQU15cEQsR0FDckI3akQsRUFBUTRpRCxPQUFPeG9ELEVBQU02c0QsR0FDckJqbkQsRUFBUWlqRCxjQUlkampELEVBQVFrbkQsWUFBWSxNQUtNLElBQXhCNWtELEVBQUsyMkMsTUFBTWw1QixTQUFtQixDQUVmemQsRUFBSzJkLE1BQVEzZCxFQUFLMnRDLFFBQVEsR0FBSzN0QyxFQUFLMnRDLFFBQVEsR0FBSzcxQixFQUFPdTFCLFdBQWF2MUIsRUFBTzQxQixnQkFBN0YsSUFFSXFjLEVBQXFCelUsRUFBV3hqRCxPQUVoQ2tPLEVBQUsyMkMsTUFBTXFULGFBR1hELEVBREUvcEQsRUFBSzIyQyxNQUFNNkcsVUFDUTFtRCxLQUFLKzVDLEtBQUt5RSxFQUFXeGpELE9BQVNrTyxFQUFLMjJDLE1BQU02RyxVQUFZeDlDLEVBQUsyMkMsTUFBTXFULFlBRWhFaHFELEVBQUsyMkMsTUFBTXFULFdBRWxDRCxHQUFzQixHQU94QixJQUpBLElBQUlFLEVBQVFuekQsS0FBSys1QyxLQUFLeUUsRUFBV3hqRCxPQUFTaTRELEdBRXRDRyxFQUFnQixHQUNoQkMsRUFBVzdVLEVBQVd4akQsT0FDakJELEVBQUksRUFBR0EsRUFBSXM0RCxFQUFVdDRELElBQ3hCQSxFQUFJbzRELElBQVUsRUFDaEJDLEVBQWNsNEQsS0FBSyxJQUVuQms0RCxFQUFjbDRELEtBQUtzakQsRUFBV3pqRCxJQUdsQ3E0RCxFQUFjQyxFQUFXLEdBQUs3VSxFQUFXNlUsRUFBVyxHQUVwRCxJQUFJQyxFQUFnQnBxRCxFQUFLMjJDLE1BQU03SSxVQUFZaDJCLEVBQU9nMkIsU0FDbEIsSUFBNUJoMkIsRUFBT3V5QyxpQkFDVEgsRUFBY3ozRCxTQUFRLFNBQVNxRixFQUFNM0YsR0FDbkMsSUFBSXNqRCxHQUFXckIsRUFBWXQ4QyxFQUFNc3lELEdBQWlCLEVBQ2hDLFVBQWZ4VCxJQUNEbkIsR0FBUTVELEVBQWMsR0FFeEJuMEMsRUFBUXVpRCxZQUNSdmlELEVBQVErakQsWUFBWTJJLEdBQ3BCMXNELEVBQVEwaUQsYUFBYXBnRCxFQUFLMjJDLE1BQU15TyxXQUFhLFdBQzdDMW5ELEVBQVFna0QsU0FBUzVwRCxFQUFNaTZDLEVBQVk1L0MsR0FBU3NqRCxFQUFROEwsRUFBUzZJLEdBQWlCdHlDLEVBQU95MUIsWUFBYzZjLEdBQWlCLEdBQ3BIMXNELEVBQVEraUQsWUFDUi9pRCxFQUFRaWpELFlBSVZ1SixFQUFjejNELFNBQVEsU0FBU3FGLEVBQU0zRixHQUNuQ3VMLEVBQVFvcEQsT0FDUnBwRCxFQUFRdWlELFlBQ1J2aUQsRUFBUStqRCxZQUFZMkksR0FDcEIxc0QsRUFBUTBpRCxhQUFhcGdELEVBQUsyMkMsTUFBTXlPLFdBQWEsV0FDN0MsSUFBSS9ELEVBQVlqTixFQUFZdDhDLEdBQ3hCMjlDLEdBQVc0TCxFQUNHLFVBQWZ6SyxJQUNEbkIsR0FBUTVELEVBQWMsR0FFeEIsSUFBSXlZLEVBQXNCL1gsRUFBbUJSLEVBQVk1L0MsR0FBUzAvQyxFQUFjLEVBQUcwUCxFQUFTNkksRUFBZ0IsRUFBSSxFQUFHcHFELEVBQUtpd0MsUUFDdEgwQyxFQUFTMlgsRUFBb0IzWCxPQUM3QkUsRUFBU3lYLEVBQW9CelgsT0FFL0JuMUMsRUFBUWt3QyxRQUFRLEVBQUk5MUIsRUFBT3V5QyxrQkFDM0Izc0QsRUFBUW1pRCxVQUFVbE4sRUFBUUUsR0FDMUJuMUMsRUFBUWdrRCxTQUFTNXBELEVBQU1pNkMsRUFBWTUvQyxHQUFTc2pELEVBQVE4TCxFQUFTNkksRUFBZ0IsR0FDN0Uxc0QsRUFBUStpRCxZQUNSL2lELEVBQVFpakQsU0FDUmpqRCxFQUFRcXBELGFBSWRycEQsRUFBUXFwRCxVQUlWLFNBQVN3RCxHQUFjalYsRUFBWXQxQyxFQUFNOFgsRUFBUXBhLEdBQy9DLElBQStCLElBQTNCc0MsRUFBSzQrQyxNQUFNaUwsWUFBZixDQVlBLElBVEEsSUFBSXhNLEVBQWVyOUMsRUFBS2l3QyxPQUFTandDLEVBQUsyeEMsS0FBSyxHQUFLM3hDLEVBQUsyeEMsS0FBSyxHQUN0REUsRUFBY3dMLEVBQWV2bEMsRUFBT3cxQixXQUNwQ21RLEVBQVN6OUMsRUFBSzJ4QyxLQUFLLEdBQ25CSSxFQUFjL3hDLEVBQUt5eEMsVUFBVUssVUFBVUMsWUFDekN5WSxFQUFtQnhxRCxFQUFLeXhDLFVBQVVLLFVBQVVELFlBQzFDNFksRUFBYUQsR0FBb0J6WSxFQUFZamdELE9BQVMsR0FDdEQ0ckQsRUFBT0QsRUFBU2dOLEVBRWhCMVgsRUFBUyxHQUNKbGhELEVBQUksRUFBR0EsRUFBSWltQixFQUFPdzFCLFdBQWEsRUFBR3o3QyxJQUN6Q2toRCxFQUFPL2dELEtBQUtnTyxFQUFLaXdDLE9BQVNqd0MsRUFBSzJ4QyxLQUFLLEdBQUtFLEVBQWNoZ0QsR0FHekQ2TCxFQUFRb3BELE9BQ0o5bUQsRUFBSzJtRCxrQkFBOEMsSUFBMUIzbUQsRUFBSzJtRCxrQkFDaENqcEQsRUFBUW1pRCxVQUFVNy9DLEVBQUsybUQsaUJBQWtCLEdBR2hCLFFBQXZCM21ELEVBQUs0K0MsTUFBTTZGLFVBQ2IvbUQsRUFBUWtuRCxZQUFZLENBQUM1a0QsRUFBSzQrQyxNQUFNOEYsV0FBWTFrRCxFQUFLNCtDLE1BQU04RixhQUV6RGhuRCxFQUFRd2lELGVBQWVsZ0QsRUFBSzQrQyxNQUFNaUcsV0FBYSxXQUMvQ25uRCxFQUFReWlELGFBQWEsRUFBSW5nRCxFQUFLekosWUFDOUJ3OEMsRUFBT3RnRCxTQUFRLFNBQVNxRixFQUFNM0YsR0FDNUJ1TCxFQUFRdWlELFlBQ1J2aUQsRUFBUTJpRCxPQUFPNUMsRUFBUTNsRCxHQUN2QjRGLEVBQVE0aUQsT0FBTzVDLEVBQU01bEQsR0FDckI0RixFQUFRaWpELFlBRVZqakQsRUFBUWtuRCxZQUFZLElBRXBCbG5ELEVBQVFxcEQsV0FHVixTQUFTMkQsR0FBVS9XLEVBQVEzekMsRUFBTThYLEVBQVFwYSxHQUN2QyxJQUE0QixJQUF4QnNDLEVBQUs0K0MsTUFBTW5oQyxTQUFmLENBR0EsSUFBSTJoQyxFQUFlcC9DLEVBQUt5eEMsVUFBVXdWLFVBQVU3SCxhQUN4Qy9CLEVBQWVyOUMsRUFBS2l3QyxPQUFTandDLEVBQUsyeEMsS0FBSyxHQUFLM3hDLEVBQUsyeEMsS0FBSyxHQUN0REUsRUFBYy82QyxLQUFLQyxNQUFNc21ELEVBQWV2bEMsRUFBT3cxQixZQUMvQ21RLEVBQVN6OUMsRUFBSzJ4QyxLQUFLLEdBQ25CK0wsRUFBTzE5QyxFQUFLMmQsTUFBUTNkLEVBQUsyeEMsS0FBSyxHQUM5QmdULEVBQU8za0QsRUFBS2l3QyxPQUFTandDLEVBQUsyeEMsS0FBSyxHQUMvQmdaLEVBQVdoRyxFQUFPN3NDLEVBQU95MUIsWUFDekJ2dEMsRUFBSzIyQyxNQUFNeVMsYUFDYnVCLEdBQVksRUFBSTNxRCxFQUFLekosWUFHdkJtSCxFQUFRdWlELFlBQ1J2aUQsRUFBUTBpRCxhQUFhcGdELEVBQUs0cUQsWUFBYyxXQUNwQzVxRCxFQUFLMm1ELGlCQUFtQixHQUMxQmpwRCxFQUFRa3BELFNBQVMsRUFBRyxFQUFHbkosRUFBUWtOLEdBRVQsR0FBckIzcUQsRUFBS3U5QyxjQUNONy9DLEVBQVFrcEQsU0FBU2xKLEVBQU0sRUFBRzE5QyxFQUFLMmQsTUFBT2d0QyxHQUV4Q2p0RCxFQUFRK2lELFlBQ1IvaUQsRUFBUWlqRCxTQUdSLElBREEsSUFBSTVOLEVBQVMsR0FDSmxoRCxFQUFJLEVBQUdBLEdBQUtpbUIsRUFBT3cxQixXQUFZejdDLElBQ3RDa2hELEVBQU8vZ0QsS0FBS2dPLEVBQUsyeEMsS0FBSyxHQUFLRSxFQUFjaGdELEdBRzNDLElBQUlzdEQsRUFBZ0JuL0MsRUFBSzQrQyxNQUFNOVEsVUFBWWgyQixFQUFPZzJCLFNBQ2xEc1IsRUFBYTNzRCxTQUFRLFNBQVNxRixFQUFNM0YsR0FDbEMsSUFBSXl3RCxFQUFNN1AsRUFBTzVnRCxHQUFTNGdELEVBQU81Z0QsR0FBU3d5RCxFQUMxQ2puRCxFQUFRdWlELFlBQ1J2aUQsRUFBUStqRCxZQUFZdEMsR0FDcEJ6aEQsRUFBUTBpRCxhQUFhcGdELEVBQUs0K0MsTUFBTXdHLFdBQWEsV0FDN0MxbkQsRUFBUWdrRCxTQUFTdGpELE9BQU90RyxHQUFPa0ksRUFBSzJ4QyxLQUFLLEdBQUs3NUIsRUFBT3UxQixXQUFZdVYsRUFBTXpELEVBQWdCLEdBQ3ZGemhELEVBQVEraUQsWUFDUi9pRCxFQUFRaWpELFlBR04zZ0QsRUFBSzQrQyxNQUFNa0MsT0FDYitGLEdBQWU3bUQsRUFBSzQrQyxNQUFNa0MsTUFBTzlnRCxFQUFNOFgsRUFBUXBhLElBSW5ELFNBQVNtdEQsR0FBV2xYLEVBQVEzekMsRUFBTThYLEVBQVFwYSxFQUFTK3pDLEdBQ2pELElBQXlCLElBQXJCenhDLEVBQUt5NUMsT0FBT2p6QyxLQUFoQixDQUdBLElBQUl1d0MsRUFBYXRGLEVBQVVzRixXQUN2QitDLEVBQWEvQyxFQUFXaEUsT0FDeEIrWCxFQUFhL1QsRUFBV3BGLEtBQ3hCaEUsRUFBVTN0QyxFQUFLeTVDLE9BQU85TCxRQUN0QkcsRUFBVzl0QyxFQUFLeTVDLE9BQU8zTCxTQUN2QjZMLEVBQWEsR0FBSzM1QyxFQUFLekosV0FDdkJxakQsRUFBYSxFQUFJNTVDLEVBQUt6SixXQUN0QjRqRCxFQUFVbjZDLEVBQUt5NUMsT0FBT1UsUUFDdEJOLEVBQWEvaUQsS0FBS3duQixJQUFJdGUsRUFBS3k1QyxPQUFPSSxXQUFhNzVDLEVBQUt6SixXQUFZdTNDLEdBR3BFcHdDLEVBQVF1aUQsWUFDUnZpRCxFQUFReWlELGFBQWFuZ0QsRUFBS3k1QyxPQUFPc1IsYUFDakNydEQsRUFBUXdpRCxlQUFlbGdELEVBQUt5NUMsT0FBT3VSLGFBQ25DdHRELEVBQVEwaUQsYUFBYXBnRCxFQUFLeTVDLE9BQU93UixpQkFDakN2dEQsRUFBUTJpRCxPQUFPeUssRUFBV25xQyxNQUFNeEMsRUFBRzJzQyxFQUFXbnFDLE1BQU12QyxHQUNwRDFnQixFQUFROGlELEtBQUtzSyxFQUFXbnFDLE1BQU14QyxFQUFHMnNDLEVBQVducUMsTUFBTXZDLEVBQUcwc0MsRUFBV250QyxNQUFPbXRDLEVBQVc3YSxRQUNsRnZ5QyxFQUFRK2lELFlBQ1IvaUQsRUFBUWdqRCxPQUNSaGpELEVBQVFpakQsU0FFUjdHLEVBQVdybkQsU0FBUSxTQUFTeTRELEVBQVVDLEdBQ3BDLElBQUl4dEMsRUFBUSxFQUNSc3lCLEVBQVMsRUFDYnR5QixFQUFRbzVCLEVBQVd3QyxTQUFTNFIsR0FDNUJsYixFQUFTOEcsRUFBV3lDLFVBQVUyUixHQUM5QixJQUFJMU4sRUFBUyxFQUNUOEQsRUFBUyxFQUNlLE9BQXhCdmhELEVBQUt5NUMsT0FBTzk4QixVQUE2QyxVQUF4QjNjLEVBQUt5NUMsT0FBTzk4QixVQUMvQzhnQyxFQUFTcU4sRUFBV25xQyxNQUFNeEMsR0FBSzJzQyxFQUFXbnRDLE1BQVFBLEdBQVMsRUFDM0Q0akMsRUFBU3VKLEVBQVducUMsTUFBTXZDLEVBQUl1dkIsRUFBVXdkLEVBQVl0UixJQUdsRGw4QixFQURlLEdBQWJ3dEMsRUFDTSxFQUVBcFUsRUFBV3dDLFNBQVM0UixFQUFZLEdBRTFDMU4sRUFBU3FOLEVBQVducUMsTUFBTXhDLEVBQUl3dkIsRUFBVWh3QixFQUN4QzRqQyxFQUFTdUosRUFBV25xQyxNQUFNdkMsRUFBSXV2QixHQUFXbWQsRUFBVzdhLE9BQVNBLEdBQVUsR0FHekV2eUMsRUFBUStqRCxZQUFZM3BDLEVBQU9nMkIsVUFDM0IsSUFBSyxJQUFJajhDLEVBQUksRUFBR0EsRUFBSXE1RCxFQUFTcDVELE9BQVFELElBQUssQ0FDeEMsSUFBSWlHLEVBQU9vekQsRUFBU3I1RCxHQVNwQixPQVJBaUcsRUFBSzY1QyxLQUFPLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FDdEI3NUMsRUFBSzY1QyxLQUFLLEdBQUs4TCxFQUNmM2xELEVBQUs2NUMsS0FBSyxHQUFLNFAsRUFDZnpwRCxFQUFLNjVDLEtBQUssR0FBSzRQLEVBQVMxSCxFQUN4Qm44QyxFQUFRdWlELFlBQ1J2aUQsRUFBUXlpRCxhQUFhLEVBQUluZ0QsRUFBS3pKLFlBQzlCbUgsRUFBUXdpRCxlQUFlcG9ELEVBQUswTyxLQUFPMU8sRUFBS3U1QyxNQUFRcnhDLEVBQUt5NUMsT0FBTzJSLGFBQzVEMXRELEVBQVEwaUQsYUFBYXRvRCxFQUFLME8sS0FBTzFPLEVBQUt1NUMsTUFBUXJ4QyxFQUFLeTVDLE9BQU8yUixhQUNsRHR6RCxFQUFLKzdDLGFBQ1gsSUFBSyxPQUNIbjJDLEVBQVEyaUQsT0FBTzVDLEVBQVE4RCxFQUFTLEdBQU0xSCxFQUFhLEVBQUk3NUMsRUFBS3pKLFlBQzVEbUgsRUFBUWtwRCxTQUFTbkosRUFBUThELEVBQVMsR0FBTTFILEVBQWEsRUFBSTc1QyxFQUFLekosV0FBWSxHQUFLeUosRUFBS3pKLFdBQVksRUFBSXlKLEVBQUt6SixZQUN6RyxNQUNGLElBQUssV0FDSG1ILEVBQVEyaUQsT0FBTzVDLEVBQVMsSUFBTXo5QyxFQUFLekosV0FBWWdyRCxFQUFTLEdBQU0xSCxFQUFhLEVBQUk3NUMsRUFBS3pKLFlBQ3BGbUgsRUFBUTRpRCxPQUFPN0MsRUFBUyxJQUFNejlDLEVBQUt6SixXQUFZZ3JELEVBQVMsR0FBTTFILEVBQWEsRUFBSTc1QyxFQUFLekosWUFDcEZtSCxFQUFRNGlELE9BQU83QyxFQUFTLEtBQU96OUMsRUFBS3pKLFdBQVlnckQsRUFBUyxHQUFNMUgsRUFBYSxFQUFJNzVDLEVBQUt6SixZQUNyRm1ILEVBQVE0aUQsT0FBTzdDLEVBQVMsSUFBTXo5QyxFQUFLekosV0FBWWdyRCxFQUFTLEdBQU0xSCxFQUFhLEVBQUk3NUMsRUFBS3pKLFlBQ3BGLE1BQ0YsSUFBSyxVQUNIbUgsRUFBUTJpRCxPQUFPNUMsRUFBUyxJQUFNejlDLEVBQUt6SixXQUFZZ3JELEVBQVMsR0FBTTFILEVBQWEsRUFBSTc1QyxFQUFLekosWUFDcEZtSCxFQUFRNGlELE9BQU83QyxFQUFTLElBQU16OUMsRUFBS3pKLFdBQVlnckQsRUFBUyxHQUFNMUgsR0FDOURuOEMsRUFBUTRpRCxPQUFPN0MsRUFBUyxJQUFNejlDLEVBQUt6SixXQUFZZ3JELEVBQVMsR0FBTTFILEVBQWEsRUFBSTc1QyxFQUFLekosWUFDcEZtSCxFQUFRNGlELE9BQU83QyxFQUFTLEtBQU96OUMsRUFBS3pKLFdBQVlnckQsRUFBUyxHQUFNMUgsR0FDL0RuOEMsRUFBUTRpRCxPQUFPN0MsRUFBUyxJQUFNejlDLEVBQUt6SixXQUFZZ3JELEVBQVMsR0FBTTFILEVBQWEsRUFBSTc1QyxFQUFLekosWUFDcEYsTUFDRixJQUFLLFNBQ0htSCxFQUFRMmlELE9BQU81QyxFQUFTLElBQU16OUMsRUFBS3pKLFdBQVlnckQsRUFBUyxHQUFNMUgsR0FDOURuOEMsRUFBUTZpRCxJQUFJOUMsRUFBUyxJQUFNejlDLEVBQUt6SixXQUFZZ3JELEVBQVMsR0FBTTFILEVBQVksRUFBSTc1QyxFQUFLekosV0FBWSxFQUFHLEVBQUlPLEtBQUt3N0MsSUFDeEcsTUFDRixJQUFLLE9BQ0g1MEMsRUFBUTJpRCxPQUFPNUMsRUFBUThELEVBQVMsR0FBTTFILEVBQWEsRUFBSTc1QyxFQUFLekosWUFDNURtSCxFQUFRa3BELFNBQVNuSixFQUFROEQsRUFBUyxHQUFNMUgsRUFBYSxFQUFJNzVDLEVBQUt6SixXQUFZLEdBQUt5SixFQUFLekosV0FBWSxHQUFLeUosRUFBS3pKLFlBQzFHLE1BQ0YsUUFDRW1ILEVBQVEyaUQsT0FBTzVDLEVBQVE4RCxFQUFTLEdBQU0xSCxFQUFhLEVBQUk3NUMsRUFBS3pKLFlBQzVEbUgsRUFBUWtwRCxTQUFTbkosRUFBUThELEVBQVMsR0FBTTFILEVBQWEsRUFBSTc1QyxFQUFLekosV0FBWSxHQUFLeUosRUFBS3pKLFdBQVksR0FBS3lKLEVBQUt6SixZQUU5R21ILEVBQVEraUQsWUFDUi9pRCxFQUFRZ2pELE9BQ1JoakQsRUFBUWlqRCxTQUVSbEQsR0FBVTlELEVBQWFDLEVBQ3ZCLElBQUl5UixFQUFZLEdBQU14UixFQUFhLEdBQU0vTCxFQUFXLEVBQ3BEcHdDLEVBQVF1aUQsWUFDUnZpRCxFQUFRK2pELFlBQVkzVCxHQUNwQnB3QyxFQUFRMGlELGFBQWF0b0QsRUFBSzBPLEtBQU94RyxFQUFLeTVDLE9BQU8yTCxVQUFZcGxELEVBQUt5NUMsT0FBTzJSLGFBQ3JFMXRELEVBQVFna0QsU0FBUzVwRCxFQUFLckUsS0FBTWdxRCxFQUFROEQsRUFBUzhKLEdBQzdDM3RELEVBQVEraUQsWUFDUi9pRCxFQUFRaWpELFNBQ29CLE9BQXhCM2dELEVBQUt5NUMsT0FBTzk4QixVQUE2QyxVQUF4QjNjLEVBQUt5NUMsT0FBTzk4QixVQUMvQzhnQyxHQUFVckosRUFBWXQ4QyxFQUFLckUsS0FBTXE2QyxHQUFZcU0sRUFDN0NyaUQsRUFBSzY1QyxLQUFLLEdBQUs4TCxJQUVmM2xELEVBQUs2NUMsS0FBSyxHQUFLOEwsRUFBU3JKLEVBQVl0OEMsRUFBS3JFLEtBQU1xNkMsR0FBWXFNLEVBQzNEc0QsR0FBVTlELEVBQWFDLEVBQ3ZCMkgsR0FBVTFILFFBTWxCLFNBQVN5UixHQUFrQjNYLEVBQVEzekMsRUFBTThYLEVBQVFwYSxHQUMvQyxJQUFJRyxFQUFVdEQsVUFBVXpJLE9BQVMsUUFBc0JnWCxJQUFqQnZPLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxFQUM5RWd4RCxFQUFZLzFELEVBQU8sR0FBSSxDQUN6QmcyRCxjQUFlLEdBQ2ZDLGFBQWMsR0FBS3pyRCxFQUFLekosV0FDeEJtMUQsWUFBYSxFQUNiQyxXQUFZLEdBQUszckQsRUFBS3pKLFdBQ3RCcTFELFVBQVcsRUFDWDNPLFFBQU8sRUFDUDhOLFlBQVksRUFDWkMsWUFBWSxXQUNYaHJELEVBQUtxQixNQUFNd3FELEtBQ1YxSixFQUFpQixDQUNuQmhrQyxFQUFHbmUsRUFBSzJ4QyxLQUFLLElBQU0zeEMsRUFBSzJkLE1BQVEzZCxFQUFLMnhDLEtBQUssR0FBSzN4QyxFQUFLMnhDLEtBQUssSUFBTSxFQUMvRHZ6QixFQUFHcGUsRUFBSzJ4QyxLQUFLLElBQU0zeEMsRUFBS2l3QyxPQUFTandDLEVBQUsyeEMsS0FBSyxHQUFLM3hDLEVBQUsyeEMsS0FBSyxJQUFNLEdBRWhDLEdBQTlCNzVCLEVBQU9tMkIsc0JBQ1RuMkIsRUFBT20yQixvQkFBc0JzZCxFQUFVRSxjQUd6QyxJQUFJblUsRUFBU3hnRCxLQUFLeW5CLEtBQUt2ZSxFQUFLMmQsTUFBUTNkLEVBQUsyeEMsS0FBSyxHQUFLM3hDLEVBQUsyeEMsS0FBSyxJQUFNLEVBQUk3NUIsRUFBT20yQixvQkFBc0JuMkIsRUFBT28yQixvQkFBc0JwMkIsRUFBT2cwQyxvQkFBcUI5ckQsRUFBS2l3QyxPQUFTandDLEVBQUsyeEMsS0FBSyxHQUFLM3hDLEVBQUsyeEMsS0FBSyxJQUFNLEVBQUk3NUIsRUFBT20yQixvQkFBc0JuMkIsRUFBT28yQixxQkFFbFB5RixFQUFTNEgsRUFBaUI1SCxFQUFRMkQsRUFBUXo1QyxHQUUxQyxJQUFJNHRELEVBQWVGLEVBQVVFLGFBaUM3QixHQS9CQTlYLEVBQVNBLEVBQU8xNEIsS0FBSSxTQUFTb3NDLEdBRTNCLE9BREFBLEVBQVd0TyxTQUFZd1MsRUFBVUcsWUFBZTUwRCxLQUFLdzdDLEdBQUssSUFDbkQrVSxLQUVUMVQsRUFBT2xoRCxTQUFRLFNBQVM0MEQsRUFBWW5KLEdBQzlCbCtDLEVBQUt3a0QsU0FDSHhrRCxFQUFLd2tELFFBQVFyeUQsT0FBUytyRCxJQUN4QnhnRCxFQUFRdWlELFlBQ1J2aUQsRUFBUTBpRCxhQUFhalEsRUFBU2tYLEVBQVdoVyxNQUFPcnhDLEVBQUtxQixNQUFNd3FELElBQUlMLGVBQWlCLEtBQ2hGOXRELEVBQVEyaUQsT0FBTzhCLEVBQWVoa0MsRUFBR2drQyxFQUFlL2pDLEdBQ2hEMWdCLEVBQVE2aUQsSUFBSTRCLEVBQWVoa0MsRUFBR2drQyxFQUFlL2pDLEVBQUdpcEMsRUFBVzdMLFNBQVdpUSxFQUFjcEUsRUFBV3RPLFFBQzdGc08sRUFBV3RPLFFBQVUsRUFDckJzTyxFQUFXck8sYUFBZWxpRCxLQUFLdzdDLElBQ2pDNTBDLEVBQVEraUQsWUFDUi9pRCxFQUFRZ2pELFFBR1poakQsRUFBUXVpRCxZQUNSdmlELEVBQVF5aUQsYUFBYW9MLEVBQVVSLFlBQWMvcUQsRUFBS3pKLFlBQ2xEbUgsRUFBUXF1RCxTQUFXLFFBQ25CcnVELEVBQVF3aUQsZUFBZXFMLEVBQVVQLGFBQ2pDdHRELEVBQVEwaUQsYUFBYWlILEVBQVdoVyxPQUNoQzN6QyxFQUFRMmlELE9BQU84QixFQUFlaGtDLEVBQUdna0MsRUFBZS9qQyxHQUNoRDFnQixFQUFRNmlELElBQUk0QixFQUFlaGtDLEVBQUdna0MsRUFBZS9qQyxFQUFHaXBDLEVBQVc3TCxTQUFVNkwsRUFBV3RPLFFBQVNzTyxFQUFXdE8sUUFBVSxFQUFJc08sRUFBV3JPLGFBQWVsaUQsS0FBS3c3QyxJQUNqSjUwQyxFQUFRK2lELFlBQ1IvaUQsRUFBUWdqRCxPQUNnQixHQUFwQjZLLEVBQVV0TyxRQUNadi9DLEVBQVFpakQsWUFJTSxTQUFkM2dELEVBQUtiLEtBQWlCLENBQ3hCLElBQUk2c0QsRUFBeUIsR0FBVDFVLEVBQ29CLGtCQUE3QnQzQyxFQUFLcUIsTUFBTXdxRCxJQUFJRCxXQUEwQjVyRCxFQUFLcUIsTUFBTXdxRCxJQUFJRCxVQUFZLElBQzdFSSxFQUFnQmwxRCxLQUFLd25CLElBQUksRUFBR2c1QixFQUFTdDNDLEVBQUtxQixNQUFNd3FELElBQUlELFlBRXREbHVELEVBQVF1aUQsWUFDUnZpRCxFQUFRMGlELGFBQWFwZ0QsRUFBSzRxRCxZQUFjLFdBQ3hDbHRELEVBQVEyaUQsT0FBTzhCLEVBQWVoa0MsRUFBR2drQyxFQUFlL2pDLEdBQ2hEMWdCLEVBQVE2aUQsSUFBSTRCLEVBQWVoa0MsRUFBR2drQyxFQUFlL2pDLEVBQUc0dEMsRUFBZSxFQUFHLEVBQUlsMUQsS0FBS3c3QyxJQUMzRTUwQyxFQUFRK2lELFlBQ1IvaUQsRUFBUWdqRCxPQUdWLElBQXVCLElBQW5CMWdELEVBQUt1bkQsV0FBbUMsSUFBWjFwRCxFQUFlLENBRTdDLElBREEsSUFBSXF2QixHQUFRLEVBQ0hyN0IsRUFBSSxFQUFHK0YsRUFBTSs3QyxFQUFPN2hELE9BQVFELEVBQUkrRixFQUFLL0YsSUFDNUMsR0FBSThoRCxFQUFPOWhELEdBQUdrQixLQUFPLEVBQUcsQ0FDdEJtNkIsR0FBUSxFQUNSLE1BSUFBLEdBQ0ZnMkIsR0FBWXZQLEVBQVEzekMsRUFBTThYLEVBQVFwYSxFQUFTNDVDLEVBQVE2SyxHQVF2RCxPQUpnQixJQUFadGtELEdBQStCLFNBQWRtQyxFQUFLYixNQUN4QnloRCxHQUFjNWdELEVBQU04WCxFQUFRcGEsRUFBU3lrRCxHQUdoQyxDQUNMM08sT0FBUTJPLEVBQ1I3SyxPQUFRQSxFQUNSM0QsT0FBUUEsR0FJWixTQUFTc1ksR0FBbUJ0WSxFQUFRM3pDLEVBQU04WCxFQUFRcGEsR0FDaEQsSUFBSUcsRUFBVXRELFVBQVV6SSxPQUFTLFFBQXNCZ1gsSUFBakJ2TyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFDOUUyeEQsRUFBYTEyRCxFQUFPLEdBQUksQ0FDMUIySixLQUFNLE9BQ05xc0QsY0FBZSxHQUNmQyxhQUFjLEdBQUt6ckQsRUFBS3pKLFdBQ3hCbTFELFlBQWEsRUFDYkMsV0FBWSxHQUFLM3JELEVBQUt6SixXQUN0QjBtRCxRQUFPLEVBQ1A4TixZQUFZLEVBQ1pDLFlBQVksV0FDWGhyRCxFQUFLcUIsTUFBTThxRCxNQUNvQixHQUE5QnIwQyxFQUFPbTJCLHNCQUNUbjJCLEVBQU9tMkIsb0JBQXNCaWUsRUFBV1QsY0FFMUMsSUFBSXRKLEVBQWlCLENBQ25CaGtDLEVBQUduZSxFQUFLMnhDLEtBQUssSUFBTTN4QyxFQUFLMmQsTUFBUTNkLEVBQUsyeEMsS0FBSyxHQUFLM3hDLEVBQUsyeEMsS0FBSyxJQUFNLEVBQy9EdnpCLEVBQUdwZSxFQUFLMnhDLEtBQUssSUFBTTN4QyxFQUFLaXdDLE9BQVNqd0MsRUFBSzJ4QyxLQUFLLEdBQUszeEMsRUFBSzJ4QyxLQUFLLElBQU0sR0FFN0QyRixFQUFTeGdELEtBQUt5bkIsS0FBS3ZlLEVBQUsyZCxNQUFRM2QsRUFBSzJ4QyxLQUFLLEdBQUszeEMsRUFBSzJ4QyxLQUFLLElBQU0sRUFBSTc1QixFQUFPbTJCLG9CQUFzQm4yQixFQUFPbzJCLG9CQUFzQnAyQixFQUFPZzBDLG9CQUFxQjlyRCxFQUFLaXdDLE9BQVNqd0MsRUFBSzJ4QyxLQUFLLEdBQUszeEMsRUFBSzJ4QyxLQUFLLElBQU0sRUFBSTc1QixFQUFPbTJCLG9CQUFzQm4yQixFQUFPbzJCLHFCQUMvT3lOLEVBQVl1USxFQUFXdlEsV0FBc0IsR0FBVHJFLEVBRXhDM0QsRUFBUytILEVBQWtCL0gsRUFBUXVZLEVBQVcvc0QsS0FBTXc4QyxFQUFXckUsRUFBUXo1QyxHQUV2RSxJQUFJNHRELEVBQWVTLEVBQVdULGFBa0M5QixHQWhDQTlYLEVBQVNBLEVBQU8xNEIsS0FBSSxTQUFTb3NDLEdBRTNCLE9BREFBLEVBQVd0TyxVQUFZbVQsRUFBV1IsYUFBZSxHQUFLNTBELEtBQUt3N0MsR0FBSyxJQUN6RCtVLEtBR1QxVCxFQUFPbGhELFNBQVEsU0FBUzQwRCxFQUFZbkosR0FDOUJsK0MsRUFBS3drRCxTQUNIeGtELEVBQUt3a0QsUUFBUXJ5RCxPQUFTK3JELElBQ3hCeGdELEVBQVF1aUQsWUFDUnZpRCxFQUFRMGlELGFBQWFqUSxFQUFTa1gsRUFBV2hXLE1BQU82YSxFQUFXVixlQUFpQixLQUM1RTl0RCxFQUFRMmlELE9BQU84QixFQUFlaGtDLEVBQUdna0MsRUFBZS9qQyxHQUNoRDFnQixFQUFRNmlELElBQUk0QixFQUFlaGtDLEVBQUdna0MsRUFBZS9qQyxFQUFHcXRDLEVBQWVwRSxFQUFXN0wsU0FBVTZMLEVBQVd0TyxRQUM3RnNPLEVBQVd0TyxRQUFVLEVBQUlzTyxFQUFXdkwsa0JBQW9CaGxELEtBQUt3N0MsSUFDL0Q1MEMsRUFBUStpRCxZQUNSL2lELEVBQVFnakQsUUFHWmhqRCxFQUFRdWlELFlBQ1J2aUQsRUFBUXlpRCxhQUFhK0wsRUFBV25CLFlBQWMvcUQsRUFBS3pKLFlBQ25EbUgsRUFBUXF1RCxTQUFXLFFBQ25CcnVELEVBQVF3aUQsZUFBZWdNLEVBQVdsQixhQUNsQ3R0RCxFQUFRMGlELGFBQWFpSCxFQUFXaFcsT0FDaEMzekMsRUFBUTJpRCxPQUFPOEIsRUFBZWhrQyxFQUFHZ2tDLEVBQWUvakMsR0FDaEQxZ0IsRUFBUTZpRCxJQUFJNEIsRUFBZWhrQyxFQUFHZ2tDLEVBQWUvakMsRUFBR2lwQyxFQUFXN0wsU0FBVTZMLEVBQVd0TyxRQUFTc08sRUFBV3RPLFFBQVUsRUFDNUdzTyxFQUFXdkwsa0JBQW9CaGxELEtBQUt3N0MsSUFDdEM1MEMsRUFBUStpRCxZQUNSL2lELEVBQVFnakQsT0FDaUIsR0FBckJ3TCxFQUFXalAsUUFDYnYvQyxFQUFRaWpELGFBSVcsSUFBbkIzZ0QsRUFBS3VuRCxXQUFtQyxJQUFaMXBELEVBQWUsQ0FFN0MsSUFEQSxJQUFJcXZCLEdBQVEsRUFDSHI3QixFQUFJLEVBQUcrRixFQUFNKzdDLEVBQU83aEQsT0FBUUQsRUFBSStGLEVBQUsvRixJQUM1QyxHQUFJOGhELEVBQU85aEQsR0FBR2tCLEtBQU8sRUFBRyxDQUN0Qm02QixHQUFRLEVBQ1IsTUFJQUEsR0FDRmcyQixHQUFZdlAsRUFBUTN6QyxFQUFNOFgsRUFBUXBhLEVBQVM0NUMsRUFBUTZLLEdBSXZELE1BQU8sQ0FDTDNPLE9BQVEyTyxFQUNSN0ssT0FBUUEsRUFDUjNELE9BQVFBLEdBSVosU0FBU3lZLEdBQXFCelksRUFBUTN6QyxFQUFNOFgsRUFBUXBhLEdBQ2xELElBQUlHLEVBQVV0RCxVQUFVekksT0FBUyxRQUFzQmdYLElBQWpCdk8sVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBQzlFeWhELEVBQWV4bUQsRUFBTyxHQUFJLENBQzVCMjhDLFdBQVksSUFDWkMsU0FBVSxJQUNWanpDLEtBQU0sVUFDTndlLE1BQU8sR0FBSzNkLEVBQUt6SixZQUNoQnlKLEVBQUtxQixNQUFNZ3JELFFBRWQxWSxFQUFTb0ksRUFBb0JwSSxFQUFRcUksRUFBY24rQyxHQUNuRCxJQUFJc2tELEVBQWlCLENBQ25CaGtDLEVBQUduZSxFQUFLMmQsTUFBUSxFQUNoQlMsRUFBR3BlLEVBQUtpd0MsT0FBUyxHQUVmcUgsRUFBU3hnRCxLQUFLeW5CLElBQUk0akMsRUFBZWhrQyxFQUFHZ2tDLEVBQWUvakMsR0FDdkRrNUIsR0FBVSxFQUFJdDNDLEVBQUt6SixXQUNuQitnRCxHQUFVMEUsRUFBYXIrQixNQUFRLEVBRy9CamdCLEVBQVF5aUQsYUFBYW5FLEVBQWFyK0IsT0FDbENqZ0IsRUFBUXdpRCxlQUFlbEUsRUFBYWlQLGlCQUFtQixXQUN2RHZ0RCxFQUFRZ3NELFdBQVcsU0FDbkJoc0QsRUFBUXVpRCxZQUNpQixXQUFyQmpFLEVBQWE3OEMsS0FDZnpCLEVBQVE2aUQsSUFBSTRCLEVBQWVoa0MsRUFBR2drQyxFQUFlL2pDLEVBQUdrNUIsRUFBUTBFLEVBQWE3SixXQUFhcjdDLEtBQUt3N0MsR0FBSTBKLEVBQWE1SixTQUN0R3Q3QyxLQUFLdzdDLElBQUksR0FFWDUwQyxFQUFRNmlELElBQUk0QixFQUFlaGtDLEVBQUdna0MsRUFBZS9qQyxFQUFHazVCLEVBQVEsRUFBRyxFQUFJeGdELEtBQUt3N0MsSUFBSSxHQUUxRTUwQyxFQUFRaWpELFNBRVIsSUFBSyxJQUFJOXVELEVBQUksRUFBR0EsRUFBSThoRCxFQUFPN2hELE9BQVFELElBQUssQ0FDdEMsSUFBSXcxRCxFQUFhMVQsRUFBTzloRCxHQUN4QjZMLEVBQVF5aUQsYUFBYW5FLEVBQWFyK0IsT0FDbENqZ0IsRUFBUXdpRCxlQUFlbUgsRUFBV2hXLE9BQ2xDM3pDLEVBQVFnc0QsV0FBVyxTQUNuQmhzRCxFQUFRdWlELFlBQ1J2aUQsRUFBUTZpRCxJQUFJNEIsRUFBZWhrQyxFQUFHZ2tDLEVBQWUvakMsRUFBR2s1QixFQUFRMEUsRUFBYTdKLFdBQWFyN0MsS0FBS3c3QyxHQUFJK1UsRUFBV3JPLGFBQ3BHbGlELEtBQUt3N0MsSUFBSSxHQUNYNTBDLEVBQVFpakQsU0FLVixPQUZBQyxHQUFjNWdELEVBQU04WCxFQUFRcGEsRUFBU3lrRCxHQUU5QixDQUNMM08sT0FBUTJPLEVBQ1I3SyxPQUFRQSxFQUNSM0QsT0FBUUEsR0FJWixTQUFTMlksR0FBb0JoWCxFQUFZM0IsRUFBUTN6QyxFQUFNOFgsRUFBUXBhLEdBQzdELElBQUlHLEVBQVV0RCxVQUFVekksT0FBUyxRQUFzQmdYLElBQWpCdk8sVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBQzlFZ2lELEVBQWMvbUQsRUFBTyxHQUFJLENBQzNCMjhDLFdBQVksSUFDWkMsU0FBVSxJQUNWejBCLE1BQU8sR0FDUDBrQyxVQUFXLENBQ1RrSyxVQUFXLEVBQ1hqSyxZQUFhLEdBQ2Iza0MsTUFBTyxHQUNQMHpCLE1BQU8sVUFDUG1iLFlBQWEsRUFDYkMsV0FBWSxHQUVkalEsUUFBUyxDQUNQNytCLE1BQU8sR0FDUDB6QixNQUFPLFNBRVJyeEMsRUFBS3FCLE1BQU1xckQsWUFFYzVqRCxHQUF4Qnl6QyxFQUFZRyxXQUNkSCxFQUFZRyxTQUFXSCxFQUFZcEssaUJBRVZycEMsR0FBdkJ5ekMsRUFBWUksVUFDZEosRUFBWUksUUFBVSxHQUV4QnJILEVBQWE0RyxFQUFtQjVHLEVBQVlpSCxFQUFZcEssV0FBWW9LLEVBQVluSyxVQUVoRixJQUFJK1AsRUFBaUIsQ0FDbkJoa0MsRUFBR25lLEVBQUsyZCxNQUFRLEVBQ2hCUyxFQUFHcGUsRUFBS2l3QyxPQUFTLEdBRWZxSCxFQUFTeGdELEtBQUt5bkIsSUFBSTRqQyxFQUFlaGtDLEVBQUdna0MsRUFBZS9qQyxHQUN2RGs1QixHQUFVLEVBQUl0M0MsRUFBS3pKLFdBQ25CK2dELEdBQVVpRixFQUFZNStCLE1BQVEsRUFDOUIsSUFBSWd2QyxFQUFjclYsRUFBU2lGLEVBQVk1K0IsTUFHdkNqZ0IsRUFBUXlpRCxhQUFhNUQsRUFBWTUrQixPQUNqQ2pnQixFQUFRZ3NELFdBQVcsUUFDbkIsSUFBSyxJQUFJNzNELEVBQUksRUFBR0EsRUFBSXlqRCxFQUFXeGpELE9BQVFELElBQUssQ0FDMUMsSUFBSSs2RCxFQUFpQnRYLEVBQVd6akQsR0FDaEM2TCxFQUFRdWlELFlBQ1J2aUQsRUFBUXdpRCxlQUFlME0sRUFBZXZiLE9BQ3RDM3pDLEVBQVE2aUQsSUFBSTRCLEVBQWVoa0MsRUFBR2drQyxFQUFlL2pDLEVBQUdrNUIsRUFBUXNWLEVBQWV4USxhQUFldGxELEtBQUt3N0MsR0FBSXNhLEVBQWV2USxXQUM1R3ZsRCxLQUFLdzdDLElBQUksR0FDWDUwQyxFQUFRaWpELFNBRVZqakQsRUFBUW9wRCxPQUdSLElBQUk3SyxFQUFhTSxFQUFZcEssV0FBYW9LLEVBQVluSyxTQUFXLEVBQzdEZ1EsRUFBYW5HLEVBQWFNLEVBQVk4RixVQUFVQyxZQUNoRHVLLEVBQWE1USxFQUFhTSxFQUFZOEYsVUFBVUMsWUFBYy9GLEVBQVk4RixVQUFVbUssWUFDcEYvTyxHQUFVbkcsRUFBNkIsR0FBcEJpRixFQUFZNStCLE1BQWM0K0IsRUFBWThGLFVBQVVrSyxVQUNuRTdPLEdBQVFwRyxFQUE2QixHQUFwQmlGLEVBQVk1K0IsTUFBYzQrQixFQUFZOEYsVUFBVWtLLFVBQVloUSxFQUFZOEYsVUFBVTFrQyxNQUNuR212QyxHQUFheFYsRUFBNkIsR0FBcEJpRixFQUFZNStCLE1BQWM0K0IsRUFBWThGLFVBQVVrSyxVQUFZaFEsRUFBWThGLFVBQVVvSyxXQUU1Ry91RCxFQUFRbWlELFVBQVVzQyxFQUFlaGtDLEVBQUdna0MsRUFBZS9qQyxHQUNuRDFnQixFQUFRa3dDLFFBQVEyTyxFQUFZcEssV0FBYSxHQUFLcjdDLEtBQUt3N0MsSUFFbkQsSUFBSyxJQUFJemdELEVBQUksRUFBR0EsRUFBSTBxRCxFQUFZOEYsVUFBVUMsWUFBYyxFQUFHendELElBQ3pENkwsRUFBUXVpRCxZQUNSdmlELEVBQVF3aUQsZUFBZTNELEVBQVk4RixVQUFVaFIsT0FDN0MzekMsRUFBUXlpRCxhQUFhLEVBQUluZ0QsRUFBS3pKLFlBQzlCbUgsRUFBUTJpRCxPQUFPNUMsRUFBUSxHQUN2Qi8vQyxFQUFRNGlELE9BQU81QyxFQUFNLEdBQ3JCaGdELEVBQVFpakQsU0FDUmpqRCxFQUFRa3dDLE9BQU93VSxFQUFhdHJELEtBQUt3N0MsSUFFbkM1MEMsRUFBUXFwRCxVQUVScnBELEVBQVFvcEQsT0FDUnBwRCxFQUFRbWlELFVBQVVzQyxFQUFlaGtDLEVBQUdna0MsRUFBZS9qQyxHQUNuRDFnQixFQUFRa3dDLFFBQVEyTyxFQUFZcEssV0FBYSxHQUFLcjdDLEtBQUt3N0MsSUFFbkQsSUFBSyxJQUFJemdELEVBQUksRUFBR0EsRUFBSTBxRCxFQUFZOEYsVUFBVUMsWUFBYy9GLEVBQVk4RixVQUFVbUssWUFBYyxFQUFHMzZELElBQzdGNkwsRUFBUXVpRCxZQUNSdmlELEVBQVF3aUQsZUFBZTNELEVBQVk4RixVQUFVaFIsT0FDN0MzekMsRUFBUXlpRCxhQUFhLEVBQUluZ0QsRUFBS3pKLFlBQzlCbUgsRUFBUTJpRCxPQUFPNUMsRUFBUSxHQUN2Qi8vQyxFQUFRNGlELE9BQU93TSxFQUFXLEdBQzFCcHZELEVBQVFpakQsU0FDUmpqRCxFQUFRa3dDLE9BQU9pZixFQUFhLzFELEtBQUt3N0MsSUFFbkM1MEMsRUFBUXFwRCxVQUdScFQsRUFBUzJJLEVBQW1CM0ksRUFBUTJCLEVBQVlpSCxFQUFhMStDLEdBRTdELElBQUssSUFBSWhNLEVBQUksRUFBR0EsRUFBSThoRCxFQUFPN2hELE9BQVFELElBQUssQ0FDdEMsSUFBSXcxRCxFQUFhMVQsRUFBTzloRCxHQUN4QjZMLEVBQVFvcEQsT0FDUnBwRCxFQUFRbWlELFVBQVVzQyxFQUFlaGtDLEVBQUdna0MsRUFBZS9qQyxHQUNuRDFnQixFQUFRa3dDLFFBQVF5WixFQUFXck8sYUFBZSxHQUFLbGlELEtBQUt3N0MsSUFDcEQ1MEMsRUFBUXVpRCxZQUNSdmlELEVBQVEwaUQsYUFBYWlILEVBQVdoVyxPQUNoQzN6QyxFQUFRMmlELE9BQU85RCxFQUFZQyxRQUFRNytCLE1BQU8sR0FDMUNqZ0IsRUFBUTRpRCxPQUFPLEdBQUkvRCxFQUFZQyxRQUFRNytCLE1BQVEsR0FDL0NqZ0IsRUFBUTRpRCxRQUFRcU0sRUFBYSxHQUM3Qmp2RCxFQUFRNGlELE9BQU8sRUFBRy9ELEVBQVlDLFFBQVE3K0IsTUFBUSxHQUM5Q2pnQixFQUFRNGlELE9BQU8vRCxFQUFZQyxRQUFRNytCLE1BQU8sR0FDMUNqZ0IsRUFBUStpRCxZQUNSL2lELEVBQVFnakQsT0FDUmhqRCxFQUFRdWlELFlBQ1J2aUQsRUFBUTBpRCxhQUFhLFdBQ3JCMWlELEVBQVE2aUQsSUFBSSxFQUFHLEVBQUdoRSxFQUFZQyxRQUFRNytCLE1BQVEsRUFBRyxFQUFHLEVBQUk3bUIsS0FBS3c3QyxJQUFJLEdBQ2pFNTBDLEVBQVFnakQsT0FDUmhqRCxFQUFRcXBELFVBYVYsT0FWdUIsSUFBbkIvbUQsRUFBS3VuRCxXQUNQckYsR0FBZTNGLEVBQWFqRixFQUFRNkssRUFBZ0JuaUQsRUFBTThYLEVBQVFwYSxHQUdwRWtqRCxHQUFjNWdELEVBQU04WCxFQUFRcGEsRUFBU3lrRCxHQUVyQixJQUFadGtELEdBQStCLFVBQWRtQyxFQUFLYixPQUN4QmEsRUFBS3FCLE1BQU1xckQsTUFBTWhRLFNBQVcvSSxFQUFPLEdBQUdxRixhQUN0Q2g1QyxFQUFLcUIsTUFBTXFyRCxNQUFNL1AsUUFBVWhKLEVBQU8sR0FBRzVnRCxNQUVoQyxDQUNMeWdELE9BQVEyTyxFQUNSN0ssT0FBUUEsRUFDUnFWLFlBQWFBLEVBQ2JyWCxXQUFZQSxFQUNaMkcsV0FBWUEsR0FJaEIsU0FBUzhRLEdBQW9CcFosRUFBUTN6QyxFQUFNOFgsRUFBUXBhLEdBQ2pELElBQUlHLEVBQVV0RCxVQUFVekksT0FBUyxRQUFzQmdYLElBQWpCdk8sVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBQzlFMGdELEVBQWN6bEQsRUFBTyxHQUFHLENBQzFCcXZELFVBQVcsVUFDWDlCLFdBQVksVUFDWnNGLFFBQVMsSUFDVHJvRCxFQUFLcUIsTUFBTTY1QyxPQUVUOFIsRUFBa0JoWSxFQUF5QmgxQyxFQUFLczFDLFdBQVd4akQsUUFFM0Rxd0QsRUFBaUIsQ0FDbkJoa0MsRUFBR25lLEVBQUsyeEMsS0FBSyxJQUFNM3hDLEVBQUsyZCxNQUFRM2QsRUFBSzJ4QyxLQUFLLEdBQUszeEMsRUFBSzJ4QyxLQUFLLElBQU0sRUFDL0R2ekIsRUFBR3BlLEVBQUsyeEMsS0FBSyxJQUFNM3hDLEVBQUtpd0MsT0FBU2p3QyxFQUFLMnhDLEtBQUssR0FBSzN4QyxFQUFLMnhDLEtBQUssSUFBTSxHQUc5RDJGLEVBQVN4Z0QsS0FBS3luQixJQUFJNGpDLEVBQWVoa0MsR0FBSzIyQixFQUFxQjkwQyxFQUFLczFDLFlBQWN4OUIsRUFBTysyQixzQkFDdkZzVCxFQUFlL2pDLEVBQUl0RyxFQUFPKzJCLHNCQUU1QnlJLEdBQVV0M0MsRUFBSzJ0QyxRQUFRLEdBR3ZCandDLEVBQVF1aUQsWUFDUnZpRCxFQUFReWlELGFBQWEsRUFBSW5nRCxFQUFLekosWUFDOUJtSCxFQUFRd2lELGVBQWVqRixFQUFZNEosV0FDbkNtSSxFQUFnQnY2RCxTQUFRLFNBQVN5L0MsR0FDL0IsSUFBSTBRLEVBQU1yUCxFQUF3QitELEVBQVN4Z0QsS0FBS3drRCxJQUFJcEosR0FBUW9GLEVBQVN4Z0QsS0FBS2lrRCxJQUFJN0ksR0FBUWlRLEdBQ3RGemtELEVBQVEyaUQsT0FBTzhCLEVBQWVoa0MsRUFBR2drQyxFQUFlL2pDLEdBQ2hEMWdCLEVBQVE0aUQsT0FBT3NDLEVBQUl6a0MsRUFBR3lrQyxFQUFJeGtDLE1BRTVCMWdCLEVBQVFpakQsU0FDUmpqRCxFQUFRK2lELFlBdUJSLElBcEJBLElBQUl3TSxFQUFRLFNBQWVwN0QsR0FDekIsSUFBSXE3RCxFQUFXLEdBQ2Z4dkQsRUFBUXVpRCxZQUNSdmlELEVBQVF5aUQsYUFBYSxFQUFJbmdELEVBQUt6SixZQUM5Qm1ILEVBQVF3aUQsZUFBZWpGLEVBQVk0SixXQUNuQ21JLEVBQWdCdjZELFNBQVEsU0FBU3kvQyxFQUFPLy9DLEdBQ3RDLElBQUl5d0QsRUFBTXJQLEVBQXdCK0QsRUFBU3gvQixFQUFPODJCLGVBQWlCLzhDLEVBQUlpRixLQUFLd2tELElBQUlwSixHQUFRb0YsRUFBU3gvQixFQUFPODJCLGVBQ3RHLzhDLEVBQUlpRixLQUFLaWtELElBQUk3SSxHQUFRaVEsR0FDVCxJQUFWaHdELEdBQ0YrNkQsRUFBV3RLLEVBQ1hsbEQsRUFBUTJpRCxPQUFPdUMsRUFBSXprQyxFQUFHeWtDLEVBQUl4a0MsSUFFMUIxZ0IsRUFBUTRpRCxPQUFPc0MsRUFBSXprQyxFQUFHeWtDLEVBQUl4a0MsTUFHOUIxZ0IsRUFBUTRpRCxPQUFPNE0sRUFBUy91QyxFQUFHK3VDLEVBQVM5dUMsR0FDcEMxZ0IsRUFBUWlqRCxTQUNSampELEVBQVEraUQsYUFHRDV1RCxFQUFJLEVBQUdBLEdBQUtpbUIsRUFBTzgyQixlQUFnQi84QyxJQUMxQ283RCxFQUFNcDdELEdBR1IsSUFBSXM3RCxFQUFrQm5TLEVBQW1CZ1MsRUFBaUI3SyxFQUFnQjdLLEVBQVEzRCxFQUFRM3pDLEVBQU1uQyxHQTJCaEcsT0F6QkFzdkQsRUFBZ0IxNkQsU0FBUSxTQUFTNDBELEVBQVluSixHQWMzQyxHQVpBeGdELEVBQVF1aUQsWUFDUnZpRCxFQUFRMGlELGFBQWFqUSxFQUFTa1gsRUFBV2hXLE1BQU80SixFQUFZb04sVUFDNURoQixFQUFXdDBELEtBQUtOLFNBQVEsU0FBU3FGLEVBQU0zRixHQUN2QixJQUFWQSxFQUNGdUwsRUFBUTJpRCxPQUFPdm9ELEVBQUs2a0IsU0FBU3dCLEVBQUdybUIsRUFBSzZrQixTQUFTeUIsR0FFOUMxZ0IsRUFBUTRpRCxPQUFPeG9ELEVBQUs2a0IsU0FBU3dCLEVBQUdybUIsRUFBSzZrQixTQUFTeUIsTUFHbEQxZ0IsRUFBUStpRCxZQUNSL2lELEVBQVFnakQsUUFFb0IsSUFBeEIxZ0QsRUFBSyt0QyxlQUEwQixDQUNqQyxJQUFJaVMsRUFBUWxvQyxFQUFPaTJCLGVBQWVtUSxFQUFjcG1DLEVBQU9pMkIsZUFBZWo4QyxRQUNsRWloRCxFQUFTc1UsRUFBV3QwRCxLQUFLa29CLEtBQUksU0FBU25qQixHQUN4QyxPQUFPQSxFQUFLNmtCLFlBRWRvakMsR0FBZWhOLEVBQVFzVSxFQUFXaFcsTUFBTzJPLEVBQU90aUQsRUFBU3NDLE9BSTdEZ2pELEdBQWVnSyxFQUFpQjFWLEVBQVE2SyxFQUFnQm5pRCxFQUFNOFgsRUFBUXBhLEdBRS9ELENBQ0w4MUMsT0FBUTJPLEVBQ1I3SyxPQUFRQSxFQUNSRyxVQUFXdVYsR0FJZixTQUFTSSxHQUFVN3VDLEVBQUtELEVBQUs5UyxHQUN6QkEsRUFBYSxHQUFOQSxFQUFRLEVBQUVBLEVBRWpCLElBREEsSUFBSS9KLEVBQU0sR0FDRDVQLEVBQUksRUFBR0EsRUFBSTJaLEVBQU0zWixJQUN0QjRQLEVBQUk1UCxHQUFLaUYsS0FBS3UyRCxTQUVsQixPQUFRdjJELEtBQUtDLE1BQU0wSyxFQUFJcVUsUUFBTyxTQUFTamtCLEVBQUV5dkMsR0FBRyxPQUFPenZDLEVBQUV5dkMsS0FBSTkxQixHQUFNOFMsRUFBSUMsSUFBTUEsRUFHN0UsU0FBUyt1QyxHQUFhM2IsRUFBS29CLEVBQU9wMUIsRUFBTXN5QixHQUVwQyxJQURBLElBQUlzZCxHQUFLLEVBQ0QxN0QsRUFBRSxFQUFFQSxFQUFFa2hELEVBQU9qaEQsT0FBT0QsSUFDMUIsR0FBR2toRCxFQUFPbGhELEdBQUc4L0MsS0FBSyxDQUNoQixLQUFHQSxFQUFLLEdBQUdvQixFQUFPbGhELEdBQUc4L0MsS0FBSyxJQUFJQSxFQUFLLEdBQUdvQixFQUFPbGhELEdBQUc4L0MsS0FBSyxJQUFJQSxFQUFLLEdBQUdvQixFQUFPbGhELEdBQUc4L0MsS0FBSyxJQUFJQSxFQUFLLEdBQUdvQixFQUFPbGhELEdBQUc4L0MsS0FBSyxJQU90RyxDQUNINGIsR0FBSyxFQUNMLE1BUkEsR0FBRzViLEVBQUssR0FBRyxHQUFLQSxFQUFLLEdBQUcsR0FBS0EsRUFBSyxHQUFHaDBCLEdBQVNnMEIsRUFBSyxHQUFHMUIsRUFBTyxDQUMzRHNkLEdBQUssRUFDTCxNQUVBQSxHQUFLLEVBUWIsT0FBT0EsRUFHWCxTQUFTQyxHQUFlejZELEdBQ3RCLElBQWlCMDZELEVBQWJwVixFQUFTLEdBQ2JBLEVBQU9xVixLQUFPLElBQ2RyVixFQUFPc1YsS0FBTyxFQUNkdFYsRUFBT3VWLEtBQU8sR0FDZHZWLEVBQU93VixLQUFPLEVBQ2QsSUFBSyxJQUFJaDhELEVBQUksRUFBR0EsRUFBSWtCLEVBQUtqQixPQUFRRCxJQUU3QixJQURBLElBQUlpOEQsRUFBUy82RCxFQUFLbEIsR0FBRzZtRCxTQUFTQyxZQUNyQmxQLEVBQUksRUFBR0EsRUFBSXFrQixFQUFPaDhELE9BQVEyM0MsSUFBSyxDQUNwQ2drQixFQUFTSyxFQUFPcmtCLEdBQ0ssR0FBakJna0IsRUFBTzM3RCxTQUNQMjdELEVBQVNBLEVBQU8sSUFFcEIsSUFBSyxJQUFJbnNCLEVBQUksRUFBR0EsRUFBSW1zQixFQUFPMzdELE9BQVF3dkMsSUFBSyxDQUNwQyxJQUFJeXNCLEVBQVlOLEVBQU9uc0IsR0FBRyxHQUN0QjBzQixFQUFXUCxFQUFPbnNCLEdBQUcsR0FDckJ5YyxFQUFRLENBQ1I1L0IsRUFBRzR2QyxFQUNIM3ZDLEVBQUc0dkMsR0FFUDNWLEVBQU9xVixLQUFPclYsRUFBT3FWLEtBQU8zUCxFQUFNNS9CLEVBQUlrNkIsRUFBT3FWLEtBQU8zUCxFQUFNNS9CLEVBQzFEazZCLEVBQU9zVixLQUFPdFYsRUFBT3NWLEtBQU81UCxFQUFNNS9CLEVBQUlrNkIsRUFBT3NWLEtBQU81UCxFQUFNNS9CLEVBQzFEazZCLEVBQU91VixLQUFPdlYsRUFBT3VWLEtBQU83UCxFQUFNMy9CLEVBQUlpNkIsRUFBT3VWLEtBQU83UCxFQUFNMy9CLEVBQzFEaTZCLEVBQU93VixLQUFPeFYsRUFBT3dWLEtBQU85UCxFQUFNMy9CLEVBQUlpNkIsRUFBT3dWLEtBQU85UCxFQUFNMy9CLEdBSXRFLE9BQU9pNkIsRUFHVCxTQUFTNFYsR0FBa0JELEVBQVVELEVBQVUxVixFQUFPQyxFQUFNQyxFQUFRQyxHQUNsRSxNQUFPLENBQ0hyNkIsR0FBSTR2QyxFQUFZMVYsRUFBT3FWLE1BQVFwVixFQUFNQyxFQUNyQ242QixHQUFJaTZCLEVBQU93VixLQUFPRyxHQUFZMVYsRUFBTUUsR0FJMUMsU0FBU0osR0FBa0I4VixFQUFRQyxFQUFPOVYsRUFBT0MsRUFBTUMsRUFBUUMsR0FDN0QsTUFBTyxDQUNIcjZCLEdBQUlnd0MsRUFBTzVWLEdBQVNELEVBQU1ELEVBQU9xVixLQUNqQ3R2QyxFQUFHaTZCLEVBQU93VixNQUFRSyxFQUFPMVYsR0FBU0YsR0FJeEMsU0FBUzhWLEdBQXVCM1YsRUFBSTRWLEVBQU1DLEdBQ3BDLEdBQUlELEVBQU0sSUFBSUMsRUFBTSxHQUFJLE9BQU8sRUFDL0IsR0FBSUQsRUFBTSxHQUFHNVYsRUFBSSxJQUFNNlYsRUFBTSxHQUFHN1YsRUFBSSxHQUFJLE9BQU8sRUFDL0MsR0FBSTRWLEVBQU0sR0FBRzVWLEVBQUksSUFBTTZWLEVBQU0sR0FBRzdWLEVBQUksR0FBSSxPQUFPLEVBQy9DLEdBQUk0VixFQUFNLElBQUk1VixFQUFJLElBQU02VixFQUFNLEdBQUc3VixFQUFJLEdBQUksT0FBTyxFQUNoRCxHQUFJNlYsRUFBTSxJQUFJN1YsRUFBSSxJQUFNNFYsRUFBTSxHQUFHNVYsRUFBSSxHQUFJLE9BQU8sRUFDaEQsR0FBSTRWLEVBQU0sR0FBRzVWLEVBQUksSUFBTTZWLEVBQU0sR0FBRzdWLEVBQUksR0FBSSxPQUFPLEVBQy9DLElBQUk4VixFQUFLRCxFQUFNLElBQUlBLEVBQU0sR0FBR0QsRUFBTSxLQUFLQyxFQUFNLEdBQUc3VixFQUFJLEtBQUs2VixFQUFNLEdBQUdELEVBQU0sSUFDeEUsUUFBSUUsRUFBSzlWLEVBQUksSUFPbkIsU0FBU0csR0FBZ0JILEVBQUkrVixHQUUzQixJQURBLElBQUlDLEVBQU0sRUFDRDU4RCxFQUFFLEVBQUVBLEVBQUUyOEQsRUFBSzE4RCxPQUFPRCxJQUFJLENBQzdCLElBQUk2OEQsRUFBTUYsRUFBSzM4RCxHQUFHLEdBQ0MsR0FBZjI4RCxFQUFLMThELFNBQ1A0OEQsRUFBUUYsRUFBSzM4RCxHQUFHLElBRWxCLElBQUksSUFBSXl2QyxFQUFFLEVBQUVBLEVBQUVvdEIsRUFBTTU4RCxPQUFPLEVBQUV3dkMsSUFBSSxDQUMvQixJQUFJK3NCLEVBQU1LLEVBQU1wdEIsR0FDWmd0QixFQUFNSSxFQUFNcHRCLEVBQUUsR0FDZDhzQixHQUF1QjNWLEVBQUk0VixFQUFNQyxLQUNuQ0csR0FBTyxJQUtiLE9BQUdBLEVBQU0sR0FBRyxFQVFkLFNBQVNFLEdBQWtCaGIsRUFBUTN6QyxFQUFNOFgsRUFBUXBhLEdBQy9DLElBU0krdkQsRUFBUTFQLEVBVFI2USxFQUFVcDVELEVBQU8sR0FBRyxDQUN0QnluRCxRQUFPLEVBQ1A4TixZQUFZLEVBQ1pDLFlBQVksVUFDWjZELFlBQVksR0FDWkMsa0JBQWtCLFVBQ2xCQyxnQkFBZ0IsVUFDaEJDLGtCQUFrQixHQUNsQmh2RCxFQUFLcUIsTUFBTTRaLEtBRVRsb0IsRUFBTzRnRCxFQUNQMEUsRUFBUW1WLEdBQWV6NkQsR0FDdkJrOEQsRUFBU2p2RCxFQUFLMmQsTUFBUTdtQixLQUFLMDRDLElBQUk2SSxFQUFPc1YsS0FBT3RWLEVBQU9xVixNQUNwRHdCLEVBQVNsdkQsRUFBS2l3QyxPQUFTbjVDLEtBQUswNEMsSUFBSTZJLEVBQU93VixLQUFPeFYsRUFBT3VWLE1BQ3JEdFYsRUFBUTJXLEVBQVNDLEVBQVNELEVBQVNDLEVBQ25DM1csRUFBUXY0QyxFQUFLMmQsTUFBTSxFQUFFN21CLEtBQUswNEMsSUFBSTZJLEVBQU9zVixLQUFPdFYsRUFBT3FWLE1BQU0sRUFBRXBWLEVBQzNERSxFQUFReDRDLEVBQUtpd0MsT0FBTyxFQUFFbjVDLEtBQUswNEMsSUFBSTZJLEVBQU93VixLQUFPeFYsRUFBT3VWLE1BQU0sRUFBRXRWLEVBQ2hFNTZDLEVBQVF1aUQsWUFDUnZpRCxFQUFReXhELFVBQVUsRUFBRyxFQUFHbnZELEVBQUsyZCxNQUFPM2QsRUFBS2l3QyxRQUN6Q3Z5QyxFQUFRMGlELGFBQWFwZ0QsRUFBSzRxRCxZQUFZLFdBQ3RDbHRELEVBQVE4aUQsS0FBSyxFQUFFLEVBQUV4Z0QsRUFBSzJkLE1BQU0zZCxFQUFLaXdDLFFBQ2pDdnlDLEVBQVFnakQsT0FDUixJQUFLLElBQUk3dUQsRUFBSSxFQUFHQSxFQUFJa0IsRUFBS2pCLE9BQVFELElBQUssQ0FDcEM2TCxFQUFRdWlELFlBQ1J2aUQsRUFBUXlpRCxhQUFheU8sRUFBVTdELFlBQWMvcUQsRUFBS3pKLFlBQ2xEbUgsRUFBUXdpRCxlQUFlME8sRUFBVTVELGFBQ2pDdHRELEVBQVEwaUQsYUFBYWpRLEVBQVN3RCxFQUFPOWhELEdBQUd3L0MsTUFBT3VkLEVBQVVDLGNBQ3JEN3VELEVBQUt3a0QsU0FDSHhrRCxFQUFLd2tELFFBQVFyeUQsT0FBU04sSUFDeEI2TCxFQUFRd2lELGVBQWUwTyxFQUFVRSxtQkFDakNweEQsRUFBUTBpRCxhQUFhalEsRUFBU3llLEVBQVVHLGdCQUFpQkgsRUFBVUkscUJBSXZFLElBREEsSUFBSWxCLEVBQVMvNkQsRUFBS2xCLEdBQUc2bUQsU0FBU0MsWUFDckJsUCxFQUFJLEVBQUdBLEVBQUlxa0IsRUFBT2g4RCxPQUFRMjNDLElBQUssQ0FDdENna0IsRUFBU0ssRUFBT3JrQixHQUNLLEdBQWpCZ2tCLEVBQU8zN0QsU0FDVDI3RCxFQUFTQSxFQUFPLElBRWxCLElBQUssSUFBSW5zQixFQUFJLEVBQUdBLEVBQUltc0IsRUFBTzM3RCxPQUFRd3ZDLElBQ2pDeWMsRUFBUWtRLEdBQWtCUixFQUFPbnNCLEdBQUcsR0FBSW1zQixFQUFPbnNCLEdBQUcsR0FBRytXLEVBQU9DLEVBQU1DLEVBQVFDLEdBQ2hFLElBQU5sWCxHQUNGNWpDLEVBQVF1aUQsWUFDUnZpRCxFQUFRMmlELE9BQU90QyxFQUFNNS9CLEVBQUc0L0IsRUFBTTMvQixJQUU5QjFnQixFQUFRNGlELE9BQU92QyxFQUFNNS9CLEVBQUc0L0IsRUFBTTMvQixHQUdsQzFnQixFQUFRZ2pELE9BQ2UsR0FBcEJrTyxFQUFVM1IsUUFDWHYvQyxFQUFRaWpELFNBR1osR0FBcUIsR0FBbEIzZ0QsRUFBS3VuRCxVQUFrQixDQUN4QixJQUFJNkgsRUFBY3I4RCxFQUFLbEIsR0FBR3dOLFdBQVdnd0QsU0FDckMsR0FBR0QsRUFBWSxDQUNiclIsRUFBUWtRLEdBQWtCbUIsRUFBWSxHQUFJQSxFQUFZLEdBQUcvVyxFQUFPQyxFQUFNQyxFQUFRQyxHQUM5RSxJQUFJMUssRUFBUy82QyxFQUFLbEIsR0FBR2t3RCxVQUFVanFDLEVBQU9nMkIsU0FDbEM5bUIsRUFBS2owQixFQUFLbEIsR0FBR3dOLFdBQVc1TCxLQUM1QmlLLEVBQVF1aUQsWUFDUnZpRCxFQUFRK2pELFlBQVkzVCxHQUNwQnB3QyxFQUFRMGlELGFBQWFydEQsRUFBS2xCLEdBQUdtd0QsV0FBVyxXQUN4Q3RrRCxFQUFRZ2tELFNBQVMxNkIsRUFBTSsyQixFQUFNNS9CLEVBQUVpMkIsRUFBWXB0QixFQUFLOG1CLEdBQVUsRUFBR2lRLEVBQU0zL0IsRUFBRTB2QixFQUFTLEdBQzlFcHdDLEVBQVEraUQsWUFDUi9pRCxFQUFRaWpELFdBSWQzZ0QsRUFBS3l4QyxVQUFVMEcsUUFBUSxDQUNyQkUsT0FBT0EsRUFDUEMsTUFBTUEsRUFDTkMsUUFBUUEsRUFDUkMsUUFBUUEsR0FFVnlRLEdBQWtCanBELEVBQU04WCxFQUFRcGEsRUFBUSxHQUN4Q0EsRUFBUTR4RCxPQUdWLFNBQVNDLEdBQWtCdnZELEVBQUtiLEdBQzlCLElBQUk0ekMsRUFBUy95QyxFQUFLMnpDLE9BQU85c0IsTUFBSyxTQUFTdkcsRUFBRVMsR0FBRyxPQUFPdnBCLFNBQVN1cEIsRUFBRWdoQyxVQUFVdnFELFNBQVM4b0IsRUFBRXloQyxhQUNuRixPQUFRNWlELEdBQ04sSUFBSyxTQUNILElBQUssSUFBSXROLEVBQUksRUFBR0EsRUFBSWtoRCxFQUFPamhELE9BQVFELElBQUssQ0FDdEMsSUFBSW0xQixFQUFPK3JCLEVBQU9saEQsR0FBRzRCLEtBQ2pCKzdELEVBQVV6YyxFQUFPbGhELEdBQUdrd0QsU0FDcEIwTixFQUFTcmIsRUFBWXB0QixFQUFLd29DLEdBQzFCcnhDLE9BQUMsRUFBQ0MsT0FBQyxFQUNIdXpCLE9BQUksRUFDSitkLEVBQVMsRUFDYixNQUFNLEVBQU0sQ0FDUkEsSUFDQXZ4QyxFQUFJaXZDLElBQVdwdEQsRUFBSzJkLE1BQU0sRUFBRzNkLEVBQUsyZCxNQUFNLEVBQUUsR0FBSzh4QyxFQUFPLEVBQ3REcnhDLEVBQUlndkMsSUFBV3B0RCxFQUFLaXdDLE9BQU8sRUFBR2p3QyxFQUFLaXdDLE9BQU8sRUFBRSxHQUFLdWYsRUFBUSxFQUN6RDdkLEVBQUssQ0FBQ3h6QixFQUFFLEVBQUVuZSxFQUFLMmQsTUFBTSxFQUFFUyxFQUFFLEVBQUVveEMsRUFBUXh2RCxFQUFLaXdDLE9BQU8sRUFBRTl4QixFQUFFc3hDLEVBQU8sRUFBRXp2RCxFQUFLMmQsTUFBTSxFQUFFUyxFQUFFLEVBQUVwZSxFQUFLaXdDLE9BQU8sR0FDekYsSUFBSUosRUFBY3lkLEdBQWEzYixFQUFLb0IsRUFBTy95QyxFQUFLMmQsTUFBTTNkLEVBQUtpd0MsUUFDM0QsSUFBS0osRUFBYSxNQUNsQixHQUFjLEtBQVY2ZixFQUFlLENBQ2pCL2QsRUFBSyxFQUFFLEtBQUssS0FBSyxLQUFLLEtBQ3RCLE9BR05vQixFQUFPbGhELEdBQUc4L0MsS0FBS0EsRUFFbkIsTUFDQSxJQUFLLFdBT0gsSUFQRixJQUNXZ2UsRUFBVCxXQUVFLE9BQUk3NEQsS0FBS3UyRCxTQUFTLElBSVh4N0QsRUFBSSxFQUFHQSxFQUFJa2hELEVBQU9qaEQsT0FBUUQsSUFBSyxDQUN0QyxJQUFJbTFCLEVBQU8rckIsRUFBT2xoRCxHQUFHNEIsS0FDakIrN0QsRUFBVXpjLEVBQU9saEQsR0FBR2t3RCxTQUNwQjBOLEVBQVNyYixFQUFZcHRCLEVBQUt3b0MsR0FDMUJJLEVBQVNELElBQ1R4eEMsT0FBQyxFQUFDQyxPQUFDLEVBQUN1ekIsT0FBSSxFQUFDa2UsT0FBSyxFQUNkSCxFQUFTLEVBQ2IsTUFBTSxFQUFNLENBQ1ZBLElBQ0EsSUFBSTdmLE9BQVcsRUFhZixHQVpJK2YsR0FDQXp4QyxFQUFJaXZDLElBQVdwdEQsRUFBSzJkLE1BQU0sRUFBRzNkLEVBQUsyZCxNQUFNLEVBQUUsR0FBSzh4QyxFQUFPLEVBQ3REcnhDLEVBQUlndkMsSUFBV3B0RCxFQUFLaXdDLE9BQU8sRUFBR2p3QyxFQUFLaXdDLE9BQU8sRUFBRSxHQUFHdWYsRUFBUSxFQUN2RDdkLEVBQUssQ0FBQ3Z6QixFQUFFLEVBQUVxeEMsRUFBT3p2RCxFQUFLMmQsTUFBTSxHQUFJUSxFQUFFLEVBQUVuZSxFQUFLaXdDLE9BQU8sRUFBRzd4QixFQUFFLEVBQUVwZSxFQUFLMmQsTUFBTSxHQUFJUSxFQUFFcXhDLEVBQVEsRUFBRXh2RCxFQUFLaXdDLE9BQU8sR0FDOUY0ZixFQUFNLENBQUM3dkQsRUFBSzJkLE9BQU8zZCxFQUFLMmQsTUFBTSxFQUFFM2QsRUFBS2l3QyxPQUFPLEtBQUs5eEIsRUFBRXF4QyxFQUFRLEVBQUV4dkQsRUFBS2l3QyxPQUFPLEdBQUcsRUFBR2p3QyxFQUFLaXdDLE9BQU8sRUFBRWp3QyxFQUFLMmQsTUFBTSxHQUFJUyxFQUFFLEVBQUVxeEMsRUFBT3p2RCxFQUFLMmQsTUFBTSxHQUFHLEVBQUUzZCxFQUFLMmQsT0FBTzNkLEVBQUsyZCxNQUFNLEVBQUUzZCxFQUFLaXdDLE9BQU8sS0FBSzl4QixFQUFFcXhDLEVBQVEsRUFBRXh2RCxFQUFLaXdDLE9BQU8sR0FBR3VmLEVBQVN4dkQsRUFBS2l3QyxPQUFPLEVBQUVqd0MsRUFBSzJkLE1BQU0sR0FBSVMsRUFBRSxFQUFFcXhDLEVBQU96dkQsRUFBSzJkLE1BQU0sR0FBRzh4QyxFQUFPLEdBQ2xSNWYsRUFBY3lkLEdBQWF1QyxFQUFNOWMsRUFBTy95QyxFQUFLaXdDLE9BQU9qd0MsRUFBSzJkLFNBRTNEUSxFQUFJaXZDLElBQVdwdEQsRUFBSzJkLE1BQU0sRUFBRzNkLEVBQUsyZCxNQUFNLEVBQUUsR0FBSzh4QyxFQUFPLEVBQ3REcnhDLEVBQUlndkMsSUFBV3B0RCxFQUFLaXdDLE9BQU8sRUFBR2p3QyxFQUFLaXdDLE9BQU8sRUFBRSxHQUFHdWYsRUFBUSxFQUN2RDdkLEVBQUssQ0FBQ3h6QixFQUFFLEVBQUVuZSxFQUFLMmQsTUFBTSxFQUFFUyxFQUFFLEVBQUVveEMsRUFBUXh2RCxFQUFLaXdDLE9BQU8sRUFBRTl4QixFQUFFc3hDLEVBQU8sRUFBRXp2RCxFQUFLMmQsTUFBTSxFQUFFUyxFQUFFLEVBQUVwZSxFQUFLaXdDLE9BQU8sR0FDekZKLEVBQWN5ZCxHQUFhM2IsRUFBS29CLEVBQU8veUMsRUFBSzJkLE1BQU0zZCxFQUFLaXdDLFVBRXBESixFQUFhLE1BQ2xCLEdBQWMsS0FBVjZmLEVBQWUsQ0FDakIvZCxFQUFLLEVBQUUsS0FBTSxLQUFNLEtBQU0sS0FDekIsT0FHQWllLEdBQ0Y3YyxFQUFPbGhELEdBQUc4L0MsS0FBS2tlLEVBQ2Y5YyxFQUFPbGhELEdBQUdnK0QsTUFBTWxlLEdBRWhCb0IsRUFBT2xoRCxHQUFHOC9DLEtBQUtBLEVBRWpCb0IsRUFBT2xoRCxHQUFHKzdDLE9BQU9naUIsRUFFckIsTUFFRixPQUFPN2MsRUFJVCxTQUFTK2MsR0FBd0JuYyxFQUFRM3pDLEVBQU04WCxFQUFRcGEsR0FDckQsSUFBSUcsRUFBVXRELFVBQVV6SSxPQUFTLFFBQXNCZ1gsSUFBakJ2TyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFDakUvRSxFQUFPLEdBQUcsQ0FDekIySixLQUFNLFNBQ040d0QsWUFBWSxHQUNaL3ZELEVBQUtxQixNQUFNMnVELE1BRWJ0eUQsRUFBUXVpRCxZQUNSdmlELEVBQVEwaUQsYUFBYXBnRCxFQUFLNHFELFlBQVksV0FDdENsdEQsRUFBUThpRCxLQUFLLEVBQUUsRUFBRXhnRCxFQUFLMmQsTUFBTTNkLEVBQUtpd0MsUUFDakN2eUMsRUFBUWdqRCxPQUNSaGpELEVBQVFvcEQsT0FDUixJQUFJL1QsRUFBUy95QyxFQUFLeXhDLFVBQVV3ZSxjQUM1QnZ5RCxFQUFRbWlELFVBQVU3L0MsRUFBSzJkLE1BQU0sRUFBRTNkLEVBQUtpd0MsT0FBTyxHQUUzQyxJQUFJLElBQUlwK0MsRUFBRSxFQUFFQSxFQUFFa2hELEVBQU9qaEQsT0FBT0QsSUFBSSxDQUM1QjZMLEVBQVFvcEQsT0FDTC9ULEVBQU9saEQsR0FBRys3QyxRQUNYbHdDLEVBQVFrd0MsT0FBTyxHQUFLOTJDLEtBQUt3N0MsR0FBSyxLQUVoQyxJQUFJdHJCLEVBQU8rckIsRUFBT2xoRCxHQUFHNEIsS0FDakIrN0QsRUFBVXpjLEVBQU9saEQsR0FBR2t3RCxTQUNwQjBOLEVBQVNyYixFQUFZcHRCLEVBQUt3b0MsR0FDOUI5eEQsRUFBUXVpRCxZQUNSdmlELEVBQVF3aUQsZUFBZW5OLEVBQU9saEQsR0FBR3cvQyxPQUNqQzN6QyxFQUFRMGlELGFBQWFyTixFQUFPbGhELEdBQUd3L0MsT0FDL0IzekMsRUFBUStqRCxZQUFZK04sR0FDakJ6YyxFQUFPbGhELEdBQUcrN0MsT0FDUm1GLEVBQU9saEQsR0FBR2crRCxNQUFNLEdBQUcsSUFDaEI3dkQsRUFBS3drRCxTQUNIeGtELEVBQUt3a0QsUUFBUXJ5RCxPQUFTTixFQUN4QjZMLEVBQVF3eUQsV0FBV2xwQyxHQUFNK3JCLEVBQU9saEQsR0FBR2crRCxNQUFNLEdBQUcsRUFBRTd2RCxFQUFLMmQsTUFBTSxHQUFHOWYsRUFBUTR4RCxHQUFRLEVBQUU1eEQsR0FBUyxHQUFHazFDLEVBQU9saEQsR0FBR2crRCxNQUFNLEdBQUcsRUFBRUwsRUFBUXh2RCxFQUFLaXdDLE9BQU8sR0FBR3B5QyxHQUt4SUgsRUFBUWdrRCxTQUFTMTZCLEdBQU0rckIsRUFBT2xoRCxHQUFHZytELE1BQU0sR0FBRyxFQUFFN3ZELEVBQUsyZCxNQUFNLEdBQUc5ZixFQUFRNHhELEdBQVEsRUFBRTV4RCxHQUFTLEdBQUdrMUMsRUFBT2xoRCxHQUFHZytELE1BQU0sR0FBRyxFQUFFTCxFQUFReHZELEVBQUtpd0MsT0FBTyxHQUFHcHlDLElBSXJJazFDLEVBQU9saEQsR0FBRzgvQyxLQUFLLEdBQUcsSUFDZjN4QyxFQUFLd2tELFNBQ0h4a0QsRUFBS3drRCxRQUFRcnlELE9BQVNOLEVBQ3hCNkwsRUFBUXd5RCxXQUFXbHBDLEdBQU0rckIsRUFBT2xoRCxHQUFHOC9DLEtBQUssR0FBRyxFQUFFM3hDLEVBQUsyZCxNQUFNLEdBQUc5ZixFQUFRNHhELEdBQVEsRUFBRTV4RCxHQUFTLEdBQUdrMUMsRUFBT2xoRCxHQUFHOC9DLEtBQUssR0FBRyxFQUFFNmQsRUFBUXh2RCxFQUFLaXdDLE9BQU8sR0FBR3B5QyxHQUt0SUgsRUFBUWdrRCxTQUFTMTZCLEdBQU0rckIsRUFBT2xoRCxHQUFHOC9DLEtBQUssR0FBRyxFQUFFM3hDLEVBQUsyZCxNQUFNLEdBQUc5ZixFQUFRNHhELEdBQVEsRUFBRTV4RCxHQUFTLEdBQUdrMUMsRUFBT2xoRCxHQUFHOC9DLEtBQUssR0FBRyxFQUFFNmQsRUFBUXh2RCxFQUFLaXdDLE9BQU8sR0FBR3B5QyxJQU14SUgsRUFBUWlqRCxTQUNSampELEVBQVFxcEQsVUFFWnJwRCxFQUFRcXBELFVBR1YsU0FBU29KLEdBQXFCeGMsRUFBUTN6QyxFQUFNOFgsRUFBUXBhLEdBQ2xELElBQUlHLEVBQVV0RCxVQUFVekksT0FBUyxRQUFzQmdYLElBQWpCdk8sVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBQzlFNjFELEVBQWU1NkQsRUFBTyxHQUFHLENBQzNCNjZELFlBQVksR0FDWjdFLGNBQWMsR0FDZHZPLFFBQU8sRUFDUDhOLFlBQVksRUFDWkMsWUFBWSxVQUNaNkQsWUFBWSxFQUNaeUIsV0FBVyxTQUNYdHdELEVBQUtxQixNQUFNa3ZELFFBQ1QxZSxHQUFlN3hDLEVBQUtpd0MsT0FBU2p3QyxFQUFLMnhDLEtBQUssR0FBSzN4QyxFQUFLMnhDLEtBQUssSUFBSWdDLEVBQU83aEQsT0FDakVxd0QsRUFBaUIsQ0FDbkJoa0MsRUFBR25lLEVBQUsyeEMsS0FBSyxJQUFNM3hDLEVBQUsyZCxNQUFRM2QsRUFBSzJ4QyxLQUFLLEdBQUszeEMsRUFBSzJ4QyxLQUFLLElBQU0sRUFDL0R2ekIsRUFBR3BlLEVBQUtpd0MsT0FBT2p3QyxFQUFLMnhDLEtBQUssSUFFdkIwZSxFQUFjRCxFQUFhQyxZQUMzQi9ZLEVBQVN4Z0QsS0FBS3luQixLQUFLdmUsRUFBSzJkLE1BQVEzZCxFQUFLMnhDLEtBQUssR0FBSzN4QyxFQUFLMnhDLEtBQUssSUFBTSxFQUFJMGUsR0FBY3J3RCxFQUFLaXdDLE9BQVNqd0MsRUFBSzJ4QyxLQUFLLEdBQUszeEMsRUFBSzJ4QyxLQUFLLElBQU0sRUFBSTBlLEdBQ3RJMWMsRUFBUzhILEVBQW9COUgsRUFBUTJELEVBQVF6NUMsR0FDN0NILEVBQVFvcEQsT0FDUnBwRCxFQUFRbWlELFVBQVVzQyxFQUFlaGtDLEVBQUVna0MsRUFBZS9qQyxHQUNsRCxJQUFJLElBQUl2c0IsRUFBRSxFQUFFQSxFQUFFOGhELEVBQU83aEQsT0FBT0QsSUFDcEIsR0FBSEEsR0FDR21PLEVBQUt3a0QsU0FDSHhrRCxFQUFLd2tELFFBQVFyeUQsT0FBU04sSUFDeEI2TCxFQUFRdWlELFlBQ1J2aUQsRUFBUTBpRCxhQUFhalEsRUFBU3dELEVBQU85aEQsR0FBR3cvQyxNQUFPK2UsRUFBYTVFLGdCQUM1RDl0RCxFQUFRMmlELFFBQVFnUSxFQUFhLEdBQzdCM3lELEVBQVE0aUQsUUFBUTNNLEVBQU85aEQsR0FBR3lsRCxPQUFPK1ksR0FBY3hlLEdBQy9DbjBDLEVBQVE0aUQsT0FBTzNNLEVBQU85aEQsR0FBR3lsRCxPQUFPK1ksR0FBY3hlLEdBQzlDbjBDLEVBQVE0aUQsT0FBTytQLEVBQWEsR0FDNUIzeUQsRUFBUTRpRCxRQUFRK1AsRUFBYSxHQUM3QjN5RCxFQUFRK2lELFlBQ1IvaUQsRUFBUWdqRCxRQUdaL00sRUFBTzloRCxHQUFHaW1ELFdBQVcsQ0FBQ3FLLEVBQWVoa0MsRUFBRXcxQixFQUFPOWhELEdBQUd5bEQsT0FBTzZLLEVBQWUvakMsRUFBRXl6QixFQUFZc1EsRUFBZWhrQyxFQUFFdzFCLEVBQU85aEQsR0FBR3lsRCxPQUFPNkssRUFBZS9qQyxHQUN0STFnQixFQUFRdWlELFlBQ1J2aUQsRUFBUXlpRCxhQUFhaVEsRUFBYXJGLFlBQWMvcUQsRUFBS3pKLFlBQ3JEbUgsRUFBUXdpRCxlQUFla1EsRUFBYXBGLGFBQ3BDdHRELEVBQVEwaUQsYUFBYWpRLEVBQVN3RCxFQUFPOWhELEdBQUd3L0MsTUFBTytlLEVBQWF2QixjQUM1RG54RCxFQUFRMmlELE9BQU8sRUFBRyxHQUNsQjNpRCxFQUFRNGlELFFBQVEzTSxFQUFPOWhELEdBQUd5bEQsUUFBU3pGLEdBQ25DbjBDLEVBQVE0aUQsT0FBTzNNLEVBQU85aEQsR0FBR3lsRCxRQUFTekYsR0FDbENuMEMsRUFBUTRpRCxPQUFPLEVBQUcsR0FDbEI1aUQsRUFBUStpRCxZQUNSL2lELEVBQVFnakQsT0FDa0IsR0FBdkIwUCxFQUFhblQsUUFDZHYvQyxFQUFRaWpELFdBR04zZ0QsRUFBS3drRCxTQUNIeGtELEVBQUt3a0QsUUFBUXJ5RCxPQUFTTixJQUN4QjZMLEVBQVF1aUQsWUFDUnZpRCxFQUFRMGlELGFBQWFqUSxFQUFTd0QsRUFBTzloRCxHQUFHdy9DLE1BQU8rZSxFQUFhNUUsZ0JBQzVEOXRELEVBQVEyaUQsT0FBTyxFQUFHLEdBQ2xCM2lELEVBQVE0aUQsUUFBUTNNLEVBQU85aEQsRUFBRSxHQUFHeWxELE9BQU8rWSxFQUFhLEdBQ2hEM3lELEVBQVE0aUQsUUFBUTNNLEVBQU85aEQsR0FBR3lsRCxPQUFPK1ksR0FBY3hlLEdBQy9DbjBDLEVBQVE0aUQsT0FBTzNNLEVBQU85aEQsR0FBR3lsRCxPQUFPK1ksR0FBY3hlLEdBQzlDbjBDLEVBQVE0aUQsT0FBTzNNLEVBQU85aEQsRUFBRSxHQUFHeWxELE9BQU8rWSxFQUFhLEdBQy9DM3lELEVBQVE0aUQsT0FBTyxFQUFHLEdBQ2xCNWlELEVBQVEraUQsWUFDUi9pRCxFQUFRZ2pELE9BQ1JoakQsRUFBUStpRCxZQUNSL2lELEVBQVFnakQsUUFHWi9NLEVBQU85aEQsR0FBR2ltRCxXQUFXLENBQUNxSyxFQUFlaGtDLEVBQUV3MUIsRUFBTzloRCxHQUFHeWxELE9BQU82SyxFQUFlL2pDLEVBQUV5ekIsR0FBYWhnRCxFQUFFLEdBQUdzd0QsRUFBZWhrQyxFQUFFdzFCLEVBQU85aEQsR0FBR3lsRCxPQUFPNkssRUFBZS9qQyxFQUFFeXpCLEVBQVloZ0QsR0FDMUo2TCxFQUFRdWlELFlBQ1J2aUQsRUFBUXlpRCxhQUFhaVEsRUFBYXJGLFlBQWMvcUQsRUFBS3pKLFlBQ3JEbUgsRUFBUXdpRCxlQUFla1EsRUFBYXBGLGFBQ3BDdHRELEVBQVEwaUQsYUFBYWpRLEVBQVN3RCxFQUFPOWhELEdBQUd3L0MsTUFBTytlLEVBQWF2QixjQUM1RG54RCxFQUFRMmlELE9BQU8sRUFBRyxHQUNsQjNpRCxFQUFRNGlELFFBQVEzTSxFQUFPOWhELEVBQUUsR0FBR3lsRCxPQUFRLEdBQ3BDNTVDLEVBQVE0aUQsUUFBUTNNLEVBQU85aEQsR0FBR3lsRCxRQUFTekYsR0FDbkNuMEMsRUFBUTRpRCxPQUFPM00sRUFBTzloRCxHQUFHeWxELFFBQVN6RixHQUNsQ24wQyxFQUFRNGlELE9BQU8zTSxFQUFPOWhELEVBQUUsR0FBR3lsRCxPQUFRLEdBQ25DNTVDLEVBQVE0aUQsT0FBTyxFQUFHLEdBQ2xCNWlELEVBQVEraUQsWUFDUi9pRCxFQUFRZ2pELE9BQ2tCLEdBQXZCMFAsRUFBYW5ULFFBQ2R2L0MsRUFBUWlqRCxVQUdaampELEVBQVFtaUQsVUFBVSxHQUFHaE8sR0FRdkIsT0FOQW4wQyxFQUFRcXBELFdBRWUsSUFBbkIvbUQsRUFBS3VuRCxXQUFtQyxJQUFaMXBELEdBQzlCMnlELEdBQWU3YyxFQUFRM3pDLEVBQU10QyxFQUFTbTBDLEVBQWF1ZSxFQUFhRSxXQUFZRCxFQUFhbE8sR0FHcEYsQ0FDTDNPLE9BQVEyTyxFQUNSN0ssT0FBUUEsRUFDUjNELE9BQVFBLEdBSVosU0FBUzZjLEdBQWU3YyxFQUFRM3pDLEVBQU10QyxFQUFTbTBDLEVBQWF5ZSxFQUFXRCxFQUFhbE8sR0FDbEYsSUFBSSxJQUFJdHdELEVBQUUsRUFBRUEsRUFBRThoRCxFQUFPN2hELE9BQU9ELElBQUksQ0FDOUIsSUFBSWlHLEVBQU82N0MsRUFBTzloRCxHQUNkNHJELE9BQU0sRUFBQ0MsT0FBSSxFQUFDNkQsT0FBTSxFQUFDelQsT0FBUSxFQUMzQjltQixFQUFPbHZCLEVBQUsrOEMsT0FBUy84QyxFQUFLKzhDLFFBQVEvOEMsRUFBS2toRCxhQUFhOUosUUFBUSxJQUFNMUcsRUFBSzBHLFFBQTRCLElBQXBCcDNDLEVBQUtraEQsY0FBcUIsSUFDNUYsU0FBZHNYLEdBRUM3UyxFQURJLEdBQUg1ckQsR0FDT2lHLEVBQUtnZ0QsV0FBVyxHQUFHcUssRUFBZWhrQyxHQUFHLEdBRXJDcm1CLEVBQUtnZ0QsV0FBVyxHQUFHbkUsRUFBTzloRCxFQUFFLEdBQUdpbUQsV0FBVyxJQUFJLEVBRXhENEYsRUFBS0QsRUFBbUIsRUFBWjRTLEVBQ1o5TyxFQUFPenBELEVBQUtnZ0QsV0FBVyxHQUFHakcsRUFBWSxFQUN0Qy9ELEVBQVdoMkMsRUFBS2lxRCxVQUFZL2hELEVBQUs4dEMsU0FDakNwd0MsRUFBUXlpRCxhQUFhLEVBQUluZ0QsRUFBS3pKLFlBQzlCbUgsRUFBUXdpRCxlQUFlcG9ELEVBQUt1NUMsT0FDNUIzekMsRUFBUTBpRCxhQUFhdG9ELEVBQUt1NUMsT0FDMUIzekMsRUFBUXVpRCxZQUNSdmlELEVBQVEyaUQsT0FBTzVDLEVBQU84RCxHQUN0QjdqRCxFQUFRNGlELE9BQU81QyxFQUFLNkQsR0FDcEI3akQsRUFBUWlqRCxTQUNSampELEVBQVEraUQsWUFDUi9pRCxFQUFRdWlELFlBQ1J2aUQsRUFBUTJpRCxPQUFPM0MsRUFBTTZELEdBQ3JCN2pELEVBQVE2aUQsSUFBSTdDLEVBQU02RCxFQUFRLEVBQUcsRUFBRyxFQUFJenFELEtBQUt3N0MsSUFDekM1MEMsRUFBUStpRCxZQUNSL2lELEVBQVFnakQsT0FDUmhqRCxFQUFRdWlELFlBQ1J2aUQsRUFBUStqRCxZQUFZM1QsR0FDcEJwd0MsRUFBUTBpRCxhQUFhdG9ELEVBQUtrcUQsV0FBYSxXQUN2Q3RrRCxFQUFRZ2tELFNBQVMxNkIsRUFBTTAyQixFQUFLLEVBQUc2RCxFQUFTelQsRUFBUyxFQUFHLEdBQ3BEcHdDLEVBQVEraUQsWUFDUi9pRCxFQUFRaWpELFNBQ1JqakQsRUFBUStpRCxjQUdOaEQsRUFESSxHQUFINXJELEdBQ09pRyxFQUFLZ2dELFdBQVcsR0FBR3FLLEVBQWVoa0MsR0FBRyxHQUVyQ3JtQixFQUFLZ2dELFdBQVcsR0FBR25FLEVBQU85aEQsRUFBRSxHQUFHaW1ELFdBQVcsSUFBSSxFQUV4RDRGLEVBQUtELEVBQW1CLEVBQVo0UyxFQUNaOU8sRUFBT3pwRCxFQUFLZ2dELFdBQVcsR0FBR2pHLEVBQVksRUFDdEMvRCxFQUFXaDJDLEVBQUtpcUQsVUFBWS9oRCxFQUFLOHRDLFNBQ2pDcHdDLEVBQVF5aUQsYUFBYSxFQUFJbmdELEVBQUt6SixZQUM5Qm1ILEVBQVF3aUQsZUFBZXBvRCxFQUFLdTVDLE9BQzVCM3pDLEVBQVEwaUQsYUFBYXRvRCxFQUFLdTVDLE9BQzFCM3pDLEVBQVF1aUQsWUFDUnZpRCxFQUFRMmlELE9BQU81QyxFQUFPOEQsR0FDdEI3akQsRUFBUTRpRCxPQUFPNUMsRUFBSzZELEdBQ3BCN2pELEVBQVFpakQsU0FDUmpqRCxFQUFRK2lELFlBQ1IvaUQsRUFBUXVpRCxZQUNSdmlELEVBQVEyaUQsT0FBTzNDLEVBQU02RCxHQUNyQjdqRCxFQUFRNmlELElBQUk3QyxFQUFNNkQsRUFBUSxFQUFHLEVBQUcsRUFBSXpxRCxLQUFLdzdDLElBQ3pDNTBDLEVBQVEraUQsWUFDUi9pRCxFQUFRZ2pELE9BQ1JoakQsRUFBUXVpRCxZQUNSdmlELEVBQVErakQsWUFBWTNULEdBQ3BCcHdDLEVBQVEwaUQsYUFBYXRvRCxFQUFLa3FELFdBQWEsV0FDdkN0a0QsRUFBUWdrRCxTQUFTMTZCLEVBQU0wMkIsRUFBSyxFQUFFdEosRUFBWXB0QixHQUFPdTZCLEVBQVN6VCxFQUFTLEVBQUcsR0FDdEVwd0MsRUFBUStpRCxZQUNSL2lELEVBQVFpakQsU0FDUmpqRCxFQUFRK2lELGNBT2QsU0FBU2dRLEdBQVd6d0QsRUFBTXRDLEdBQ3hCQSxFQUFRNHhELE9BR1YsSUFBSW9CLEdBQVMsQ0FDWEMsT0FBUSxTQUFnQi9OLEdBQ3RCLE9BQU85ckQsS0FBS21pRCxJQUFJMkosRUFBSyxJQUV2QmdPLFFBQVMsU0FBaUJoTyxHQUN4QixPQUFPOXJELEtBQUttaUQsSUFBSTJKLEVBQU0sRUFBRyxHQUFLLEdBRWhDaU8sVUFBVyxTQUFtQmpPLEdBQzVCLE9BQUtBLEdBQU8sSUFBTyxFQUNWLEdBQU05ckQsS0FBS21pRCxJQUFJMkosRUFBSyxHQUVwQixJQUFPOXJELEtBQUttaUQsSUFBSTJKLEVBQU0sRUFBRyxHQUFLLElBR3pDa08sT0FBUSxTQUFnQmxPLEdBQ3RCLE9BQU9BLElBSVgsU0FBU21PLEdBQVUvd0QsR0FDakJ0SyxLQUFLczdELFFBQVMsRUFDZGh4RCxFQUFLaXhELFNBQW9DLHFCQUFsQmp4RCxFQUFLaXhELFNBQTJCLElBQU9qeEQsRUFBS2l4RCxTQUNuRWp4RCxFQUFLa3hELE9BQVNseEQsRUFBS2t4RCxRQUFVLFNBQzdCLElBQUl6eUIsRUFBUSxHQUVaLFNBQVMweUIsSUFDUCxNQUEwQixxQkFBZnIrQyxXQUNGLFNBQVNzK0MsRUFBTTN5QixHQUNwQjNyQixZQUFXLFdBQ1QsSUFBSWt2QixHQUFhLElBQUk1aUMsS0FDckJneUQsRUFBS3B2QixLQUNKdkQsSUFFcUMscUJBQTFCNHlCLHNCQUNUQSxzQkFFQSxTQUFTRCxHQUNkQSxFQUFLLE9BSVgsSUFBSUUsRUFBaUJILElBQ2pCSSxFQUFpQixLQUNqQkMsRUFBUSxTQUFjQyxHQUN4QixHQUFrQixPQUFkQSxJQUFzQyxJQUFoQi83RCxLQUFLczdELE9BRzdCLE9BRkFoeEQsRUFBSzB4RCxXQUFhMXhELEVBQUsweEQsVUFBVSxRQUNqQzF4RCxFQUFLMnhELG1CQUFxQjN4RCxFQUFLMnhELHFCQU1qQyxHQUh1QixPQUFuQkosSUFDRkEsRUFBaUJFLEdBRWZBLEVBQVlGLEVBQWlCdnhELEVBQUtpeEQsU0FBVSxDQUM5QyxJQUFJcHpELEdBQVc0ekQsRUFBWUYsR0FBa0J2eEQsRUFBS2l4RCxTQUM5Q1csRUFBaUJsQixHQUFPMXdELEVBQUtreEQsUUFDakNyekQsRUFBVSt6RCxFQUFlL3pELEdBRXpCbUMsRUFBSzB4RCxXQUFhMXhELEVBQUsweEQsVUFBVTd6RCxHQUNqQ3l6RCxFQUFlRSxFQUFPL3lCLFFBRXRCeitCLEVBQUsweEQsV0FBYTF4RCxFQUFLMHhELFVBQVUsR0FDakMxeEQsRUFBSzJ4RCxtQkFBcUIzeEQsRUFBSzJ4RCxxQkFHbkNILEVBQVFBLEVBQU1uMUMsS0FBSzNtQixNQUNuQjQ3RCxFQUFlRSxFQUFPL3lCLEdBU3hCLFNBQVNvekIsR0FBVzF5RCxFQUFNYSxFQUFNOFgsRUFBUXBhLEdBQ3RDLElBQUlvMEQsRUFBUXA4RCxLQUNSaStDLEVBQVMzekMsRUFBSzJ6QyxPQUNkMkIsRUFBYXQxQyxFQUFLczFDLFdBQ3RCM0IsRUFBU0QsRUFBV0MsRUFBUTN6QyxFQUFNOFgsR0FDbEMsSUFBSW01QyxFQUFXanhELEVBQUsreEQsVUFBWS94RCxFQUFLaXhELFNBQVcsRUFDaER2N0QsS0FBS3M4RCxtQkFBcUJ0OEQsS0FBS3M4RCxrQkFBa0J6bEQsT0FDakQsSUFBSWs3QyxFQUFXLEtBQ2YsR0FBWSxVQUFSdG9ELEVBQWtCLENBQ3BCLElBQUl3b0QsRUFBVW55RCxFQUFPLEdBQUl3SyxFQUFLcUIsTUFBTXVtRCxPQUFPRCxTQUN2Q0EsRUFBUW5oRCxNQUNWaWhELEVBQVczVyxFQUFZNlcsRUFBUUksSUFBS0osRUFBUWwwRCxLQUFNazBELEVBQVF0VyxNQUFPc0MsRUFBTyxHQUFHNWdELE1BQzNFMDBELEVBQVcvVCxFQUFXK1QsRUFBVXpuRCxFQUFNOFgsR0FDdEM5WCxFQUFLeW5ELFNBQVdBLEdBRWhCQSxFQURTem5ELEVBQUt5bkQsU0FDSHpuRCxFQUFLeW5ELFNBQVcvVCxFQUFXMXpDLEVBQUt5bkQsU0FBVXpuRCxFQUFNOFgsR0FFaEQ2N0IsT0FHYjhULEVBQVc5VCxFQUliM3pDLEVBQUtpeUQsU0FBV3RlLEVBQVMyQyxFQUFhM0MsR0FJdEMzekMsRUFBSzJ4QyxLQUFPLElBQUlsZ0QsTUFBTSxHQUV0QixJQUFLLElBQUk2dkMsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBQ3JCdGhDLEVBQUsyeEMsS0FBS3JRLEdBQUt0aEMsRUFBSzJ0QyxRQUFRck0sR0FJOUIsSUFBSTR3QixFQUFpQjlZLEVBQWNxTyxFQUFVem5ELEVBQU04WCxFQUFROVgsRUFBS3l4QyxXQUM5RGhFLEVBQWV5a0IsRUFBZXZnQixLQUFLMkgsWUFDbkNjLEVBQWM4WCxFQUFldmdCLEtBQUswSCxXQUdwQyxPQURBdmhDLEVBQU8yMUIsYUFBZUEsRUFDZHp0QyxFQUFLeTVDLE9BQU85OEIsVUFDbEIsSUFBSyxNQUNIM2MsRUFBSzJ4QyxLQUFLLElBQU1sRSxFQUNoQixNQUNGLElBQUssU0FDSHp0QyxFQUFLMnhDLEtBQUssSUFBTWxFLEVBQ2hCLE1BQ0YsSUFBSyxPQUNIenRDLEVBQUsyeEMsS0FBSyxJQUFNeUksRUFDaEIsTUFDRixJQUFLLFFBQ0hwNkMsRUFBSzJ4QyxLQUFLLElBQU15SSxFQUNoQixNQUdKLElBQUkrWCxFQUFnQixHQUFHOWtCLEVBQWEsRUFXcEMsR0FWa0IsU0FBZHJ0QyxFQUFLYixNQUFpQyxXQUFkYSxFQUFLYixNQUFtQyxTQUFkYSxFQUFLYixNQUFpQyxRQUFkYSxFQUFLYixNQUFnQyxXQUFkYSxFQUFLYixNQUN4R2d6RCxFQUFnQm5ULEdBQWFyTCxFQUFRM3pDLEVBQU04WCxHQUMzQ3UxQixFQUFhOGtCLEVBQWM5a0IsV0FDM0J2MUIsRUFBT3UxQixXQUFhQSxFQUNwQnJ0QyxFQUFLMnhDLEtBQUssSUFBTXRFLEdBRWhCdjFCLEVBQU91MUIsV0FBYUEsRUFFdEJydEMsRUFBS3l4QyxVQUFVd1YsVUFBWWtMLEVBRXZCbnlELEVBQUtzMUMsWUFBY3QxQyxFQUFLczFDLFdBQVd4akQsT0FBUSxDQUM3Q2tPLEVBQUt5eEMsVUFBVUssVUFBWXNMLEVBQWVwOUMsRUFBS3MxQyxXQUFZdDFDLEVBQU04WCxHQUNqRSxJQUFJczZDLEVBQXFCelgsRUFBa0IzNkMsRUFBS3MxQyxXQUFZdDFDLEVBQU04WCxFQUFROVgsRUFBS3l4QyxVQUFVSyxVQUFVRCxhQUNqR3RFLEVBQWM2a0IsRUFBbUI3a0IsWUFDakMyRSxFQUFRa2dCLEVBQW1CbGdCLE1BQzdCcDZCLEVBQU95MUIsWUFBY0EsRUFDckJ6MUIsRUFBT3V5QyxpQkFBbUJuWSxFQUMxQmx5QyxFQUFLMnhDLEtBQUssSUFBTXBFLEVBQ2hCdnRDLEVBQUt5eEMsVUFBVTRnQixlQUFpQkQsRUFJbEMsR0FBSXB5RCxFQUFLdTlDLGNBQTBDLFNBQTFCdjlDLEVBQUsyMkMsTUFBTTJiLGtCQUFvRHhwRCxJQUExQjlJLEVBQUsybUQsaUJBQWdDLENBQ2pHLElBQUk0TCxFQUFhLEVBQ2Z4Z0IsRUFBYy94QyxFQUFLeXhDLFVBQVVLLFVBQVVDLFlBQ3ZDMEwsRUFBU3o5QyxFQUFLeXhDLFVBQVVLLFVBQVUyTCxPQUNsQ0MsRUFBTzE5QyxFQUFLeXhDLFVBQVVLLFVBQVU0TCxLQUNoQzdMLEVBQWM3eEMsRUFBS3l4QyxVQUFVSyxVQUFVRCxZQUNyQzJnQixFQUFhM2dCLEdBQWVFLEVBQVlqZ0QsT0FBUyxHQUNqRDJnRSxFQUFjL1UsRUFBT0QsRUFDekI4VSxFQUFhRSxFQUFjRCxFQUMzQlYsRUFBTVksYUFBZSxDQUNuQkMsY0FBZUosRUFDZkssWUFBYUwsRUFDYi9nQixTQUFVLEVBQ1ZxaEIsYUFBYyxHQUVoQjd5RCxFQUFLMm1ELGlCQUFtQjRMLEVBTzFCLE9BSmEsUUFBVHB6RCxHQUEyQixTQUFUQSxHQUE0QixTQUFUQSxJQUN2QzJZLEVBQU9nMEMsb0JBQXdDLElBQW5COXJELEVBQUt1bkQsVUFBc0IsRUFBSTNLLEVBQW9CNkssSUFHekV0b0QsR0FDTixJQUFLLE9BQ0gsSUFBSTJ6RCxFQUFhdDlELEVBQU8sR0FBRyxDQUN6QjJKLEtBQU0sU0FDTjR3RCxZQUFZLEdBQ1ovdkQsRUFBS3FCLE1BQU0ydUQsTUFDTyxHQUFqQmh3RCxFQUFLK3lELGlCQUFxQ2pxRCxHQUFqQjlJLEVBQUsreUQsYUFDL0IveUQsRUFBS3l4QyxVQUFVd2UsY0FBY1YsR0FBa0J2dkQsRUFBSzh5RCxFQUFXM3pELE9BRWpFekosS0FBS3M4RCxrQkFBb0IsSUFBSWpCLEdBQVUsQ0FDckNHLE9BQVEsWUFDUkQsU0FBVUEsRUFDVlMsVUFBVyxTQUFTN3pELEdBQ2xCSCxFQUFReXhELFVBQVUsRUFBRyxFQUFHbnZELEVBQUsyZCxNQUFPM2QsRUFBS2l3QyxRQUNyQ2p3QyxFQUFLNHRDLFFBQ1ArUixHQUFjamlELEVBQVNzQyxHQUV6Qjh2RCxHQUF3Qm5jLEVBQVEzekMsRUFBTThYLEVBQVFwYSxFQUFRRyxHQUN0RDR5RCxHQUFXendELEVBQU10QyxJQUVuQmkwRCxrQkFBbUIsV0FDakJHLEVBQU14MkQsTUFBTTAzRCxRQUFRLHFCQUcxQixNQUNBLElBQUssTUFDSHQxRCxFQUFReXhELFVBQVUsRUFBRyxFQUFHbnZELEVBQUsyZCxNQUFPM2QsRUFBS2l3QyxRQUN6QzBlLEdBQWtCaGIsRUFBUTN6QyxFQUFNOFgsRUFBUXBhLEdBQzFDLE1BQ0EsSUFBSyxTQUNIaEksS0FBS3M4RCxrQkFBb0IsSUFBSWpCLEdBQVUsQ0FDckNHLE9BQVEsWUFDUkQsU0FBVUEsRUFDVlMsVUFBVyxTQUFTN3pELEdBQ2xCSCxFQUFReXhELFVBQVUsRUFBRyxFQUFHbnZELEVBQUsyZCxNQUFPM2QsRUFBS2l3QyxRQUNyQ2p3QyxFQUFLNHRDLFFBQ1ArUixHQUFjamlELEVBQVNzQyxHQUV6QkEsRUFBS3l4QyxVQUFVb0csV0FBYXNZLEdBQXFCeGMsRUFBUTN6QyxFQUFNOFgsRUFBUXBhLEVBQVNHLEdBQ2hGZ3RELEdBQVc3cUQsRUFBSzJ6QyxPQUFRM3pDLEVBQU04WCxFQUFRcGEsRUFBU3NDLEVBQUt5eEMsV0FDcER3WCxHQUFrQmpwRCxFQUFNOFgsRUFBUXBhLEVBQVNHLEdBQ3pDNHlELEdBQVd6d0QsRUFBTXRDLElBRW5CaTBELGtCQUFtQixXQUNqQkcsRUFBTXgyRCxNQUFNMDNELFFBQVEscUJBRzFCLE1BQ0EsSUFBSyxPQUNIdDlELEtBQUtzOEQsa0JBQW9CLElBQUlqQixHQUFVLENBQ3JDRyxPQUFRLFNBQ1JELFNBQVVBLEVBQ1ZTLFVBQVcsU0FBbUI3ekQsR0FDNUJILEVBQVF5eEQsVUFBVSxFQUFHLEVBQUdudkQsRUFBSzJkLE1BQU8zZCxFQUFLaXdDLFFBQ3JDandDLEVBQUs0dEMsUUFDUCtSLEdBQWNqaUQsRUFBU3NDLEdBRXpCdXFELEdBQWNqVixFQUFZdDFDLEVBQU04WCxFQUFRcGEsR0FDeEN5ckQsR0FBVTdULEVBQVl0MUMsRUFBTThYLEVBQVFwYSxHQUNwQyxJQUFJdTFELEVBQXNCeEssR0FBbUI5VSxFQUFRM3pDLEVBQU04WCxFQUFRcGEsRUFBU0csR0FDMUVrMEMsRUFBY2toQixFQUFvQmxoQixZQUNsQ3NELEVBQVk0ZCxFQUFvQjVkLFVBQ2hDeEQsRUFBY29oQixFQUFvQnBoQixZQUNsQ3FDLEVBQVcrZSxFQUFvQi9lLFNBQy9CQyxFQUFXOGUsRUFBb0I5ZSxTQUNqQ24wQyxFQUFLeXhDLFVBQVVNLFlBQWNBLEVBQzdCL3hDLEVBQUt5eEMsVUFBVTRELFVBQVlBLEVBQzNCcjFDLEVBQUt5eEMsVUFBVUksWUFBY0EsRUFDN0I2WSxHQUFVL1csRUFBUTN6QyxFQUFNOFgsRUFBUXBhLElBQ0osSUFBeEJzQyxFQUFLa3pELGdCQUF3QyxJQUFacjFELEdBQ25Dd25ELEdBQWFuUixFQUFVQyxFQUFVbjBDLEVBQU04WCxFQUFRcGEsR0FFakRtdEQsR0FBVzdxRCxFQUFLMnpDLE9BQVEzekMsRUFBTThYLEVBQVFwYSxFQUFTc0MsRUFBS3l4QyxXQUNwRHdYLEdBQWtCanBELEVBQU04WCxFQUFRcGEsRUFBU0csRUFBU2cwQyxFQUFhRSxHQUMvRDBlLEdBQVd6d0QsRUFBTXRDLElBR25CaTBELGtCQUFtQixXQUNqQkcsRUFBTXgyRCxNQUFNMDNELFFBQVEscUJBR3hCLE1BQ0YsSUFBSyxNQUNIdDlELEtBQUtzOEQsa0JBQW9CLElBQUlqQixHQUFVLENBQ3JDRyxPQUFRLFNBQ1JELFNBQVVBLEVBQ1ZTLFVBQVcsU0FBbUI3ekQsR0FDNUJILEVBQVF5eEQsVUFBVSxFQUFHLEVBQUdudkQsRUFBSzJkLE1BQU8zZCxFQUFLaXdDLFFBQ3JDandDLEVBQUs0dEMsUUFDUCtSLEdBQWNqaUQsRUFBU3NDLEdBRXpCdXFELEdBQWNqVixFQUFZdDFDLEVBQU04WCxFQUFRcGEsR0FDeEN5ckQsR0FBVTdULEVBQVl0MUMsRUFBTThYLEVBQVFwYSxHQUNwQyxJQUFJeTFELEVBQXFCdkssR0FBa0JqVixFQUFRM3pDLEVBQU04WCxFQUFRcGEsRUFBU0csR0FDeEVrMEMsRUFBY29oQixFQUFtQnBoQixZQUNqQ3NELEVBQVk4ZCxFQUFtQjlkLFVBQy9CeEQsRUFBY3NoQixFQUFtQnRoQixZQUNqQ3FDLEVBQVdpZixFQUFtQmpmLFNBQzlCQyxFQUFXZ2YsRUFBbUJoZixTQUNoQ24wQyxFQUFLeXhDLFVBQVVNLFlBQWNBLEVBQzdCL3hDLEVBQUt5eEMsVUFBVTRELFVBQVlBLEVBQzNCcjFDLEVBQUt5eEMsVUFBVUksWUFBY0EsRUFDN0I2WSxHQUFVL1csRUFBUTN6QyxFQUFNOFgsRUFBUXBhLElBQ0osSUFBeEJzQyxFQUFLa3pELGdCQUF3QyxJQUFacjFELEdBQ25Dd25ELEdBQWFuUixFQUFVQyxFQUFVbjBDLEVBQU04WCxFQUFRcGEsR0FFakRtdEQsR0FBVzdxRCxFQUFLMnpDLE9BQVEzekMsRUFBTThYLEVBQVFwYSxFQUFTc0MsRUFBS3l4QyxXQUNwRHdYLEdBQWtCanBELEVBQU04WCxFQUFRcGEsRUFBU0csRUFBU2cwQyxFQUFhRSxHQUMvRDBlLEdBQVd6d0QsRUFBTXRDLElBRW5CaTBELGtCQUFtQixXQUNqQkcsRUFBTXgyRCxNQUFNMDNELFFBQVEscUJBR3hCLE1BQ0YsSUFBSyxTQUNIdDlELEtBQUtzOEQsa0JBQW9CLElBQUlqQixHQUFVLENBQ3JDRyxPQUFRLFNBQ1JELFNBQVVBLEVBQ1ZTLFVBQVcsU0FBbUI3ekQsR0FDNUJILEVBQVF5eEQsVUFBVSxFQUFHLEVBQUdudkQsRUFBSzJkLE1BQU8zZCxFQUFLaXdDLFFBQ3JDandDLEVBQUs0dEMsUUFDUCtSLEdBQWNqaUQsRUFBU3NDLEdBRXpCdXFELEdBQWNqVixFQUFZdDFDLEVBQU04WCxFQUFRcGEsR0FDeEN5ckQsR0FBVTdULEVBQVl0MUMsRUFBTThYLEVBQVFwYSxHQUNwQyxJQUFJMDFELEVBQXdCcE0sR0FBcUJyVCxFQUFRM3pDLEVBQU04WCxFQUFRcGEsRUFBU0csR0FDOUVrMEMsRUFBY3FoQixFQUFzQnJoQixZQUNwQ3NELEVBQVkrZCxFQUFzQi9kLFVBQ2xDeEQsRUFBY3VoQixFQUFzQnZoQixZQUNwQ3FDLEVBQVdrZixFQUFzQmxmLFNBQ2pDQyxFQUFXaWYsRUFBc0JqZixTQUNuQ24wQyxFQUFLeXhDLFVBQVVNLFlBQWNBLEVBQzdCL3hDLEVBQUt5eEMsVUFBVTRELFVBQVlBLEVBQzNCcjFDLEVBQUt5eEMsVUFBVUksWUFBY0EsRUFDN0I2WSxHQUFVL1csRUFBUTN6QyxFQUFNOFgsRUFBUXBhLElBQ0osSUFBeEJzQyxFQUFLa3pELGdCQUF3QyxJQUFacjFELEdBQ25Dd25ELEdBQWFuUixFQUFVQyxFQUFVbjBDLEVBQU04WCxFQUFRcGEsR0FFakRtdEQsR0FBVzdxRCxFQUFLMnpDLE9BQVEzekMsRUFBTThYLEVBQVFwYSxFQUFTc0MsRUFBS3l4QyxXQUNwRHdYLEdBQWtCanBELEVBQU04WCxFQUFRcGEsRUFBU0csRUFBU2cwQyxFQUFhRSxHQUMvRDBlLEdBQVd6d0QsRUFBTXRDLElBRW5CaTBELGtCQUFtQixXQUNqQkcsRUFBTXgyRCxNQUFNMDNELFFBQVEscUJBR3hCLE1BQ0YsSUFBSyxPQUNIdDlELEtBQUtzOEQsa0JBQW9CLElBQUlqQixHQUFVLENBQ3JDRyxPQUFRLFNBQ1JELFNBQVVBLEVBQ1ZTLFVBQVcsU0FBbUI3ekQsR0FDNUJILEVBQVF5eEQsVUFBVSxFQUFHLEVBQUdudkQsRUFBSzJkLE1BQU8zZCxFQUFLaXdDLFFBQ3JDandDLEVBQUs0dEMsUUFDUCtSLEdBQWNqaUQsRUFBU3NDLEdBRXpCdXFELEdBQWNqVixFQUFZdDFDLEVBQU04WCxFQUFRcGEsR0FDeEN5ckQsR0FBVTdULEVBQVl0MUMsRUFBTThYLEVBQVFwYSxHQUNwQyxJQUFJMjFELEVBQXNCbEwsR0FBbUJ4VSxFQUFRM3pDLEVBQU04WCxFQUFRcGEsRUFBU0csR0FDMUVrMEMsRUFBY3NoQixFQUFvQnRoQixZQUNsQ3NELEVBQVlnZSxFQUFvQmhlLFVBQ2hDeEQsRUFBY3doQixFQUFvQnhoQixZQUNsQ3FDLEVBQVdtZixFQUFvQm5mLFNBQy9CQyxFQUFXa2YsRUFBb0JsZixTQUNqQ24wQyxFQUFLeXhDLFVBQVVNLFlBQWNBLEVBQzdCL3hDLEVBQUt5eEMsVUFBVTRELFVBQVlBLEVBQzNCcjFDLEVBQUt5eEMsVUFBVUksWUFBY0EsRUFDN0I2WSxHQUFVL1csRUFBUTN6QyxFQUFNOFgsRUFBUXBhLElBQ0osSUFBeEJzQyxFQUFLa3pELGdCQUF3QyxJQUFacjFELEdBQ25Dd25ELEdBQWFuUixFQUFVQyxFQUFVbjBDLEVBQU04WCxFQUFRcGEsR0FFakRtdEQsR0FBVzdxRCxFQUFLMnpDLE9BQVEzekMsRUFBTThYLEVBQVFwYSxFQUFTc0MsRUFBS3l4QyxXQUNwRHdYLEdBQWtCanBELEVBQU04WCxFQUFRcGEsRUFBU0csRUFBU2cwQyxFQUFhRSxHQUMvRDBlLEdBQVd6d0QsRUFBTXRDLElBRW5CaTBELGtCQUFtQixXQUNqQkcsRUFBTXgyRCxNQUFNMDNELFFBQVEscUJBR3hCLE1BQ0YsSUFBSyxPQUNMLElBQUssTUFDSHQ5RCxLQUFLczhELGtCQUFvQixJQUFJakIsR0FBVSxDQUNyQ0csT0FBUSxZQUNSRCxTQUFVQSxFQUNWUyxVQUFXLFNBQW1CN3pELEdBQzVCSCxFQUFReXhELFVBQVUsRUFBRyxFQUFHbnZELEVBQUsyZCxNQUFPM2QsRUFBS2l3QyxRQUNyQ2p3QyxFQUFLNHRDLFFBQ1ArUixHQUFjamlELEVBQVNzQyxHQUV6QkEsRUFBS3l4QyxVQUFVcUgsUUFBVXdTLEdBQWtCM1gsRUFBUTN6QyxFQUFNOFgsRUFBUXBhLEVBQVNHLEdBQzFFZ3RELEdBQVc3cUQsRUFBSzJ6QyxPQUFRM3pDLEVBQU04WCxFQUFRcGEsRUFBU3NDLEVBQUt5eEMsV0FDcER3WCxHQUFrQmpwRCxFQUFNOFgsRUFBUXBhLEVBQVNHLEdBQ3pDNHlELEdBQVd6d0QsRUFBTXRDLElBRW5CaTBELGtCQUFtQixXQUNqQkcsRUFBTXgyRCxNQUFNMDNELFFBQVEscUJBR3hCLE1BQ0YsSUFBSyxPQUNIdDlELEtBQUtzOEQsa0JBQW9CLElBQUlqQixHQUFVLENBQ3JDRyxPQUFRLFlBQ1JELFNBQVVBLEVBQ1ZTLFVBQVcsU0FBbUI3ekQsR0FDNUJILEVBQVF5eEQsVUFBVSxFQUFHLEVBQUdudkQsRUFBSzJkLE1BQU8zZCxFQUFLaXdDLFFBQ3JDandDLEVBQUs0dEMsUUFDUCtSLEdBQWNqaUQsRUFBU3NDLEdBRXpCQSxFQUFLeXhDLFVBQVVxSCxRQUFVbVQsR0FBbUJ0WSxFQUFRM3pDLEVBQU04WCxFQUFRcGEsRUFBU0csR0FDM0VndEQsR0FBVzdxRCxFQUFLMnpDLE9BQVEzekMsRUFBTThYLEVBQVFwYSxFQUFTc0MsRUFBS3l4QyxXQUNwRHdYLEdBQWtCanBELEVBQU04WCxFQUFRcGEsRUFBU0csR0FDekM0eUQsR0FBV3p3RCxFQUFNdEMsSUFFbkJpMEQsa0JBQW1CLFdBQ2pCRyxFQUFNeDJELE1BQU0wM0QsUUFBUSxxQkFHeEIsTUFDRixJQUFLLFFBQ0h0OUQsS0FBS3M4RCxrQkFBb0IsSUFBSWpCLEdBQVUsQ0FDckNHLE9BQVEsWUFDUkQsU0FBVUEsRUFDVlMsVUFBVyxTQUFtQjd6RCxHQUM1QkgsRUFBUXl4RCxVQUFVLEVBQUcsRUFBR252RCxFQUFLMmQsTUFBTzNkLEVBQUtpd0MsUUFDckNqd0MsRUFBSzR0QyxRQUNQK1IsR0FBY2ppRCxFQUFTc0MsR0FFekJBLEVBQUt5eEMsVUFBVXlGLFVBQVk2VixHQUFvQnBaLEVBQVEzekMsRUFBTThYLEVBQVFwYSxFQUFTRyxHQUM5RWd0RCxHQUFXN3FELEVBQUsyekMsT0FBUTN6QyxFQUFNOFgsRUFBUXBhLEVBQVNzQyxFQUFLeXhDLFdBQ3BEd1gsR0FBa0JqcEQsRUFBTThYLEVBQVFwYSxFQUFTRyxHQUN6QzR5RCxHQUFXendELEVBQU10QyxJQUVuQmkwRCxrQkFBbUIsV0FDakJHLEVBQU14MkQsTUFBTTAzRCxRQUFRLHFCQUd4QixNQUNGLElBQUssU0FDSHQ5RCxLQUFLczhELGtCQUFvQixJQUFJakIsR0FBVSxDQUNyQ0csT0FBUSxZQUNSRCxTQUFVQSxFQUNWUyxVQUFXLFNBQW1CN3pELEdBQzVCSCxFQUFReXhELFVBQVUsRUFBRyxFQUFHbnZELEVBQUsyZCxNQUFPM2QsRUFBS2l3QyxRQUNyQ2p3QyxFQUFLNHRDLFFBQ1ArUixHQUFjamlELEVBQVNzQyxHQUV6QkEsRUFBS3l4QyxVQUFVNmhCLFdBQWFsSCxHQUFxQnpZLEVBQVEzekMsRUFBTThYLEVBQVFwYSxFQUFTRyxHQUNoRjR5RCxHQUFXendELEVBQU10QyxJQUVuQmkwRCxrQkFBbUIsV0FDakJHLEVBQU14MkQsTUFBTTAzRCxRQUFRLHFCQUd4QixNQUNGLElBQUssUUFDSHQ5RCxLQUFLczhELGtCQUFvQixJQUFJakIsR0FBVSxDQUNyQ0csT0FBUSxZQUNSRCxTQUFVQSxFQUNWUyxVQUFXLFNBQW1CN3pELEdBQzVCSCxFQUFReXhELFVBQVUsRUFBRyxFQUFHbnZELEVBQUsyZCxNQUFPM2QsRUFBS2l3QyxRQUNyQ2p3QyxFQUFLNHRDLFFBQ1ArUixHQUFjamlELEVBQVNzQyxHQUV6QkEsRUFBS3l4QyxVQUFVOGhCLFVBQVlqSCxHQUFvQmhYLEVBQVkzQixFQUFRM3pDLEVBQU04WCxFQUFRcGEsRUFBU0csR0FDMUY0eUQsR0FBV3p3RCxFQUFNdEMsSUFFbkJpMEQsa0JBQW1CLFdBQ2pCRyxFQUFNeDJELE1BQU0wM0QsUUFBUSxxQkFHeEIsTUFDRixJQUFLLFNBQ0h0OUQsS0FBS3M4RCxrQkFBb0IsSUFBSWpCLEdBQVUsQ0FDckNHLE9BQVEsU0FDUkQsU0FBVUEsRUFDVlMsVUFBVyxTQUFtQjd6RCxHQUM1QkgsRUFBUXl4RCxVQUFVLEVBQUcsRUFBR252RCxFQUFLMmQsTUFBTzNkLEVBQUtpd0MsUUFDckNqd0MsRUFBSzR0QyxRQUNQK1IsR0FBY2ppRCxFQUFTc0MsR0FFekJ1cUQsR0FBY2pWLEVBQVl0MUMsRUFBTThYLEVBQVFwYSxHQUN4Q3lyRCxHQUFVN1QsRUFBWXQxQyxFQUFNOFgsRUFBUXBhLEdBQ3BDLElBQUk4MUQsRUFBd0JoTSxHQUFxQjdULEVBQVE4VCxFQUFVem5ELEVBQU04WCxFQUFRcGEsRUFBU0csR0FDeEZrMEMsRUFBY3loQixFQUFzQnpoQixZQUNwQ3NELEVBQVltZSxFQUFzQm5lLFVBQ2xDeEQsRUFBYzJoQixFQUFzQjNoQixZQUNwQ3FDLEVBQVdzZixFQUFzQnRmLFNBQ2pDQyxFQUFXcWYsRUFBc0JyZixTQUNuQ24wQyxFQUFLeXhDLFVBQVVNLFlBQWNBLEVBQzdCL3hDLEVBQUt5eEMsVUFBVTRELFVBQVlBLEVBQzNCcjFDLEVBQUt5eEMsVUFBVUksWUFBY0EsRUFDN0I2WSxHQUFVL1csRUFBUTN6QyxFQUFNOFgsRUFBUXBhLElBQ0osSUFBeEJzQyxFQUFLa3pELGdCQUF3QyxJQUFacjFELEdBQ25Dd25ELEdBQWFuUixFQUFVQyxFQUFVbjBDLEVBQU04WCxFQUFRcGEsR0FHL0NtdEQsR0FERXBELEdBR1N6bkQsRUFBSzJ6QyxPQUZLM3pDLEVBQU04WCxFQUFRcGEsRUFBU3NDLEVBQUt5eEMsV0FJbkR3WCxHQUFrQmpwRCxFQUFNOFgsRUFBUXBhLEVBQVNHLEVBQVNnMEMsRUFBYUUsR0FDL0QwZSxHQUFXendELEVBQU10QyxJQUVuQmkwRCxrQkFBbUIsV0FDakJHLEVBQU14MkQsTUFBTTAzRCxRQUFRLHFCQUd4QixPQU1OLFNBQVNTLEtBQ1AvOUQsS0FBS2crRCxPQUFTLEdBcGFoQjNDLEdBQVVyaEUsVUFBVTZjLEtBQU8sV0FDekI3VyxLQUFLczdELFFBQVMsR0FzYWhCeUMsR0FBTS9qRSxVQUFVeTBCLGlCQUFtQixTQUFTaGxCLEVBQU13MEQsR0FDaERqK0QsS0FBS2crRCxPQUFPdjBELEdBQVF6SixLQUFLZytELE9BQU92MEQsSUFBUyxHQUN6Q3pKLEtBQUtnK0QsT0FBT3YwRCxHQUFNbk4sS0FBSzJoRSxJQUd6QkYsR0FBTS9qRSxVQUFVc2pFLFFBQVUsV0FDeEIsSUFBSyxJQUFJWSxFQUFPcjVELFVBQVV6SSxPQUFRdUYsRUFBTzVGLE1BQU1taUUsR0FBT0MsRUFBTyxFQUFHQSxFQUFPRCxFQUFNQyxJQUMzRXg4RCxFQUFLdzhELEdBQVF0NUQsVUFBVXM1RCxHQUd6QixJQUFJMTBELEVBQU85SCxFQUFLLEdBQ1psRCxFQUFTa0QsRUFBS3RELE1BQU0sR0FDbEIyQixLQUFLZytELE9BQU92MEQsSUFDaEJ6SixLQUFLZytELE9BQU92MEQsR0FBTTFNLFNBQVEsU0FBU2toRSxHQUNqQyxJQUNFQSxFQUFTdjZELE1BQU0sS0FBTWpGLEdBQ3JCLE1BQU95SixHQUNQL0UsUUFBUVEsTUFBTXVFLFFBTXRCLElBQUlrMkQsR0FBUyxTQUFnQjl6RCxHQUMzQkEsRUFBS3pKLFdBQWF5SixFQUFLekosV0FBYXlKLEVBQUt6SixXQUFhLEVBQ3REeUosRUFBSzh0QyxTQUFXOXRDLEVBQUs4dEMsU0FBVzl0QyxFQUFLOHRDLFNBQVc5dEMsRUFBS3pKLFdBQWEsR0FBS3lKLEVBQUt6SixXQUM1RXlKLEVBQUs4Z0QsTUFBUXRyRCxFQUFPLEdBQUl3SyxFQUFLOGdELE9BQzdCOWdELEVBQUtnaEQsU0FBV3hyRCxFQUFPLEdBQUl3SyxFQUFLZ2hELFVBQ2hDaGhELEVBQUtpeEQsU0FBV2p4RCxFQUFLaXhELFNBQVdqeEQsRUFBS2l4RCxTQUFXLElBQ2hEanhELEVBQUs0K0MsTUFBUXBwRCxFQUFPLEdBQUksQ0FDdEJpdkQsU0FBVSxRQUNWQyxXQUFZLEVBQUkxa0QsRUFBS3pKLFlBQ3BCeUosRUFBSzQrQyxPQUNSNStDLEVBQUsyMkMsTUFBUW5oRCxFQUFPLEdBQUksQ0FDdEJzbEQsYUFBYSxFQUNiMzdDLEtBQU0sY0FDTnNsRCxTQUFVLFFBQ1ZDLFdBQVksRUFBSTFrRCxFQUFLekosV0FDckIrN0QsWUFBYSxPQUNiMWIsWUFBWSxVQUNYNTJDLEVBQUsyMkMsT0FDUjMyQyxFQUFLeTVDLE9BQVNqa0QsRUFBTyxHQUFJLENBQ3ZCZ1IsTUFBTSxFQUNObVcsU0FBVSxTQUNWMDlCLE1BQU8sU0FDUDRRLGdCQUFpQixnQkFDakJELFlBQWEsZ0JBQ2JELFlBQWEsRUFDYnBkLFFBQVMsRUFDVCtMLE9BQVEsRUFDUlMsUUFBUyxHQUNUck0sU0FBVTl0QyxFQUFLOHRDLFNBQ2YrTCxXQUFZNzVDLEVBQUs4dEMsU0FDakJzWCxVQUFXLFVBQ1h2USxPQUFRLEdBQ1J1VyxZQUFhLFdBQ1pwckQsRUFBS3k1QyxRQUNSejVDLEVBQUt5NUMsT0FBT3NSLFlBQWMvcUQsRUFBS3k1QyxPQUFPc1IsWUFBYy9xRCxFQUFLekosV0FDekR5SixFQUFLeTVDLE9BQU9VLFFBQVVuNkMsRUFBS3k1QyxPQUFPVSxRQUFVbjZDLEVBQUt6SixXQUNqRHlKLEVBQUt5NUMsT0FBTzlMLFFBQVUzdEMsRUFBS3k1QyxPQUFPOUwsUUFBVTN0QyxFQUFLekosV0FDakR5SixFQUFLeTVDLE9BQU9DLE9BQVMxNUMsRUFBS3k1QyxPQUFPQyxPQUFTMTVDLEVBQUt6SixXQUMvQ3lKLEVBQUtxQixNQUFRN0wsRUFBTyxHQUFJd0ssRUFBS3FCLE9BQzdCckIsRUFBSzR0QyxTQUFTNXRDLEVBQUs0dEMsT0FDbkI1dEMsRUFBSyt4RCxZQUFZL3hELEVBQUsreEQsVUFFdEIsSUFBSWdDLEVBQVloMkQsS0FBS0MsTUFBTUQsS0FBS0UsVUFBVTZaLElBYzFDLEdBYkFpOEMsRUFBVS9sQixPQUFTaHVDLEVBQUtndUMsT0FBU2h1QyxFQUFLZ3VDLE9BQVMrbEIsRUFBVS9sQixPQUN6RCtsQixFQUFVcm1CLGlCQUEwQyxJQUF4QjF0QyxFQUFLNCtDLE1BQU1uaEMsVUFBcUJ6ZCxFQUFLNCtDLE1BQU1rQyxNQUFRaVQsRUFBVXJtQixnQkFBa0IsRUFDMUYsT0FBYjF0QyxFQUFLYixNQUE4QixRQUFiYSxFQUFLYixPQUM3QjQwRCxFQUFVOWxCLHFCQUF5QyxJQUFuQmp1QyxFQUFLdW5ELFVBQXNCLEVBQUl2bkQsRUFBS3FCLE1BQU13cUQsSUFBSUYsV0FBYTNyRCxFQUFLekosWUFBY3c5RCxFQUFVOWxCLG9CQUFzQmp1QyxFQUFLekosWUFFcEksUUFBYnlKLEVBQUtiLE9BQ1A0MEQsRUFBVTlsQixxQkFBeUMsSUFBbkJqdUMsRUFBS3VuRCxVQUFzQixFQUFJdm5ELEVBQUtxQixNQUFNOHFELEtBQUtSLFdBQWEzckQsRUFBS3pKLFlBQWN3OUQsRUFBVTlsQixvQkFBc0JqdUMsRUFBS3pKLFlBRXRKdzlELEVBQVU3bEIscUJBQXlDLElBQW5CbHVDLEVBQUt1bkQsVUFBc0IsRUFBSXdNLEVBQVU3bEIsb0JBQXNCbHVDLEVBQUt6SixXQUNwR3c5RCxFQUFVem1CLFdBQWF0dEMsRUFBSzQrQyxNQUFNMEQsWUFBY3RpRCxFQUFLNCtDLE1BQU0wRCxZQUFjeHFDLEVBQU93MUIsV0FHaEZ5bUIsRUFBVW5tQixPQUFTNXRDLEVBQUs0dEMsT0FDcEI1dEMsRUFBSzR0QyxPQUFRLENBQ2YsSUFBSW9tQixFQUFZaDBELEVBQUsyZCxNQUNqQnMyQyxFQUFhajBELEVBQUtpd0MsT0FDdEJqd0MsRUFBSzJkLE1BQVFzMkMsRUFDYmowRCxFQUFLaXdDLE9BQVMrakIsRUFJaEJoMEQsRUFBSzJ0QyxRQUFVM3RDLEVBQUsydEMsUUFBVTN0QyxFQUFLMnRDLFFBQVVvbUIsRUFBVXBtQixRQUN2RCxJQUFLLElBQUk5N0MsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBQ3JCbU8sRUFBSzJ0QyxRQUFROTdDLElBQU1tTyxFQUFLekosV0FFMUJ3OUQsRUFBVTFtQixXQUFhdjFCLEVBQU91MUIsV0FBYXJ0QyxFQUFLekosV0FDaER3OUQsRUFBVXhtQixZQUFjejFCLEVBQU95MUIsWUFBY3Z0QyxFQUFLekosV0FDOUN5SixFQUFLdTlDLGNBQWdCdjlDLEVBQUsyMkMsTUFBTXlTLGFBQ2xDMkssRUFBVXhtQixhQUFlLEVBQUl2dEMsRUFBS3pKLFlBRXBDdzlELEVBQVV2bUIsZ0JBQWtCMTFCLEVBQU8wMUIsZ0JBQWtCeHRDLEVBQUt6SixXQUMxRHc5RCxFQUFVdG1CLGFBQWUzMUIsRUFBTzIxQixhQUFlenRDLEVBQUt6SixXQUNwRHc5RCxFQUFVam1CLFNBQVc5dEMsRUFBSzh0QyxTQUMxQmltQixFQUFVMWxCLGNBQWdCdjJCLEVBQU91MkIsY0FBZ0JydUMsRUFBS3pKLFdBQ3REdzlELEVBQVV4bEIsaUJBQW1CejJCLEVBQU95MkIsaUJBQW1CdnVDLEVBQUt6SixXQUM1RHc5RCxFQUFVdmxCLGVBQWlCMTJCLEVBQU8wMkIsZUFBaUJ4dUMsRUFBS3pKLFdBQ3hEdzlELEVBQVVwbEIsa0JBQW9CNzJCLEVBQU82MkIsa0JBQW9CM3VDLEVBQUt6SixXQUM5RHc5RCxFQUFVbG1CLGNBQWdCLzFCLEVBQU8rMUIsY0FBZ0I3dEMsRUFBS3pKLFdBQ3REeUosRUFBS2swRCxNQUFRbDBELEVBQUtrMEQsTUFBUWwwRCxFQUFLazBELE1BQVF4K0QsS0FFdkNBLEtBQUtnSSxRQUFVc0ssRUFBSW1zRCxvQkFBb0JuMEQsRUFBS28wRCxTQUFVcDBELEVBQUtrMEQsT0FXM0RsMEQsRUFBS3l4QyxVQUFZLEdBQ2pCLzdDLEtBQUs0RixNQUFRLElBQUltNEQsR0FDakIvOUQsS0FBS2c5RCxhQUFlLENBQ2xCQyxjQUFlLEVBQ2ZDLFlBQWEsRUFDYnBoQixTQUFVLEVBQ1ZxaEIsYUFBYyxHQUdoQm45RCxLQUFLc0ssS0FBT0EsRUFDWnRLLEtBQUtvaUIsT0FBU2k4QyxFQUVkbEMsR0FBVzFoRSxLQUFLdUYsS0FBTXNLLEVBQUtiLEtBQU1hLEVBQU0rekQsRUFBV3IrRCxLQUFLZ0ksVUFHekRvMkQsR0FBT3BrRSxVQUFVcWpFLFdBQWEsV0FDNUIsSUFBSWhnRSxFQUFPd0gsVUFBVXpJLE9BQVMsUUFBc0JnWCxJQUFqQnZPLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUMvRTdFLEtBQUtzSyxLQUFPeEssRUFBTyxHQUFJRSxLQUFLc0ssS0FBTWpOLEdBQ2xDMkMsS0FBS3NLLEtBQUsreUQsWUFBYSxFQUN2QixJQUFJc0IsRUFBaUJ0aEUsRUFBS3NoRSxnQkFBa0IsVUFDNUMsT0FBUUEsR0FDTixJQUFLLFVBQ0gzK0QsS0FBS3NLLEtBQUsybUQsaUJBQW1CanhELEtBQUtnOUQsYUFBYUMsY0FDL0MsTUFDRixJQUFLLE9BQ0hqOUQsS0FBS3NLLEtBQUsybUQsaUJBQW1CLEVBQzdCanhELEtBQUtnOUQsYUFBZSxDQUNsQkMsY0FBZSxFQUNmQyxZQUFhLEVBQ2JwaEIsU0FBVSxFQUNWcWhCLGFBQWMsR0FFaEIsTUFDRixJQUFLLFFBQ0gsSUFBSVYsRUFBZ0JuVCxHQUFhdHBELEtBQUtzSyxLQUFLMnpDLE9BQVFqK0MsS0FBS3NLLEtBQU10SyxLQUFLb2lCLFFBQ2pFdTFCLEVBQWE4a0IsRUFBYzlrQixXQUM3QjMzQyxLQUFLb2lCLE9BQU91MUIsV0FBYUEsRUFDekIsSUFBSWtsQixFQUFhLEVBQ2IrQixFQUFtQmxYLEVBQWUxbkQsS0FBS3NLLEtBQUtzMUMsV0FBWTUvQyxLQUFLc0ssS0FBTXRLLEtBQUtvaUIsUUFDMUVpNkIsRUFBY3VpQixFQUFpQnZpQixZQUMvQjBMLEVBQVM2VyxFQUFpQjdXLE9BQzFCQyxFQUFPNFcsRUFBaUI1VyxLQUN4QjdMLEVBQWN5aUIsRUFBaUJ6aUIsWUFDN0IyZ0IsRUFBYTNnQixHQUFlRSxFQUFZamdELE9BQVMsR0FDakQyZ0UsRUFBYy9VLEVBQU9ELEVBQ3pCOFUsRUFBYUUsRUFBY0QsRUFDM0I5OEQsS0FBS2c5RCxhQUFlLENBQ2xCQyxjQUFlSixFQUNmSyxZQUFhTCxFQUNiL2dCLFNBQVUsRUFDVnFoQixhQUFjLEdBRWhCbjlELEtBQUtzSyxLQUFLMm1ELGlCQUFtQjRMLEVBQzdCLE1BRUpWLEdBQVcxaEUsS0FBS3VGLEtBQU1BLEtBQUtzSyxLQUFLYixLQUFNekosS0FBS3NLLEtBQU10SyxLQUFLb2lCLE9BQVFwaUIsS0FBS2dJLFVBR3JFbzJELEdBQU9wa0UsVUFBVTZrRSxLQUFPLFdBQ3RCLElBQUl0Z0QsRUFBTTFaLFVBQVV6SSxPQUFTLFFBQXNCZ1gsSUFBakJ2TyxVQUFVLEdBQW1CQSxVQUFVLEdBQUs3RSxLQUFLc0ssS0FBSzIyQyxNQUFNNkcsVUFDOUYsSUFBK0IsSUFBM0I5bkQsS0FBS3NLLEtBQUt1OUMsYUFBZCxDQUtBLElBQUk2UixFQUFjdDRELEtBQUs0K0MsTUFBTTUrQyxLQUFLMDRDLElBQUk5NUMsS0FBS2c5RCxhQUFhQyxlQUFpQmo5RCxLQUFLc0ssS0FBS3l4QyxVQUFVSSxhQUFlLzZDLEtBQUs0K0MsTUFDL0doZ0QsS0FBS3NLLEtBQUsyMkMsTUFBTTZHLFVBQVksR0FDOUI5bkQsS0FBS3NLLEtBQUsreEQsV0FBWSxFQUN0QnI4RCxLQUFLc0ssS0FBSzIyQyxNQUFNNkcsVUFBWXZwQyxFQUFJdXBDLFVBRWhDLElBQUkyVSxFQUFnQm5ULEdBQWF0cEQsS0FBS3NLLEtBQUsyekMsT0FBUWorQyxLQUFLc0ssS0FBTXRLLEtBQUtvaUIsUUFDakV1MUIsRUFBYThrQixFQUFjOWtCLFdBQzdCMzNDLEtBQUtvaUIsT0FBT3UxQixXQUFhQSxFQUN6QixJQUFJa2xCLEVBQWEsRUFDYitCLEVBQW1CbFgsRUFBZTFuRCxLQUFLc0ssS0FBS3MxQyxXQUFZNS9DLEtBQUtzSyxLQUFNdEssS0FBS29pQixRQUMxRWk2QixFQUFjdWlCLEVBQWlCdmlCLFlBQy9CMEwsRUFBUzZXLEVBQWlCN1csT0FDMUJDLEVBQU80VyxFQUFpQjVXLEtBQ3hCN0wsRUFBY3lpQixFQUFpQnppQixZQUM3QjJpQixFQUFhM2lCLEVBQWN1ZCxFQUMzQnFELEVBQWMvVSxFQUFPRCxFQUNyQmdYLEVBQVVoQyxFQUFjNWdCLEdBQWVFLEVBQVlqZ0QsT0FBUyxHQUNoRXlnRSxFQUFhRSxFQUFjLEVBQUkrQixFQUMzQmpDLEVBQWEsSUFDZkEsRUFBYSxHQUVYQSxFQUFha0MsSUFDZmxDLEVBQWFrQyxHQUVmLytELEtBQUtnOUQsYUFBZSxDQUNsQkMsY0FBZUosRUFDZkssWUFBYUwsRUFDYi9nQixTQUFVLEVBQ1ZxaEIsYUFBYyxHQUVoQm45RCxLQUFLc0ssS0FBSzJtRCxpQkFBbUI0TCxFQUM3QlYsR0FBVzFoRSxLQUFLdUYsS0FBTUEsS0FBS3NLLEtBQUtiLEtBQU16SixLQUFLc0ssS0FBTXRLLEtBQUtvaUIsT0FBUXBpQixLQUFLZ0ksY0FuQ2pFN0UsUUFBUXNZLElBQUksZUFzQ2hCMmlELEdBQU9wa0UsVUFBVWdsRSxjQUFnQixXQUMvQmgvRCxLQUFLczhELG1CQUFxQnQ4RCxLQUFLczhELGtCQUFrQnpsRCxRQUduRHVuRCxHQUFPcGtFLFVBQVV5MEIsaUJBQW1CLFNBQVNobEIsRUFBTXcwRCxHQUNqRGorRCxLQUFLNEYsTUFBTTZvQixpQkFBaUJobEIsRUFBTXcwRCxJQUdwQ0csR0FBT3BrRSxVQUFVaWxFLG9CQUFzQixTQUFTLzJELEdBQzlDLElBQUk0ZixFQUFVLEtBTWQsR0FKRUEsRUFERTVmLEVBQUVnM0QsZUFDTWgzRCxFQUFFZzNELGVBQWUsR0FFakJoM0QsRUFBRXNDLEdBQUcwMEQsZUFBZSxHQUU1QnAzQyxFQUFTLENBQ1gsSUFBSXEzQyxFQUFZdGdCLEVBQVcvMkIsRUFBUzluQixLQUFLc0ssS0FBTXBDLEdBQy9DLE1BQXVCLFFBQW5CbEksS0FBS3NLLEtBQUtiLE1BQXFDLFNBQW5CekosS0FBS3NLLEtBQUtiLE1BQXNDLFNBQW5CekosS0FBS3NLLEtBQUtiLEtBQzlEMDVDLEVBQXlCLENBQzlCMTZCLEVBQUcwMkMsRUFBVTEyQyxFQUNiQyxFQUFHeTJDLEVBQVV6MkMsR0FDWjFvQixLQUFLc0ssS0FBS3l4QyxVQUFVcUgsU0FDSyxVQUFuQnBqRCxLQUFLc0ssS0FBS2IsS0FDWjgzQyxFQUEyQixDQUNoQzk0QixFQUFHMDJDLEVBQVUxMkMsRUFDYkMsRUFBR3kyQyxFQUFVejJDLEdBQ1oxb0IsS0FBS3NLLEtBQUt5eEMsVUFBVXlGLFVBQVd4aEQsS0FBS3NLLEtBQUtzMUMsV0FBV3hqRCxRQUMzQixXQUFuQjRELEtBQUtzSyxLQUFLYixLQUNaeTRDLEVBQTRCLENBQ2pDejVCLEVBQUcwMkMsRUFBVTEyQyxFQUNiQyxFQUFHeTJDLEVBQVV6MkMsR0FDWjFvQixLQUFLc0ssS0FBS3l4QyxVQUFVb0csWUFDSyxRQUFuQm5pRCxLQUFLc0ssS0FBS2IsS0FDWjg0QyxFQUF5QixDQUM5Qjk1QixFQUFHMDJDLEVBQVUxMkMsRUFDYkMsRUFBR3kyQyxFQUFVejJDLEdBQ1oxb0IsS0FBS3NLLE1BQ21CLFNBQW5CdEssS0FBS3NLLEtBQUtiLEtBQ1g0NEMsRUFBMEIsQ0FDL0I1NUIsRUFBRzAyQyxFQUFVMTJDLEVBQ2JDLEVBQUd5MkMsRUFBVXoyQyxHQUNaMW9CLEtBQUtzSyxLQUFLeXhDLFVBQVV3ZSxlQUVoQnpaLEVBQWlCLENBQ3RCcjRCLEVBQUcwMkMsRUFBVTEyQyxFQUNiQyxFQUFHeTJDLEVBQVV6MkMsR0FDWjFvQixLQUFLc0ssS0FBS3l4QyxVQUFVTSxZQUFhcjhDLEtBQUtzSyxLQUFNdEssS0FBS29pQixPQUFRaGhCLEtBQUswNEMsSUFBSTk1QyxLQUFLZzlELGFBQWFDLGdCQUczRixPQUFRLEdBR1ZtQixHQUFPcGtFLFVBQVVvbEUsbUJBQXFCLFNBQVNsM0QsR0FDN0MsSUFBSTRmLEVBQVUsS0FNZCxHQUpFQSxFQURFNWYsRUFBRWczRCxlQUNNaDNELEVBQUVnM0QsZUFBZSxHQUVqQmgzRCxFQUFFc0MsR0FBRzAwRCxlQUFlLEdBRTVCcDNDLEVBQVMsQ0FDWCxJQUFJcTNDLEVBQVl0Z0IsRUFBVy8yQixFQUFTOW5CLEtBQUtzSyxLQUFNcEMsR0FDL0MsT0FBT2s1QyxFQUFnQixDQUNyQjM0QixFQUFHMDJDLEVBQVUxMkMsRUFDYkMsRUFBR3kyQyxFQUFVejJDLEdBQ1oxb0IsS0FBS3NLLEtBQUt5eEMsVUFBVXNGLFlBRXpCLE9BQVEsR0FHVitjLEdBQU9wa0UsVUFBVXFsRSxZQUFjLFNBQVNuM0QsR0FDdEMsSUFBSXJMLEVBQVNnSSxVQUFVekksT0FBUyxRQUFzQmdYLElBQWpCdk8sVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBQzdFaWpCLEVBQVUsS0FNZCxHQUpFQSxFQURFNWYsRUFBRWczRCxlQUNNaDNELEVBQUVnM0QsZUFBZSxHQUVqQmgzRCxFQUFFc0MsR0FBRzAwRCxlQUFlLEdBRTVCcDNDLEVBQVMsQ0FDSysyQixFQUFXLzJCLEVBQVM5bkIsS0FBS3NLLEtBQU1wQyxHQUEvQyxJQUNJekwsRUFBUXVELEtBQUtvL0QsbUJBQW1CbDNELEdBQ2hDekwsR0FBUyxJQUNYdUQsS0FBS3NLLEtBQUsyekMsT0FBT3hoRCxHQUFPcVUsTUFBUTlRLEtBQUtzSyxLQUFLMnpDLE9BQU94aEQsR0FBT3FVLEtBQ3hEOVEsS0FBS3NLLEtBQUsreEQsWUFBWXgvRCxFQUFPdy9ELFVBQzdCRixHQUFXMWhFLEtBQUt1RixLQUFNQSxLQUFLc0ssS0FBS2IsS0FBTXpKLEtBQUtzSyxLQUFNdEssS0FBS29pQixPQUFRcGlCLEtBQUtnSSxZQU16RW8yRCxHQUFPcGtFLFVBQVVzbEUsWUFBYyxTQUFTcDNELEdBQ3RDLElBQUlyTCxFQUFTZ0ksVUFBVXpJLE9BQVMsUUFBc0JnWCxJQUFqQnZPLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUM3RWlqQixFQUFVLEtBRVpBLEVBREU1ZixFQUFFZzNELGVBQ01oM0QsRUFBRWczRCxlQUFlLEdBRWpCaDNELEVBQUVzQyxHQUFHMDBELGVBQWUsR0FFM0JwM0MsR0FDSDNrQixRQUFRc1ksSUFBSSxjQUVkLElBQUkwakQsRUFBWXRnQixFQUFXLzJCLEVBQVM5bkIsS0FBS3NLLEtBQU1wQyxHQUMzQyswRCxFQUFnQmo5RCxLQUFLZzlELGFBQWFDLGNBQ2xDM3lELEVBQU94SyxFQUFPLEdBQUlFLEtBQUtzSyxLQUFNLENBQy9CMm1ELGlCQUFrQmdNLEVBQ2xCWixXQUFXLElBRWIsR0FBdUIsU0FBbkJyOEQsS0FBS3NLLEtBQUtiLE1BQXNDLFNBQW5CekosS0FBS3NLLEtBQUtiLE1BQXNDLFdBQW5CekosS0FBS3NLLEtBQUtiLEtBQW1CLENBQ3pGLElBQUloTixFQUFRdUQsS0FBS2kvRCxvQkFBb0IvMkQsR0FDckMsR0FBSXpMLEdBQVMsRUFBRyxDQUNkLElBQUlpakQsRUFBYVQsRUFBa0JqL0MsS0FBS3NLLEtBQUsyekMsT0FBUXhoRCxHQUNyRCxHQUEwQixJQUF0QmlqRCxFQUFXdGpELE9BQWMsQ0FDM0IsSUFBSW1qRSxFQUFrQjlmLEVBQWVDLEVBQVkxL0MsS0FBS3NLLEtBQUt5eEMsVUFBVTRELFVBQVdsakQsRUFBT3VELEtBQUtzSyxLQUFLczFDLFdBQVcvaUQsR0FDMUdnakQsRUFBVzBmLEVBQWdCMWYsU0FDM0JFLEVBQVN3ZixFQUFnQnhmLE9BQzNCQSxFQUFPcjNCLEVBQUl5MkMsRUFBVXoyQyxFQUNyQnBlLEVBQUt3a0QsUUFBVSxDQUNialAsU0FBVUEsRUFDVkUsT0FBUUEsRUFDUmxqRCxPQUFRQSxFQUNSSixNQUFPQSxJQUliMC9ELEdBQVcxaEUsS0FBS3VGLEtBQU1zSyxFQUFLYixLQUFNYSxFQUFNdEssS0FBS29pQixPQUFRcGlCLEtBQUtnSSxTQUUzRCxHQUF1QixRQUFuQmhJLEtBQUtzSyxLQUFLYixLQUFnQixDQUN4QmhOLEVBQVF1RCxLQUFLaS9ELG9CQUFvQi8yRCxHQUNyQyxHQUFJekwsR0FBUyxFQUFHLENBQ1Z3Z0UsRUFBZ0JqOUQsS0FBS2c5RCxhQUFhQyxjQUNsQzN5RCxFQUFPeEssRUFBTyxHQUFJRSxLQUFLc0ssS0FBTSxDQUMvQjJtRCxpQkFBa0JnTSxFQUNsQlosV0FBVyxJQUVUM2MsRUFBYVQsRUFBa0JqL0MsS0FBS3NLLEtBQUsyekMsT0FBUXhoRCxHQUNyRCxHQUEwQixJQUF0QmlqRCxFQUFXdGpELE9BQWMsQ0FDM0IsSUFBSW9qRSxFQUFxQnZmLEVBQWtCUCxFQUFZMS9DLEtBQUtzSyxLQUFLeXhDLFVBQVU0RCxVQUFXbGpELEVBQU91RCxLQUFLc0ssS0FBS3MxQyxXQUFXL2lELEdBQ2hIZ2pELEVBQVcyZixFQUFtQjNmLFNBQzlCRSxFQUFTeWYsRUFBbUJ6ZixPQUM5QkEsRUFBT3IzQixFQUFJeTJDLEVBQVV6MkMsRUFDckJwZSxFQUFLd2tELFFBQVUsQ0FDYmpQLFNBQVVBLEVBQ1ZFLE9BQVFBLEVBQ1JsakQsT0FBUUEsRUFDUkosTUFBT0EsSUFJYjAvRCxHQUFXMWhFLEtBQUt1RixLQUFNc0ssRUFBS2IsS0FBTWEsRUFBTXRLLEtBQUtvaUIsT0FBUXBpQixLQUFLZ0ksU0FFM0QsR0FBdUIsV0FBbkJoSSxLQUFLc0ssS0FBS2IsS0FBbUIsQ0FDM0JoTixFQUFRdUQsS0FBS2kvRCxvQkFBb0IvMkQsR0FDckMsR0FBSXpMLEdBQVMsRUFBRyxDQUNWd2dFLEVBQWdCajlELEtBQUtnOUQsYUFBYUMsY0FDbEMzeUQsRUFBT3hLLEVBQU8sR0FBSUUsS0FBS3NLLEtBQU0sQ0FDL0IybUQsaUJBQWtCZ00sRUFDbEJaLFdBQVcsSUFFVDNjLEVBQWFULEVBQWtCai9DLEtBQUtzSyxLQUFLMnpDLE9BQVF4aEQsR0FDckQsR0FBMEIsSUFBdEJpakQsRUFBV3RqRCxPQUFjLENBQ3ZCbWpFLEVBQWtCcmYsRUFBcUJsZ0QsS0FBS3NLLEtBQUsyekMsT0FBTyxHQUFHNWdELEtBQU1xaUQsRUFBWTEvQyxLQUFLc0ssS0FBS3l4QyxVQUFVNEQsVUFDakdsakQsRUFBT3VELEtBQUtzSyxLQUFLczFDLFdBQVk1L0MsS0FBS3NLLEtBQUtxQixNQUFNdW1ELE9BQVFyMUQsR0FDdkRnakQsRUFBVzBmLEVBQWdCMWYsU0FDM0JFLEVBQVN3ZixFQUFnQnhmLE9BQzNCQSxFQUFPcjNCLEVBQUl5MkMsRUFBVXoyQyxFQUNyQnBlLEVBQUt3a0QsUUFBVSxDQUNialAsU0FBVUEsRUFDVkUsT0FBUUEsRUFDUmxqRCxPQUFRQSxFQUNSSixNQUFPQSxJQUliMC9ELEdBQVcxaEUsS0FBS3VGLEtBQU1zSyxFQUFLYixLQUFNYSxFQUFNdEssS0FBS29pQixPQUFRcGlCLEtBQUtnSSxTQUUzRCxHQUF1QixRQUFuQmhJLEtBQUtzSyxLQUFLYixNQUFxQyxTQUFuQnpKLEtBQUtzSyxLQUFLYixNQUFzQyxTQUFuQnpKLEtBQUtzSyxLQUFLYixNQUFvQyxXQUFuQnpKLEtBQUtzSyxLQUFLYixLQUFvQixDQUNoSGhOLEVBQVF1RCxLQUFLaS9ELG9CQUFvQi8yRCxHQUNyQyxHQUFJekwsR0FBUyxFQUFHLENBQ1Z3Z0UsRUFBZ0JqOUQsS0FBS2c5RCxhQUFhQyxjQUNsQzN5RCxFQUFPeEssRUFBTyxHQUFJRSxLQUFLc0ssS0FBTSxDQUMvQjJtRCxpQkFBa0JnTSxFQUNsQlosV0FBVyxJQUVUM2MsRUFBYTEvQyxLQUFLc0ssS0FBS2l5RCxTQUFTOS9ELEdBQ2hDb2pELEVBQVcsQ0FBQyxDQUNkdnVCLEtBQU16MEIsRUFBT3NpRCxPQUFTdGlELEVBQU9zaUQsT0FBT08sR0FBY0EsRUFBVzNoRCxLQUFPLEtBQU8yaEQsRUFBV3JpRCxLQUN0RnMrQyxNQUFPK0QsRUFBVy9ELFFBRWhCb0UsRUFBUyxDQUNYdDNCLEVBQUcwMkMsRUFBVTEyQyxFQUNiQyxFQUFHeTJDLEVBQVV6MkMsR0FFZnBlLEVBQUt3a0QsUUFBVSxDQUNialAsU0FBVUEsRUFDVkUsT0FBUUEsRUFDUmxqRCxPQUFRQSxFQUNSSixNQUFPQSxHQUdYMC9ELEdBQVcxaEUsS0FBS3VGLEtBQU1zSyxFQUFLYixLQUFNYSxFQUFNdEssS0FBS29pQixPQUFRcGlCLEtBQUtnSSxTQUUzRCxHQUF1QixRQUFuQmhJLEtBQUtzSyxLQUFLYixNQUFtQyxTQUFuQnpKLEtBQUtzSyxLQUFLYixLQUFpQixDQUNuRGhOLEVBQVF1RCxLQUFLaS9ELG9CQUFvQi8yRCxHQUNyQyxHQUFJekwsR0FBUyxFQUFHLENBQ1Z3Z0UsRUFBZ0JqOUQsS0FBS2c5RCxhQUFhQyxjQUNsQzN5RCxFQUFPeEssRUFBTyxHQUFJRSxLQUFLc0ssS0FBTSxDQUMvQjJtRCxpQkFBa0JnTSxFQUNsQlosV0FBVyxJQUVUM2MsRUFBYTEvQyxLQUFLc0ssS0FBS2l5RCxTQUFTOS9ELEdBQ2hDb2pELEVBQVcsQ0FBQyxDQUNkdnVCLEtBQU16MEIsRUFBT3NpRCxPQUFTdGlELEVBQU9zaUQsT0FBT08sR0FBY0EsRUFBVy8xQyxXQUFXNUwsS0FDeEU0OUMsTUFBTytELEVBQVcvRCxRQUVoQm9FLEVBQVMsQ0FDWHQzQixFQUFHMDJDLEVBQVUxMkMsRUFDYkMsRUFBR3kyQyxFQUFVejJDLEdBRWZwZSxFQUFLd2tELFFBQVUsQ0FDYmpQLFNBQVVBLEVBQ1ZFLE9BQVFBLEVBQ1JsakQsT0FBUUEsRUFDUkosTUFBT0EsR0FHWDZOLEVBQUsreUQsWUFBYSxFQUNsQmxCLEdBQVcxaEUsS0FBS3VGLEtBQU1zSyxFQUFLYixLQUFNYSxFQUFNdEssS0FBS29pQixPQUFRcGlCLEtBQUtnSSxTQUUzRCxHQUF1QixVQUFuQmhJLEtBQUtzSyxLQUFLYixLQUFrQixDQUMxQmhOLEVBQVF1RCxLQUFLaS9ELG9CQUFvQi8yRCxHQUNyQyxHQUFJekwsR0FBUyxFQUFHLENBQ1Z3Z0UsRUFBZ0JqOUQsS0FBS2c5RCxhQUFhQyxjQUNsQzN5RCxFQUFPeEssRUFBTyxHQUFJRSxLQUFLc0ssS0FBTSxDQUMvQjJtRCxpQkFBa0JnTSxFQUNsQlosV0FBVyxJQUVUM2MsRUFBYVQsRUFBa0JqL0MsS0FBS3NLLEtBQUsyekMsT0FBUXhoRCxHQUNyRCxHQUEwQixJQUF0QmlqRCxFQUFXdGpELE9BQWMsQ0FDdkJ5akQsRUFBV0gsRUFBV242QixLQUFJLFNBQVNuakIsR0FDckMsTUFBTyxDQUNMa3ZCLEtBQU16MEIsRUFBT3NpRCxPQUFTdGlELEVBQU9zaUQsT0FBTy84QyxHQUFRQSxFQUFLckUsS0FBTyxLQUFPcUUsRUFBSy9FLEtBQ3BFcytDLE1BQU92NUMsRUFBS3U1QyxVQUdab0UsRUFBUyxDQUNYdDNCLEVBQUcwMkMsRUFBVTEyQyxFQUNiQyxFQUFHeTJDLEVBQVV6MkMsR0FFZnBlLEVBQUt3a0QsUUFBVSxDQUNialAsU0FBVUEsRUFDVkUsT0FBUUEsRUFDUmxqRCxPQUFRQSxFQUNSSixNQUFPQSxJQUliMC9ELEdBQVcxaEUsS0FBS3VGLEtBQU1zSyxFQUFLYixLQUFNYSxFQUFNdEssS0FBS29pQixPQUFRcGlCLEtBQUtnSSxXQUk3RG8yRCxHQUFPcGtFLFVBQVVtd0QsVUFBWSxTQUFTck8sR0FDcEM5N0MsS0FBS2c5RCxhQUFlLENBQ2xCQyxjQUFlbmhCLEVBQ2ZvaEIsWUFBYXBoQixFQUNiQSxTQUFVLEVBQ1ZxaEIsYUFBYyxHQUVoQixJQUFJN3lELEVBQU94SyxFQUFPLEdBQUlFLEtBQUtzSyxLQUFNLENBQy9CMm1ELGlCQUFrQm5WLEVBQ2xCdWdCLFdBQVcsSUFFYkYsR0FBVzFoRSxLQUFLdUYsS0FBTUEsS0FBS3NLLEtBQUtiLEtBQU1hLEVBQU10SyxLQUFLb2lCLE9BQVFwaUIsS0FBS2dJLFVBR2hFbzJELEdBQU9wa0UsVUFBVXlsRSxZQUFjLFNBQVN2M0QsR0FDdEMsSUFBSTRmLEVBQVUsS0FFWkEsRUFERTVmLEVBQUVnM0QsZUFDTWgzRCxFQUFFZzNELGVBQWUsR0FFakJoM0QsRUFBRXNDLEdBQUcwMEQsZUFBZSxHQUVoQyxJQUFJQyxFQUFZdGdCLEVBQVcvMkIsRUFBUzluQixLQUFLc0ssS0FBTXBDLEdBQzNDNGYsSUFBc0MsSUFBM0I5bkIsS0FBS3NLLEtBQUt1OUMsZUFDdkI3bkQsS0FBS2c5RCxhQUFhRSxZQUFjaUMsRUFBVTEyQyxJQUk5QzIxQyxHQUFPcGtFLFVBQVUwbEUsT0FBUyxTQUFTeDNELEdBQ00sSUFBbkNsSSxLQUFLZzlELGFBQWFHLGVBQ3BCbjlELEtBQUtnOUQsYUFBYUcsYUFBZXp6RCxLQUFLMGlDLE9BRXhDLElBQUl1ekIsRUFBUTMvRCxLQUFLc0ssS0FBS3FCLE1BQU1pMEQsZ0JBQWtCLEdBQzFDQyxFQUFlbjJELEtBQUswaUMsTUFDcEJtdkIsRUFBV3NFLEVBQWU3L0QsS0FBS2c5RCxhQUFhRyxhQUNoRCxLQUFJNUIsRUFBV242RCxLQUFLQyxNQUFNLElBQU9zK0QsSUFBakMsQ0FDQTMvRCxLQUFLZzlELGFBQWFHLGFBQWUwQyxFQUNqQyxJQUFJLzNDLEVBQVUsS0FNZCxHQUpFQSxFQURFNWYsRUFBRWczRCxlQUNNaDNELEVBQUVnM0QsZUFBZSxHQUVqQmgzRCxFQUFFc0MsR0FBRzAwRCxlQUFlLEdBRTVCcDNDLElBQXNDLElBQTNCOW5CLEtBQUtzSyxLQUFLdTlDLGFBQXVCLENBQzlDLElBQ0lpWSxFQURBWCxFQUFZdGdCLEVBQVcvMkIsRUFBUzluQixLQUFLc0ssS0FBTXBDLEdBRS9DNDNELEVBQVlYLEVBQVUxMkMsRUFBSXpvQixLQUFLZzlELGFBQWFFLFlBQzVDLElBQUlELEVBQWdCajlELEtBQUtnOUQsYUFBYUMsY0FDbEMzZ0IsRUFBZ0JULEVBQWlCb2hCLEVBQWdCNkMsRUFBVzkvRCxLQUFLc0ssS0FBS3l4QyxVQUFXLzdDLEtBQUtvaUIsT0FBUXBpQixLQUFLc0ssTUFDdkd0SyxLQUFLZzlELGFBQWFsaEIsU0FBV2drQixFQUFZeGpCLEVBQWdCMmdCLEVBQ3pELElBQUkzeUQsRUFBT3hLLEVBQU8sR0FBSUUsS0FBS3NLLEtBQU0sQ0FDL0IybUQsaUJBQWtCZ00sRUFBZ0I2QyxFQUNsQ3pELFdBQVcsSUFHYixPQURBRixHQUFXMWhFLEtBQUt1RixLQUFNc0ssRUFBS2IsS0FBTWEsRUFBTXRLLEtBQUtvaUIsT0FBUXBpQixLQUFLZ0ksU0FDbERpMUQsRUFBZ0I2QyxLQUkzQjFCLEdBQU9wa0UsVUFBVStsRSxVQUFZLFNBQVM3M0QsR0FDcEMsSUFBK0IsSUFBM0JsSSxLQUFLc0ssS0FBS3U5QyxhQUF1QixDQUNuQyxJQUFJbVksRUFBZ0JoZ0UsS0FBS2c5RCxhQUN2QkMsRUFBZ0IrQyxFQUFjL0MsY0FDOUJuaEIsRUFBV2trQixFQUFjbGtCLFNBQzNCOTdDLEtBQUtnOUQsYUFBYUMsY0FBZ0JBLEVBQWdCbmhCLEVBQ2xEOTdDLEtBQUtnOUQsYUFBYWxoQixTQUFXLElBRzJCLGtCQUFuQnBwQyxFQUFPQyxVQUM5Q0QsRUFBT0MsUUFBVXlyRCxNOzs7OzRDQ243Sm5CLElBQUl2ckQsRUFHSkEsRUFBSSxXQUNILE9BQU83UyxLQURKLEdBSUosSUFFQzZTLEVBQUlBLEdBQUssSUFBSUUsU0FBUyxjQUFiLEdBQ1IsTUFBTzdLLEdBRWMsa0JBQVh5VixTQUFxQjlLLEVBQUk4SyxRQU9yQ2pMLEVBQU9DLFFBQVVFLEc7Ozs7Ozs7OzZEQ2JGLFNBQVNvdEQsRUFDdEJDLEVBQ0FybEMsRUFDQWlHLEVBQ0FxL0IsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQWx4RCxFQUNBbXhELEdBR0EsSUF5Q0loa0UsRUF6Q0FzQixFQUFtQyxvQkFBbEJvaUUsRUFDakJBLEVBQWNwaUUsUUFDZG9pRSxFQUdKLEdBQUk3d0QsRUFBWSxDQUNUdlIsRUFBUXVSLGFBQ1h2UixFQUFRdVIsV0FBYSxJQUV2QixJQUFJM1UsRUFBU1gsT0FBT0MsVUFBVUUsZUFDOUIsSUFBSyxJQUFJNkQsS0FBUXNSLEVBQ1gzVSxFQUFPRCxLQUFLNFUsRUFBWXRSLEtBQVVyRCxFQUFPRCxLQUFLcUQsRUFBUXVSLFdBQVl0UixLQUNwRUQsRUFBUXVSLFdBQVd0UixHQUFRc1IsRUFBV3RSLElBMkQ1QyxHQXRESXlpRSxLQUNEQSxFQUFTdHlELGVBQWlCc3lELEVBQVN0eUQsYUFBZSxLQUFLNmlDLFNBQVEsV0FDOUQvd0MsS0FBS3dnRSxFQUFTQyxVQUFZemdFLFNBRTNCbEMsRUFBUTZJLFNBQVc3SSxFQUFRNkksT0FBUyxLQUFLckssS0FBS2trRSxJQUk3QzNsQyxJQUNGLzhCLEVBQVErOEIsT0FBU0EsRUFDakIvOEIsRUFBUWdqQyxnQkFBa0JBLEVBQzFCaGpDLEVBQVFtbEMsV0FBWSxHQUlsQms5QixJQUNGcmlFLEVBQVEwbkMsWUFBYSxHQUluQjY2QixJQUNGdmlFLEVBQVF3bEMsU0FBVyxVQUFZKzhCLEdBSTdCQyxHQUNGOWpFLEVBQU8sU0FBVXdMLEdBRWZBLEVBQ0VBLEdBQ0NoSSxLQUFLMm1DLFFBQVUzbUMsS0FBSzJtQyxPQUFPc00sWUFDM0JqekMsS0FBSzJQLFFBQVUzUCxLQUFLMlAsT0FBT2czQixRQUFVM21DLEtBQUsyUCxPQUFPZzNCLE9BQU9zTSxXQUV0RGpyQyxHQUEwQyxxQkFBeEIwNEQsc0JBQ3JCMTRELEVBQVUwNEQscUJBR1JOLEdBQ0ZBLEVBQWEzbEUsS0FBS3VGLEtBQU1nSSxHQUd0QkEsR0FBV0EsRUFBUTI0RCx1QkFDckIzNEQsRUFBUTI0RCxzQkFBc0J0eEMsSUFBSWl4QyxJQUt0Q3hpRSxFQUFROGlFLGFBQWVwa0UsR0FDZDRqRSxJQUNUNWpFLEVBQU8rakUsRUFDSCxXQUFjSCxFQUFhM2xFLEtBQUt1RixLQUFNQSxLQUFLK3ZCLE1BQU0vaUIsU0FBUzZ6RCxhQUMxRFQsR0FHRjVqRSxFQUNGLEdBQUlzQixFQUFRMG5DLFdBQVksQ0FHdEIxbkMsRUFBUWdqRSxjQUFnQnRrRSxFQUV4QixJQUFJdWtFLEVBQWlCampFLEVBQVErOEIsT0FDN0IvOEIsRUFBUSs4QixPQUFTLFNBQW1DaWlCLEVBQUc5MEMsR0FFckQsT0FEQXhMLEVBQUsvQixLQUFLdU4sR0FDSCs0RCxFQUFlamtCLEVBQUc5MEMsUUFFdEIsQ0FFTCxJQUFJbTVCLEVBQVdyakMsRUFBUW9RLGFBQ3ZCcFEsRUFBUW9RLGFBQWVpekIsRUFDbkIsR0FBR3JsQyxPQUFPcWxDLEVBQVUza0MsR0FDcEIsQ0FBQ0EsR0FJVCxNQUFPLENBQ0xtVyxRQUFTdXRELEVBQ1RwaUUsUUFBU0EsR0FoSGIsZ0Q7Ozs7NE9DQUEseUIsd1hBRUEsSUFBSWtqRSxFQUFVLDZCQVNWQyxFQUFTLENBRVpDLFVBQVdGLEVBQVUsY0FHckJHLFVBQVdILEVBQVUsY0FHckJJLFVBQVdKLEVBQVUsWUFHckJLLE1BQU9MLEVBQVUsYUFHakJNLE1BQU9OLEVBQVUsYUFHakJPLE1BQU9QLEVBQVUsYUFHakJRLFNBQVVSLEVBQVUsV0FHcEJTLFFBQVNULEVBQVUsVUFHbkJVLFNBQVNWLEVBQVUsWUFHbkJXLFNBQVVYLEVBQVUsd0NBR3BCWSxXQUFZWixFQUFVLDJDQUd0QmpuRCxTQUFVaW5ELEVBQVUsNkJBR3BCYSxTQUFVYixFQUFVLHVCQUdwQmMsSUFBS2QsRUFBVSw2QkFHZjdrRCxLQUFNNmtELEVBQVUscUJBR2hCZSxZQUFhZixFQUFVLHNCQUd2QmdCLFFBQVNoQixFQUFVLHVCQUduQmlCLFFBQVNqQixFQUFVLHVCQUduQmtCLFdBQVlsQixFQUFVLHFCQUd0Qm1CLFNBQVVuQixFQUFVLHlCQUdwQm9CLGFBQWFwQixFQUFVLHVCQUd2QnFCLE9BQVFyQixFQUFVLGFBR2xCc0IsT0FBT3RCLEVBQVUsVUFHakJ1QixPQUFRdkIsRUFBVSx1QkFHbEJ3QixRQUFTeEIsRUFBVSxXQUduQnlCLFVBQVd6QixFQUFVLGFBR3JCMEIsVUFBVzFCLEVBQVUsd0JBR3JCMkIsT0FBTzNCLEVBQVUsd0JBR2pCNEIsVUFBVTVCLEVBQVUsMEJBTWpCNkIsRUFBYSxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBRTVEQyxFQUFjLFNBQUMzb0QsR0FDcEIsSUFBSTRvRCxFQUFZLENBQ2YsQ0FDQzNYLE1BQU0sT0FDTjRYLEtBQUssS0FFTixDQUNDNVgsTUFBTSxPQUNONFgsS0FBSyxLQUVOLENBQ0M1WCxNQUFNLE9BQ040WCxLQUFLLEtBRU4sQ0FDQzVYLE1BQU0sT0FDTjRYLEtBQUssS0FFTixDQUNDNVgsTUFBTSxPQUNONFgsS0FBSyxLQUVOLENBQ0M1WCxNQUFNLE9BQ040WCxLQUFLLEtBRU4sQ0FDQzVYLE1BQU0sT0FDTjRYLEtBQUssS0FFTixDQUNDNVgsTUFBTSxPQUNONFgsS0FBSyxLQUVOLENBQ0M1WCxNQUFNLE9BQ040WCxLQUFLLEtBRU4sQ0FDQzVYLE1BQU0sT0FDTjRYLEtBQUssS0FFTixDQUNDNVgsTUFBTSxPQUNONFgsS0FBSyxLQUVOLENBQ0M1WCxNQUFNLE9BQ040WCxLQUFLLEtBRU4sQ0FDQzVYLE1BQU0sT0FDTjRYLEtBQUssTUFHSEMsRUFBVSxHQU1kLE9BTEFGLEVBQVVobUUsU0FBUSxTQUFTcUYsRUFBSzNGLEVBQU1zUCxHQUNsQ29PLEdBQVMvWCxFQUFLZ3BELFFBQ2hCNlgsRUFBVTdnRSxFQUFLNGdFLFNBR1ZDLEdBSUpDLEVBQVMsQ0FDWkMsTUFBTSxHQUNOQyxRQUFRLEdBQ1JkLE9BQU8sR0FDUHArRCxNQUFNLElBSURtL0QsRUFBYSxXQUNsQixJQUFJQyxFQUFTLElBQUk1NUQsS0FDYjY1RCxFQUFPRCxFQUFPRSxTQUNsQixPQUFXLEdBQVJELEVBQ0ssRUFFQUEsR0FHSHBwRCxFQUFRLENBQ2JzcEQsR0FBRyxPQUNIQyxHQUFHLE9BQ0hDLEdBQUcsT0FDSEMsR0FBRyxPQUNIQyxHQUFHLE9BQ0hDLEdBQUcsTUFHRUMsRUFBVyxTQUFDMXBELEdBQ2pCLE9BQUdBLEdBQVMsR0FBS0EsR0FBUyxFQUNsQkYsRUFBTXNwRCxHQUVYcHBELEdBQVMsR0FBS0EsR0FBUyxFQUNsQkYsRUFBTXVwRCxHQUVYcnBELEdBQVMsR0FBS0EsR0FBUyxFQUNsQkYsRUFBTXdwRCxHQUVYdHBELEdBQVMsR0FBS0EsR0FBUyxFQUNsQkYsRUFBTXlwRCxHQUVYdnBELEdBQVMsR0FBS0EsR0FBUyxHQUNsQkYsRUFBTTBwRCxHQUVYeHBELEVBQU8sR0FDRkYsRUFBTTJwRCxRQURkLEdBTUtuMUIsRUFBVSxTQUFDcTFCLEVBQUtDLEdBQ3JCLE9BQU8sSUFBSXZtRSxTQUFRLFNBQUNDLEVBQVNrQyxHQUM1QnlTLEVBQUk0eEQsUUFBUSxDQUNYRixJQUFLQSxFQUNMOW1FLE9BQVEsTUFDUkcsS0FBTTRtRSxFQUNOajdCLFFBQVMsS0FDVG03QixPQUFRLENBQ1AsZUFBZ0IsbUJBQ2hCanFELE1BQU81SCxFQUFJOHhELGVBQWUsVUFFM0Ixa0UsUUFUVyxTQVNIN0QsR0FDUHNILFFBQVFzWSxJQUFJNWYsR0FDVSxLQUFsQkEsRUFBSXdvRSxZQUF1QyxLQUFsQnhvRSxFQUFJd29FLFdBQ2hDMW1FLEVBQVE5QixFQUFJd0IsT0FFVSxLQUFsQnhCLEVBQUl3b0UsV0FDUC94RCxFQUFJZ3lELFVBQVUsQ0FDYmxaLE1BQU8sU0FDUDRYLEtBQU0sT0FDTnpILFNBQVUsTUFHWGpwRCxFQUFJZ3lELFVBQVUsQ0FDYmxaLE1BQU92dkQsRUFBSXdCLEtBQUs2NkIsUUFDaEI4cUMsS0FBTSxPQUNOekgsU0FBVSxNQUdabitDLFlBQVcsV0FDVjlLLEVBQUlpeUQsVUFBVSxDQUNiUCxJQUFLLDJCQUVKLE9BR0xya0UsS0FsQ1csU0FrQ05KLEdBQ0o0RCxRQUFRc1ksSUFBSWxjLEdBQ1pNLEVBQU9OLFVBT0xpbEUsRUFBVyxTQUFDUixFQUFLQyxHQUN0QixPQUFPLElBQUl2bUUsU0FBUSxTQUFDQyxFQUFTa0MsR0FDNUJ5UyxFQUFJNHhELFFBQVEsQ0FDWEYsSUFBS0EsRUFDTDltRSxPQUFRLE9BQ1JHLEtBQU00bUUsRUFDTmo3QixRQUFTLEtBQ1RtN0IsT0FBUSxDQUVQLGVBQWdCLG1CQUNoQmpxRCxNQUFPNUgsRUFBSTh4RCxlQUFlLFVBRTNCMWtFLFFBVlcsU0FVSDdELEdBQ1BzSCxRQUFRc1ksSUFBSTVmLEdBQ1o4QixFQUFROUIsRUFBSXdCLE9BRWJzQyxLQWRXLFNBY05KLEdBQ0o0RCxRQUFRc1ksSUFBSWxjLEdBRVpNLEVBQU9OLFVBUUxrbEUsRUFBVSxTQUFDbnFFLEdBQ2YsTUFBVSxRQUFQQSxHQUdRLFNBQVBBLElBR08sYUFBUEEsUUFBSixJQU1Jb3FFLEVBQVcsbUNBQUcsNkdBRUMvMUIsRUFBUXN5QixFQUFPbG5ELFVBRmhCLFVBRWY0cUQsRUFGZSxRQU9mQyxFQUFRRCxHQVBPLHdCQVVkRSxFQUFjL2lFLFNBQVU2aUUsRUFBUXRuRSxLQUFLeW5FLGNBQWNDLGtCQUFvQkosRUFBUXRuRSxLQUFLeW5FLGNBQWNFLCtCQUFnQyxLQVluSTF5RCxFQUFJOHhELGVBQWUsV0FDbEJPLEVBQVF0bkUsS0FBS3luRSxjQUFjenFELE9BQVMvSCxFQUFJOHhELGVBQWUsU0FDekRyMkQsVUFBTW9QLE9BQU8sZUFBZSxHQUU1QnBQLFVBQU1vUCxPQUFPLGVBQWUsSUFJM0I3SyxFQUFJOHhELGVBQWUsV0FDbEJMLEVBQVNZLEVBQVF0bkUsS0FBS3luRSxjQUFjenFELFFBQVUvSCxFQUFJOHhELGVBQWUsU0FDbkVyMkQsVUFBTW9QLE9BQU8sZUFBZSxHQUU1QnBQLFVBQU1vUCxPQUFPLGVBQWUsSUFJOUI3SyxFQUFJMnlELFdBQVcsQ0FDZHRxRSxJQUFLLFFBQ0wwQyxLQUFNc25FLEVBQVF0bkUsS0FBS3luRSxjQUFjenFELFFBRWxDdE0sVUFBTW9QLE9BQU8sY0FBZXduRCxFQUFRdG5FLEtBQUt5bkUsY0FBY3pxRCxPQUV2RC9ILEVBQUkyeUQsV0FBVyxDQUNkdHFFLElBQUssUUFDTDBDLEtBQUswbUUsRUFBU1ksRUFBUXRuRSxLQUFLeW5FLGNBQWN6cUQsU0FFMUN0TSxVQUFNb1AsT0FBTyxjQUFlNG1ELEVBQVNZLEVBQVF0bkUsS0FBS3luRSxjQUFjenFELFFBR2hFL0gsRUFBSTJ5RCxXQUFXLENBQ2R0cUUsSUFBSyxXQUNMMEMsS0FBTXduRSxJQUVQOTJELFVBQU1vUCxPQUFPLGlCQUFrQjBuRCxHQUUvQnZ5RCxFQUFJMnlELFdBQVcsQ0FDZHRxRSxJQUFLLFVBQ0wwQyxLQUFNc25FLEVBQVF0bkUsS0FBSzZuRSxZQUFZQyxlQUVoQ3AzRCxVQUFNb1AsT0FBTyxhQUFjd25ELEVBQVF0bkUsS0FBSzZuRSxZQUFZQyxjQTdEbEMsbUJBOERYLEdBOURXLGVBZ0VsQjd5RCxFQUFJOHlELFVBQVUsQ0FDWmhhLE1BQU8sV0FDUHpqQyxRQUFTclYsRUFBSTh4RCxlQUFlLFNBQVM5eEQsRUFBSTh4RCxlQUFlLFNBQVMsV0FDakUxa0UsUUFIWSxTQUdIN0QsR0FDSEEsRUFBSXdwRSxTQUNWbGlFLFFBQVFzWSxJQUFJa3BELEdBQ1J4aEUsUUFBUXNZLElBQUksV0FDSDVmLEVBQUl5cEUsUUFDYm5pRSxRQUFRc1ksSUFBSSxhQXhFQSxtQkFpRlgsR0FqRlcsNENBQUgscURBc0ZYOHBELEVBQU0sbUNBQUcsV0FBTXpELEVBQUkwRCxHQUFWLHVGQUNWL21FLEVBQVMsQ0FDWmduRSxXQUFXM0QsR0FGRSxTQUlLMEMsRUFBU3ZELEVBQU9hLElBQUlyakUsR0FKekIsT0FJVmluRSxFQUpVLE9BS1hkLEVBQVFjLElBQ2MsR0FBckJBLEVBQU9DLGFBQ1R4aUUsUUFBUXNZLElBQUlpcUQsR0FDVEYsR0FHRmQsS0FYVywyQ0FBSCx3REFvQk5rQixFQUFPLG1DQUFHLFdBQU1DLEdBQU4sOEZBU0tyQixFQUFTdkQsRUFBTzJCLFVBQVVpRCxHQVQvQixVQVNYQyxFQVRXLFFBVVpsQixFQUFRa0IsR0FWSSxtQkFXZDNpRSxRQUFRc1ksSUFBSSxVQUNadFksUUFBUXNZLElBQUlxcUQsR0FDYSxHQUF0QkEsRUFBUUgsV0FiRyx5Q0FjTkcsR0FkTSwyQ0FBSCxzREFvQlBDLEVBQVUsbUNBQUcsV0FBTTVwRCxFQUFLaGMsRUFBT3FsRSxHQUFsQix1RkFDZC9tRSxFQUFTLENBQ1p1bkUsWUFBWTdwRCxFQUNaaGMsT0FBT0EsR0FIVSxTQUtFcWtFLEVBQVN2RCxFQUFPOWtELEtBQUsxZCxHQUx2QixPQUtkd25FLEVBTGMsT0FNZnJCLEVBQVFxQixJQUNlLEdBQXRCQSxFQUFRTixhQUNWeGlFLFFBQVFzWSxJQUFJd3FELEdBQ1RULEdBR0ZkLEtBWmUsMkNBQUgsMERBb0JWd0IsRUFBYyxXQUNuQixPQUFPLElBQUl4b0UsU0FBUSxTQUFDQyxFQUFTa0MsR0FDNUJ5UyxFQUFJNHpELFlBQVksQ0FDZjlhLE1BQU8sU0FDUCthLE1BQU0sRUFDTnptRSxRQUhlLFNBR1A3RCxHQUVQOEIsRUFBUTlCLElBRVQ4RCxLQVBlLFNBT1ZKLEdBQ0pNLEVBQU9OLFVBT0w2bUUsRUFBYyxXQUNuQixPQUFPLElBQUkxb0UsU0FBUSxTQUFDQyxHQUNuQjJVLEVBQUk4ekQsY0FFSnpvRSxRQUlJMG9FLEVBQVksU0FBQ0MsR0FFbEIsT0FBWSxHQUFSQSxHQU9MLFNBQVN6d0IsRUFBS3Y3QyxHQUNQLE9BQU9BLEVBQUlhLFFBQVEsaUJBQWtCLElBRzVDLElBQU15cEUsRUFBVSxTQUFDL29FLEVBQUtra0IsR0FDckIsR0FBSXNtRCxFQUFVeHFFLEVBQUk4cEUsWUFDakIsT0FBTyxFQUVQLEdBQXFCLE1BQWxCOXBFLEVBQUk4cEUsV0FBb0IsQ0FDMUIsSUFBSXRvRSxFQUFPLENBQ1YybUUsSUFBS2prRCxHQUVGd21ELEVBQVNDLEVBQVducEUsR0FDeEI4RixRQUFRc1ksSUFBSSxzQkFBd0I4cUQsR0FDcENqMEQsRUFBSW0wRCxXQUFXLENBQ2R6QyxJQUFLLHNCQUF3QnVDLElBR1YsT0FBbEIxcUUsRUFBSThwRSxZQUF5QyxNQUFsQjlwRSxFQUFJOHBFLFlBQzlCcnpELEVBQUlneUQsVUFBVSxDQUNabFosTUFBT3Z2RCxFQUFJcThCLFFBQ1g4cUMsS0FBSyxPQUNMekgsU0FBUyxPQUloQnA0RCxRQUFRc1ksSUFBSSxXQUNadFksUUFBUXNZLElBQUk1ZixHQUNac0gsUUFBUXNZLElBQUlzRSxHQUNaNWMsUUFBUXNZLElBQUksSUFHUCtxRCxFQUFhLFNBQUNFLEdBQ25CLElBQUlDLEVBQWE1c0UsT0FBTytDLEtBQUs0cEUsR0FBWW5oRCxLQUFJLFNBQVM1cUIsR0FDckQsT0FBT2lzRSxtQkFBbUJqc0UsR0FBTyxJQUFNaXNFLG1CQUFtQkYsRUFBVy9yRSxPQUNuRXVtQixLQUFLLEtBQ1IsT0FBT3lsRCxHQUtGRSxFQUFZLFNBQUNDLEdBQ2xCLEdBQUdBLEVBQU0sS0FBSyxDQUNiLElBQUlDLEVBQU9qbEUsU0FBU2dsRSxFQUFJLE1BQ3BCRSxFQUFPbGxFLFVBQVVnbEUsRUFBVSxLQUFMQyxHQUFZLElBQ2xDRSxFQUFTSCxFQUFVLEtBQUxDLEVBQWlCLEdBQUxDLEVBQzlCLE9BQU9ELEVBQUssS0FBS0MsRUFBSyxLQUFLQyxFQUFPLElBRWxDLElBQUlELEVBQU9sbEUsU0FBU2dsRSxFQUFJLElBQ3BCRyxFQUFTSCxFQUFVLEdBQUxFLEVBQ2xCLE9BQWlCLEdBQVJBLEVBQVcsR0FBR0EsRUFBSyxNQUFNQyxFQUFPLEtBWTNDLFNBQVNDLEVBQWFyOUMsR0FFcEIsT0FEQUEsRUFBSUEsRUFBRTV2QixXQUNDNHZCLEVBQUUsR0FBS0EsRUFBSSxJQUFNQSxFQUUxQixJQUFNczlDLEVBQWEsU0FBQ0MsR0FDbEIsSUFBSUMsRUFBT0QsRUFBS0UsY0FDWkMsRUFBUUgsRUFBS0ksV0FBYSxFQUMxQm5WLEVBQU0rVSxFQUFLSyxVQUNmLE1BQU8sQ0FBQ0osRUFBTUUsRUFBT2xWLEdBQUs5c0MsSUFBSTJoRCxHQUFjaG1ELEtBQUssTSxFQUdwQyxDQUNkc2xELGFBQ0E3M0IsVUFDQTYxQixXQUNBdkQsU0FDQTltRCxRQUNBeXFELFVBQ0FzQixjQUNBRSxjQUNBZSxhQUNBekMsY0FDQTd1QixPQUNBZ3hCLFlBQ0F0QixTQUNBUSxhQUNBN0MsU0FDQUcsYUFDQVUsV0FDQWxCLGFBQ0ErQyxVQUNBbkIsVUFDQTNCLGUiLCJmaWxlIjoiY29tbW9uL3ZlbmRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJztcclxuXHJcbmNvbnN0IF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XHJcbmNvbnN0IGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcclxuXHJcbmZ1bmN0aW9uIGlzRm4gKGZuKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJ1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1N0ciAoc3RyKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xyXG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJ1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYXNPd24gKG9iaiwga2V5KSB7XHJcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIG5vb3AgKCkge31cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XHJcbiAgY29uc3QgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gIHJldHVybiBmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XHJcbiAgICBjb25zdCBoaXQgPSBjYWNoZVtzdHJdO1xyXG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpXHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ2FtZWxpemUgYSBoeXBoZW4tZGVsaW1pdGVkIHN0cmluZy5cclxuICovXHJcbmNvbnN0IGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XHJcbmNvbnN0IGNhbWVsaXplID0gY2FjaGVkKChzdHIpID0+IHtcclxuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgKF8sIGMpID0+IGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJylcclxufSk7XHJcblxyXG5jb25zdCBIT09LUyA9IFtcclxuICAnaW52b2tlJyxcclxuICAnc3VjY2VzcycsXHJcbiAgJ2ZhaWwnLFxyXG4gICdjb21wbGV0ZScsXHJcbiAgJ3JldHVyblZhbHVlJ1xyXG5dO1xyXG5cclxuY29uc3QgZ2xvYmFsSW50ZXJjZXB0b3JzID0ge307XHJcbmNvbnN0IHNjb3BlZEludGVyY2VwdG9ycyA9IHt9O1xyXG5cclxuZnVuY3Rpb24gbWVyZ2VIb29rIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XHJcbiAgY29uc3QgcmVzID0gY2hpbGRWYWxcclxuICAgID8gcGFyZW50VmFsXHJcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcclxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkVmFsKVxyXG4gICAgICAgID8gY2hpbGRWYWwgOiBbY2hpbGRWYWxdXHJcbiAgICA6IHBhcmVudFZhbDtcclxuICByZXR1cm4gcmVzXHJcbiAgICA/IGRlZHVwZUhvb2tzKHJlcylcclxuICAgIDogcmVzXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlZHVwZUhvb2tzIChob29rcykge1xyXG4gIGNvbnN0IHJlcyA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcclxuICAgIGlmIChyZXMuaW5kZXhPZihob29rc1tpXSkgPT09IC0xKSB7XHJcbiAgICAgIHJlcy5wdXNoKGhvb2tzW2ldKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHJlc1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVIb29rIChob29rcywgaG9vaykge1xyXG4gIGNvbnN0IGluZGV4ID0gaG9va3MuaW5kZXhPZihob29rKTtcclxuICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICBob29rcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gbWVyZ2VJbnRlcmNlcHRvckhvb2sgKGludGVyY2VwdG9yLCBvcHRpb24pIHtcclxuICBPYmplY3Qua2V5cyhvcHRpb24pLmZvckVhY2goaG9vayA9PiB7XHJcbiAgICBpZiAoSE9PS1MuaW5kZXhPZihob29rKSAhPT0gLTEgJiYgaXNGbihvcHRpb25baG9va10pKSB7XHJcbiAgICAgIGludGVyY2VwdG9yW2hvb2tdID0gbWVyZ2VIb29rKGludGVyY2VwdG9yW2hvb2tdLCBvcHRpb25baG9va10pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVJbnRlcmNlcHRvckhvb2sgKGludGVyY2VwdG9yLCBvcHRpb24pIHtcclxuICBpZiAoIWludGVyY2VwdG9yIHx8ICFvcHRpb24pIHtcclxuICAgIHJldHVyblxyXG4gIH1cclxuICBPYmplY3Qua2V5cyhvcHRpb24pLmZvckVhY2goaG9vayA9PiB7XHJcbiAgICBpZiAoSE9PS1MuaW5kZXhPZihob29rKSAhPT0gLTEgJiYgaXNGbihvcHRpb25baG9va10pKSB7XHJcbiAgICAgIHJlbW92ZUhvb2soaW50ZXJjZXB0b3JbaG9va10sIG9wdGlvbltob29rXSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZEludGVyY2VwdG9yIChtZXRob2QsIG9wdGlvbikge1xyXG4gIGlmICh0eXBlb2YgbWV0aG9kID09PSAnc3RyaW5nJyAmJiBpc1BsYWluT2JqZWN0KG9wdGlvbikpIHtcclxuICAgIG1lcmdlSW50ZXJjZXB0b3JIb29rKHNjb3BlZEludGVyY2VwdG9yc1ttZXRob2RdIHx8IChzY29wZWRJbnRlcmNlcHRvcnNbbWV0aG9kXSA9IHt9KSwgb3B0aW9uKTtcclxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QobWV0aG9kKSkge1xyXG4gICAgbWVyZ2VJbnRlcmNlcHRvckhvb2soZ2xvYmFsSW50ZXJjZXB0b3JzLCBtZXRob2QpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlSW50ZXJjZXB0b3IgKG1ldGhvZCwgb3B0aW9uKSB7XHJcbiAgaWYgKHR5cGVvZiBtZXRob2QgPT09ICdzdHJpbmcnKSB7XHJcbiAgICBpZiAoaXNQbGFpbk9iamVjdChvcHRpb24pKSB7XHJcbiAgICAgIHJlbW92ZUludGVyY2VwdG9ySG9vayhzY29wZWRJbnRlcmNlcHRvcnNbbWV0aG9kXSwgb3B0aW9uKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRlbGV0ZSBzY29wZWRJbnRlcmNlcHRvcnNbbWV0aG9kXTtcclxuICAgIH1cclxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QobWV0aG9kKSkge1xyXG4gICAgcmVtb3ZlSW50ZXJjZXB0b3JIb29rKGdsb2JhbEludGVyY2VwdG9ycywgbWV0aG9kKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdyYXBwZXJIb29rIChob29rKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICByZXR1cm4gaG9vayhkYXRhKSB8fCBkYXRhXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc1Byb21pc2UgKG9iaikge1xyXG4gIHJldHVybiAhIW9iaiAmJiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykgJiYgdHlwZW9mIG9iai50aGVuID09PSAnZnVuY3Rpb24nXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHF1ZXVlIChob29rcywgZGF0YSkge1xyXG4gIGxldCBwcm9taXNlID0gZmFsc2U7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xyXG4gICAgY29uc3QgaG9vayA9IGhvb2tzW2ldO1xyXG4gICAgaWYgKHByb21pc2UpIHtcclxuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh3cmFwcGVySG9vayhob29rKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCByZXMgPSBob29rKGRhdGEpO1xyXG4gICAgICBpZiAoaXNQcm9taXNlKHJlcykpIHtcclxuICAgICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHJlcyk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHJlcyA9PT0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgdGhlbiAoKSB7fVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gcHJvbWlzZSB8fCB7XHJcbiAgICB0aGVuIChjYWxsYmFjaykge1xyXG4gICAgICByZXR1cm4gY2FsbGJhY2soZGF0YSlcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdyYXBwZXJPcHRpb25zIChpbnRlcmNlcHRvciwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgWydzdWNjZXNzJywgJ2ZhaWwnLCAnY29tcGxldGUnXS5mb3JFYWNoKG5hbWUgPT4ge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaW50ZXJjZXB0b3JbbmFtZV0pKSB7XHJcbiAgICAgIGNvbnN0IG9sZENhbGxiYWNrID0gb3B0aW9uc1tuYW1lXTtcclxuICAgICAgb3B0aW9uc1tuYW1lXSA9IGZ1bmN0aW9uIGNhbGxiYWNrSW50ZXJjZXB0b3IgKHJlcykge1xyXG4gICAgICAgIHF1ZXVlKGludGVyY2VwdG9yW25hbWVdLCByZXMpLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tbWl4ZWQtb3BlcmF0b3JzICovXHJcbiAgICAgICAgICByZXR1cm4gaXNGbihvbGRDYWxsYmFjaykgJiYgb2xkQ2FsbGJhY2socmVzKSB8fCByZXNcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9KTtcclxuICByZXR1cm4gb3B0aW9uc1xyXG59XHJcblxyXG5mdW5jdGlvbiB3cmFwcGVyUmV0dXJuVmFsdWUgKG1ldGhvZCwgcmV0dXJuVmFsdWUpIHtcclxuICBjb25zdCByZXR1cm5WYWx1ZUhvb2tzID0gW107XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkoZ2xvYmFsSW50ZXJjZXB0b3JzLnJldHVyblZhbHVlKSkge1xyXG4gICAgcmV0dXJuVmFsdWVIb29rcy5wdXNoKC4uLmdsb2JhbEludGVyY2VwdG9ycy5yZXR1cm5WYWx1ZSk7XHJcbiAgfVxyXG4gIGNvbnN0IGludGVyY2VwdG9yID0gc2NvcGVkSW50ZXJjZXB0b3JzW21ldGhvZF07XHJcbiAgaWYgKGludGVyY2VwdG9yICYmIEFycmF5LmlzQXJyYXkoaW50ZXJjZXB0b3IucmV0dXJuVmFsdWUpKSB7XHJcbiAgICByZXR1cm5WYWx1ZUhvb2tzLnB1c2goLi4uaW50ZXJjZXB0b3IucmV0dXJuVmFsdWUpO1xyXG4gIH1cclxuICByZXR1cm5WYWx1ZUhvb2tzLmZvckVhY2goaG9vayA9PiB7XHJcbiAgICByZXR1cm5WYWx1ZSA9IGhvb2socmV0dXJuVmFsdWUpIHx8IHJldHVyblZhbHVlO1xyXG4gIH0pO1xyXG4gIHJldHVybiByZXR1cm5WYWx1ZVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRBcGlJbnRlcmNlcHRvckhvb2tzIChtZXRob2QpIHtcclxuICBjb25zdCBpbnRlcmNlcHRvciA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgT2JqZWN0LmtleXMoZ2xvYmFsSW50ZXJjZXB0b3JzKS5mb3JFYWNoKGhvb2sgPT4ge1xyXG4gICAgaWYgKGhvb2sgIT09ICdyZXR1cm5WYWx1ZScpIHtcclxuICAgICAgaW50ZXJjZXB0b3JbaG9va10gPSBnbG9iYWxJbnRlcmNlcHRvcnNbaG9va10uc2xpY2UoKTtcclxuICAgIH1cclxuICB9KTtcclxuICBjb25zdCBzY29wZWRJbnRlcmNlcHRvciA9IHNjb3BlZEludGVyY2VwdG9yc1ttZXRob2RdO1xyXG4gIGlmIChzY29wZWRJbnRlcmNlcHRvcikge1xyXG4gICAgT2JqZWN0LmtleXMoc2NvcGVkSW50ZXJjZXB0b3IpLmZvckVhY2goaG9vayA9PiB7XHJcbiAgICAgIGlmIChob29rICE9PSAncmV0dXJuVmFsdWUnKSB7XHJcbiAgICAgICAgaW50ZXJjZXB0b3JbaG9va10gPSAoaW50ZXJjZXB0b3JbaG9va10gfHwgW10pLmNvbmNhdChzY29wZWRJbnRlcmNlcHRvcltob29rXSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICByZXR1cm4gaW50ZXJjZXB0b3JcclxufVxyXG5cclxuZnVuY3Rpb24gaW52b2tlQXBpIChtZXRob2QsIGFwaSwgb3B0aW9ucywgLi4ucGFyYW1zKSB7XHJcbiAgY29uc3QgaW50ZXJjZXB0b3IgPSBnZXRBcGlJbnRlcmNlcHRvckhvb2tzKG1ldGhvZCk7XHJcbiAgaWYgKGludGVyY2VwdG9yICYmIE9iamVjdC5rZXlzKGludGVyY2VwdG9yKS5sZW5ndGgpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGludGVyY2VwdG9yLmludm9rZSkpIHtcclxuICAgICAgY29uc3QgcmVzID0gcXVldWUoaW50ZXJjZXB0b3IuaW52b2tlLCBvcHRpb25zKTtcclxuICAgICAgcmV0dXJuIHJlcy50aGVuKChvcHRpb25zKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGFwaSh3cmFwcGVyT3B0aW9ucyhpbnRlcmNlcHRvciwgb3B0aW9ucyksIC4uLnBhcmFtcylcclxuICAgICAgfSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBhcGkod3JhcHBlck9wdGlvbnMoaW50ZXJjZXB0b3IsIG9wdGlvbnMpLCAuLi5wYXJhbXMpXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBhcGkob3B0aW9ucywgLi4ucGFyYW1zKVxyXG59XHJcblxyXG5jb25zdCBwcm9taXNlSW50ZXJjZXB0b3IgPSB7XHJcbiAgcmV0dXJuVmFsdWUgKHJlcykge1xyXG4gICAgaWYgKCFpc1Byb21pc2UocmVzKSkge1xyXG4gICAgICByZXR1cm4gcmVzXHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzLnRoZW4ocmVzID0+IHtcclxuICAgICAgcmV0dXJuIHJlc1sxXVxyXG4gICAgfSkuY2F0Y2gocmVzID0+IHtcclxuICAgICAgcmV0dXJuIHJlc1swXVxyXG4gICAgfSlcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBTWU5DX0FQSV9SRSA9XHJcbiAgL15cXCR8c2VuZE5hdGl2ZUV2ZW50fHJlc3RvcmVHbG9iYWx8Z2V0Q3VycmVudFN1Yk5WdWV8Z2V0TWVudUJ1dHRvbkJvdW5kaW5nQ2xpZW50UmVjdHxecmVwb3J0fGludGVyY2VwdG9yc3xJbnRlcmNlcHRvciR8Z2V0U3ViTlZ1ZUJ5SWR8cmVxdWlyZU5hdGl2ZVBsdWdpbnx1cHgycHh8aGlkZUtleWJvYXJkfGNhbklVc2V8XmNyZWF0ZXxTeW5jJHxNYW5hZ2VyJHxiYXNlNjRUb0FycmF5QnVmZmVyfGFycmF5QnVmZmVyVG9CYXNlNjQvO1xyXG5cclxuY29uc3QgQ09OVEVYVF9BUElfUkUgPSAvXmNyZWF0ZXxNYW5hZ2VyJC87XHJcblxyXG4vLyBDb250ZXh05L6L5aSW5oOF5Ya1XHJcbmNvbnN0IENPTlRFWFRfQVBJX1JFX0VYQyA9IFsnY3JlYXRlQkxFQ29ubmVjdGlvbiddO1xyXG5cclxuLy8g5ZCM5q2l5L6L5aSW5oOF5Ya1XHJcbmNvbnN0IEFTWU5DX0FQSSA9IFsnY3JlYXRlQkxFQ29ubmVjdGlvbiddO1xyXG5cclxuY29uc3QgQ0FMTEJBQ0tfQVBJX1JFID0gL15vbnxeb2ZmLztcclxuXHJcbmZ1bmN0aW9uIGlzQ29udGV4dEFwaSAobmFtZSkge1xyXG4gIHJldHVybiBDT05URVhUX0FQSV9SRS50ZXN0KG5hbWUpICYmIENPTlRFWFRfQVBJX1JFX0VYQy5pbmRleE9mKG5hbWUpID09PSAtMVxyXG59XHJcbmZ1bmN0aW9uIGlzU3luY0FwaSAobmFtZSkge1xyXG4gIHJldHVybiBTWU5DX0FQSV9SRS50ZXN0KG5hbWUpICYmIEFTWU5DX0FQSS5pbmRleE9mKG5hbWUpID09PSAtMVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc0NhbGxiYWNrQXBpIChuYW1lKSB7XHJcbiAgcmV0dXJuIENBTExCQUNLX0FQSV9SRS50ZXN0KG5hbWUpICYmIG5hbWUgIT09ICdvblB1c2gnXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZVByb21pc2UgKHByb21pc2UpIHtcclxuICByZXR1cm4gcHJvbWlzZS50aGVuKGRhdGEgPT4ge1xyXG4gICAgcmV0dXJuIFtudWxsLCBkYXRhXVxyXG4gIH0pXHJcbiAgICAuY2F0Y2goZXJyID0+IFtlcnJdKVxyXG59XHJcblxyXG5mdW5jdGlvbiBzaG91bGRQcm9taXNlIChuYW1lKSB7XHJcbiAgaWYgKFxyXG4gICAgaXNDb250ZXh0QXBpKG5hbWUpIHx8XHJcbiAgICBpc1N5bmNBcGkobmFtZSkgfHxcclxuICAgIGlzQ2FsbGJhY2tBcGkobmFtZSlcclxuICApIHtcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxuICByZXR1cm4gdHJ1ZVxyXG59XHJcblxyXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1leHRlbmQtbmF0aXZlICovXHJcbmlmICghUHJvbWlzZS5wcm90b3R5cGUuZmluYWxseSkge1xyXG4gIFByb21pc2UucHJvdG90eXBlLmZpbmFsbHkgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLmNvbnN0cnVjdG9yO1xyXG4gICAgcmV0dXJuIHRoaXMudGhlbihcclxuICAgICAgdmFsdWUgPT4gcHJvbWlzZS5yZXNvbHZlKGNhbGxiYWNrKCkpLnRoZW4oKCkgPT4gdmFsdWUpLFxyXG4gICAgICByZWFzb24gPT4gcHJvbWlzZS5yZXNvbHZlKGNhbGxiYWNrKCkpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIHRocm93IHJlYXNvblxyXG4gICAgICB9KVxyXG4gICAgKVxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb21pc2lmeSAobmFtZSwgYXBpKSB7XHJcbiAgaWYgKCFzaG91bGRQcm9taXNlKG5hbWUpKSB7XHJcbiAgICByZXR1cm4gYXBpXHJcbiAgfVxyXG4gIHJldHVybiBmdW5jdGlvbiBwcm9taXNlQXBpIChvcHRpb25zID0ge30sIC4uLnBhcmFtcykge1xyXG4gICAgaWYgKGlzRm4ob3B0aW9ucy5zdWNjZXNzKSB8fCBpc0ZuKG9wdGlvbnMuZmFpbCkgfHwgaXNGbihvcHRpb25zLmNvbXBsZXRlKSkge1xyXG4gICAgICByZXR1cm4gd3JhcHBlclJldHVyblZhbHVlKG5hbWUsIGludm9rZUFwaShuYW1lLCBhcGksIG9wdGlvbnMsIC4uLnBhcmFtcykpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gd3JhcHBlclJldHVyblZhbHVlKG5hbWUsIGhhbmRsZVByb21pc2UobmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBpbnZva2VBcGkobmFtZSwgYXBpLCBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7XHJcbiAgICAgICAgc3VjY2VzczogcmVzb2x2ZSxcclxuICAgICAgICBmYWlsOiByZWplY3RcclxuICAgICAgfSksIC4uLnBhcmFtcyk7XHJcbiAgICB9KSkpXHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBFUFMgPSAxZS00O1xyXG5jb25zdCBCQVNFX0RFVklDRV9XSURUSCA9IDc1MDtcclxubGV0IGlzSU9TID0gZmFsc2U7XHJcbmxldCBkZXZpY2VXaWR0aCA9IDA7XHJcbmxldCBkZXZpY2VEUFIgPSAwO1xyXG5cclxuZnVuY3Rpb24gY2hlY2tEZXZpY2VXaWR0aCAoKSB7XHJcbiAgY29uc3Qge1xyXG4gICAgcGxhdGZvcm0sXHJcbiAgICBwaXhlbFJhdGlvLFxyXG4gICAgd2luZG93V2lkdGhcclxuICB9ID0gd3guZ2V0U3lzdGVtSW5mb1N5bmMoKTsgLy8gdW5pPT53eCBydW50aW1lIOe8luivkeebruagh+aYryB1bmkg5a+56LGh77yM5YaF6YOo5LiN5YWB6K6455u05o6l5L2/55SoIHVuaVxyXG5cclxuICBkZXZpY2VXaWR0aCA9IHdpbmRvd1dpZHRoO1xyXG4gIGRldmljZURQUiA9IHBpeGVsUmF0aW87XHJcbiAgaXNJT1MgPSBwbGF0Zm9ybSA9PT0gJ2lvcyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVweDJweCAobnVtYmVyLCBuZXdEZXZpY2VXaWR0aCkge1xyXG4gIGlmIChkZXZpY2VXaWR0aCA9PT0gMCkge1xyXG4gICAgY2hlY2tEZXZpY2VXaWR0aCgpO1xyXG4gIH1cclxuXHJcbiAgbnVtYmVyID0gTnVtYmVyKG51bWJlcik7XHJcbiAgaWYgKG51bWJlciA9PT0gMCkge1xyXG4gICAgcmV0dXJuIDBcclxuICB9XHJcbiAgbGV0IHJlc3VsdCA9IChudW1iZXIgLyBCQVNFX0RFVklDRV9XSURUSCkgKiAobmV3RGV2aWNlV2lkdGggfHwgZGV2aWNlV2lkdGgpO1xyXG4gIGlmIChyZXN1bHQgPCAwKSB7XHJcbiAgICByZXN1bHQgPSAtcmVzdWx0O1xyXG4gIH1cclxuICByZXN1bHQgPSBNYXRoLmZsb29yKHJlc3VsdCArIEVQUyk7XHJcbiAgaWYgKHJlc3VsdCA9PT0gMCkge1xyXG4gICAgaWYgKGRldmljZURQUiA9PT0gMSB8fCAhaXNJT1MpIHtcclxuICAgICAgcmVzdWx0ID0gMTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlc3VsdCA9IDAuNTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG51bWJlciA8IDAgPyAtcmVzdWx0IDogcmVzdWx0XHJcbn1cclxuXHJcbmNvbnN0IGludGVyY2VwdG9ycyA9IHtcclxuICBwcm9taXNlSW50ZXJjZXB0b3JcclxufTtcclxuXHJcbnZhciBiYXNlQXBpID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xyXG4gIF9fcHJvdG9fXzogbnVsbCxcclxuICB1cHgycHg6IHVweDJweCxcclxuICBhZGRJbnRlcmNlcHRvcjogYWRkSW50ZXJjZXB0b3IsXHJcbiAgcmVtb3ZlSW50ZXJjZXB0b3I6IHJlbW92ZUludGVyY2VwdG9yLFxyXG4gIGludGVyY2VwdG9yczogaW50ZXJjZXB0b3JzXHJcbn0pO1xyXG5cclxudmFyIHByZXZpZXdJbWFnZSA9IHtcclxuICBhcmdzIChmcm9tQXJncykge1xyXG4gICAgbGV0IGN1cnJlbnRJbmRleCA9IHBhcnNlSW50KGZyb21BcmdzLmN1cnJlbnQpO1xyXG4gICAgaWYgKGlzTmFOKGN1cnJlbnRJbmRleCkpIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBjb25zdCB1cmxzID0gZnJvbUFyZ3MudXJscztcclxuICAgIGlmICghQXJyYXkuaXNBcnJheSh1cmxzKSkge1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIGNvbnN0IGxlbiA9IHVybHMubGVuZ3RoO1xyXG4gICAgaWYgKCFsZW4pIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBpZiAoY3VycmVudEluZGV4IDwgMCkge1xyXG4gICAgICBjdXJyZW50SW5kZXggPSAwO1xyXG4gICAgfSBlbHNlIGlmIChjdXJyZW50SW5kZXggPj0gbGVuKSB7XHJcbiAgICAgIGN1cnJlbnRJbmRleCA9IGxlbiAtIDE7XHJcbiAgICB9XHJcbiAgICBpZiAoY3VycmVudEluZGV4ID4gMCkge1xyXG4gICAgICBmcm9tQXJncy5jdXJyZW50ID0gdXJsc1tjdXJyZW50SW5kZXhdO1xyXG4gICAgICBmcm9tQXJncy51cmxzID0gdXJscy5maWx0ZXIoXHJcbiAgICAgICAgKGl0ZW0sIGluZGV4KSA9PiBpbmRleCA8IGN1cnJlbnRJbmRleCA/IGl0ZW0gIT09IHVybHNbY3VycmVudEluZGV4XSA6IHRydWVcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZyb21BcmdzLmN1cnJlbnQgPSB1cmxzWzBdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaW5kaWNhdG9yOiBmYWxzZSxcclxuICAgICAgbG9vcDogZmFsc2VcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBwcm90b2NvbHMgPSB7XHJcbiAgcHJldmlld0ltYWdlXHJcbn07XHJcbmNvbnN0IHRvZG9zID0gW1xyXG4gICdwcmVsb2FkUGFnZScsXHJcbiAgJ3VuUHJlbG9hZFBhZ2UnLFxyXG4gICdsb2FkU3ViUGFja2FnZSdcclxuICAvLyAnc3RhcnRCZWFjb25EaXNjb3ZlcnknLFxyXG4gIC8vICdzdG9wQmVhY29uRGlzY292ZXJ5JyxcclxuICAvLyAnZ2V0QmVhY29ucycsXHJcbiAgLy8gJ29uQmVhY29uVXBkYXRlJyxcclxuICAvLyAnb25CZWFjb25TZXJ2aWNlQ2hhbmdlJyxcclxuICAvLyAnYWRkUGhvbmVDb250YWN0JyxcclxuICAvLyAnZ2V0SENFU3RhdGUnLFxyXG4gIC8vICdzdGFydEhDRScsXHJcbiAgLy8gJ3N0b3BIQ0UnLFxyXG4gIC8vICdvbkhDRU1lc3NhZ2UnLFxyXG4gIC8vICdzZW5kSENFTWVzc2FnZScsXHJcbiAgLy8gJ3N0YXJ0V2lmaScsXHJcbiAgLy8gJ3N0b3BXaWZpJyxcclxuICAvLyAnY29ubmVjdFdpZmknLFxyXG4gIC8vICdnZXRXaWZpTGlzdCcsXHJcbiAgLy8gJ29uR2V0V2lmaUxpc3QnLFxyXG4gIC8vICdzZXRXaWZpTGlzdCcsXHJcbiAgLy8gJ29uV2lmaUNvbm5lY3RlZCcsXHJcbiAgLy8gJ2dldENvbm5lY3RlZFdpZmknLFxyXG4gIC8vICdzZXRUb3BCYXJUZXh0JyxcclxuICAvLyAnZ2V0UGhvbmVOdW1iZXInLFxyXG4gIC8vICdjaG9vc2VBZGRyZXNzJyxcclxuICAvLyAnYWRkQ2FyZCcsXHJcbiAgLy8gJ29wZW5DYXJkJyxcclxuICAvLyAnZ2V0V2VSdW5EYXRhJyxcclxuICAvLyAnbGF1bmNoQXBwJyxcclxuICAvLyAnY2hvb3NlSW52b2ljZVRpdGxlJyxcclxuICAvLyAnY2hlY2tJc1N1cHBvcnRTb3RlckF1dGhlbnRpY2F0aW9uJyxcclxuICAvLyAnc3RhcnRTb3RlckF1dGhlbnRpY2F0aW9uJyxcclxuICAvLyAnY2hlY2tJc1NvdGVyRW5yb2xsZWRJbkRldmljZScsXHJcbiAgLy8gJ3ZpYnJhdGUnLFxyXG4gIC8vICdsb2FkRm9udEZhY2UnLFxyXG4gIC8vICdnZXRFeHRDb25maWcnLFxyXG4gIC8vICdnZXRFeHRDb25maWdTeW5jJ1xyXG5dO1xyXG5jb25zdCBjYW5JVXNlcyA9IFtcclxuICAnc2NhbkNvZGUnLFxyXG4gICdzdGFydEFjY2VsZXJvbWV0ZXInLFxyXG4gICdzdG9wQWNjZWxlcm9tZXRlcicsXHJcbiAgJ29uQWNjZWxlcm9tZXRlckNoYW5nZScsXHJcbiAgJ3N0YXJ0Q29tcGFzcycsXHJcbiAgJ29uQ29tcGFzc0NoYW5nZScsXHJcbiAgJ3NldFNjcmVlbkJyaWdodG5lc3MnLFxyXG4gICdnZXRTY3JlZW5CcmlnaHRuZXNzJyxcclxuICAnc2V0S2VlcFNjcmVlbk9uJyxcclxuICAnb25Vc2VyQ2FwdHVyZVNjcmVlbicsXHJcbiAgJ3ZpYnJhdGVMb25nJyxcclxuICAndmlicmF0ZVNob3J0JyxcclxuICAnY3JlYXRlV29ya2VyJyxcclxuICAnY29ubmVjdFNvY2tldCcsXHJcbiAgJ29uU29ja2V0T3BlbicsXHJcbiAgJ29uU29ja2V0RXJyb3InLFxyXG4gICdzZW5kU29ja2V0TWVzc2FnZScsXHJcbiAgJ29uU29ja2V0TWVzc2FnZScsXHJcbiAgJ2Nsb3NlU29ja2V0JyxcclxuICAnb25Tb2NrZXRDbG9zZScsXHJcbiAgJ29wZW5Eb2N1bWVudCcsXHJcbiAgJ3VwZGF0ZVNoYXJlTWVudScsXHJcbiAgJ2dldFNoYXJlSW5mbycsXHJcbiAgJ2NyZWF0ZUxpdmVQbGF5ZXJDb250ZXh0JyxcclxuICAnY3JlYXRlTGl2ZVB1c2hlckNvbnRleHQnLFxyXG4gICdzZXROYXZpZ2F0aW9uQmFyQ29sb3InLFxyXG4gICdvbk1lbW9yeVdhcm5pbmcnLFxyXG4gICdvbk5ldHdvcmtTdGF0dXNDaGFuZ2UnLFxyXG4gICdyZXBvcnRNb25pdG9yJyxcclxuICAnZ2V0TG9nTWFuYWdlcicsXHJcbiAgJ3JlcG9ydEFuYWx5dGljcydcclxuXTtcclxuXHJcbmNvbnN0IENBTExCQUNLUyA9IFsnc3VjY2VzcycsICdmYWlsJywgJ2NhbmNlbCcsICdjb21wbGV0ZSddO1xyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc0NhbGxiYWNrIChtZXRob2ROYW1lLCBtZXRob2QsIHJldHVyblZhbHVlKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIChyZXMpIHtcclxuICAgIHJldHVybiBtZXRob2QocHJvY2Vzc1JldHVyblZhbHVlKG1ldGhvZE5hbWUsIHJlcywgcmV0dXJuVmFsdWUpKVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc0FyZ3MgKG1ldGhvZE5hbWUsIGZyb21BcmdzLCBhcmdzT3B0aW9uID0ge30sIHJldHVyblZhbHVlID0ge30sIGtlZXBGcm9tQXJncyA9IGZhbHNlKSB7XHJcbiAgaWYgKGlzUGxhaW5PYmplY3QoZnJvbUFyZ3MpKSB7IC8vIOS4gOiIrCBhcGkg55qE5Y+C5pWw6Kej5p6QXHJcbiAgICBjb25zdCB0b0FyZ3MgPSBrZWVwRnJvbUFyZ3MgPT09IHRydWUgPyBmcm9tQXJncyA6IHt9OyAvLyByZXR1cm5WYWx1ZSDkuLogZmFsc2Ug5pe277yM6K+05piO5piv5qC85byP5YyW6L+U5Zue5YC877yM55u05o6l5Zyo6L+U5Zue5YC85a+56LGh5LiK5L+u5pS56LWL5YC8XHJcbiAgICBpZiAoaXNGbihhcmdzT3B0aW9uKSkge1xyXG4gICAgICBhcmdzT3B0aW9uID0gYXJnc09wdGlvbihmcm9tQXJncywgdG9BcmdzKSB8fCB7fTtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3Qga2V5IGluIGZyb21BcmdzKSB7XHJcbiAgICAgIGlmIChoYXNPd24oYXJnc09wdGlvbiwga2V5KSkge1xyXG4gICAgICAgIGxldCBrZXlPcHRpb24gPSBhcmdzT3B0aW9uW2tleV07XHJcbiAgICAgICAgaWYgKGlzRm4oa2V5T3B0aW9uKSkge1xyXG4gICAgICAgICAga2V5T3B0aW9uID0ga2V5T3B0aW9uKGZyb21BcmdzW2tleV0sIGZyb21BcmdzLCB0b0FyZ3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWtleU9wdGlvbikgeyAvLyDkuI3mlK/mjIHnmoTlj4LmlbBcclxuICAgICAgICAgIGNvbnNvbGUud2FybihgUVHlsI/nqIvluo8gJHttZXRob2ROYW1lfeaaguS4jeaUr+aMgSR7a2V5fWApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNTdHIoa2V5T3B0aW9uKSkgeyAvLyDph43lhpnlj4LmlbAga2V5XHJcbiAgICAgICAgICB0b0FyZ3Nba2V5T3B0aW9uXSA9IGZyb21BcmdzW2tleV07XHJcbiAgICAgICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGtleU9wdGlvbikpIHsgLy8ge25hbWU6bmV3TmFtZSx2YWx1ZTp2YWx1ZX3lj6/ph43mlrDmjIflrprlj4LmlbAga2V5OnZhbHVlXHJcbiAgICAgICAgICB0b0FyZ3Nba2V5T3B0aW9uLm5hbWUgPyBrZXlPcHRpb24ubmFtZSA6IGtleV0gPSBrZXlPcHRpb24udmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKENBTExCQUNLUy5pbmRleE9mKGtleSkgIT09IC0xKSB7XHJcbiAgICAgICAgaWYgKGlzRm4oZnJvbUFyZ3Nba2V5XSkpIHtcclxuICAgICAgICAgIHRvQXJnc1trZXldID0gcHJvY2Vzc0NhbGxiYWNrKG1ldGhvZE5hbWUsIGZyb21BcmdzW2tleV0sIHJldHVyblZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKCFrZWVwRnJvbUFyZ3MpIHtcclxuICAgICAgICAgIHRvQXJnc1trZXldID0gZnJvbUFyZ3Nba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0b0FyZ3NcclxuICB9IGVsc2UgaWYgKGlzRm4oZnJvbUFyZ3MpKSB7XHJcbiAgICBmcm9tQXJncyA9IHByb2Nlc3NDYWxsYmFjayhtZXRob2ROYW1lLCBmcm9tQXJncywgcmV0dXJuVmFsdWUpO1xyXG4gIH1cclxuICByZXR1cm4gZnJvbUFyZ3NcclxufVxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc1JldHVyblZhbHVlIChtZXRob2ROYW1lLCByZXMsIHJldHVyblZhbHVlLCBrZWVwUmV0dXJuVmFsdWUgPSBmYWxzZSkge1xyXG4gIGlmIChpc0ZuKHByb3RvY29scy5yZXR1cm5WYWx1ZSkpIHsgLy8g5aSE55CG6YCa55SoIHJldHVyblZhbHVlXHJcbiAgICByZXMgPSBwcm90b2NvbHMucmV0dXJuVmFsdWUobWV0aG9kTmFtZSwgcmVzKTtcclxuICB9XHJcbiAgcmV0dXJuIHByb2Nlc3NBcmdzKG1ldGhvZE5hbWUsIHJlcywgcmV0dXJuVmFsdWUsIHt9LCBrZWVwUmV0dXJuVmFsdWUpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdyYXBwZXIgKG1ldGhvZE5hbWUsIG1ldGhvZCkge1xyXG4gIGlmIChoYXNPd24ocHJvdG9jb2xzLCBtZXRob2ROYW1lKSkge1xyXG4gICAgY29uc3QgcHJvdG9jb2wgPSBwcm90b2NvbHNbbWV0aG9kTmFtZV07XHJcbiAgICBpZiAoIXByb3RvY29sKSB7IC8vIOaaguS4jeaUr+aMgeeahCBhcGlcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBRUeWwj+eoi+W6jyDmmoLkuI3mlK/mjIEke21ldGhvZE5hbWV9YCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnMSwgYXJnMikgeyAvLyDnm67liY0gYXBpIOacgOWkmuS4pOS4quWPguaVsFxyXG4gICAgICBsZXQgb3B0aW9ucyA9IHByb3RvY29sO1xyXG4gICAgICBpZiAoaXNGbihwcm90b2NvbCkpIHtcclxuICAgICAgICBvcHRpb25zID0gcHJvdG9jb2woYXJnMSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGFyZzEgPSBwcm9jZXNzQXJncyhtZXRob2ROYW1lLCBhcmcxLCBvcHRpb25zLmFyZ3MsIG9wdGlvbnMucmV0dXJuVmFsdWUpO1xyXG5cclxuICAgICAgY29uc3QgYXJncyA9IFthcmcxXTtcclxuICAgICAgaWYgKHR5cGVvZiBhcmcyICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGFyZ3MucHVzaChhcmcyKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCByZXR1cm5WYWx1ZSA9IHd4W29wdGlvbnMubmFtZSB8fCBtZXRob2ROYW1lXS5hcHBseSh3eCwgYXJncyk7XHJcbiAgICAgIGlmIChpc1N5bmNBcGkobWV0aG9kTmFtZSkpIHsgLy8g5ZCM5q2lIGFwaVxyXG4gICAgICAgIHJldHVybiBwcm9jZXNzUmV0dXJuVmFsdWUobWV0aG9kTmFtZSwgcmV0dXJuVmFsdWUsIG9wdGlvbnMucmV0dXJuVmFsdWUsIGlzQ29udGV4dEFwaShtZXRob2ROYW1lKSlcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcmV0dXJuVmFsdWVcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1ldGhvZFxyXG59XHJcblxyXG5jb25zdCB0b2RvQXBpcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcblxyXG5jb25zdCBUT0RPUyA9IFtcclxuICAnb25UYWJCYXJNaWRCdXR0b25UYXAnLFxyXG4gICdzdWJzY3JpYmVQdXNoJyxcclxuICAndW5zdWJzY3JpYmVQdXNoJyxcclxuICAnb25QdXNoJyxcclxuICAnb2ZmUHVzaCcsXHJcbiAgJ3NoYXJlJ1xyXG5dO1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlVG9kb0FwaSAobmFtZSkge1xyXG4gIHJldHVybiBmdW5jdGlvbiB0b2RvQXBpICh7XHJcbiAgICBmYWlsLFxyXG4gICAgY29tcGxldGVcclxuICB9KSB7XHJcbiAgICBjb25zdCByZXMgPSB7XHJcbiAgICAgIGVyck1zZzogYCR7bmFtZX06ZmFpbDrmmoLkuI3mlK/mjIEgJHtuYW1lfSDmlrnms5VgXHJcbiAgICB9O1xyXG4gICAgaXNGbihmYWlsKSAmJiBmYWlsKHJlcyk7XHJcbiAgICBpc0ZuKGNvbXBsZXRlKSAmJiBjb21wbGV0ZShyZXMpO1xyXG4gIH1cclxufVxyXG5cclxuVE9ET1MuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xyXG4gIHRvZG9BcGlzW25hbWVdID0gY3JlYXRlVG9kb0FwaShuYW1lKTtcclxufSk7XHJcblxyXG52YXIgcHJvdmlkZXJzID0ge1xyXG4gIG9hdXRoOiBbJ3FxJ10sXHJcbiAgc2hhcmU6IFsncXEnXSxcclxuICBwYXltZW50OiBbJ3FxcGF5J10sXHJcbiAgcHVzaDogWydxcSddXHJcbn07XHJcblxyXG5mdW5jdGlvbiBnZXRQcm92aWRlciAoe1xyXG4gIHNlcnZpY2UsXHJcbiAgc3VjY2VzcyxcclxuICBmYWlsLFxyXG4gIGNvbXBsZXRlXHJcbn0pIHtcclxuICBsZXQgcmVzID0gZmFsc2U7XHJcbiAgaWYgKHByb3ZpZGVyc1tzZXJ2aWNlXSkge1xyXG4gICAgcmVzID0ge1xyXG4gICAgICBlcnJNc2c6ICdnZXRQcm92aWRlcjpvaycsXHJcbiAgICAgIHNlcnZpY2UsXHJcbiAgICAgIHByb3ZpZGVyOiBwcm92aWRlcnNbc2VydmljZV1cclxuICAgIH07XHJcbiAgICBpc0ZuKHN1Y2Nlc3MpICYmIHN1Y2Nlc3MocmVzKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmVzID0ge1xyXG4gICAgICBlcnJNc2c6ICdnZXRQcm92aWRlcjpmYWlsOuacjeWKoVsnICsgc2VydmljZSArICdd5LiN5a2Y5ZyoJ1xyXG4gICAgfTtcclxuICAgIGlzRm4oZmFpbCkgJiYgZmFpbChyZXMpO1xyXG4gIH1cclxuICBpc0ZuKGNvbXBsZXRlKSAmJiBjb21wbGV0ZShyZXMpO1xyXG59XHJcblxyXG52YXIgZXh0cmFBcGkgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XHJcbiAgX19wcm90b19fOiBudWxsLFxyXG4gIGdldFByb3ZpZGVyOiBnZXRQcm92aWRlclxyXG59KTtcclxuXHJcbmNvbnN0IGdldEVtaXR0ZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gIGxldCBFbWl0dGVyO1xyXG4gIHJldHVybiBmdW5jdGlvbiBnZXRVbmlFbWl0dGVyICgpIHtcclxuICAgIGlmICghRW1pdHRlcikge1xyXG4gICAgICBFbWl0dGVyID0gbmV3IFZ1ZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEVtaXR0ZXJcclxuICB9XHJcbn0pKCk7XHJcblxyXG5mdW5jdGlvbiBhcHBseSAoY3R4LCBtZXRob2QsIGFyZ3MpIHtcclxuICByZXR1cm4gY3R4W21ldGhvZF0uYXBwbHkoY3R4LCBhcmdzKVxyXG59XHJcblxyXG5mdW5jdGlvbiAkb24gKCkge1xyXG4gIHJldHVybiBhcHBseShnZXRFbWl0dGVyKCksICckb24nLCBbLi4uYXJndW1lbnRzXSlcclxufVxyXG5mdW5jdGlvbiAkb2ZmICgpIHtcclxuICByZXR1cm4gYXBwbHkoZ2V0RW1pdHRlcigpLCAnJG9mZicsIFsuLi5hcmd1bWVudHNdKVxyXG59XHJcbmZ1bmN0aW9uICRvbmNlICgpIHtcclxuICByZXR1cm4gYXBwbHkoZ2V0RW1pdHRlcigpLCAnJG9uY2UnLCBbLi4uYXJndW1lbnRzXSlcclxufVxyXG5mdW5jdGlvbiAkZW1pdCAoKSB7XHJcbiAgcmV0dXJuIGFwcGx5KGdldEVtaXR0ZXIoKSwgJyRlbWl0JywgWy4uLmFyZ3VtZW50c10pXHJcbn1cclxuXHJcbnZhciBldmVudEFwaSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcclxuICBfX3Byb3RvX186IG51bGwsXHJcbiAgJG9uOiAkb24sXHJcbiAgJG9mZjogJG9mZixcclxuICAkb25jZTogJG9uY2UsXHJcbiAgJGVtaXQ6ICRlbWl0XHJcbn0pO1xyXG5cclxudmFyIGFwaSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcclxuICBfX3Byb3RvX186IG51bGxcclxufSk7XHJcblxyXG5jb25zdCBNUFBhZ2UgPSBQYWdlO1xyXG5jb25zdCBNUENvbXBvbmVudCA9IENvbXBvbmVudDtcclxuXHJcbmNvbnN0IGN1c3RvbWl6ZVJFID0gLzovZztcclxuXHJcbmNvbnN0IGN1c3RvbWl6ZSA9IGNhY2hlZCgoc3RyKSA9PiB7XHJcbiAgcmV0dXJuIGNhbWVsaXplKHN0ci5yZXBsYWNlKGN1c3RvbWl6ZVJFLCAnLScpKVxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGluaXRUcmlnZ2VyRXZlbnQgKG1wSW5zdGFuY2UpIHtcclxuICBjb25zdCBvbGRUcmlnZ2VyRXZlbnQgPSBtcEluc3RhbmNlLnRyaWdnZXJFdmVudDtcclxuICBtcEluc3RhbmNlLnRyaWdnZXJFdmVudCA9IGZ1bmN0aW9uIChldmVudCwgLi4uYXJncykge1xyXG4gICAgcmV0dXJuIG9sZFRyaWdnZXJFdmVudC5hcHBseShtcEluc3RhbmNlLCBbY3VzdG9taXplKGV2ZW50KSwgLi4uYXJnc10pXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdEhvb2sgKG5hbWUsIG9wdGlvbnMpIHtcclxuICBjb25zdCBvbGRIb29rID0gb3B0aW9uc1tuYW1lXTtcclxuICBpZiAoIW9sZEhvb2spIHtcclxuICAgIG9wdGlvbnNbbmFtZV0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGluaXRUcmlnZ2VyRXZlbnQodGhpcyk7XHJcbiAgICB9O1xyXG4gIH0gZWxzZSB7XHJcbiAgICBvcHRpb25zW25hbWVdID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgaW5pdFRyaWdnZXJFdmVudCh0aGlzKTtcclxuICAgICAgcmV0dXJuIG9sZEhvb2suYXBwbHkodGhpcywgYXJncylcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5QYWdlID0gZnVuY3Rpb24gKG9wdGlvbnMgPSB7fSkge1xyXG4gIGluaXRIb29rKCdvbkxvYWQnLCBvcHRpb25zKTtcclxuICByZXR1cm4gTVBQYWdlKG9wdGlvbnMpXHJcbn07XHJcblxyXG5Db21wb25lbnQgPSBmdW5jdGlvbiAob3B0aW9ucyA9IHt9KSB7XHJcbiAgaW5pdEhvb2soJ2NyZWF0ZWQnLCBvcHRpb25zKTtcclxuICByZXR1cm4gTVBDb21wb25lbnQob3B0aW9ucylcclxufTtcclxuXHJcbmNvbnN0IFBBR0VfRVZFTlRfSE9PS1MgPSBbXHJcbiAgJ29uUHVsbERvd25SZWZyZXNoJyxcclxuICAnb25SZWFjaEJvdHRvbScsXHJcbiAgJ29uQWRkVG9GYXZvcml0ZXMnLFxyXG4gICdvblNoYXJlVGltZWxpbmUnLFxyXG4gICdvblNoYXJlQXBwTWVzc2FnZScsXHJcbiAgJ29uUGFnZVNjcm9sbCcsXHJcbiAgJ29uUmVzaXplJyxcclxuICAnb25UYWJJdGVtVGFwJ1xyXG5dO1xyXG5cclxuZnVuY3Rpb24gaW5pdE1vY2tzICh2bSwgbW9ja3MpIHtcclxuICBjb25zdCBtcEluc3RhbmNlID0gdm0uJG1wW3ZtLm1wVHlwZV07XHJcbiAgbW9ja3MuZm9yRWFjaChtb2NrID0+IHtcclxuICAgIGlmIChoYXNPd24obXBJbnN0YW5jZSwgbW9jaykpIHtcclxuICAgICAgdm1bbW9ja10gPSBtcEluc3RhbmNlW21vY2tdO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYXNIb29rIChob29rLCB2dWVPcHRpb25zKSB7XHJcbiAgaWYgKCF2dWVPcHRpb25zKSB7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuXHJcbiAgaWYgKFZ1ZS5vcHRpb25zICYmIEFycmF5LmlzQXJyYXkoVnVlLm9wdGlvbnNbaG9va10pKSB7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuXHJcbiAgdnVlT3B0aW9ucyA9IHZ1ZU9wdGlvbnMuZGVmYXVsdCB8fCB2dWVPcHRpb25zO1xyXG5cclxuICBpZiAoaXNGbih2dWVPcHRpb25zKSkge1xyXG4gICAgaWYgKGlzRm4odnVlT3B0aW9ucy5leHRlbmRPcHRpb25zW2hvb2tdKSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG4gICAgaWYgKHZ1ZU9wdGlvbnMuc3VwZXIgJiZcclxuICAgICAgdnVlT3B0aW9ucy5zdXBlci5vcHRpb25zICYmXHJcbiAgICAgIEFycmF5LmlzQXJyYXkodnVlT3B0aW9ucy5zdXBlci5vcHRpb25zW2hvb2tdKSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG5cclxuICBpZiAoaXNGbih2dWVPcHRpb25zW2hvb2tdKSkge1xyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcbiAgY29uc3QgbWl4aW5zID0gdnVlT3B0aW9ucy5taXhpbnM7XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkobWl4aW5zKSkge1xyXG4gICAgcmV0dXJuICEhbWl4aW5zLmZpbmQobWl4aW4gPT4gaGFzSG9vayhob29rLCBtaXhpbikpXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0SG9va3MgKG1wT3B0aW9ucywgaG9va3MsIHZ1ZU9wdGlvbnMpIHtcclxuICBob29rcy5mb3JFYWNoKGhvb2sgPT4ge1xyXG4gICAgaWYgKGhhc0hvb2soaG9vaywgdnVlT3B0aW9ucykpIHtcclxuICAgICAgbXBPcHRpb25zW2hvb2tdID0gZnVuY3Rpb24gKGFyZ3MpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kdm0gJiYgdGhpcy4kdm0uX19jYWxsX2hvb2soaG9vaywgYXJncylcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdFZ1ZUNvbXBvbmVudCAoVnVlLCB2dWVPcHRpb25zKSB7XHJcbiAgdnVlT3B0aW9ucyA9IHZ1ZU9wdGlvbnMuZGVmYXVsdCB8fCB2dWVPcHRpb25zO1xyXG4gIGxldCBWdWVDb21wb25lbnQ7XHJcbiAgaWYgKGlzRm4odnVlT3B0aW9ucykpIHtcclxuICAgIFZ1ZUNvbXBvbmVudCA9IHZ1ZU9wdGlvbnM7XHJcbiAgfSBlbHNlIHtcclxuICAgIFZ1ZUNvbXBvbmVudCA9IFZ1ZS5leHRlbmQodnVlT3B0aW9ucyk7XHJcbiAgfVxyXG4gIHZ1ZU9wdGlvbnMgPSBWdWVDb21wb25lbnQub3B0aW9ucztcclxuICByZXR1cm4gW1Z1ZUNvbXBvbmVudCwgdnVlT3B0aW9uc11cclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdFNsb3RzICh2bSwgdnVlU2xvdHMpIHtcclxuICBpZiAoQXJyYXkuaXNBcnJheSh2dWVTbG90cykgJiYgdnVlU2xvdHMubGVuZ3RoKSB7XHJcbiAgICBjb25zdCAkc2xvdHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgdnVlU2xvdHMuZm9yRWFjaChzbG90TmFtZSA9PiB7XHJcbiAgICAgICRzbG90c1tzbG90TmFtZV0gPSB0cnVlO1xyXG4gICAgfSk7XHJcbiAgICB2bS4kc2NvcGVkU2xvdHMgPSB2bS4kc2xvdHMgPSAkc2xvdHM7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0VnVlSWRzICh2dWVJZHMsIG1wSW5zdGFuY2UpIHtcclxuICB2dWVJZHMgPSAodnVlSWRzIHx8ICcnKS5zcGxpdCgnLCcpO1xyXG4gIGNvbnN0IGxlbiA9IHZ1ZUlkcy5sZW5ndGg7XHJcblxyXG4gIGlmIChsZW4gPT09IDEpIHtcclxuICAgIG1wSW5zdGFuY2UuXyR2dWVJZCA9IHZ1ZUlkc1swXTtcclxuICB9IGVsc2UgaWYgKGxlbiA9PT0gMikge1xyXG4gICAgbXBJbnN0YW5jZS5fJHZ1ZUlkID0gdnVlSWRzWzBdO1xyXG4gICAgbXBJbnN0YW5jZS5fJHZ1ZVBpZCA9IHZ1ZUlkc1sxXTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXREYXRhICh2dWVPcHRpb25zLCBjb250ZXh0KSB7XHJcbiAgbGV0IGRhdGEgPSB2dWVPcHRpb25zLmRhdGEgfHwge307XHJcbiAgY29uc3QgbWV0aG9kcyA9IHZ1ZU9wdGlvbnMubWV0aG9kcyB8fCB7fTtcclxuXHJcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBkYXRhID0gZGF0YS5jYWxsKGNvbnRleHQpOyAvLyDmlK/mjIEgVnVlLnByb3RvdHlwZSDkuIrmjILnmoTmlbDmja5cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgaWYgKHByb2Nlc3MuZW52LlZVRV9BUFBfREVCVUcpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ+agueaNriBWdWUg55qEIGRhdGEg5Ye95pWw5Yid5aeL5YyW5bCP56iL5bqPIGRhdGEg5aSx6LSl77yM6K+35bC96YeP56Gu5L+dIGRhdGEg5Ye95pWw5Lit5LiN6K6/6ZeuIHZtIOWvueixoe+8jOWQpuWImeWPr+iDveW9seWTjemmluasoeaVsOaNrua4suafk+mAn+W6puOAgicsIGRhdGEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIOWvuSBkYXRhIOagvOW8j+WMllxyXG4gICAgICBkYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSk7XHJcbiAgICB9IGNhdGNoIChlKSB7fVxyXG4gIH1cclxuXHJcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XHJcbiAgICBkYXRhID0ge307XHJcbiAgfVxyXG5cclxuICBPYmplY3Qua2V5cyhtZXRob2RzKS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xyXG4gICAgaWYgKGNvbnRleHQuX19saWZlY3ljbGVfaG9va3NfXy5pbmRleE9mKG1ldGhvZE5hbWUpID09PSAtMSAmJiAhaGFzT3duKGRhdGEsIG1ldGhvZE5hbWUpKSB7XHJcbiAgICAgIGRhdGFbbWV0aG9kTmFtZV0gPSBtZXRob2RzW21ldGhvZE5hbWVdO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gZGF0YVxyXG59XHJcblxyXG5jb25zdCBQUk9QX1RZUEVTID0gW1N0cmluZywgTnVtYmVyLCBCb29sZWFuLCBPYmplY3QsIEFycmF5LCBudWxsXTtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZU9ic2VydmVyIChuYW1lKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIG9ic2VydmVyIChuZXdWYWwsIG9sZFZhbCkge1xyXG4gICAgaWYgKHRoaXMuJHZtKSB7XHJcbiAgICAgIHRoaXMuJHZtW25hbWVdID0gbmV3VmFsOyAvLyDkuLrkuobop6blj5Hlhbbku5bpnZ4gcmVuZGVyIHdhdGNoZXJcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRCZWhhdmlvcnMgKHZ1ZU9wdGlvbnMsIGluaXRCZWhhdmlvcikge1xyXG4gIGNvbnN0IHZ1ZUJlaGF2aW9ycyA9IHZ1ZU9wdGlvbnMuYmVoYXZpb3JzO1xyXG4gIGNvbnN0IHZ1ZUV4dGVuZHMgPSB2dWVPcHRpb25zLmV4dGVuZHM7XHJcbiAgY29uc3QgdnVlTWl4aW5zID0gdnVlT3B0aW9ucy5taXhpbnM7XHJcblxyXG4gIGxldCB2dWVQcm9wcyA9IHZ1ZU9wdGlvbnMucHJvcHM7XHJcblxyXG4gIGlmICghdnVlUHJvcHMpIHtcclxuICAgIHZ1ZU9wdGlvbnMucHJvcHMgPSB2dWVQcm9wcyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgYmVoYXZpb3JzID0gW107XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkodnVlQmVoYXZpb3JzKSkge1xyXG4gICAgdnVlQmVoYXZpb3JzLmZvckVhY2goYmVoYXZpb3IgPT4ge1xyXG4gICAgICBiZWhhdmlvcnMucHVzaChiZWhhdmlvci5yZXBsYWNlKCd1bmk6Ly8nLCBgJHtcInd4XCJ9Oi8vYCkpO1xyXG4gICAgICBpZiAoYmVoYXZpb3IgPT09ICd1bmk6Ly9mb3JtLWZpZWxkJykge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZ1ZVByb3BzKSkge1xyXG4gICAgICAgICAgdnVlUHJvcHMucHVzaCgnbmFtZScpO1xyXG4gICAgICAgICAgdnVlUHJvcHMucHVzaCgndmFsdWUnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdnVlUHJvcHMubmFtZSA9IHtcclxuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiAnJ1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIHZ1ZVByb3BzLnZhbHVlID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXIsIEJvb2xlYW4sIEFycmF5LCBPYmplY3QsIERhdGVdLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiAnJ1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBpZiAoaXNQbGFpbk9iamVjdCh2dWVFeHRlbmRzKSAmJiB2dWVFeHRlbmRzLnByb3BzKSB7XHJcbiAgICBiZWhhdmlvcnMucHVzaChcclxuICAgICAgaW5pdEJlaGF2aW9yKHtcclxuICAgICAgICBwcm9wZXJ0aWVzOiBpbml0UHJvcGVydGllcyh2dWVFeHRlbmRzLnByb3BzLCB0cnVlKVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkodnVlTWl4aW5zKSkge1xyXG4gICAgdnVlTWl4aW5zLmZvckVhY2godnVlTWl4aW4gPT4ge1xyXG4gICAgICBpZiAoaXNQbGFpbk9iamVjdCh2dWVNaXhpbikgJiYgdnVlTWl4aW4ucHJvcHMpIHtcclxuICAgICAgICBiZWhhdmlvcnMucHVzaChcclxuICAgICAgICAgIGluaXRCZWhhdmlvcih7XHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IGluaXRQcm9wZXJ0aWVzKHZ1ZU1peGluLnByb3BzLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgcmV0dXJuIGJlaGF2aW9yc1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZVByb3BUeXBlIChrZXksIHR5cGUsIGRlZmF1bHRWYWx1ZSwgZmlsZSkge1xyXG4gIC8vIFtTdHJpbmddPT5TdHJpbmdcclxuICBpZiAoQXJyYXkuaXNBcnJheSh0eXBlKSAmJiB0eXBlLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgcmV0dXJuIHR5cGVbMF1cclxuICB9XHJcbiAgcmV0dXJuIHR5cGVcclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdFByb3BlcnRpZXMgKHByb3BzLCBpc0JlaGF2aW9yID0gZmFsc2UsIGZpbGUgPSAnJykge1xyXG4gIGNvbnN0IHByb3BlcnRpZXMgPSB7fTtcclxuICBpZiAoIWlzQmVoYXZpb3IpIHtcclxuICAgIHByb3BlcnRpZXMudnVlSWQgPSB7XHJcbiAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgdmFsdWU6ICcnXHJcbiAgICB9O1xyXG4gICAgLy8g55So5LqO5a2X6IqC6Lez5Yqo5bCP56iL5bqP5qih5ouf5oq96LGh6IqC54K5XHJcbiAgICBwcm9wZXJ0aWVzLmdlbmVyaWMgPSB7XHJcbiAgICAgIHR5cGU6IE9iamVjdCxcclxuICAgICAgdmFsdWU6IG51bGxcclxuICAgIH07XHJcbiAgICBwcm9wZXJ0aWVzLnZ1ZVNsb3RzID0geyAvLyDlsI/nqIvluo/kuI3og73nm7TmjqXlrprkuYkgJHNsb3RzIOeahCBwcm9wc++8jOaJgOS7pemAmui/hyB2dWVTbG90cyDovazmjaLliLAgJHNsb3RzXHJcbiAgICAgIHR5cGU6IG51bGwsXHJcbiAgICAgIHZhbHVlOiBbXSxcclxuICAgICAgb2JzZXJ2ZXI6IGZ1bmN0aW9uIChuZXdWYWwsIG9sZFZhbCkge1xyXG4gICAgICAgIGNvbnN0ICRzbG90cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICAgICAgbmV3VmFsLmZvckVhY2goc2xvdE5hbWUgPT4ge1xyXG4gICAgICAgICAgJHNsb3RzW3Nsb3ROYW1lXSA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICAgICRzbG90c1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHsgLy8gWyd0aXRsZSddXHJcbiAgICBwcm9wcy5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgIHByb3BlcnRpZXNba2V5XSA9IHtcclxuICAgICAgICB0eXBlOiBudWxsLFxyXG4gICAgICAgIG9ic2VydmVyOiBjcmVhdGVPYnNlcnZlcihrZXkpXHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocHJvcHMpKSB7IC8vIHt0aXRsZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDonJ30sY29udGVudDpTdHJpbmd9XHJcbiAgICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICBjb25zdCBvcHRzID0gcHJvcHNba2V5XTtcclxuICAgICAgaWYgKGlzUGxhaW5PYmplY3Qob3B0cykpIHsgLy8gdGl0bGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6Jyd9XHJcbiAgICAgICAgbGV0IHZhbHVlID0gb3B0cy5kZWZhdWx0O1xyXG4gICAgICAgIGlmIChpc0ZuKHZhbHVlKSkge1xyXG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb3B0cy50eXBlID0gcGFyc2VQcm9wVHlwZShrZXksIG9wdHMudHlwZSk7XHJcblxyXG4gICAgICAgIHByb3BlcnRpZXNba2V5XSA9IHtcclxuICAgICAgICAgIHR5cGU6IFBST1BfVFlQRVMuaW5kZXhPZihvcHRzLnR5cGUpICE9PSAtMSA/IG9wdHMudHlwZSA6IG51bGwsXHJcbiAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgIG9ic2VydmVyOiBjcmVhdGVPYnNlcnZlcihrZXkpXHJcbiAgICAgICAgfTtcclxuICAgICAgfSBlbHNlIHsgLy8gY29udGVudDpTdHJpbmdcclxuICAgICAgICBjb25zdCB0eXBlID0gcGFyc2VQcm9wVHlwZShrZXksIG9wdHMpO1xyXG4gICAgICAgIHByb3BlcnRpZXNba2V5XSA9IHtcclxuICAgICAgICAgIHR5cGU6IFBST1BfVFlQRVMuaW5kZXhPZih0eXBlKSAhPT0gLTEgPyB0eXBlIDogbnVsbCxcclxuICAgICAgICAgIG9ic2VydmVyOiBjcmVhdGVPYnNlcnZlcihrZXkpXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHJldHVybiBwcm9wZXJ0aWVzXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdyYXBwZXIkMSAoZXZlbnQpIHtcclxuICAvLyBUT0RPIOWPiOW+l+WFvOWuuSBtcHZ1ZSDnmoQgbXAg5a+56LGhXHJcbiAgdHJ5IHtcclxuICAgIGV2ZW50Lm1wID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShldmVudCkpO1xyXG4gIH0gY2F0Y2ggKGUpIHt9XHJcblxyXG4gIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IG5vb3A7XHJcbiAgZXZlbnQucHJldmVudERlZmF1bHQgPSBub29wO1xyXG5cclxuICBldmVudC50YXJnZXQgPSBldmVudC50YXJnZXQgfHwge307XHJcblxyXG4gIGlmICghaGFzT3duKGV2ZW50LCAnZGV0YWlsJykpIHtcclxuICAgIGV2ZW50LmRldGFpbCA9IHt9O1xyXG4gIH1cclxuXHJcbiAgaWYgKGhhc093bihldmVudCwgJ21hcmtlcklkJykpIHtcclxuICAgIGV2ZW50LmRldGFpbCA9IHR5cGVvZiBldmVudC5kZXRhaWwgPT09ICdvYmplY3QnID8gZXZlbnQuZGV0YWlsIDoge307XHJcbiAgICBldmVudC5kZXRhaWwubWFya2VySWQgPSBldmVudC5tYXJrZXJJZDtcclxuICB9XHJcblxyXG4gIGlmIChpc1BsYWluT2JqZWN0KGV2ZW50LmRldGFpbCkpIHtcclxuICAgIGV2ZW50LnRhcmdldCA9IE9iamVjdC5hc3NpZ24oe30sIGV2ZW50LnRhcmdldCwgZXZlbnQuZGV0YWlsKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBldmVudFxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRFeHRyYVZhbHVlICh2bSwgZGF0YVBhdGhzQXJyYXkpIHtcclxuICBsZXQgY29udGV4dCA9IHZtO1xyXG4gIGRhdGFQYXRoc0FycmF5LmZvckVhY2goZGF0YVBhdGhBcnJheSA9PiB7XHJcbiAgICBjb25zdCBkYXRhUGF0aCA9IGRhdGFQYXRoQXJyYXlbMF07XHJcbiAgICBjb25zdCB2YWx1ZSA9IGRhdGFQYXRoQXJyYXlbMl07XHJcbiAgICBpZiAoZGF0YVBhdGggfHwgdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykgeyAvLyBbJycsJycsaW5kZXgsJ2Rpc2FibGUnXVxyXG4gICAgICBjb25zdCBwcm9wUGF0aCA9IGRhdGFQYXRoQXJyYXlbMV07XHJcbiAgICAgIGNvbnN0IHZhbHVlUGF0aCA9IGRhdGFQYXRoQXJyYXlbM107XHJcblxyXG4gICAgICBsZXQgdkZvcjtcclxuICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIoZGF0YVBhdGgpKSB7XHJcbiAgICAgICAgdkZvciA9IGRhdGFQYXRoO1xyXG4gICAgICB9IGVsc2UgaWYgKCFkYXRhUGF0aCkge1xyXG4gICAgICAgIHZGb3IgPSBjb250ZXh0O1xyXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhUGF0aCA9PT0gJ3N0cmluZycgJiYgZGF0YVBhdGgpIHtcclxuICAgICAgICBpZiAoZGF0YVBhdGguaW5kZXhPZignI3MjJykgPT09IDApIHtcclxuICAgICAgICAgIHZGb3IgPSBkYXRhUGF0aC5zdWJzdHIoMyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHZGb3IgPSB2bS5fX2dldF92YWx1ZShkYXRhUGF0aCwgY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcih2Rm9yKSkge1xyXG4gICAgICAgIGNvbnRleHQgPSB2YWx1ZTtcclxuICAgICAgfSBlbHNlIGlmICghcHJvcFBhdGgpIHtcclxuICAgICAgICBjb250ZXh0ID0gdkZvclt2YWx1ZV07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodkZvcikpIHtcclxuICAgICAgICAgIGNvbnRleHQgPSB2Rm9yLmZpbmQodkZvckl0ZW0gPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdm0uX19nZXRfdmFsdWUocHJvcFBhdGgsIHZGb3JJdGVtKSA9PT0gdmFsdWVcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2Rm9yKSkge1xyXG4gICAgICAgICAgY29udGV4dCA9IE9iamVjdC5rZXlzKHZGb3IpLmZpbmQodkZvcktleSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB2bS5fX2dldF92YWx1ZShwcm9wUGF0aCwgdkZvclt2Rm9yS2V5XSkgPT09IHZhbHVlXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcigndi1mb3Ig5pqC5LiN5pSv5oyB5b6q546v5pWw5o2u77yaJywgdkZvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodmFsdWVQYXRoKSB7XHJcbiAgICAgICAgY29udGV4dCA9IHZtLl9fZ2V0X3ZhbHVlKHZhbHVlUGF0aCwgY29udGV4dCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuICByZXR1cm4gY29udGV4dFxyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzRXZlbnRFeHRyYSAodm0sIGV4dHJhLCBldmVudCkge1xyXG4gIGNvbnN0IGV4dHJhT2JqID0ge307XHJcblxyXG4gIGlmIChBcnJheS5pc0FycmF5KGV4dHJhKSAmJiBleHRyYS5sZW5ndGgpIHtcclxuICAgIC8qKlxyXG4gICAgICpbXHJcbiAgICAgKiAgICBbJ2RhdGEuaXRlbXMnLCAnZGF0YS5pZCcsIGl0ZW0uZGF0YS5pZF0sXHJcbiAgICAgKiAgICBbJ21ldGFzJywgJ2lkJywgbWV0YS5pZF1cclxuICAgICAqXSxcclxuICAgICAqW1xyXG4gICAgICogICAgWydkYXRhLml0ZW1zJywgJ2RhdGEuaWQnLCBpdGVtLmRhdGEuaWRdLFxyXG4gICAgICogICAgWydtZXRhcycsICdpZCcsIG1ldGEuaWRdXHJcbiAgICAgKl0sXHJcbiAgICAgKid0ZXN0J1xyXG4gICAgICovXHJcbiAgICBleHRyYS5mb3JFYWNoKChkYXRhUGF0aCwgaW5kZXgpID0+IHtcclxuICAgICAgaWYgKHR5cGVvZiBkYXRhUGF0aCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBpZiAoIWRhdGFQYXRoKSB7IC8vIG1vZGVsLHByb3Auc3luY1xyXG4gICAgICAgICAgZXh0cmFPYmpbJyQnICsgaW5kZXhdID0gdm07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmIChkYXRhUGF0aCA9PT0gJyRldmVudCcpIHsgLy8gJGV2ZW50XHJcbiAgICAgICAgICAgIGV4dHJhT2JqWyckJyArIGluZGV4XSA9IGV2ZW50O1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChkYXRhUGF0aCA9PT0gJ2FyZ3VtZW50cycpIHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LmRldGFpbCAmJiBldmVudC5kZXRhaWwuX19hcmdzX18pIHtcclxuICAgICAgICAgICAgICBleHRyYU9ialsnJCcgKyBpbmRleF0gPSBldmVudC5kZXRhaWwuX19hcmdzX187XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgZXh0cmFPYmpbJyQnICsgaW5kZXhdID0gW2V2ZW50XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIGlmIChkYXRhUGF0aC5pbmRleE9mKCckZXZlbnQuJykgPT09IDApIHsgLy8gJGV2ZW50LnRhcmdldC52YWx1ZVxyXG4gICAgICAgICAgICBleHRyYU9ialsnJCcgKyBpbmRleF0gPSB2bS5fX2dldF92YWx1ZShkYXRhUGF0aC5yZXBsYWNlKCckZXZlbnQuJywgJycpLCBldmVudCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBleHRyYU9ialsnJCcgKyBpbmRleF0gPSB2bS5fX2dldF92YWx1ZShkYXRhUGF0aCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGV4dHJhT2JqWyckJyArIGluZGV4XSA9IGdldEV4dHJhVmFsdWUodm0sIGRhdGFQYXRoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZXh0cmFPYmpcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0T2JqQnlBcnJheSAoYXJyKSB7XHJcbiAgY29uc3Qgb2JqID0ge307XHJcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJbaV07XHJcbiAgICBvYmpbZWxlbWVudFswXV0gPSBlbGVtZW50WzFdO1xyXG4gIH1cclxuICByZXR1cm4gb2JqXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb2Nlc3NFdmVudEFyZ3MgKHZtLCBldmVudCwgYXJncyA9IFtdLCBleHRyYSA9IFtdLCBpc0N1c3RvbSwgbWV0aG9kTmFtZSkge1xyXG4gIGxldCBpc0N1c3RvbU1QRXZlbnQgPSBmYWxzZTsgLy8gd3hjb21wb25lbnQg57uE5Lu277yM5Lyg6YCS5Y6f5aeLIGV2ZW50IOWvueixoVxyXG4gIGlmIChpc0N1c3RvbSkgeyAvLyDoh6rlrprkuYnkuovku7ZcclxuICAgIGlzQ3VzdG9tTVBFdmVudCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiZcclxuICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0ICYmXHJcbiAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5jb21UeXBlID09PSAnd3gnO1xyXG4gICAgaWYgKCFhcmdzLmxlbmd0aCkgeyAvLyDml6Dlj4LmlbDvvIznm7TmjqXkvKDlhaUgZXZlbnQg5oiWIGRldGFpbCDmlbDnu4RcclxuICAgICAgaWYgKGlzQ3VzdG9tTVBFdmVudCkge1xyXG4gICAgICAgIHJldHVybiBbZXZlbnRdXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGV2ZW50LmRldGFpbC5fX2FyZ3NfXyB8fCBldmVudC5kZXRhaWxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnN0IGV4dHJhT2JqID0gcHJvY2Vzc0V2ZW50RXh0cmEodm0sIGV4dHJhLCBldmVudCk7XHJcblxyXG4gIGNvbnN0IHJldCA9IFtdO1xyXG4gIGFyZ3MuZm9yRWFjaChhcmcgPT4ge1xyXG4gICAgaWYgKGFyZyA9PT0gJyRldmVudCcpIHtcclxuICAgICAgaWYgKG1ldGhvZE5hbWUgPT09ICdfX3NldF9tb2RlbCcgJiYgIWlzQ3VzdG9tKSB7IC8vIGlucHV0IHYtbW9kZWwgdmFsdWVcclxuICAgICAgICByZXQucHVzaChldmVudC50YXJnZXQudmFsdWUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChpc0N1c3RvbSAmJiAhaXNDdXN0b21NUEV2ZW50KSB7XHJcbiAgICAgICAgICByZXQucHVzaChldmVudC5kZXRhaWwuX19hcmdzX19bMF0pO1xyXG4gICAgICAgIH0gZWxzZSB7IC8vIHd4Y29tcG9uZW50IOe7hOS7tuaIluWGhee9rue7hOS7tlxyXG4gICAgICAgICAgcmV0LnB1c2goZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSAmJiBhcmdbMF0gPT09ICdvJykge1xyXG4gICAgICAgIHJldC5wdXNoKGdldE9iakJ5QXJyYXkoYXJnKSk7XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgJiYgaGFzT3duKGV4dHJhT2JqLCBhcmcpKSB7XHJcbiAgICAgICAgcmV0LnB1c2goZXh0cmFPYmpbYXJnXSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0LnB1c2goYXJnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gcmV0XHJcbn1cclxuXHJcbmNvbnN0IE9OQ0UgPSAnfic7XHJcbmNvbnN0IENVU1RPTSA9ICdeJztcclxuXHJcbmZ1bmN0aW9uIGlzTWF0Y2hFdmVudFR5cGUgKGV2ZW50VHlwZSwgb3B0VHlwZSkge1xyXG4gIHJldHVybiAoZXZlbnRUeXBlID09PSBvcHRUeXBlKSB8fFxyXG4gICAgKFxyXG4gICAgICBvcHRUeXBlID09PSAncmVnaW9uY2hhbmdlJyAmJlxyXG4gICAgICAoXHJcbiAgICAgICAgZXZlbnRUeXBlID09PSAnYmVnaW4nIHx8XHJcbiAgICAgICAgZXZlbnRUeXBlID09PSAnZW5kJ1xyXG4gICAgICApXHJcbiAgICApXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENvbnRleHRWbSAodm0pIHtcclxuICBsZXQgJHBhcmVudCA9IHZtLiRwYXJlbnQ7XHJcbiAgLy8g54i257uE5Lu25pivIHNjb3BlZCBzbG90cyDmiJbogIXlhbbku5boh6rlrprkuYnnu4Tku7bml7bnu6fnu63mn6Xmib5cclxuICB3aGlsZSAoJHBhcmVudCAmJiAkcGFyZW50LiRwYXJlbnQgJiYgKCRwYXJlbnQuJG9wdGlvbnMuZ2VuZXJpYyB8fCAkcGFyZW50LiRwYXJlbnQuJG9wdGlvbnMuZ2VuZXJpYyB8fCAkcGFyZW50LiRzY29wZS5fJHZ1ZVBpZCkpIHtcclxuICAgICRwYXJlbnQgPSAkcGFyZW50LiRwYXJlbnQ7XHJcbiAgfVxyXG4gIHJldHVybiAkcGFyZW50ICYmICRwYXJlbnQuJHBhcmVudFxyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVFdmVudCAoZXZlbnQpIHtcclxuICBldmVudCA9IHdyYXBwZXIkMShldmVudCk7XHJcblxyXG4gIC8vIFtbJ3RhcCcsW1snaGFuZGxlJyxbMSwyLGFdXSxbJ2hhbmRsZTEnLFsxLDIsYV1dXV1dXHJcbiAgY29uc3QgZGF0YXNldCA9IChldmVudC5jdXJyZW50VGFyZ2V0IHx8IGV2ZW50LnRhcmdldCkuZGF0YXNldDtcclxuICBpZiAoIWRhdGFzZXQpIHtcclxuICAgIHJldHVybiBjb25zb2xlLndhcm4oJ+S6i+S7tuS/oeaBr+S4jeWtmOWcqCcpXHJcbiAgfVxyXG4gIGNvbnN0IGV2ZW50T3B0cyA9IGRhdGFzZXQuZXZlbnRPcHRzIHx8IGRhdGFzZXRbJ2V2ZW50LW9wdHMnXTsgLy8g5pSv5LuY5a6dIHdlYi12aWV3IOe7hOS7tiBkYXRhc2V0IOmdnumpvOWzsFxyXG4gIGlmICghZXZlbnRPcHRzKSB7XHJcbiAgICByZXR1cm4gY29uc29sZS53YXJuKCfkuovku7bkv6Hmga/kuI3lrZjlnKgnKVxyXG4gIH1cclxuXHJcbiAgLy8gW1snaGFuZGxlJyxbMSwyLGFdXSxbJ2hhbmRsZTEnLFsxLDIsYV1dXVxyXG4gIGNvbnN0IGV2ZW50VHlwZSA9IGV2ZW50LnR5cGU7XHJcblxyXG4gIGNvbnN0IHJldCA9IFtdO1xyXG5cclxuICBldmVudE9wdHMuZm9yRWFjaChldmVudE9wdCA9PiB7XHJcbiAgICBsZXQgdHlwZSA9IGV2ZW50T3B0WzBdO1xyXG4gICAgY29uc3QgZXZlbnRzQXJyYXkgPSBldmVudE9wdFsxXTtcclxuXHJcbiAgICBjb25zdCBpc0N1c3RvbSA9IHR5cGUuY2hhckF0KDApID09PSBDVVNUT007XHJcbiAgICB0eXBlID0gaXNDdXN0b20gPyB0eXBlLnNsaWNlKDEpIDogdHlwZTtcclxuICAgIGNvbnN0IGlzT25jZSA9IHR5cGUuY2hhckF0KDApID09PSBPTkNFO1xyXG4gICAgdHlwZSA9IGlzT25jZSA/IHR5cGUuc2xpY2UoMSkgOiB0eXBlO1xyXG5cclxuICAgIGlmIChldmVudHNBcnJheSAmJiBpc01hdGNoRXZlbnRUeXBlKGV2ZW50VHlwZSwgdHlwZSkpIHtcclxuICAgICAgZXZlbnRzQXJyYXkuZm9yRWFjaChldmVudEFycmF5ID0+IHtcclxuICAgICAgICBjb25zdCBtZXRob2ROYW1lID0gZXZlbnRBcnJheVswXTtcclxuICAgICAgICBpZiAobWV0aG9kTmFtZSkge1xyXG4gICAgICAgICAgbGV0IGhhbmRsZXJDdHggPSB0aGlzLiR2bTtcclxuICAgICAgICAgIGlmIChoYW5kbGVyQ3R4LiRvcHRpb25zLmdlbmVyaWMpIHsgLy8gbXAtd2VpeGluLG1wLXRvdXRpYW8g5oq96LGh6IqC54K55qih5oufIHNjb3BlZCBzbG90c1xyXG4gICAgICAgICAgICBoYW5kbGVyQ3R4ID0gZ2V0Q29udGV4dFZtKGhhbmRsZXJDdHgpIHx8IGhhbmRsZXJDdHg7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAobWV0aG9kTmFtZSA9PT0gJyRlbWl0Jykge1xyXG4gICAgICAgICAgICBoYW5kbGVyQ3R4LiRlbWl0LmFwcGx5KGhhbmRsZXJDdHgsXHJcbiAgICAgICAgICAgICAgcHJvY2Vzc0V2ZW50QXJncyhcclxuICAgICAgICAgICAgICAgIHRoaXMuJHZtLFxyXG4gICAgICAgICAgICAgICAgZXZlbnQsXHJcbiAgICAgICAgICAgICAgICBldmVudEFycmF5WzFdLFxyXG4gICAgICAgICAgICAgICAgZXZlbnRBcnJheVsyXSxcclxuICAgICAgICAgICAgICAgIGlzQ3VzdG9tLFxyXG4gICAgICAgICAgICAgICAgbWV0aG9kTmFtZVxyXG4gICAgICAgICAgICAgICkpO1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyQ3R4W21ldGhvZE5hbWVdO1xyXG4gICAgICAgICAgaWYgKCFpc0ZuKGhhbmRsZXIpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgIF92bS4ke21ldGhvZE5hbWV9IGlzIG5vdCBhIGZ1bmN0aW9uYClcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChpc09uY2UpIHtcclxuICAgICAgICAgICAgaWYgKGhhbmRsZXIub25jZSkge1xyXG4gICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGhhbmRsZXIub25jZSA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zdCBwYXJhbXMgPSBwcm9jZXNzRXZlbnRBcmdzKFxyXG4gICAgICAgICAgICB0aGlzLiR2bSxcclxuICAgICAgICAgICAgZXZlbnQsXHJcbiAgICAgICAgICAgIGV2ZW50QXJyYXlbMV0sXHJcbiAgICAgICAgICAgIGV2ZW50QXJyYXlbMl0sXHJcbiAgICAgICAgICAgIGlzQ3VzdG9tLFxyXG4gICAgICAgICAgICBtZXRob2ROYW1lXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgLy8g5Y+C5pWw5bC+6YOo5aKe5Yqg5Y6f5aeL5LqL5Lu25a+56LGh55So5LqO5aSN5p2C6KGo6L6+5byP5YaF6I635Y+W6aKd5aSW5pWw5o2uXHJcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc3BhcnNlLWFycmF5c1xyXG4gICAgICAgICAgcmV0LnB1c2goaGFuZGxlci5hcHBseShoYW5kbGVyQ3R4LCAoQXJyYXkuaXNBcnJheShwYXJhbXMpID8gcGFyYW1zIDogW10pLmNvbmNhdChbLCAsICwgLCAsICwgLCAsICwgLCBldmVudF0pKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgaWYgKFxyXG4gICAgZXZlbnRUeXBlID09PSAnaW5wdXQnICYmXHJcbiAgICByZXQubGVuZ3RoID09PSAxICYmXHJcbiAgICB0eXBlb2YgcmV0WzBdICE9PSAndW5kZWZpbmVkJ1xyXG4gICkge1xyXG4gICAgcmV0dXJuIHJldFswXVxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgaG9va3MgPSBbXHJcbiAgJ29uU2hvdycsXHJcbiAgJ29uSGlkZScsXHJcbiAgJ29uRXJyb3InLFxyXG4gICdvblBhZ2VOb3RGb3VuZCcsXHJcbiAgJ29uVGhlbWVDaGFuZ2UnLFxyXG4gICdvblVuaGFuZGxlZFJlamVjdGlvbidcclxuXTtcclxuXHJcbmZ1bmN0aW9uIHBhcnNlQmFzZUFwcCAodm0sIHtcclxuICBtb2NrcyxcclxuICBpbml0UmVmc1xyXG59KSB7XHJcbiAgaWYgKHZtLiRvcHRpb25zLnN0b3JlKSB7XHJcbiAgICBWdWUucHJvdG90eXBlLiRzdG9yZSA9IHZtLiRvcHRpb25zLnN0b3JlO1xyXG4gIH1cclxuXHJcbiAgVnVlLnByb3RvdHlwZS5tcEhvc3QgPSBcIm1wLXFxXCI7XHJcblxyXG4gIFZ1ZS5taXhpbih7XHJcbiAgICBiZWZvcmVDcmVhdGUgKCkge1xyXG4gICAgICBpZiAoIXRoaXMuJG9wdGlvbnMubXBUeXBlKSB7XHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMubXBUeXBlID0gdGhpcy4kb3B0aW9ucy5tcFR5cGU7XHJcblxyXG4gICAgICB0aGlzLiRtcCA9IHtcclxuICAgICAgICBkYXRhOiB7fSxcclxuICAgICAgICBbdGhpcy5tcFR5cGVdOiB0aGlzLiRvcHRpb25zLm1wSW5zdGFuY2VcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuJHNjb3BlID0gdGhpcy4kb3B0aW9ucy5tcEluc3RhbmNlO1xyXG5cclxuICAgICAgZGVsZXRlIHRoaXMuJG9wdGlvbnMubXBUeXBlO1xyXG4gICAgICBkZWxldGUgdGhpcy4kb3B0aW9ucy5tcEluc3RhbmNlO1xyXG5cclxuICAgICAgaWYgKHRoaXMubXBUeXBlICE9PSAnYXBwJykge1xyXG4gICAgICAgIGluaXRSZWZzKHRoaXMpO1xyXG4gICAgICAgIGluaXRNb2Nrcyh0aGlzLCBtb2Nrcyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgY29uc3QgYXBwT3B0aW9ucyA9IHtcclxuICAgIG9uTGF1bmNoIChhcmdzKSB7XHJcbiAgICAgIGlmICh0aGlzLiR2bSkgeyAvLyDlt7Lnu4/liJ3lp4vljJbov4fkuobvvIzkuLvopoHmmK/kuLrkuobnmb7luqbvvIznmb7luqYgb25TaG93IOWcqCBvbkxhdW5jaCDkuYvliY1cclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICB7XHJcbiAgICAgICAgaWYgKCF3eC5jYW5JVXNlKCduZXh0VGljaycpKSB7IC8vIOS6i+WuniDkuIoyLjIuMyDljbPlj6/vvIznroDljZXkvb/nlKggMi4zLjAg55qEIG5leHRUaWNrIOWIpOaWrVxyXG4gICAgICAgICAgY29uc29sZS5lcnJvcign5b2T5YmN5b6u5L+h5Z+656GA5bqT54mI5pys6L+H5L2O77yM6K+35bCGIOW+ruS/oeW8gOWPkeiAheW3peWFty3or6bmg4Ut6aG555uu6K6+572uLeiwg+ivleWfuuehgOW6k+eJiOacrCDmm7TmjaLkuLpgMi4zLjBg5Lul5LiKJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLiR2bSA9IHZtO1xyXG5cclxuICAgICAgdGhpcy4kdm0uJG1wID0ge1xyXG4gICAgICAgIGFwcDogdGhpc1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy4kdm0uJHNjb3BlID0gdGhpcztcclxuICAgICAgLy8gdm0g5LiK5Lmf5oyC6L29IGdsb2JhbERhdGFcclxuICAgICAgdGhpcy4kdm0uZ2xvYmFsRGF0YSA9IHRoaXMuZ2xvYmFsRGF0YTtcclxuXHJcbiAgICAgIHRoaXMuJHZtLl9pc01vdW50ZWQgPSB0cnVlO1xyXG4gICAgICB0aGlzLiR2bS5fX2NhbGxfaG9vaygnbW91bnRlZCcsIGFyZ3MpO1xyXG5cclxuICAgICAgdGhpcy4kdm0uX19jYWxsX2hvb2soJ29uTGF1bmNoJywgYXJncyk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8g5YW85a655pen54mI5pysIGdsb2JhbERhdGFcclxuICBhcHBPcHRpb25zLmdsb2JhbERhdGEgPSB2bS4kb3B0aW9ucy5nbG9iYWxEYXRhIHx8IHt9O1xyXG4gIC8vIOWwhiBtZXRob2RzIOS4reeahOaWueazleaMguWcqCBnZXRBcHAoKSDkuK1cclxuICBjb25zdCBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcclxuICBpZiAobWV0aG9kcykge1xyXG4gICAgT2JqZWN0LmtleXMobWV0aG9kcykuZm9yRWFjaChuYW1lID0+IHtcclxuICAgICAgYXBwT3B0aW9uc1tuYW1lXSA9IG1ldGhvZHNbbmFtZV07XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGluaXRIb29rcyhhcHBPcHRpb25zLCBob29rcyk7XHJcblxyXG4gIHJldHVybiBhcHBPcHRpb25zXHJcbn1cclxuXHJcbmNvbnN0IG1vY2tzID0gWydfX3JvdXRlX18nLCAnX193eEV4cGFyc2VyTm9kZUlkX18nLCAnX193eFdlYnZpZXdJZF9fJ107XHJcblxyXG5mdW5jdGlvbiBmaW5kVm1CeVZ1ZUlkICh2bSwgdnVlUGlkKSB7XHJcbiAgY29uc3QgJGNoaWxkcmVuID0gdm0uJGNoaWxkcmVuO1xyXG4gIC8vIOS8mOWFiOafpeaJvuebtOWxnijlj43lkJHmn6Xmib46aHR0cHM6Ly9naXRodWIuY29tL2RjbG91ZGlvL3VuaS1hcHAvaXNzdWVzLzEyMDApXHJcbiAgZm9yIChsZXQgaSA9ICRjaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgY29uc3QgY2hpbGRWbSA9ICRjaGlsZHJlbltpXTtcclxuICAgIGlmIChjaGlsZFZtLiRzY29wZS5fJHZ1ZUlkID09PSB2dWVQaWQpIHtcclxuICAgICAgcmV0dXJuIGNoaWxkVm1cclxuICAgIH1cclxuICB9XHJcbiAgLy8g5Y+N5ZCR6YCS5b2S5p+l5om+XHJcbiAgbGV0IHBhcmVudFZtO1xyXG4gIGZvciAobGV0IGkgPSAkY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgIHBhcmVudFZtID0gZmluZFZtQnlWdWVJZCgkY2hpbGRyZW5baV0sIHZ1ZVBpZCk7XHJcbiAgICBpZiAocGFyZW50Vm0pIHtcclxuICAgICAgcmV0dXJuIHBhcmVudFZtXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0QmVoYXZpb3IgKG9wdGlvbnMpIHtcclxuICByZXR1cm4gQmVoYXZpb3Iob3B0aW9ucylcclxufVxyXG5cclxuZnVuY3Rpb24gaXNQYWdlICgpIHtcclxuICByZXR1cm4gISF0aGlzLnJvdXRlXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRSZWxhdGlvbiAoZGV0YWlsKSB7XHJcbiAgdGhpcy50cmlnZ2VyRXZlbnQoJ19fbCcsIGRldGFpbCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRSZWZzICh2bSkge1xyXG4gIGNvbnN0IG1wSW5zdGFuY2UgPSB2bS4kc2NvcGU7XHJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZtLCAnJHJlZnMnLCB7XHJcbiAgICBnZXQgKCkge1xyXG4gICAgICBjb25zdCAkcmVmcyA9IHt9O1xyXG4gICAgICBjb25zdCBjb21wb25lbnRzID0gbXBJbnN0YW5jZS5zZWxlY3RBbGxDb21wb25lbnRzKCcudnVlLXJlZicpO1xyXG4gICAgICBjb21wb25lbnRzLmZvckVhY2goY29tcG9uZW50ID0+IHtcclxuICAgICAgICBjb25zdCByZWYgPSBjb21wb25lbnQuZGF0YXNldC5yZWY7XHJcbiAgICAgICAgJHJlZnNbcmVmXSA9IGNvbXBvbmVudC4kdm0gfHwgY29tcG9uZW50O1xyXG4gICAgICB9KTtcclxuICAgICAgY29uc3QgZm9yQ29tcG9uZW50cyA9IG1wSW5zdGFuY2Uuc2VsZWN0QWxsQ29tcG9uZW50cygnLnZ1ZS1yZWYtaW4tZm9yJyk7XHJcbiAgICAgIGZvckNvbXBvbmVudHMuZm9yRWFjaChjb21wb25lbnQgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlZiA9IGNvbXBvbmVudC5kYXRhc2V0LnJlZjtcclxuICAgICAgICBpZiAoISRyZWZzW3JlZl0pIHtcclxuICAgICAgICAgICRyZWZzW3JlZl0gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHJlZnNbcmVmXS5wdXNoKGNvbXBvbmVudC4kdm0gfHwgY29tcG9uZW50KTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiAkcmVmc1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVMaW5rIChldmVudCkge1xyXG4gIGNvbnN0IHtcclxuICAgIHZ1ZVBpZCxcclxuICAgIHZ1ZU9wdGlvbnNcclxuICB9ID0gZXZlbnQuZGV0YWlsIHx8IGV2ZW50LnZhbHVlOyAvLyBkZXRhaWwg5piv5b6u5L+hLHZhbHVlIOaYr+eZvuW6pihkaXBhdGNoKVxyXG5cclxuICBsZXQgcGFyZW50Vm07XHJcblxyXG4gIGlmICh2dWVQaWQpIHtcclxuICAgIHBhcmVudFZtID0gZmluZFZtQnlWdWVJZCh0aGlzLiR2bSwgdnVlUGlkKTtcclxuICB9XHJcblxyXG4gIGlmICghcGFyZW50Vm0pIHtcclxuICAgIHBhcmVudFZtID0gdGhpcy4kdm07XHJcbiAgfVxyXG5cclxuICB2dWVPcHRpb25zLnBhcmVudCA9IHBhcmVudFZtO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUFwcCAodm0pIHtcclxuICByZXR1cm4gcGFyc2VCYXNlQXBwKHZtLCB7XHJcbiAgICBtb2NrcyxcclxuICAgIGluaXRSZWZzXHJcbiAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VBcHAkMSAodm0pIHtcclxuICByZXR1cm4gcGFyc2VBcHAodm0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUFwcCAodm0pIHtcclxuICBBcHAocGFyc2VBcHAkMSh2bSkpO1xyXG4gIHJldHVybiB2bVxyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUJhc2VDb21wb25lbnQgKHZ1ZUNvbXBvbmVudE9wdGlvbnMsIHtcclxuICBpc1BhZ2UsXHJcbiAgaW5pdFJlbGF0aW9uXHJcbn0gPSB7fSkge1xyXG4gIGNvbnN0IFtWdWVDb21wb25lbnQsIHZ1ZU9wdGlvbnNdID0gaW5pdFZ1ZUNvbXBvbmVudChWdWUsIHZ1ZUNvbXBvbmVudE9wdGlvbnMpO1xyXG5cclxuICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgbXVsdGlwbGVTbG90czogdHJ1ZSxcclxuICAgIGFkZEdsb2JhbENsYXNzOiB0cnVlLFxyXG4gICAgLi4uKHZ1ZU9wdGlvbnMub3B0aW9ucyB8fCB7fSlcclxuICB9O1xyXG5cclxuICB7XHJcbiAgICAvLyDlvq7kv6EgbXVsdGlwbGVTbG90cyDpg6jliIbmg4XlhrXmnIkgYnVn77yM5a+86Ie05YaF5a656aG65bqP6ZSZ5LmxIOWmgiB1LWxpc3TvvIzmj5Dkvpvopobnm5bpgInpoblcclxuICAgIGlmICh2dWVPcHRpb25zWydtcC13ZWl4aW4nXSAmJiB2dWVPcHRpb25zWydtcC13ZWl4aW4nXS5vcHRpb25zKSB7XHJcbiAgICAgIE9iamVjdC5hc3NpZ24ob3B0aW9ucywgdnVlT3B0aW9uc1snbXAtd2VpeGluJ10ub3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCBjb21wb25lbnRPcHRpb25zID0ge1xyXG4gICAgb3B0aW9ucyxcclxuICAgIGRhdGE6IGluaXREYXRhKHZ1ZU9wdGlvbnMsIFZ1ZS5wcm90b3R5cGUpLFxyXG4gICAgYmVoYXZpb3JzOiBpbml0QmVoYXZpb3JzKHZ1ZU9wdGlvbnMsIGluaXRCZWhhdmlvciksXHJcbiAgICBwcm9wZXJ0aWVzOiBpbml0UHJvcGVydGllcyh2dWVPcHRpb25zLnByb3BzLCBmYWxzZSwgdnVlT3B0aW9ucy5fX2ZpbGUpLFxyXG4gICAgbGlmZXRpbWVzOiB7XHJcbiAgICAgIGF0dGFjaGVkICgpIHtcclxuICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5wcm9wZXJ0aWVzO1xyXG5cclxuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICAgICAgbXBUeXBlOiBpc1BhZ2UuY2FsbCh0aGlzKSA/ICdwYWdlJyA6ICdjb21wb25lbnQnLFxyXG4gICAgICAgICAgbXBJbnN0YW5jZTogdGhpcyxcclxuICAgICAgICAgIHByb3BzRGF0YTogcHJvcGVydGllc1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGluaXRWdWVJZHMocHJvcGVydGllcy52dWVJZCwgdGhpcyk7XHJcblxyXG4gICAgICAgIC8vIOWkhOeQhueItuWtkOWFs+ezu1xyXG4gICAgICAgIGluaXRSZWxhdGlvbi5jYWxsKHRoaXMsIHtcclxuICAgICAgICAgIHZ1ZVBpZDogdGhpcy5fJHZ1ZVBpZCxcclxuICAgICAgICAgIHZ1ZU9wdGlvbnM6IG9wdGlvbnNcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8g5Yid5aeL5YyWIHZ1ZSDlrp7kvotcclxuICAgICAgICB0aGlzLiR2bSA9IG5ldyBWdWVDb21wb25lbnQob3B0aW9ucyk7XHJcblxyXG4gICAgICAgIC8vIOWkhOeQhiRzbG90cywkc2NvcGVkU2xvdHPvvIjmmoLkuI3mlK/mjIHliqjmgIHlj5jljJYkc2xvdHPvvIlcclxuICAgICAgICBpbml0U2xvdHModGhpcy4kdm0sIHByb3BlcnRpZXMudnVlU2xvdHMpO1xyXG5cclxuICAgICAgICAvLyDop6blj5HpppbmrKEgc2V0RGF0YVxyXG4gICAgICAgIHRoaXMuJHZtLiRtb3VudCgpO1xyXG4gICAgICB9LFxyXG4gICAgICByZWFkeSAoKSB7XHJcbiAgICAgICAgLy8g5b2T57uE5Lu2IHByb3BzIOm7mOiupOWAvOS4uiB0cnVl77yM5Yid5aeL5YyW5pe25Lyg5YWlIGZhbHNlIOS8muWvvOiHtCBjcmVhdGVkLHJlYWR5IOinpuWPkSwg5L2GIGF0dGFjaGVkIOS4jeinpuWPkVxyXG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVycy53ZWl4aW4ucXEuY29tL2NvbW11bml0eS9kZXZlbG9wL2RvYy8wMDA2NmFlMjg0NGNjMGY4ZWI4ODNlMmE1NTc4MDBcclxuICAgICAgICBpZiAodGhpcy4kdm0pIHtcclxuICAgICAgICAgIHRoaXMuJHZtLl9pc01vdW50ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgdGhpcy4kdm0uX19jYWxsX2hvb2soJ21vdW50ZWQnKTtcclxuICAgICAgICAgIHRoaXMuJHZtLl9fY2FsbF9ob29rKCdvblJlYWR5Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBkZXRhY2hlZCAoKSB7XHJcbiAgICAgICAgdGhpcy4kdm0gJiYgdGhpcy4kdm0uJGRlc3Ryb3koKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHBhZ2VMaWZldGltZXM6IHtcclxuICAgICAgc2hvdyAoYXJncykge1xyXG4gICAgICAgIHRoaXMuJHZtICYmIHRoaXMuJHZtLl9fY2FsbF9ob29rKCdvblBhZ2VTaG93JywgYXJncyk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGhpZGUgKCkge1xyXG4gICAgICAgIHRoaXMuJHZtICYmIHRoaXMuJHZtLl9fY2FsbF9ob29rKCdvblBhZ2VIaWRlJyk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHJlc2l6ZSAoc2l6ZSkge1xyXG4gICAgICAgIHRoaXMuJHZtICYmIHRoaXMuJHZtLl9fY2FsbF9ob29rKCdvblBhZ2VSZXNpemUnLCBzaXplKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgX19sOiBoYW5kbGVMaW5rLFxyXG4gICAgICBfX2U6IGhhbmRsZUV2ZW50XHJcbiAgICB9XHJcbiAgfTtcclxuICAvLyBleHRlcm5hbENsYXNzZXNcclxuICBpZiAodnVlT3B0aW9ucy5leHRlcm5hbENsYXNzZXMpIHtcclxuICAgIGNvbXBvbmVudE9wdGlvbnMuZXh0ZXJuYWxDbGFzc2VzID0gdnVlT3B0aW9ucy5leHRlcm5hbENsYXNzZXM7XHJcbiAgfVxyXG5cclxuICBpZiAoQXJyYXkuaXNBcnJheSh2dWVPcHRpb25zLnd4c0NhbGxNZXRob2RzKSkge1xyXG4gICAgdnVlT3B0aW9ucy53eHNDYWxsTWV0aG9kcy5mb3JFYWNoKGNhbGxNZXRob2QgPT4ge1xyXG4gICAgICBjb21wb25lbnRPcHRpb25zLm1ldGhvZHNbY2FsbE1ldGhvZF0gPSBmdW5jdGlvbiAoYXJncykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiR2bVtjYWxsTWV0aG9kXShhcmdzKVxyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBpZiAoaXNQYWdlKSB7XHJcbiAgICByZXR1cm4gY29tcG9uZW50T3B0aW9uc1xyXG4gIH1cclxuICByZXR1cm4gW2NvbXBvbmVudE9wdGlvbnMsIFZ1ZUNvbXBvbmVudF1cclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VDb21wb25lbnQgKHZ1ZUNvbXBvbmVudE9wdGlvbnMpIHtcclxuICByZXR1cm4gcGFyc2VCYXNlQ29tcG9uZW50KHZ1ZUNvbXBvbmVudE9wdGlvbnMsIHtcclxuICAgIGlzUGFnZSxcclxuICAgIGluaXRSZWxhdGlvblxyXG4gIH0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlQ29tcG9uZW50JDEgKHZ1ZUNvbXBvbmVudE9wdGlvbnMpIHtcclxuICByZXR1cm4gcGFyc2VDb21wb25lbnQodnVlQ29tcG9uZW50T3B0aW9ucylcclxufVxyXG5cclxuY29uc3QgaG9va3MkMSA9IFtcclxuICAnb25TaG93JyxcclxuICAnb25IaWRlJyxcclxuICAnb25VbmxvYWQnXHJcbl07XHJcblxyXG5ob29rcyQxLnB1c2goLi4uUEFHRV9FVkVOVF9IT09LUyk7XHJcblxyXG5mdW5jdGlvbiBwYXJzZUJhc2VQYWdlICh2dWVQYWdlT3B0aW9ucywge1xyXG4gIGlzUGFnZSxcclxuICBpbml0UmVsYXRpb25cclxufSkge1xyXG4gIGNvbnN0IHBhZ2VPcHRpb25zID0gcGFyc2VDb21wb25lbnQkMSh2dWVQYWdlT3B0aW9ucyk7XHJcblxyXG4gIGluaXRIb29rcyhwYWdlT3B0aW9ucy5tZXRob2RzLCBob29rcyQxLCB2dWVQYWdlT3B0aW9ucyk7XHJcblxyXG4gIHBhZ2VPcHRpb25zLm1ldGhvZHMub25Mb2FkID0gZnVuY3Rpb24gKGFyZ3MpIHtcclxuICAgIHRoaXMuJHZtLiRtcC5xdWVyeSA9IGFyZ3M7IC8vIOWFvOWuuSBtcHZ1ZVxyXG4gICAgdGhpcy4kdm0uX19jYWxsX2hvb2soJ29uTG9hZCcsIGFyZ3MpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBwYWdlT3B0aW9uc1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZVBhZ2UgKHZ1ZVBhZ2VPcHRpb25zKSB7XHJcbiAgcmV0dXJuIHBhcnNlQmFzZVBhZ2UodnVlUGFnZU9wdGlvbnMsIHtcclxuICAgIGlzUGFnZSxcclxuICAgIGluaXRSZWxhdGlvblxyXG4gIH0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlUGFnZSQxICh2dWVQYWdlT3B0aW9ucykge1xyXG4gIHJldHVybiBwYXJzZVBhZ2UodnVlUGFnZU9wdGlvbnMpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVBhZ2UgKHZ1ZVBhZ2VPcHRpb25zKSB7XHJcbiAge1xyXG4gICAgcmV0dXJuIENvbXBvbmVudChwYXJzZVBhZ2UkMSh2dWVQYWdlT3B0aW9ucykpXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKHZ1ZU9wdGlvbnMpIHtcclxuICB7XHJcbiAgICByZXR1cm4gQ29tcG9uZW50KHBhcnNlQ29tcG9uZW50JDEodnVlT3B0aW9ucykpXHJcbiAgfVxyXG59XHJcblxyXG50b2Rvcy5mb3JFYWNoKHRvZG9BcGkgPT4ge1xyXG4gIHByb3RvY29sc1t0b2RvQXBpXSA9IGZhbHNlO1xyXG59KTtcclxuXHJcbmNhbklVc2VzLmZvckVhY2goY2FuSVVzZUFwaSA9PiB7XHJcbiAgY29uc3QgYXBpTmFtZSA9IHByb3RvY29sc1tjYW5JVXNlQXBpXSAmJiBwcm90b2NvbHNbY2FuSVVzZUFwaV0ubmFtZSA/IHByb3RvY29sc1tjYW5JVXNlQXBpXS5uYW1lXHJcbiAgICA6IGNhbklVc2VBcGk7XHJcbiAgaWYgKCF3eC5jYW5JVXNlKGFwaU5hbWUpKSB7XHJcbiAgICBwcm90b2NvbHNbY2FuSVVzZUFwaV0gPSBmYWxzZTtcclxuICB9XHJcbn0pO1xyXG5cclxubGV0IHVuaSA9IHt9O1xyXG5cclxuaWYgKHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgXCJtcC1xcVwiICE9PSAnYXBwLXBsdXMnKSB7XHJcbiAgdW5pID0gbmV3IFByb3h5KHt9LCB7XHJcbiAgICBnZXQgKHRhcmdldCwgbmFtZSkge1xyXG4gICAgICBpZiAoaGFzT3duKHRhcmdldCwgbmFtZSkpIHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0W25hbWVdXHJcbiAgICAgIH1cclxuICAgICAgaWYgKGJhc2VBcGlbbmFtZV0pIHtcclxuICAgICAgICByZXR1cm4gYmFzZUFwaVtuYW1lXVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChhcGlbbmFtZV0pIHtcclxuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5KG5hbWUsIGFwaVtuYW1lXSlcclxuICAgICAgfVxyXG4gICAgICB7XHJcbiAgICAgICAgaWYgKGV4dHJhQXBpW25hbWVdKSB7XHJcbiAgICAgICAgICByZXR1cm4gcHJvbWlzaWZ5KG5hbWUsIGV4dHJhQXBpW25hbWVdKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodG9kb0FwaXNbbmFtZV0pIHtcclxuICAgICAgICAgIHJldHVybiBwcm9taXNpZnkobmFtZSwgdG9kb0FwaXNbbmFtZV0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChldmVudEFwaVtuYW1lXSkge1xyXG4gICAgICAgIHJldHVybiBldmVudEFwaVtuYW1lXVxyXG4gICAgICB9XHJcbiAgICAgIGlmICghaGFzT3duKHd4LCBuYW1lKSAmJiAhaGFzT3duKHByb3RvY29scywgbmFtZSkpIHtcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcHJvbWlzaWZ5KG5hbWUsIHdyYXBwZXIobmFtZSwgd3hbbmFtZV0pKVxyXG4gICAgfSxcclxuICAgIHNldCAodGFyZ2V0LCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgICB0YXJnZXRbbmFtZV0gPSB2YWx1ZTtcclxuICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxuICB9KTtcclxufSBlbHNlIHtcclxuICBPYmplY3Qua2V5cyhiYXNlQXBpKS5mb3JFYWNoKG5hbWUgPT4ge1xyXG4gICAgdW5pW25hbWVdID0gYmFzZUFwaVtuYW1lXTtcclxuICB9KTtcclxuXHJcbiAge1xyXG4gICAgT2JqZWN0LmtleXModG9kb0FwaXMpLmZvckVhY2gobmFtZSA9PiB7XHJcbiAgICAgIHVuaVtuYW1lXSA9IHByb21pc2lmeShuYW1lLCB0b2RvQXBpc1tuYW1lXSk7XHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5rZXlzKGV4dHJhQXBpKS5mb3JFYWNoKG5hbWUgPT4ge1xyXG4gICAgICB1bmlbbmFtZV0gPSBwcm9taXNpZnkobmFtZSwgdG9kb0FwaXNbbmFtZV0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBPYmplY3Qua2V5cyhldmVudEFwaSkuZm9yRWFjaChuYW1lID0+IHtcclxuICAgIHVuaVtuYW1lXSA9IGV2ZW50QXBpW25hbWVdO1xyXG4gIH0pO1xyXG5cclxuICBPYmplY3Qua2V5cyhhcGkpLmZvckVhY2gobmFtZSA9PiB7XHJcbiAgICB1bmlbbmFtZV0gPSBwcm9taXNpZnkobmFtZSwgYXBpW25hbWVdKTtcclxuICB9KTtcclxuXHJcbiAgT2JqZWN0LmtleXMod3gpLmZvckVhY2gobmFtZSA9PiB7XHJcbiAgICBpZiAoaGFzT3duKHd4LCBuYW1lKSB8fCBoYXNPd24ocHJvdG9jb2xzLCBuYW1lKSkge1xyXG4gICAgICB1bmlbbmFtZV0gPSBwcm9taXNpZnkobmFtZSwgd3JhcHBlcihuYW1lLCB3eFtuYW1lXSkpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG53eC5jcmVhdGVBcHAgPSBjcmVhdGVBcHA7XHJcbnd4LmNyZWF0ZVBhZ2UgPSBjcmVhdGVQYWdlO1xyXG53eC5jcmVhdGVDb21wb25lbnQgPSBjcmVhdGVDb21wb25lbnQ7XHJcblxyXG52YXIgdW5pJDEgPSB1bmk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB1bmkkMTtcclxuZXhwb3J0IHsgY3JlYXRlQXBwLCBjcmVhdGVDb21wb25lbnQsIGNyZWF0ZVBhZ2UgfTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLy8gVGhpcyBtZXRob2Qgb2Ygb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0IG5lZWRzIHRvIGJlXG4vLyBrZXB0IGlkZW50aWNhbCB0byB0aGUgd2F5IGl0IGlzIG9idGFpbmVkIGluIHJ1bnRpbWUuanNcbnZhciBnID0gKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcyB8fCAodHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgJiYgc2VsZik7XG59KSgpIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcblxuLy8gVXNlIGBnZXRPd25Qcm9wZXJ0eU5hbWVzYCBiZWNhdXNlIG5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCBjYWxsaW5nXG4vLyBgaGFzT3duUHJvcGVydHlgIG9uIHRoZSBnbG9iYWwgYHNlbGZgIG9iamVjdCBpbiBhIHdvcmtlci4gU2VlICMxODMuXG52YXIgaGFkUnVudGltZSA9IGcucmVnZW5lcmF0b3JSdW50aW1lICYmXG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGcpLmluZGV4T2YoXCJyZWdlbmVyYXRvclJ1bnRpbWVcIikgPj0gMDtcblxuLy8gU2F2ZSB0aGUgb2xkIHJlZ2VuZXJhdG9yUnVudGltZSBpbiBjYXNlIGl0IG5lZWRzIHRvIGJlIHJlc3RvcmVkIGxhdGVyLlxudmFyIG9sZFJ1bnRpbWUgPSBoYWRSdW50aW1lICYmIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuXG4vLyBGb3JjZSByZWV2YWx1dGF0aW9uIG9mIHJ1bnRpbWUuanMuXG5nLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9ydW50aW1lXCIpO1xuXG5pZiAoaGFkUnVudGltZSkge1xuICAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBydW50aW1lLlxuICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IG9sZFJ1bnRpbWU7XG59IGVsc2Uge1xuICAvLyBSZW1vdmUgdGhlIGdsb2JhbCBwcm9wZXJ0eSBhZGRlZCBieSBydW50aW1lLmpzLlxuICB0cnkge1xuICAgIGRlbGV0ZSBnLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgfSBjYXRjaChlKSB7XG4gICAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xufSkoXG4gIC8vIEluIHNsb3BweSBtb2RlLCB1bmJvdW5kIGB0aGlzYCByZWZlcnMgdG8gdGhlIGdsb2JhbCBvYmplY3QsIGZhbGxiYWNrIHRvXG4gIC8vIEZ1bmN0aW9uIGNvbnN0cnVjdG9yIGlmIHdlJ3JlIGluIGdsb2JhbCBzdHJpY3QgbW9kZS4gVGhhdCBpcyBzYWRseSBhIGZvcm1cbiAgLy8gb2YgaW5kaXJlY3QgZXZhbCB3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeS5cbiAgKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzIHx8ICh0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiAmJiBzZWxmKTtcbiAgfSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKClcbik7XG4iLCJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcclxuaW1wb3J0IFZ1ZXggZnJvbSAndnVleCdcclxuXHJcblZ1ZS51c2UoVnVleClcclxuXHJcbmNvbnN0IHN0b3JlID0gbmV3IFZ1ZXguU3RvcmUoe1xyXG5cdHN0YXRlOiB7XHJcblx0XHRoYXNMb2dpbjogZmFsc2UsXHJcblx0XHRsb2dpblByb3ZpZGVyOiBcIlwiLFxyXG5cdFx0dXNlckluZm86IHt9LFxyXG5cdFx0YXZhdGFyOlwiXCIsXHJcblx0XHRuaWNrbmFtZTpcIlwiLFxyXG5cdFx0dG9rZW46XCJcIixcclxuXHRcdGhvbm9yOlwiXCIsXHJcblx0XHR1c2VyaWQ6XCJcIixcclxuXHRcdGxldmVsOjAsICAvLyDnrYnnuqdcclxuXHRcdHByb2dyZXNzOjAsICAvLyDnu4/pqozov5vluqZcclxuXHRcdHN0YXJOdW06MCwgIC8vIOaYn+aVsFxyXG5cdFx0Y2pOdW06MCwgIC8vIOaIkOWwseeCueaVsFxyXG5cdFx0bGV2ZWx1cGRhdGE6ZmFsc2UsXHJcblx0XHRob25vcnVwZGF0YTpmYWxzZSxcclxuXHRcdG9wZW5pZDogbnVsbCxcclxuXHRcdHRlc3R2dWV4OiBmYWxzZSxcclxuXHRcdGNvbG9ySW5kZXg6IDAsXHJcblx0XHRzaWduTGlzdDpbXSwgLy/nrb7liLDliJfooahcclxuXHRcdGNvbG9yTGlzdDogWycjRkYwMDAwJywgJyMwMEZGMDAnLCAnIzAwMDBGRiddLFxyXG5cdH0sXHJcblx0bXV0YXRpb25zOiB7XHJcblx0XHRsb2dpbihzdGF0ZSwgcmVzKSB7XHJcblx0XHRcdHN0YXRlLmhhc0xvZ2luID0gdHJ1ZTtcclxuXHRcdFx0c3RhdGUudXNlckluZm8gPSByZXM7XHJcblx0XHRcdHN0YXRlLmF2YXRhciA9IHJlcy53ZWlDaGF0QXV0aFVzZXIuYXZhdGFyVXJsO1xyXG5cdFx0XHRzdGF0ZS5uaWNrbmFtZSA9IHJlcy53ZWlDaGF0QXV0aFVzZXIubmlja05hbWU7XHJcblx0XHRcdHN0YXRlLnRva2VuID0gcmVzLnRva2VuO1xyXG5cdFx0XHQvLyDku4XlgZrmtYvor5VcclxuXHRcdFx0Ly9zdGF0ZS5sZXZlbCA9IDE7XHJcblx0XHRcdFxyXG5cdFx0XHR2YXIgc3RvcmdlTmFtZSA9IFsnYXZhdGFyVXJsJywnbmlja05hbWUnLCd0b2tlbicsJ2lzTG9naW4nLCAndXNlcklkJ107XHJcblx0XHRcdHZhciBzdG9yZ2VWYWwgPSBbcmVzLndlaUNoYXRBdXRoVXNlci5hdmF0YXJVcmwsIHJlcy53ZWlDaGF0QXV0aFVzZXIubmlja05hbWUsIHJlcy50b2tlbiwgdHJ1ZSxyZXMudXNlcklkXTtcclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdG9yZ2VOYW1lLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dW5pLnNldFN0b3JhZ2VTeW5jKHtcclxuXHRcdFx0XHRcdGtleTogc3RvcmdlTmFtZVtpXSxcclxuXHRcdFx0XHRcdGRhdGE6IHN0b3JnZVZhbFtpXVxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH1cclxuXHRcdFx0Y29uc29sZS5sb2coJ3N0YXRlX3VzZXJJbmZvIGlzJylcclxuXHRcdFx0Y29uc29sZS5sb2coc3RhdGUudXNlckluZm8pXHJcblx0XHR9LFxyXG5cdFx0bG9nb3V0KHN0YXRlKSB7XHJcblx0XHRcdHN0YXRlLmhhc0xvZ2luID0gZmFsc2VcclxuXHRcdFx0c3RhdGUub3BlbmlkID0gbnVsbFxyXG5cdFx0fSxcclxuXHRcdGFkZExldmVsKHN0YXRlLG51bSl7XHJcblx0XHRcdHN0YXRlLmxldmVsID0gc3RhdGUubGV2ZWwgKyBudW1cclxuXHRcdH0sXHJcblx0XHRsZXZlbFVwZGF0YShzdGF0ZSxpc1VwZGF0YSl7XHJcblx0XHRcdHN0YXRlLmxldmVsdXBkYXRhID0gaXNVcGRhdGFcclxuXHRcdH0sXHJcblx0XHRob25vclVwZGF0YShzdGF0ZSxpc1VwZGF0YSl7XHJcblx0XHRcdHN0YXRlLmhvbm9ydXBkYXRhID0gaXNVcGRhdGFcclxuXHRcdH0sXHJcblx0XHRjaGFuZ2VMZXZlbChzdGF0ZSxsZXZlbCl7XHJcblx0XHRcdC8vIOWPmOabtOetiee6p1xyXG5cdFx0XHRzdGF0ZS5sZXZlbCA9IGxldmVsO1xyXG5cdFx0XHRjb25zb2xlLmxvZygnc3RhdGVfbGV2ZWwgaXMgPT09PT09PT0nKVxyXG5cdFx0XHRjb25zb2xlLmxvZyhzdGF0ZS5sZXZlbClcclxuXHRcdH0sXHJcblx0XHRjaGFuZ2VQcm9ncmVzcyhzdGF0ZSxwcm9ncmVzcyl7XHJcblx0XHRcdC8vIOi/m+W6puadoeWPmOabtFxyXG5cdFx0XHRzdGF0ZS5wcm9ncmVzcyA9IHByb2dyZXNzO1xyXG5cdFx0XHRjb25zb2xlLmxvZygnc3RhdGVfcHJvZ2Vyc3MgaXMgPT09PT09PT0nKVxyXG5cdFx0XHRjb25zb2xlLmxvZyhzdGF0ZS5wcm9ncmVzcylcclxuXHRcdH0sXHJcblx0XHRjaGFuZ2VTdGFyKHN0YXRlLHN0YXIpe1xyXG5cdFx0XHQvLyDmmJ/mlbDlj5jmm7RcclxuXHRcdFx0c3RhdGUuc3Rhck51bSA9IHN0YXI7XHJcblx0XHRcdGNvbnNvbGUubG9nKCdzdGF0ZV9zdGFyTnVtICBpcyA9PT09PT09PScpXHJcblx0XHRcdGNvbnNvbGUubG9nKHN0YXRlLnN0YXJOdW0pXHJcblx0XHR9LFxyXG5cdFx0Y2hhbmdlcHJvZ3Jlc3Moc3RhdGUscHJvZ3Jlc3Mpe1xyXG5cdFx0XHRzdGF0ZS5wcm9ncmVzcyA9IHByb2dyZXNzO1xyXG5cdFx0fSxcclxuXHRcdGNoYW5nZUhvbm9yKHN0YXRlLGhvbm9yKXtcclxuXHRcdFx0c3RhdGUuaG9ub3IgPSBob25vcjtcclxuXHRcdH0sXHJcblx0XHRjaGFuZ2VDaihzdGF0ZSxjail7XHJcblx0XHRcdHN0YXRlLmNqTnVtID0gY2pcclxuXHRcdH0sXHJcblx0XHRjaGFuZ05hbWUoc3RhdGUsbmFtZSl7XHJcblx0XHRcdHN0YXRlLm5pY2tuYW1lID0gbmFtZVxyXG5cdFx0fSxcclxuXHRcdGNoYW5nZXNpZ25MaXN0KHN0YXRlLGxpc3Qpe1xyXG5cdFx0XHRzdGF0ZS5zaWduTGlzdCA9IGxpc3RcclxuXHRcdH0sXHJcblx0XHRzZXRPcGVuaWQoc3RhdGUsIG9wZW5pZCkge1xyXG5cdFx0XHRzdGF0ZS5vcGVuaWQgPSBvcGVuaWRcclxuXHRcdH0sXHJcblx0XHRzZXRUZXN0VHJ1ZShzdGF0ZSkge1xyXG5cdFx0XHRzdGF0ZS50ZXN0dnVleCA9IHRydWVcclxuXHRcdH0sXHJcblx0XHRzZXRUZXN0RmFsc2Uoc3RhdGUpIHtcclxuXHRcdFx0c3RhdGUudGVzdHZ1ZXggPSBmYWxzZVxyXG5cdFx0fSxcclxuXHRcdHNldENvbG9ySW5kZXgoc3RhdGUsIGluZGV4KSB7XHJcblx0XHRcdHN0YXRlLmNvbG9ySW5kZXggPSBpbmRleFxyXG5cdFx0fVxyXG5cdH0sXHJcblx0Z2V0dGVyczoge1xyXG5cdFx0Y3VycmVudENvbG9yKHN0YXRlKSB7XHJcblx0XHRcdHJldHVybiBzdGF0ZS5jb2xvckxpc3Rbc3RhdGUuY29sb3JJbmRleF1cclxuXHRcdH1cclxuXHR9LFxyXG5cdGFjdGlvbnM6IHtcclxuXHRcdC8vIGxhenkgbG9hZGluZyBvcGVuaWRcclxuXHRcdGdldFVzZXJPcGVuSWQ6IGFzeW5jIGZ1bmN0aW9uKHtcclxuXHRcdFx0Y29tbWl0LFxyXG5cdFx0XHRzdGF0ZVxyXG5cdFx0fSkge1xyXG5cdFx0XHRyZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0XHRcdGlmIChzdGF0ZS5vcGVuaWQpIHtcclxuXHRcdFx0XHRcdHJlc29sdmUoc3RhdGUub3BlbmlkKVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR1bmkubG9naW4oe1xyXG5cdFx0XHRcdFx0XHRzdWNjZXNzOiAoZGF0YSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdGNvbW1pdCgnbG9naW4nKVxyXG5cdFx0XHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IC8v5qih5ouf5byC5q2l6K+35rGC5pyN5Yqh5Zmo6I635Y+WIG9wZW5pZFxyXG5cdFx0XHRcdFx0XHRcdFx0Y29uc3Qgb3BlbmlkID0gJzEyMzQ1Njc4OSdcclxuXHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCd1bmkucmVxdWVzdCBtb2NrIG9wZW5pZFsnICsgb3BlbmlkICsgJ10nKTtcclxuXHRcdFx0XHRcdFx0XHRcdGNvbW1pdCgnc2V0T3BlbmlkJywgb3BlbmlkKVxyXG5cdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZShvcGVuaWQpXHJcblx0XHRcdFx0XHRcdFx0fSwgMTAwMClcclxuXHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0ZmFpbDogKGVycikgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCd1bmkubG9naW4g5o6l5Y+j6LCD55So5aSx6LSl77yM5bCG5peg5rOV5q2j5bi45L2/55So5byA5pS+5o6l5Y+j562J5pyN5YqhJywgZXJyKVxyXG5cdFx0XHRcdFx0XHRcdHJlamVjdChlcnIpXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0fVxyXG5cdH1cclxufSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHN0b3JlXHJcbiIsIi8qKlxuICogdnVleCB2My4wLjFcbiAqIChjKSAyMDE3IEV2YW4gWW91XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xudmFyIGFwcGx5TWl4aW4gPSBmdW5jdGlvbiAoVnVlKSB7XG4gIHZhciB2ZXJzaW9uID0gTnVtYmVyKFZ1ZS52ZXJzaW9uLnNwbGl0KCcuJylbMF0pO1xuXG4gIGlmICh2ZXJzaW9uID49IDIpIHtcbiAgICBWdWUubWl4aW4oeyBiZWZvcmVDcmVhdGU6IHZ1ZXhJbml0IH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIG92ZXJyaWRlIGluaXQgYW5kIGluamVjdCB2dWV4IGluaXQgcHJvY2VkdXJlXG4gICAgLy8gZm9yIDEueCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgICB2YXIgX2luaXQgPSBWdWUucHJvdG90eXBlLl9pbml0O1xuICAgIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgICAgIG9wdGlvbnMuaW5pdCA9IG9wdGlvbnMuaW5pdFxuICAgICAgICA/IFt2dWV4SW5pdF0uY29uY2F0KG9wdGlvbnMuaW5pdClcbiAgICAgICAgOiB2dWV4SW5pdDtcbiAgICAgIF9pbml0LmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWdWV4IGluaXQgaG9vaywgaW5qZWN0ZWQgaW50byBlYWNoIGluc3RhbmNlcyBpbml0IGhvb2tzIGxpc3QuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHZ1ZXhJbml0ICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnM7XG4gICAgLy8gc3RvcmUgaW5qZWN0aW9uXG4gICAgaWYgKG9wdGlvbnMuc3RvcmUpIHtcbiAgICAgIHRoaXMuJHN0b3JlID0gdHlwZW9mIG9wdGlvbnMuc3RvcmUgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBvcHRpb25zLnN0b3JlKClcbiAgICAgICAgOiBvcHRpb25zLnN0b3JlO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQuJHN0b3JlKSB7XG4gICAgICB0aGlzLiRzdG9yZSA9IG9wdGlvbnMucGFyZW50LiRzdG9yZTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBkZXZ0b29sSG9vayA9XG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG5mdW5jdGlvbiBkZXZ0b29sUGx1Z2luIChzdG9yZSkge1xuICBpZiAoIWRldnRvb2xIb29rKSB7IHJldHVybiB9XG5cbiAgc3RvcmUuX2RldnRvb2xIb29rID0gZGV2dG9vbEhvb2s7XG5cbiAgZGV2dG9vbEhvb2suZW1pdCgndnVleDppbml0Jywgc3RvcmUpO1xuXG4gIGRldnRvb2xIb29rLm9uKCd2dWV4OnRyYXZlbC10by1zdGF0ZScsIGZ1bmN0aW9uICh0YXJnZXRTdGF0ZSkge1xuICAgIHN0b3JlLnJlcGxhY2VTdGF0ZSh0YXJnZXRTdGF0ZSk7XG4gIH0pO1xuXG4gIHN0b3JlLnN1YnNjcmliZShmdW5jdGlvbiAobXV0YXRpb24sIHN0YXRlKSB7XG4gICAgZGV2dG9vbEhvb2suZW1pdCgndnVleDptdXRhdGlvbicsIG11dGF0aW9uLCBzdGF0ZSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgZmlyc3QgaXRlbSB0aGF0IHBhc3MgdGhlIHRlc3RcbiAqIGJ5IHNlY29uZCBhcmd1bWVudCBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGxpc3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZcbiAqIEByZXR1cm4geyp9XG4gKi9cbi8qKlxuICogRGVlcCBjb3B5IHRoZSBnaXZlbiBvYmplY3QgY29uc2lkZXJpbmcgY2lyY3VsYXIgc3RydWN0dXJlLlxuICogVGhpcyBmdW5jdGlvbiBjYWNoZXMgYWxsIG5lc3RlZCBvYmplY3RzIGFuZCBpdHMgY29waWVzLlxuICogSWYgaXQgZGV0ZWN0cyBjaXJjdWxhciBzdHJ1Y3R1cmUsIHVzZSBjYWNoZWQgY29weSB0byBhdm9pZCBpbmZpbml0ZSBsb29wLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IGNhY2hlXG4gKiBAcmV0dXJuIHsqfVxuICovXG5cblxuLyoqXG4gKiBmb3JFYWNoIGZvciBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZm9yRWFjaFZhbHVlIChvYmosIGZuKSB7XG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBmbihvYmpba2V5XSwga2V5KTsgfSk7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG5mdW5jdGlvbiBpc1Byb21pc2UgKHZhbCkge1xuICByZXR1cm4gdmFsICYmIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJ1xufVxuXG5mdW5jdGlvbiBhc3NlcnQgKGNvbmRpdGlvbiwgbXNnKSB7XG4gIGlmICghY29uZGl0aW9uKSB7IHRocm93IG5ldyBFcnJvcigoXCJbdnVleF0gXCIgKyBtc2cpKSB9XG59XG5cbnZhciBNb2R1bGUgPSBmdW5jdGlvbiBNb2R1bGUgKHJhd01vZHVsZSwgcnVudGltZSkge1xuICB0aGlzLnJ1bnRpbWUgPSBydW50aW1lO1xuICB0aGlzLl9jaGlsZHJlbiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX3Jhd01vZHVsZSA9IHJhd01vZHVsZTtcbiAgdmFyIHJhd1N0YXRlID0gcmF3TW9kdWxlLnN0YXRlO1xuICB0aGlzLnN0YXRlID0gKHR5cGVvZiByYXdTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IHJhd1N0YXRlKCkgOiByYXdTdGF0ZSkgfHwge307XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzJDEgPSB7IG5hbWVzcGFjZWQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDEubmFtZXNwYWNlZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhIXRoaXMuX3Jhd01vZHVsZS5uYW1lc3BhY2VkXG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmFkZENoaWxkID0gZnVuY3Rpb24gYWRkQ2hpbGQgKGtleSwgbW9kdWxlKSB7XG4gIHRoaXMuX2NoaWxkcmVuW2tleV0gPSBtb2R1bGU7XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKGtleSkge1xuICBkZWxldGUgdGhpcy5fY2hpbGRyZW5ba2V5XTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZ2V0Q2hpbGQgPSBmdW5jdGlvbiBnZXRDaGlsZCAoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9jaGlsZHJlbltrZXldXG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAocmF3TW9kdWxlKSB7XG4gIHRoaXMuX3Jhd01vZHVsZS5uYW1lc3BhY2VkID0gcmF3TW9kdWxlLm5hbWVzcGFjZWQ7XG4gIGlmIChyYXdNb2R1bGUuYWN0aW9ucykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5hY3Rpb25zID0gcmF3TW9kdWxlLmFjdGlvbnM7XG4gIH1cbiAgaWYgKHJhd01vZHVsZS5tdXRhdGlvbnMpIHtcbiAgICB0aGlzLl9yYXdNb2R1bGUubXV0YXRpb25zID0gcmF3TW9kdWxlLm11dGF0aW9ucztcbiAgfVxuICBpZiAocmF3TW9kdWxlLmdldHRlcnMpIHtcbiAgICB0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycyA9IHJhd01vZHVsZS5nZXR0ZXJzO1xuICB9XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hDaGlsZCA9IGZ1bmN0aW9uIGZvckVhY2hDaGlsZCAoZm4pIHtcbiAgZm9yRWFjaFZhbHVlKHRoaXMuX2NoaWxkcmVuLCBmbik7XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hHZXR0ZXIgPSBmdW5jdGlvbiBmb3JFYWNoR2V0dGVyIChmbikge1xuICBpZiAodGhpcy5fcmF3TW9kdWxlLmdldHRlcnMpIHtcbiAgICBmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLmdldHRlcnMsIGZuKTtcbiAgfVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoQWN0aW9uID0gZnVuY3Rpb24gZm9yRWFjaEFjdGlvbiAoZm4pIHtcbiAgaWYgKHRoaXMuX3Jhd01vZHVsZS5hY3Rpb25zKSB7XG4gICAgZm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5hY3Rpb25zLCBmbik7XG4gIH1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaE11dGF0aW9uID0gZnVuY3Rpb24gZm9yRWFjaE11dGF0aW9uIChmbikge1xuICBpZiAodGhpcy5fcmF3TW9kdWxlLm11dGF0aW9ucykge1xuICAgIGZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUubXV0YXRpb25zLCBmbik7XG4gIH1cbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBNb2R1bGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMSApO1xuXG52YXIgTW9kdWxlQ29sbGVjdGlvbiA9IGZ1bmN0aW9uIE1vZHVsZUNvbGxlY3Rpb24gKHJhd1Jvb3RNb2R1bGUpIHtcbiAgLy8gcmVnaXN0ZXIgcm9vdCBtb2R1bGUgKFZ1ZXguU3RvcmUgb3B0aW9ucylcbiAgdGhpcy5yZWdpc3RlcihbXSwgcmF3Um9vdE1vZHVsZSwgZmFsc2UpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobW9kdWxlLCBrZXkpIHtcbiAgICByZXR1cm4gbW9kdWxlLmdldENoaWxkKGtleSlcbiAgfSwgdGhpcy5yb290KVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0TmFtZXNwYWNlID0gZnVuY3Rpb24gZ2V0TmFtZXNwYWNlIChwYXRoKSB7XG4gIHZhciBtb2R1bGUgPSB0aGlzLnJvb3Q7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBrZXkpIHtcbiAgICBtb2R1bGUgPSBtb2R1bGUuZ2V0Q2hpbGQoa2V5KTtcbiAgICByZXR1cm4gbmFtZXNwYWNlICsgKG1vZHVsZS5uYW1lc3BhY2VkID8ga2V5ICsgJy8nIDogJycpXG4gIH0sICcnKVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlJDEgKHJhd1Jvb3RNb2R1bGUpIHtcbiAgdXBkYXRlKFtdLCB0aGlzLnJvb3QsIHJhd1Jvb3RNb2R1bGUpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlciAocGF0aCwgcmF3TW9kdWxlLCBydW50aW1lKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgaWYgKCBydW50aW1lID09PSB2b2lkIDAgKSBydW50aW1lID0gdHJ1ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydFJhd01vZHVsZShwYXRoLCByYXdNb2R1bGUpO1xuICB9XG5cbiAgdmFyIG5ld01vZHVsZSA9IG5ldyBNb2R1bGUocmF3TW9kdWxlLCBydW50aW1lKTtcbiAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgdGhpcy5yb290ID0gbmV3TW9kdWxlO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLmdldChwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgcGFyZW50LmFkZENoaWxkKHBhdGhbcGF0aC5sZW5ndGggLSAxXSwgbmV3TW9kdWxlKTtcbiAgfVxuXG4gIC8vIHJlZ2lzdGVyIG5lc3RlZCBtb2R1bGVzXG4gIGlmIChyYXdNb2R1bGUubW9kdWxlcykge1xuICAgIGZvckVhY2hWYWx1ZShyYXdNb2R1bGUubW9kdWxlcywgZnVuY3Rpb24gKHJhd0NoaWxkTW9kdWxlLCBrZXkpIHtcbiAgICAgIHRoaXMkMS5yZWdpc3RlcihwYXRoLmNvbmNhdChrZXkpLCByYXdDaGlsZE1vZHVsZSwgcnVudGltZSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyIChwYXRoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLmdldChwYXRoLnNsaWNlKDAsIC0xKSk7XG4gIHZhciBrZXkgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gIGlmICghcGFyZW50LmdldENoaWxkKGtleSkucnVudGltZSkgeyByZXR1cm4gfVxuXG4gIHBhcmVudC5yZW1vdmVDaGlsZChrZXkpO1xufTtcblxuZnVuY3Rpb24gdXBkYXRlIChwYXRoLCB0YXJnZXRNb2R1bGUsIG5ld01vZHVsZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydFJhd01vZHVsZShwYXRoLCBuZXdNb2R1bGUpO1xuICB9XG5cbiAgLy8gdXBkYXRlIHRhcmdldCBtb2R1bGVcbiAgdGFyZ2V0TW9kdWxlLnVwZGF0ZShuZXdNb2R1bGUpO1xuXG4gIC8vIHVwZGF0ZSBuZXN0ZWQgbW9kdWxlc1xuICBpZiAobmV3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gbmV3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICAgIGlmICghdGFyZ2V0TW9kdWxlLmdldENoaWxkKGtleSkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBcIlt2dWV4XSB0cnlpbmcgdG8gYWRkIGEgbmV3IG1vZHVsZSAnXCIgKyBrZXkgKyBcIicgb24gaG90IHJlbG9hZGluZywgXCIgK1xuICAgICAgICAgICAgJ21hbnVhbCByZWxvYWQgaXMgbmVlZGVkJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB1cGRhdGUoXG4gICAgICAgIHBhdGguY29uY2F0KGtleSksXG4gICAgICAgIHRhcmdldE1vZHVsZS5nZXRDaGlsZChrZXkpLFxuICAgICAgICBuZXdNb2R1bGUubW9kdWxlc1trZXldXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgZnVuY3Rpb25Bc3NlcnQgPSB7XG4gIGFzc2VydDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7IH0sXG4gIGV4cGVjdGVkOiAnZnVuY3Rpb24nXG59O1xuXG52YXIgb2JqZWN0QXNzZXJ0ID0ge1xuICBhc3NlcnQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLmhhbmRsZXIgPT09ICdmdW5jdGlvbicpOyB9LFxuICBleHBlY3RlZDogJ2Z1bmN0aW9uIG9yIG9iamVjdCB3aXRoIFwiaGFuZGxlclwiIGZ1bmN0aW9uJ1xufTtcblxudmFyIGFzc2VydFR5cGVzID0ge1xuICBnZXR0ZXJzOiBmdW5jdGlvbkFzc2VydCxcbiAgbXV0YXRpb25zOiBmdW5jdGlvbkFzc2VydCxcbiAgYWN0aW9uczogb2JqZWN0QXNzZXJ0XG59O1xuXG5mdW5jdGlvbiBhc3NlcnRSYXdNb2R1bGUgKHBhdGgsIHJhd01vZHVsZSkge1xuICBPYmplY3Qua2V5cyhhc3NlcnRUeXBlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFyYXdNb2R1bGVba2V5XSkgeyByZXR1cm4gfVxuXG4gICAgdmFyIGFzc2VydE9wdGlvbnMgPSBhc3NlcnRUeXBlc1trZXldO1xuXG4gICAgZm9yRWFjaFZhbHVlKHJhd01vZHVsZVtrZXldLCBmdW5jdGlvbiAodmFsdWUsIHR5cGUpIHtcbiAgICAgIGFzc2VydChcbiAgICAgICAgYXNzZXJ0T3B0aW9ucy5hc3NlcnQodmFsdWUpLFxuICAgICAgICBtYWtlQXNzZXJ0aW9uTWVzc2FnZShwYXRoLCBrZXksIHR5cGUsIHZhbHVlLCBhc3NlcnRPcHRpb25zLmV4cGVjdGVkKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VBc3NlcnRpb25NZXNzYWdlIChwYXRoLCBrZXksIHR5cGUsIHZhbHVlLCBleHBlY3RlZCkge1xuICB2YXIgYnVmID0ga2V5ICsgXCIgc2hvdWxkIGJlIFwiICsgZXhwZWN0ZWQgKyBcIiBidXQgXFxcIlwiICsga2V5ICsgXCIuXCIgKyB0eXBlICsgXCJcXFwiXCI7XG4gIGlmIChwYXRoLmxlbmd0aCA+IDApIHtcbiAgICBidWYgKz0gXCIgaW4gbW9kdWxlIFxcXCJcIiArIChwYXRoLmpvaW4oJy4nKSkgKyBcIlxcXCJcIjtcbiAgfVxuICBidWYgKz0gXCIgaXMgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsdWUpKSArIFwiLlwiO1xuICByZXR1cm4gYnVmXG59XG5cbnZhciBWdWU7IC8vIGJpbmQgb24gaW5zdGFsbFxuXG52YXIgU3RvcmUgPSBmdW5jdGlvbiBTdG9yZSAob3B0aW9ucykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcbiAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgLy8gQXV0byBpbnN0YWxsIGlmIGl0IGlzIG5vdCBkb25lIHlldCBhbmQgYHdpbmRvd2AgaGFzIGBWdWVgLlxuICAvLyBUbyBhbGxvdyB1c2VycyB0byBhdm9pZCBhdXRvLWluc3RhbGxhdGlvbiBpbiBzb21lIGNhc2VzLFxuICAvLyB0aGlzIGNvZGUgc2hvdWxkIGJlIHBsYWNlZCBoZXJlLiBTZWUgIzczMVxuICBpZiAoIVZ1ZSAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuVnVlKSB7XG4gICAgaW5zdGFsbCh3aW5kb3cuVnVlKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KFZ1ZSwgXCJtdXN0IGNhbGwgVnVlLnVzZShWdWV4KSBiZWZvcmUgY3JlYXRpbmcgYSBzdG9yZSBpbnN0YW5jZS5cIik7XG4gICAgYXNzZXJ0KHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJywgXCJ2dWV4IHJlcXVpcmVzIGEgUHJvbWlzZSBwb2x5ZmlsbCBpbiB0aGlzIGJyb3dzZXIuXCIpO1xuICAgIGFzc2VydCh0aGlzIGluc3RhbmNlb2YgU3RvcmUsIFwiU3RvcmUgbXVzdCBiZSBjYWxsZWQgd2l0aCB0aGUgbmV3IG9wZXJhdG9yLlwiKTtcbiAgfVxuXG4gIHZhciBwbHVnaW5zID0gb3B0aW9ucy5wbHVnaW5zOyBpZiAoIHBsdWdpbnMgPT09IHZvaWQgMCApIHBsdWdpbnMgPSBbXTtcbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0OyBpZiAoIHN0cmljdCA9PT0gdm9pZCAwICkgc3RyaWN0ID0gZmFsc2U7XG5cbiAgdmFyIHN0YXRlID0gb3B0aW9ucy5zdGF0ZTsgaWYgKCBzdGF0ZSA9PT0gdm9pZCAwICkgc3RhdGUgPSB7fTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHN0YXRlID0gc3RhdGUoKSB8fCB7fTtcbiAgfVxuXG4gIC8vIHN0b3JlIGludGVybmFsIHN0YXRlXG4gIHRoaXMuX2NvbW1pdHRpbmcgPSBmYWxzZTtcbiAgdGhpcy5fYWN0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX2FjdGlvblN1YnNjcmliZXJzID0gW107XG4gIHRoaXMuX211dGF0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX3dyYXBwZWRHZXR0ZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fbW9kdWxlcyA9IG5ldyBNb2R1bGVDb2xsZWN0aW9uKG9wdGlvbnMpO1xuICB0aGlzLl9tb2R1bGVzTmFtZXNwYWNlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbXTtcbiAgdGhpcy5fd2F0Y2hlclZNID0gbmV3IFZ1ZSgpO1xuXG4gIC8vIGJpbmQgY29tbWl0IGFuZCBkaXNwYXRjaCB0byBzZWxmXG4gIHZhciBzdG9yZSA9IHRoaXM7XG4gIHZhciByZWYgPSB0aGlzO1xuICB2YXIgZGlzcGF0Y2ggPSByZWYuZGlzcGF0Y2g7XG4gIHZhciBjb21taXQgPSByZWYuY29tbWl0O1xuICB0aGlzLmRpc3BhdGNoID0gZnVuY3Rpb24gYm91bmREaXNwYXRjaCAodHlwZSwgcGF5bG9hZCkge1xuICAgIHJldHVybiBkaXNwYXRjaC5jYWxsKHN0b3JlLCB0eXBlLCBwYXlsb2FkKVxuICB9O1xuICB0aGlzLmNvbW1pdCA9IGZ1bmN0aW9uIGJvdW5kQ29tbWl0ICh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGNvbW1pdC5jYWxsKHN0b3JlLCB0eXBlLCBwYXlsb2FkLCBvcHRpb25zKVxuICB9O1xuXG4gIC8vIHN0cmljdCBtb2RlXG4gIHRoaXMuc3RyaWN0ID0gc3RyaWN0O1xuXG4gIC8vIGluaXQgcm9vdCBtb2R1bGUuXG4gIC8vIHRoaXMgYWxzbyByZWN1cnNpdmVseSByZWdpc3RlcnMgYWxsIHN1Yi1tb2R1bGVzXG4gIC8vIGFuZCBjb2xsZWN0cyBhbGwgbW9kdWxlIGdldHRlcnMgaW5zaWRlIHRoaXMuX3dyYXBwZWRHZXR0ZXJzXG4gIGluc3RhbGxNb2R1bGUodGhpcywgc3RhdGUsIFtdLCB0aGlzLl9tb2R1bGVzLnJvb3QpO1xuXG4gIC8vIGluaXRpYWxpemUgdGhlIHN0b3JlIHZtLCB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgdGhlIHJlYWN0aXZpdHlcbiAgLy8gKGFsc28gcmVnaXN0ZXJzIF93cmFwcGVkR2V0dGVycyBhcyBjb21wdXRlZCBwcm9wZXJ0aWVzKVxuICByZXNldFN0b3JlVk0odGhpcywgc3RhdGUpO1xuXG4gIC8vIGFwcGx5IHBsdWdpbnNcbiAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHsgcmV0dXJuIHBsdWdpbih0aGlzJDEpOyB9KTtcblxuICBpZiAoVnVlLmNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xQbHVnaW4odGhpcyk7XG4gIH1cbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IHN0YXRlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5zdGF0ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl92bS5fZGF0YS4kJHN0YXRlXG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMuc3RhdGUuc2V0ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQoZmFsc2UsIFwiVXNlIHN0b3JlLnJlcGxhY2VTdGF0ZSgpIHRvIGV4cGxpY2l0IHJlcGxhY2Ugc3RvcmUgc3RhdGUuXCIpO1xuICB9XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuY29tbWl0ID0gZnVuY3Rpb24gY29tbWl0IChfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgLy8gY2hlY2sgb2JqZWN0LXN0eWxlIGNvbW1pdFxuICB2YXIgcmVmID0gdW5pZnlPYmplY3RTdHlsZShfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKTtcbiAgICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICAgIHZhciBwYXlsb2FkID0gcmVmLnBheWxvYWQ7XG4gICAgdmFyIG9wdGlvbnMgPSByZWYub3B0aW9ucztcblxuICB2YXIgbXV0YXRpb24gPSB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQgfTtcbiAgdmFyIGVudHJ5ID0gdGhpcy5fbXV0YXRpb25zW3R5cGVdO1xuICBpZiAoIWVudHJ5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gbXV0YXRpb24gdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIGVudHJ5LmZvckVhY2goZnVuY3Rpb24gY29tbWl0SXRlcmF0b3IgKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIocGF5bG9hZCk7XG4gICAgfSk7XG4gIH0pO1xuICB0aGlzLl9zdWJzY3JpYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1YihtdXRhdGlvbiwgdGhpcyQxLnN0YXRlKTsgfSk7XG5cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBvcHRpb25zICYmIG9wdGlvbnMuc2lsZW50XG4gICkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgIFwiW3Z1ZXhdIG11dGF0aW9uIHR5cGU6IFwiICsgdHlwZSArIFwiLiBTaWxlbnQgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWQuIFwiICtcbiAgICAgICdVc2UgdGhlIGZpbHRlciBmdW5jdGlvbmFsaXR5IGluIHRoZSB2dWUtZGV2dG9vbHMnXG4gICAgKTtcbiAgfVxufTtcblxuU3RvcmUucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2ggKF90eXBlLCBfcGF5bG9hZCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIC8vIGNoZWNrIG9iamVjdC1zdHlsZSBkaXNwYXRjaFxuICB2YXIgcmVmID0gdW5pZnlPYmplY3RTdHlsZShfdHlwZSwgX3BheWxvYWQpO1xuICAgIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gICAgdmFyIHBheWxvYWQgPSByZWYucGF5bG9hZDtcblxuICB2YXIgYWN0aW9uID0geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBwYXlsb2FkIH07XG4gIHZhciBlbnRyeSA9IHRoaXMuX2FjdGlvbnNbdHlwZV07XG4gIGlmICghZW50cnkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBhY3Rpb24gdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIoYWN0aW9uLCB0aGlzJDEuc3RhdGUpOyB9KTtcblxuICByZXR1cm4gZW50cnkubGVuZ3RoID4gMVxuICAgID8gUHJvbWlzZS5hbGwoZW50cnkubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiBoYW5kbGVyKHBheWxvYWQpOyB9KSlcbiAgICA6IGVudHJ5WzBdKHBheWxvYWQpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlIChmbikge1xuICByZXR1cm4gZ2VuZXJpY1N1YnNjcmliZShmbiwgdGhpcy5fc3Vic2NyaWJlcnMpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUuc3Vic2NyaWJlQWN0aW9uID0gZnVuY3Rpb24gc3Vic2NyaWJlQWN0aW9uIChmbikge1xuICByZXR1cm4gZ2VuZXJpY1N1YnNjcmliZShmbiwgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUud2F0Y2ggPSBmdW5jdGlvbiB3YXRjaCAoZ2V0dGVyLCBjYiwgb3B0aW9ucykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBnZXR0ZXIgPT09ICdmdW5jdGlvbicsIFwic3RvcmUud2F0Y2ggb25seSBhY2NlcHRzIGEgZnVuY3Rpb24uXCIpO1xuICB9XG4gIHJldHVybiB0aGlzLl93YXRjaGVyVk0uJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldHRlcih0aGlzJDEuc3RhdGUsIHRoaXMkMS5nZXR0ZXJzKTsgfSwgY2IsIG9wdGlvbnMpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUucmVwbGFjZVN0YXRlID0gZnVuY3Rpb24gcmVwbGFjZVN0YXRlIChzdGF0ZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIHRoaXMkMS5fdm0uX2RhdGEuJCRzdGF0ZSA9IHN0YXRlO1xuICB9KTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5yZWdpc3Rlck1vZHVsZSA9IGZ1bmN0aW9uIHJlZ2lzdGVyTW9kdWxlIChwYXRoLCByYXdNb2R1bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KHBhdGgpLCBcIm1vZHVsZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gQXJyYXkuXCIpO1xuICAgIGFzc2VydChwYXRoLmxlbmd0aCA+IDAsICdjYW5ub3QgcmVnaXN0ZXIgdGhlIHJvb3QgbW9kdWxlIGJ5IHVzaW5nIHJlZ2lzdGVyTW9kdWxlLicpO1xuICB9XG5cbiAgdGhpcy5fbW9kdWxlcy5yZWdpc3RlcihwYXRoLCByYXdNb2R1bGUpO1xuICBpbnN0YWxsTW9kdWxlKHRoaXMsIHRoaXMuc3RhdGUsIHBhdGgsIHRoaXMuX21vZHVsZXMuZ2V0KHBhdGgpLCBvcHRpb25zLnByZXNlcnZlU3RhdGUpO1xuICAvLyByZXNldCBzdG9yZSB0byB1cGRhdGUgZ2V0dGVycy4uLlxuICByZXNldFN0b3JlVk0odGhpcywgdGhpcy5zdGF0ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUudW5yZWdpc3Rlck1vZHVsZSA9IGZ1bmN0aW9uIHVucmVnaXN0ZXJNb2R1bGUgKHBhdGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KHBhdGgpLCBcIm1vZHVsZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gQXJyYXkuXCIpO1xuICB9XG5cbiAgdGhpcy5fbW9kdWxlcy51bnJlZ2lzdGVyKHBhdGgpO1xuICB0aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50U3RhdGUgPSBnZXROZXN0ZWRTdGF0ZSh0aGlzJDEuc3RhdGUsIHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICBWdWUuZGVsZXRlKHBhcmVudFN0YXRlLCBwYXRoW3BhdGgubGVuZ3RoIC0gMV0pO1xuICB9KTtcbiAgcmVzZXRTdG9yZSh0aGlzKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5ob3RVcGRhdGUgPSBmdW5jdGlvbiBob3RVcGRhdGUgKG5ld09wdGlvbnMpIHtcbiAgdGhpcy5fbW9kdWxlcy51cGRhdGUobmV3T3B0aW9ucyk7XG4gIHJlc2V0U3RvcmUodGhpcywgdHJ1ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuX3dpdGhDb21taXQgPSBmdW5jdGlvbiBfd2l0aENvbW1pdCAoZm4pIHtcbiAgdmFyIGNvbW1pdHRpbmcgPSB0aGlzLl9jb21taXR0aW5nO1xuICB0aGlzLl9jb21taXR0aW5nID0gdHJ1ZTtcbiAgZm4oKTtcbiAgdGhpcy5fY29tbWl0dGluZyA9IGNvbW1pdHRpbmc7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggU3RvcmUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuZnVuY3Rpb24gZ2VuZXJpY1N1YnNjcmliZSAoZm4sIHN1YnMpIHtcbiAgaWYgKHN1YnMuaW5kZXhPZihmbikgPCAwKSB7XG4gICAgc3Vicy5wdXNoKGZuKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gc3Vicy5pbmRleE9mKGZuKTtcbiAgICBpZiAoaSA+IC0xKSB7XG4gICAgICBzdWJzLnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzZXRTdG9yZSAoc3RvcmUsIGhvdCkge1xuICBzdG9yZS5fYWN0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0b3JlLl9tdXRhdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdG9yZS5fd3JhcHBlZEdldHRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBzdGF0ZSA9IHN0b3JlLnN0YXRlO1xuICAvLyBpbml0IGFsbCBtb2R1bGVzXG4gIGluc3RhbGxNb2R1bGUoc3RvcmUsIHN0YXRlLCBbXSwgc3RvcmUuX21vZHVsZXMucm9vdCwgdHJ1ZSk7XG4gIC8vIHJlc2V0IHZtXG4gIHJlc2V0U3RvcmVWTShzdG9yZSwgc3RhdGUsIGhvdCk7XG59XG5cbmZ1bmN0aW9uIHJlc2V0U3RvcmVWTSAoc3RvcmUsIHN0YXRlLCBob3QpIHtcbiAgdmFyIG9sZFZtID0gc3RvcmUuX3ZtO1xuXG4gIC8vIGJpbmQgc3RvcmUgcHVibGljIGdldHRlcnNcbiAgc3RvcmUuZ2V0dGVycyA9IHt9O1xuICB2YXIgd3JhcHBlZEdldHRlcnMgPSBzdG9yZS5fd3JhcHBlZEdldHRlcnM7XG4gIHZhciBjb21wdXRlZCA9IHt9O1xuICBmb3JFYWNoVmFsdWUod3JhcHBlZEdldHRlcnMsIGZ1bmN0aW9uIChmbiwga2V5KSB7XG4gICAgLy8gdXNlIGNvbXB1dGVkIHRvIGxldmVyYWdlIGl0cyBsYXp5LWNhY2hpbmcgbWVjaGFuaXNtXG4gICAgY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZuKHN0b3JlKTsgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3RvcmUuZ2V0dGVycywga2V5LCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLl92bVtrZXldOyB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSAvLyBmb3IgbG9jYWwgZ2V0dGVyc1xuICAgIH0pO1xuICB9KTtcblxuICAvLyB1c2UgYSBWdWUgaW5zdGFuY2UgdG8gc3RvcmUgdGhlIHN0YXRlIHRyZWVcbiAgLy8gc3VwcHJlc3Mgd2FybmluZ3MganVzdCBpbiBjYXNlIHRoZSB1c2VyIGhhcyBhZGRlZFxuICAvLyBzb21lIGZ1bmt5IGdsb2JhbCBtaXhpbnNcbiAgdmFyIHNpbGVudCA9IFZ1ZS5jb25maWcuc2lsZW50O1xuICBWdWUuY29uZmlnLnNpbGVudCA9IHRydWU7XG4gIHN0b3JlLl92bSA9IG5ldyBWdWUoe1xuICAgIGRhdGE6IHtcbiAgICAgICQkc3RhdGU6IHN0YXRlXG4gICAgfSxcbiAgICBjb21wdXRlZDogY29tcHV0ZWRcbiAgfSk7XG4gIFZ1ZS5jb25maWcuc2lsZW50ID0gc2lsZW50O1xuXG4gIC8vIGVuYWJsZSBzdHJpY3QgbW9kZSBmb3IgbmV3IHZtXG4gIGlmIChzdG9yZS5zdHJpY3QpIHtcbiAgICBlbmFibGVTdHJpY3RNb2RlKHN0b3JlKTtcbiAgfVxuXG4gIGlmIChvbGRWbSkge1xuICAgIGlmIChob3QpIHtcbiAgICAgIC8vIGRpc3BhdGNoIGNoYW5nZXMgaW4gYWxsIHN1YnNjcmliZWQgd2F0Y2hlcnNcbiAgICAgIC8vIHRvIGZvcmNlIGdldHRlciByZS1ldmFsdWF0aW9uIGZvciBob3QgcmVsb2FkaW5nLlxuICAgICAgc3RvcmUuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBvbGRWbS5fZGF0YS4kJHN0YXRlID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBWdWUubmV4dFRpY2soZnVuY3Rpb24gKCkgeyByZXR1cm4gb2xkVm0uJGRlc3Ryb3koKTsgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zdGFsbE1vZHVsZSAoc3RvcmUsIHJvb3RTdGF0ZSwgcGF0aCwgbW9kdWxlLCBob3QpIHtcbiAgdmFyIGlzUm9vdCA9ICFwYXRoLmxlbmd0aDtcbiAgdmFyIG5hbWVzcGFjZSA9IHN0b3JlLl9tb2R1bGVzLmdldE5hbWVzcGFjZShwYXRoKTtcblxuICAvLyByZWdpc3RlciBpbiBuYW1lc3BhY2UgbWFwXG4gIGlmIChtb2R1bGUubmFtZXNwYWNlZCkge1xuICAgIHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwW25hbWVzcGFjZV0gPSBtb2R1bGU7XG4gIH1cblxuICAvLyBzZXQgc3RhdGVcbiAgaWYgKCFpc1Jvb3QgJiYgIWhvdCkge1xuICAgIHZhciBwYXJlbnRTdGF0ZSA9IGdldE5lc3RlZFN0YXRlKHJvb3RTdGF0ZSwgcGF0aC5zbGljZSgwLCAtMSkpO1xuICAgIHZhciBtb2R1bGVOYW1lID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgIHN0b3JlLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICAgIFZ1ZS5zZXQocGFyZW50U3RhdGUsIG1vZHVsZU5hbWUsIG1vZHVsZS5zdGF0ZSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgbG9jYWwgPSBtb2R1bGUuY29udGV4dCA9IG1ha2VMb2NhbENvbnRleHQoc3RvcmUsIG5hbWVzcGFjZSwgcGF0aCk7XG5cbiAgbW9kdWxlLmZvckVhY2hNdXRhdGlvbihmdW5jdGlvbiAobXV0YXRpb24sIGtleSkge1xuICAgIHZhciBuYW1lc3BhY2VkVHlwZSA9IG5hbWVzcGFjZSArIGtleTtcbiAgICByZWdpc3Rlck11dGF0aW9uKHN0b3JlLCBuYW1lc3BhY2VkVHlwZSwgbXV0YXRpb24sIGxvY2FsKTtcbiAgfSk7XG5cbiAgbW9kdWxlLmZvckVhY2hBY3Rpb24oZnVuY3Rpb24gKGFjdGlvbiwga2V5KSB7XG4gICAgdmFyIHR5cGUgPSBhY3Rpb24ucm9vdCA/IGtleSA6IG5hbWVzcGFjZSArIGtleTtcbiAgICB2YXIgaGFuZGxlciA9IGFjdGlvbi5oYW5kbGVyIHx8IGFjdGlvbjtcbiAgICByZWdpc3RlckFjdGlvbihzdG9yZSwgdHlwZSwgaGFuZGxlciwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaEdldHRlcihmdW5jdGlvbiAoZ2V0dGVyLCBrZXkpIHtcbiAgICB2YXIgbmFtZXNwYWNlZFR5cGUgPSBuYW1lc3BhY2UgKyBrZXk7XG4gICAgcmVnaXN0ZXJHZXR0ZXIoc3RvcmUsIG5hbWVzcGFjZWRUeXBlLCBnZXR0ZXIsIGxvY2FsKTtcbiAgfSk7XG5cbiAgbW9kdWxlLmZvckVhY2hDaGlsZChmdW5jdGlvbiAoY2hpbGQsIGtleSkge1xuICAgIGluc3RhbGxNb2R1bGUoc3RvcmUsIHJvb3RTdGF0ZSwgcGF0aC5jb25jYXQoa2V5KSwgY2hpbGQsIGhvdCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIG1ha2UgbG9jYWxpemVkIGRpc3BhdGNoLCBjb21taXQsIGdldHRlcnMgYW5kIHN0YXRlXG4gKiBpZiB0aGVyZSBpcyBubyBuYW1lc3BhY2UsIGp1c3QgdXNlIHJvb3Qgb25lc1xuICovXG5mdW5jdGlvbiBtYWtlTG9jYWxDb250ZXh0IChzdG9yZSwgbmFtZXNwYWNlLCBwYXRoKSB7XG4gIHZhciBub05hbWVzcGFjZSA9IG5hbWVzcGFjZSA9PT0gJyc7XG5cbiAgdmFyIGxvY2FsID0ge1xuICAgIGRpc3BhdGNoOiBub05hbWVzcGFjZSA/IHN0b3JlLmRpc3BhdGNoIDogZnVuY3Rpb24gKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpIHtcbiAgICAgIHZhciBhcmdzID0gdW5pZnlPYmplY3RTdHlsZShfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKTtcbiAgICAgIHZhciBwYXlsb2FkID0gYXJncy5wYXlsb2FkO1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmdzLm9wdGlvbnM7XG4gICAgICB2YXIgdHlwZSA9IGFyZ3MudHlwZTtcblxuICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnJvb3QpIHtcbiAgICAgICAgdHlwZSA9IG5hbWVzcGFjZSArIHR5cGU7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzdG9yZS5fYWN0aW9uc1t0eXBlXSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIHVua25vd24gbG9jYWwgYWN0aW9uIHR5cGU6IFwiICsgKGFyZ3MudHlwZSkgKyBcIiwgZ2xvYmFsIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaCh0eXBlLCBwYXlsb2FkKVxuICAgIH0sXG5cbiAgICBjb21taXQ6IG5vTmFtZXNwYWNlID8gc3RvcmUuY29tbWl0IDogZnVuY3Rpb24gKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpIHtcbiAgICAgIHZhciBhcmdzID0gdW5pZnlPYmplY3RTdHlsZShfdHlwZSwgX3BheWxvYWQsIF9vcHRpb25zKTtcbiAgICAgIHZhciBwYXlsb2FkID0gYXJncy5wYXlsb2FkO1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmdzLm9wdGlvbnM7XG4gICAgICB2YXIgdHlwZSA9IGFyZ3MudHlwZTtcblxuICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnJvb3QpIHtcbiAgICAgICAgdHlwZSA9IG5hbWVzcGFjZSArIHR5cGU7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzdG9yZS5fbXV0YXRpb25zW3R5cGVdKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBsb2NhbCBtdXRhdGlvbiB0eXBlOiBcIiArIChhcmdzLnR5cGUpICsgXCIsIGdsb2JhbCB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdG9yZS5jb21taXQodHlwZSwgcGF5bG9hZCwgb3B0aW9ucyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIGdldHRlcnMgYW5kIHN0YXRlIG9iamVjdCBtdXN0IGJlIGdvdHRlbiBsYXppbHlcbiAgLy8gYmVjYXVzZSB0aGV5IHdpbGwgYmUgY2hhbmdlZCBieSB2bSB1cGRhdGVcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMobG9jYWwsIHtcbiAgICBnZXR0ZXJzOiB7XG4gICAgICBnZXQ6IG5vTmFtZXNwYWNlXG4gICAgICAgID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmUuZ2V0dGVyczsgfVxuICAgICAgICA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1ha2VMb2NhbEdldHRlcnMoc3RvcmUsIG5hbWVzcGFjZSk7IH1cbiAgICB9LFxuICAgIHN0YXRlOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldE5lc3RlZFN0YXRlKHN0b3JlLnN0YXRlLCBwYXRoKTsgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGxvY2FsXG59XG5cbmZ1bmN0aW9uIG1ha2VMb2NhbEdldHRlcnMgKHN0b3JlLCBuYW1lc3BhY2UpIHtcbiAgdmFyIGdldHRlcnNQcm94eSA9IHt9O1xuXG4gIHZhciBzcGxpdFBvcyA9IG5hbWVzcGFjZS5sZW5ndGg7XG4gIE9iamVjdC5rZXlzKHN0b3JlLmdldHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAvLyBza2lwIGlmIHRoZSB0YXJnZXQgZ2V0dGVyIGlzIG5vdCBtYXRjaCB0aGlzIG5hbWVzcGFjZVxuICAgIGlmICh0eXBlLnNsaWNlKDAsIHNwbGl0UG9zKSAhPT0gbmFtZXNwYWNlKSB7IHJldHVybiB9XG5cbiAgICAvLyBleHRyYWN0IGxvY2FsIGdldHRlciB0eXBlXG4gICAgdmFyIGxvY2FsVHlwZSA9IHR5cGUuc2xpY2Uoc3BsaXRQb3MpO1xuXG4gICAgLy8gQWRkIGEgcG9ydCB0byB0aGUgZ2V0dGVycyBwcm94eS5cbiAgICAvLyBEZWZpbmUgYXMgZ2V0dGVyIHByb3BlcnR5IGJlY2F1c2VcbiAgICAvLyB3ZSBkbyBub3Qgd2FudCB0byBldmFsdWF0ZSB0aGUgZ2V0dGVycyBpbiB0aGlzIHRpbWUuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdldHRlcnNQcm94eSwgbG9jYWxUeXBlLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLmdldHRlcnNbdHlwZV07IH0sXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBnZXR0ZXJzUHJveHlcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJNdXRhdGlvbiAoc3RvcmUsIHR5cGUsIGhhbmRsZXIsIGxvY2FsKSB7XG4gIHZhciBlbnRyeSA9IHN0b3JlLl9tdXRhdGlvbnNbdHlwZV0gfHwgKHN0b3JlLl9tdXRhdGlvbnNbdHlwZV0gPSBbXSk7XG4gIGVudHJ5LnB1c2goZnVuY3Rpb24gd3JhcHBlZE11dGF0aW9uSGFuZGxlciAocGF5bG9hZCkge1xuICAgIGhhbmRsZXIuY2FsbChzdG9yZSwgbG9jYWwuc3RhdGUsIHBheWxvYWQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJBY3Rpb24gKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCkge1xuICB2YXIgZW50cnkgPSBzdG9yZS5fYWN0aW9uc1t0eXBlXSB8fCAoc3RvcmUuX2FjdGlvbnNbdHlwZV0gPSBbXSk7XG4gIGVudHJ5LnB1c2goZnVuY3Rpb24gd3JhcHBlZEFjdGlvbkhhbmRsZXIgKHBheWxvYWQsIGNiKSB7XG4gICAgdmFyIHJlcyA9IGhhbmRsZXIuY2FsbChzdG9yZSwge1xuICAgICAgZGlzcGF0Y2g6IGxvY2FsLmRpc3BhdGNoLFxuICAgICAgY29tbWl0OiBsb2NhbC5jb21taXQsXG4gICAgICBnZXR0ZXJzOiBsb2NhbC5nZXR0ZXJzLFxuICAgICAgc3RhdGU6IGxvY2FsLnN0YXRlLFxuICAgICAgcm9vdEdldHRlcnM6IHN0b3JlLmdldHRlcnMsXG4gICAgICByb290U3RhdGU6IHN0b3JlLnN0YXRlXG4gICAgfSwgcGF5bG9hZCwgY2IpO1xuICAgIGlmICghaXNQcm9taXNlKHJlcykpIHtcbiAgICAgIHJlcyA9IFByb21pc2UucmVzb2x2ZShyZXMpO1xuICAgIH1cbiAgICBpZiAoc3RvcmUuX2RldnRvb2xIb29rKSB7XG4gICAgICByZXR1cm4gcmVzLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgc3RvcmUuX2RldnRvb2xIb29rLmVtaXQoJ3Z1ZXg6ZXJyb3InLCBlcnIpO1xuICAgICAgICB0aHJvdyBlcnJcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXNcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZWdpc3RlckdldHRlciAoc3RvcmUsIHR5cGUsIHJhd0dldHRlciwgbG9jYWwpIHtcbiAgaWYgKHN0b3JlLl93cmFwcGVkR2V0dGVyc1t0eXBlXSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSBkdXBsaWNhdGUgZ2V0dGVyIGtleTogXCIgKyB0eXBlKSk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG4gIHN0b3JlLl93cmFwcGVkR2V0dGVyc1t0eXBlXSA9IGZ1bmN0aW9uIHdyYXBwZWRHZXR0ZXIgKHN0b3JlKSB7XG4gICAgcmV0dXJuIHJhd0dldHRlcihcbiAgICAgIGxvY2FsLnN0YXRlLCAvLyBsb2NhbCBzdGF0ZVxuICAgICAgbG9jYWwuZ2V0dGVycywgLy8gbG9jYWwgZ2V0dGVyc1xuICAgICAgc3RvcmUuc3RhdGUsIC8vIHJvb3Qgc3RhdGVcbiAgICAgIHN0b3JlLmdldHRlcnMgLy8gcm9vdCBnZXR0ZXJzXG4gICAgKVxuICB9O1xufVxuXG5mdW5jdGlvbiBlbmFibGVTdHJpY3RNb2RlIChzdG9yZSkge1xuICBzdG9yZS5fdm0uJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEuJCRzdGF0ZSB9LCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGFzc2VydChzdG9yZS5fY29tbWl0dGluZywgXCJEbyBub3QgbXV0YXRlIHZ1ZXggc3RvcmUgc3RhdGUgb3V0c2lkZSBtdXRhdGlvbiBoYW5kbGVycy5cIik7XG4gICAgfVxuICB9LCB7IGRlZXA6IHRydWUsIHN5bmM6IHRydWUgfSk7XG59XG5cbmZ1bmN0aW9uIGdldE5lc3RlZFN0YXRlIChzdGF0ZSwgcGF0aCkge1xuICByZXR1cm4gcGF0aC5sZW5ndGhcbiAgICA/IHBhdGgucmVkdWNlKGZ1bmN0aW9uIChzdGF0ZSwga2V5KSB7IHJldHVybiBzdGF0ZVtrZXldOyB9LCBzdGF0ZSlcbiAgICA6IHN0YXRlXG59XG5cbmZ1bmN0aW9uIHVuaWZ5T2JqZWN0U3R5bGUgKHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgaWYgKGlzT2JqZWN0KHR5cGUpICYmIHR5cGUudHlwZSkge1xuICAgIG9wdGlvbnMgPSBwYXlsb2FkO1xuICAgIHBheWxvYWQgPSB0eXBlO1xuICAgIHR5cGUgPSB0eXBlLnR5cGU7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydCh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycsIChcIkV4cGVjdHMgc3RyaW5nIGFzIHRoZSB0eXBlLCBidXQgZm91bmQgXCIgKyAodHlwZW9mIHR5cGUpICsgXCIuXCIpKTtcbiAgfVxuXG4gIHJldHVybiB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQsIG9wdGlvbnM6IG9wdGlvbnMgfVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsIChfVnVlKSB7XG4gIGlmIChWdWUgJiYgX1Z1ZSA9PT0gVnVlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICdbdnVleF0gYWxyZWFkeSBpbnN0YWxsZWQuIFZ1ZS51c2UoVnVleCkgc2hvdWxkIGJlIGNhbGxlZCBvbmx5IG9uY2UuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cbiAgVnVlID0gX1Z1ZTtcbiAgYXBwbHlNaXhpbihWdWUpO1xufVxuXG52YXIgbWFwU3RhdGUgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgc3RhdGVzKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgbm9ybWFsaXplTWFwKHN0YXRlcykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZFN0YXRlICgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IHRoaXMuJHN0b3JlLnN0YXRlO1xuICAgICAgdmFyIGdldHRlcnMgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzO1xuICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgbW9kdWxlID0gZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBTdGF0ZScsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUgPSBtb2R1bGUuY29udGV4dC5zdGF0ZTtcbiAgICAgICAgZ2V0dGVycyA9IG1vZHVsZS5jb250ZXh0LmdldHRlcnM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHZhbC5jYWxsKHRoaXMsIHN0YXRlLCBnZXR0ZXJzKVxuICAgICAgICA6IHN0YXRlW3ZhbF1cbiAgICB9O1xuICAgIC8vIG1hcmsgdnVleCBnZXR0ZXIgZm9yIGRldnRvb2xzXG4gICAgcmVzW2tleV0udnVleCA9IHRydWU7XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxudmFyIG1hcE11dGF0aW9ucyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBtdXRhdGlvbnMpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBub3JtYWxpemVNYXAobXV0YXRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHJlc1trZXldID0gZnVuY3Rpb24gbWFwcGVkTXV0YXRpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIHZhciBjb21taXQgPSB0aGlzLiRzdG9yZS5jb21taXQ7XG4gICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcE11dGF0aW9ucycsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgY29tbWl0ID0gbW9kdWxlLmNvbnRleHQuY29tbWl0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWwuYXBwbHkodGhpcywgW2NvbW1pdF0uY29uY2F0KGFyZ3MpKVxuICAgICAgICA6IGNvbW1pdC5hcHBseSh0aGlzLiRzdG9yZSwgW3ZhbF0uY29uY2F0KGFyZ3MpKVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxudmFyIG1hcEdldHRlcnMgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgZ2V0dGVycykge1xuICB2YXIgcmVzID0ge307XG4gIG5vcm1hbGl6ZU1hcChnZXR0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICB2YXIgdmFsID0gcmVmLnZhbDtcblxuICAgIHZhbCA9IG5hbWVzcGFjZSArIHZhbDtcbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZEdldHRlciAoKSB7XG4gICAgICBpZiAobmFtZXNwYWNlICYmICFnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcEdldHRlcnMnLCBuYW1lc3BhY2UpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgISh2YWwgaW4gdGhpcy4kc3RvcmUuZ2V0dGVycykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBnZXR0ZXI6IFwiICsgdmFsKSk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnNbdmFsXVxuICAgIH07XG4gICAgLy8gbWFyayB2dWV4IGdldHRlciBmb3IgZGV2dG9vbHNcbiAgICByZXNba2V5XS52dWV4ID0gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG52YXIgbWFwQWN0aW9ucyA9IG5vcm1hbGl6ZU5hbWVzcGFjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBhY3Rpb25zKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgbm9ybWFsaXplTWFwKGFjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRBY3Rpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIHZhciBkaXNwYXRjaCA9IHRoaXMuJHN0b3JlLmRpc3BhdGNoO1xuICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgbW9kdWxlID0gZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBBY3Rpb25zJywgbmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKCFtb2R1bGUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBkaXNwYXRjaCA9IG1vZHVsZS5jb250ZXh0LmRpc3BhdGNoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWwuYXBwbHkodGhpcywgW2Rpc3BhdGNoXS5jb25jYXQoYXJncykpXG4gICAgICAgIDogZGlzcGF0Y2guYXBwbHkodGhpcy4kc3RvcmUsIFt2YWxdLmNvbmNhdChhcmdzKSlcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbnZhciBjcmVhdGVOYW1lc3BhY2VkSGVscGVycyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UpIHsgcmV0dXJuICh7XG4gIG1hcFN0YXRlOiBtYXBTdGF0ZS5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcEdldHRlcnM6IG1hcEdldHRlcnMuYmluZChudWxsLCBuYW1lc3BhY2UpLFxuICBtYXBNdXRhdGlvbnM6IG1hcE11dGF0aW9ucy5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcEFjdGlvbnM6IG1hcEFjdGlvbnMuYmluZChudWxsLCBuYW1lc3BhY2UpXG59KTsgfTtcblxuZnVuY3Rpb24gbm9ybWFsaXplTWFwIChtYXApIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkobWFwKVxuICAgID8gbWFwLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAoeyBrZXk6IGtleSwgdmFsOiBrZXkgfSk7IH0pXG4gICAgOiBPYmplY3Qua2V5cyhtYXApLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAoeyBrZXk6IGtleSwgdmFsOiBtYXBba2V5XSB9KTsgfSlcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplTmFtZXNwYWNlIChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWFwKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICBtYXAgPSBuYW1lc3BhY2U7XG4gICAgICBuYW1lc3BhY2UgPSAnJztcbiAgICB9IGVsc2UgaWYgKG5hbWVzcGFjZS5jaGFyQXQobmFtZXNwYWNlLmxlbmd0aCAtIDEpICE9PSAnLycpIHtcbiAgICAgIG5hbWVzcGFjZSArPSAnLyc7XG4gICAgfVxuICAgIHJldHVybiBmbihuYW1lc3BhY2UsIG1hcClcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRNb2R1bGVCeU5hbWVzcGFjZSAoc3RvcmUsIGhlbHBlciwgbmFtZXNwYWNlKSB7XG4gIHZhciBtb2R1bGUgPSBzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcFtuYW1lc3BhY2VdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhbW9kdWxlKSB7XG4gICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gbW9kdWxlIG5hbWVzcGFjZSBub3QgZm91bmQgaW4gXCIgKyBoZWxwZXIgKyBcIigpOiBcIiArIG5hbWVzcGFjZSkpO1xuICB9XG4gIHJldHVybiBtb2R1bGVcbn1cblxudmFyIGluZGV4X2VzbSA9IHtcbiAgU3RvcmU6IFN0b3JlLFxuICBpbnN0YWxsOiBpbnN0YWxsLFxuICB2ZXJzaW9uOiAnMy4wLjEnLFxuICBtYXBTdGF0ZTogbWFwU3RhdGUsXG4gIG1hcE11dGF0aW9uczogbWFwTXV0YXRpb25zLFxuICBtYXBHZXR0ZXJzOiBtYXBHZXR0ZXJzLFxuICBtYXBBY3Rpb25zOiBtYXBBY3Rpb25zLFxuICBjcmVhdGVOYW1lc3BhY2VkSGVscGVyczogY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnNcbn07XG5cbmV4cG9ydCB7IFN0b3JlLCBpbnN0YWxsLCBtYXBTdGF0ZSwgbWFwTXV0YXRpb25zLCBtYXBHZXR0ZXJzLCBtYXBBY3Rpb25zLCBjcmVhdGVOYW1lc3BhY2VkSGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgaW5kZXhfZXNtO1xuIiwiXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cdGRhdGEoKSB7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR1bmlTaG93OiBmYWxzZSxcclxuXHRcdFx0bGVmdDogMFxyXG5cdFx0fVxyXG5cdH0sXHJcblx0Y29tcHV0ZWQ6IHtcclxuXHRcdG1vdmVMZWZ0KCkge1xyXG5cdFx0XHRyZXR1cm4gYHRyYW5zbGF0ZVgoJHt0aGlzLmxlZnR9cHgpYFxyXG5cdFx0fVxyXG5cdH0sXHJcblx0d2F0Y2g6IHtcclxuXHRcdHNob3cobmV3VmFsKSB7XHJcblx0XHRcdGlmICghdGhpcy5wb3NpdGlvbiB8fCBKU09OLnN0cmluZ2lmeSh0aGlzLnBvc2l0aW9uKSA9PT0gJ3t9JykgcmV0dXJuO1xyXG5cdFx0XHRpZiAodGhpcy5hdXRvQ2xvc2UpIHJldHVyblxyXG5cdFx0XHRpZiAobmV3VmFsKSB7XHJcblx0XHRcdFx0dGhpcy4kZW1pdCgnY2hhbmdlJywgdHJ1ZSlcclxuXHRcdFx0XHR0aGlzLm9wZW4oKVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRoaXMuJGVtaXQoJ2NoYW5nZScsIGZhbHNlKVxyXG5cdFx0XHRcdHRoaXMuY2xvc2UoKVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHRtb3VudGVkKCkge1xyXG5cdFx0dGhpcy5wb3NpdGlvbiA9IHt9XHJcblx0XHRpZiAodGhpcy5zd2lwZWFjdGlvbi5jaGlsZHJlbiAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHRoaXMuc3dpcGVhY3Rpb24uY2hpbGRyZW4ucHVzaCh0aGlzKVxyXG5cdFx0fVxyXG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdHRoaXMuZ2V0U2VsZWN0b3JRdWVyeSgpXHJcblx0XHR9LCAxMDApXHJcblx0fSxcclxuXHRiZWZvcmVEZXN0b3koKSB7XHJcblx0XHR0aGlzLnN3aXBlYWN0aW9uLmNoaWxkcmVuLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XHJcblx0XHRcdGlmIChpdGVtID09PSB0aGlzKSB7XHJcblx0XHRcdFx0dGhpcy5zd2lwZWFjdGlvbi5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpXHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblx0fSxcclxuXHRtZXRob2RzOiB7XHJcblx0XHRvbkNsaWNrKGluZGV4LCBpdGVtKSB7XHJcblx0XHRcdHRoaXMuJGVtaXQoJ2NsaWNrJywge1xyXG5cdFx0XHRcdGNvbnRlbnQ6IGl0ZW0sXHJcblx0XHRcdFx0aW5kZXhcclxuXHRcdFx0fSlcclxuXHRcdFx0dGhpcy5jbG9zZSgpXHJcblx0XHR9LFxyXG5cdFx0dG91Y2hzdGFydChlKSB7XHJcblx0XHRcdGNvbnN0IHtcclxuXHRcdFx0XHRwYWdlWFxyXG5cdFx0XHR9ID0gZS50b3VjaGVzWzBdXHJcblx0XHRcdGlmICh0aGlzLmRpc2FibGVkKSByZXR1cm5cclxuXHRcdFx0Y29uc3QgbGVmdCA9IHRoaXMucG9zaXRpb24uY29udGVudC5sZWZ0XHJcblx0XHRcdGlmICh0aGlzLmF1dG9DbG9zZSkge1xyXG5cdFx0XHRcdHRoaXMuc3dpcGVhY3Rpb24uY2xvc2VPdGhlcih0aGlzKVxyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMud2lkdGggPSBwYWdlWCAtIGxlZnRcclxuXHRcdFx0aWYgKHRoaXMuaXNvcGVuKSByZXR1cm5cclxuXHRcdFx0aWYgKHRoaXMudW5pU2hvdykge1xyXG5cdFx0XHRcdHRoaXMudW5pU2hvdyA9IGZhbHNlXHJcblx0XHRcdFx0dGhpcy5pc29wZW4gPSB0cnVlXHJcblx0XHRcdFx0dGhpcy5vcGVubGVmdCA9IHRoaXMubGVmdCArIHRoaXMucG9zaXRpb24uYnV0dG9uLndpZHRoXHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHR0b3VjaG1vdmUoZSwgaW5kZXgpIHtcclxuXHRcdFx0aWYgKHRoaXMuZGlzYWJsZWQpIHJldHVyblxyXG5cdFx0XHRjb25zdCB7XHJcblx0XHRcdFx0cGFnZVhcclxuXHRcdFx0fSA9IGUudG91Y2hlc1swXVxyXG5cdFx0XHR0aGlzLnNldFBvc2l0aW9uKHBhZ2VYKVxyXG5cdFx0fSxcclxuXHRcdHRvdWNoZW5kKCkge1xyXG5cdFx0XHRpZiAodGhpcy5kaXNhYmxlZCkgcmV0dXJuXHJcblx0XHRcdGlmICh0aGlzLmlzb3Blbikge1xyXG5cdFx0XHRcdHRoaXMubW92ZSh0aGlzLm9wZW5sZWZ0LCAwKVxyXG5cdFx0XHRcdHJldHVyblxyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMubW92ZSh0aGlzLmxlZnQsIC00MClcclxuXHRcdH0sXHJcblx0XHRzZXRQb3NpdGlvbih4LCB5KSB7XHJcblx0XHRcdGlmICghdGhpcy5wb3NpdGlvbi5idXR0b24ud2lkdGgpIHtcclxuXHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0fVxyXG5cdFx0XHQvLyB0aGlzLmxlZnQgPSB4IC0gdGhpcy53aWR0aFxyXG5cdFx0XHR0aGlzLnNldFZhbHVlKHggLSB0aGlzLndpZHRoKVxyXG5cdFx0fSxcclxuXHRcdHNldFZhbHVlKHZhbHVlKSB7XHJcblx0XHRcdC8vIOiuvue9ruacgOWkp+acgOWwj+WAvFxyXG5cdFx0XHR0aGlzLmxlZnQgPSBNYXRoLm1heCgtdGhpcy5wb3NpdGlvbi5idXR0b24ud2lkdGgsIE1hdGgubWluKHBhcnNlSW50KHZhbHVlKSwgMCkpXHJcblx0XHRcdHRoaXMucG9zaXRpb24uY29udGVudC5sZWZ0ID0gdGhpcy5sZWZ0XHJcblx0XHRcdGlmICh0aGlzLmlzb3Blbikge1xyXG5cdFx0XHRcdHRoaXMub3BlbmxlZnQgPSB0aGlzLmxlZnQgKyB0aGlzLnBvc2l0aW9uLmJ1dHRvbi53aWR0aFxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0bW92ZShsZWZ0LCB2YWx1ZSkge1xyXG5cdFx0XHRpZiAobGVmdCA+PSB2YWx1ZSkge1xyXG5cdFx0XHRcdHRoaXMuJGVtaXQoJ2NoYW5nZScsIGZhbHNlKVxyXG5cdFx0XHRcdHRoaXMuY2xvc2UoKVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRoaXMuJGVtaXQoJ2NoYW5nZScsIHRydWUpXHJcblx0XHRcdFx0dGhpcy5vcGVuKClcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdG9wZW4oKSB7XHJcblx0XHRcdHRoaXMudW5pU2hvdyA9IHRydWVcclxuXHRcdFx0dGhpcy5sZWZ0ID0gLXRoaXMucG9zaXRpb24uYnV0dG9uLndpZHRoXHJcblx0XHRcdHRoaXMuc2V0VmFsdWUoLXRoaXMucG9zaXRpb24uYnV0dG9uLndpZHRoKVxyXG5cdFx0fSxcclxuXHRcdGNsb3NlKCkge1xyXG5cdFx0XHR0aGlzLnVuaVNob3cgPSB0cnVlXHJcblx0XHRcdHRoaXMuc2V0VmFsdWUoMClcclxuXHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0dGhpcy51bmlTaG93ID0gZmFsc2VcclxuXHRcdFx0XHR0aGlzLmlzb3BlbiA9IGZhbHNlXHJcblx0XHRcdH0sIDMwMClcclxuXHRcdH0sXHJcblx0XHRnZXRTZWxlY3RvclF1ZXJ5KCkge1xyXG5cclxuXHRcdFx0Y29uc3Qgdmlld3MgPSB1bmkuY3JlYXRlU2VsZWN0b3JRdWVyeSgpLmluKHRoaXMpO1xyXG5cdFx0XHR2aWV3c1xyXG5cdFx0XHRcdC5zZWxlY3RBbGwoJy5zZWxlY3Rvci1xdWVyeS1ob2NrJylcclxuXHRcdFx0XHQuYm91bmRpbmdDbGllbnRSZWN0KGRhdGEgPT4ge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coZGF0YSlcclxuXHRcdFx0XHRcdHRoaXMucG9zaXRpb24uY29udGVudCA9IGRhdGFbMV1cclxuXHRcdFx0XHRcdHRoaXMucG9zaXRpb24uYnV0dG9uID0gZGF0YVswXVxyXG5cdFx0XHRcdFx0aWYgKHRoaXMuYXV0b0Nsb3NlKSByZXR1cm5cclxuXHRcdFx0XHRcdGlmICh0aGlzLnNob3cpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5vcGVuKClcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuY2xvc2UoKVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0LmV4ZWMoKVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblx0XHR9XHJcblx0fVxyXG59XHJcbiIsIi8qIVxuICogVnVlLmpzIHYyLjYuMTFcbiAqIChjKSAyMDE0LTIwMjAgRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuLyogICovXG5cbnZhciBlbXB0eU9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuXG4vLyBUaGVzZSBoZWxwZXJzIHByb2R1Y2UgYmV0dGVyIFZNIGNvZGUgaW4gSlMgZW5naW5lcyBkdWUgdG8gdGhlaXJcbi8vIGV4cGxpY2l0bmVzcyBhbmQgZnVuY3Rpb24gaW5saW5pbmcuXG5mdW5jdGlvbiBpc1VuZGVmICh2KSB7XG4gIHJldHVybiB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc0RlZiAodikge1xuICByZXR1cm4gdiAhPT0gdW5kZWZpbmVkICYmIHYgIT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNUcnVlICh2KSB7XG4gIHJldHVybiB2ID09PSB0cnVlXG59XG5cbmZ1bmN0aW9uIGlzRmFsc2UgKHYpIHtcbiAgcmV0dXJuIHYgPT09IGZhbHNlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgcHJpbWl0aXZlLlxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSAodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJ1xuICApXG59XG5cbi8qKlxuICogUXVpY2sgb2JqZWN0IGNoZWNrIC0gdGhpcyBpcyBwcmltYXJpbHkgdXNlZCB0byB0ZWxsXG4gKiBPYmplY3RzIGZyb20gcHJpbWl0aXZlIHZhbHVlcyB3aGVuIHdlIGtub3cgdGhlIHZhbHVlXG4gKiBpcyBhIEpTT04tY29tcGxpYW50IHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG4vKipcbiAqIEdldCB0aGUgcmF3IHR5cGUgc3RyaW5nIG9mIGEgdmFsdWUsIGUuZy4sIFtvYmplY3QgT2JqZWN0XS5cbiAqL1xudmFyIF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmZ1bmN0aW9uIHRvUmF3VHlwZSAodmFsdWUpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSlcbn1cblxuLyoqXG4gKiBTdHJpY3Qgb2JqZWN0IHR5cGUgY2hlY2suIE9ubHkgcmV0dXJucyB0cnVlXG4gKiBmb3IgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nXG59XG5cbmZ1bmN0aW9uIGlzUmVnRXhwICh2KSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2KSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWwgaXMgYSB2YWxpZCBhcnJheSBpbmRleC5cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZEFycmF5SW5kZXggKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQoU3RyaW5nKHZhbCkpO1xuICByZXR1cm4gbiA+PSAwICYmIE1hdGguZmxvb3IobikgPT09IG4gJiYgaXNGaW5pdGUodmFsKVxufVxuXG5mdW5jdGlvbiBpc1Byb21pc2UgKHZhbCkge1xuICByZXR1cm4gKFxuICAgIGlzRGVmKHZhbCkgJiZcbiAgICB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdmFsLmNhdGNoID09PSAnZnVuY3Rpb24nXG4gIClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgdG8gYSBzdHJpbmcgdGhhdCBpcyBhY3R1YWxseSByZW5kZXJlZC5cbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcgKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGxcbiAgICA/ICcnXG4gICAgOiBBcnJheS5pc0FycmF5KHZhbCkgfHwgKGlzUGxhaW5PYmplY3QodmFsKSAmJiB2YWwudG9TdHJpbmcgPT09IF90b1N0cmluZylcbiAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCBudWxsLCAyKVxuICAgICAgOiBTdHJpbmcodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gaW5wdXQgdmFsdWUgdG8gYSBudW1iZXIgZm9yIHBlcnNpc3RlbmNlLlxuICogSWYgdGhlIGNvbnZlcnNpb24gZmFpbHMsIHJldHVybiBvcmlnaW5hbCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG5cbn1cblxuLyoqXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcbiAqIGlzIGluIHRoYXQgbWFwLlxuICovXG5mdW5jdGlvbiBtYWtlTWFwIChcbiAgc3RyLFxuICBleHBlY3RzTG93ZXJDYXNlXG4pIHtcbiAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2VcbiAgICA/IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWwudG9Mb3dlckNhc2UoKV07IH1cbiAgICA6IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWxdOyB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0YWcgaXMgYSBidWlsdC1pbiB0YWcuXG4gKi9cbnZhciBpc0J1aWx0SW5UYWcgPSBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcsIHRydWUpO1xuXG4vKipcbiAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZS5cbiAqL1xudmFyIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUgPSBtYWtlTWFwKCdrZXkscmVmLHNsb3Qsc2xvdC1zY29wZSxpcycpO1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpdGVtIGZyb20gYW4gYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZSAoYXJyLCBpdGVtKSB7XG4gIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyB0aGUgcHJvcGVydHkuXG4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBoYXNPd24gKG9iaiwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FjaGVkIChmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gKGZ1bmN0aW9uIGNhY2hlZEZuIChzdHIpIHtcbiAgICB2YXIgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcbiAgfSlcbn1cblxuLyoqXG4gKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxpbWl0ZWQgc3RyaW5nLlxuICovXG52YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbnZhciBjYW1lbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCBmdW5jdGlvbiAoXywgYykgeyByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnOyB9KVxufSk7XG5cbi8qKlxuICogQ2FwaXRhbGl6ZSBhIHN0cmluZy5cbiAqL1xudmFyIGNhcGl0YWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpXG59KTtcblxuLyoqXG4gKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLlxuICovXG52YXIgaHlwaGVuYXRlUkUgPSAvXFxCKFtBLVpdKS9nO1xudmFyIGh5cGhlbmF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKClcbn0pO1xuXG4vKipcbiAqIFNpbXBsZSBiaW5kIHBvbHlmaWxsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3Qgc3VwcG9ydCBpdCxcbiAqIGUuZy4sIFBoYW50b21KUyAxLnguIFRlY2huaWNhbGx5LCB3ZSBkb24ndCBuZWVkIHRoaXMgYW55bW9yZVxuICogc2luY2UgbmF0aXZlIGJpbmQgaXMgbm93IHBlcmZvcm1hbnQgZW5vdWdoIGluIG1vc3QgYnJvd3NlcnMuXG4gKiBCdXQgcmVtb3ZpbmcgaXQgd291bGQgbWVhbiBicmVha2luZyBjb2RlIHRoYXQgd2FzIGFibGUgdG8gcnVuIGluXG4gKiBQaGFudG9tSlMgMS54LCBzbyB0aGlzIG11c3QgYmUga2VwdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gcG9seWZpbGxCaW5kIChmbiwgY3R4KSB7XG4gIGZ1bmN0aW9uIGJvdW5kRm4gKGEpIHtcbiAgICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIGxcbiAgICAgID8gbCA+IDFcbiAgICAgICAgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cylcbiAgICAgICAgOiBmbi5jYWxsKGN0eCwgYSlcbiAgICAgIDogZm4uY2FsbChjdHgpXG4gIH1cblxuICBib3VuZEZuLl9sZW5ndGggPSBmbi5sZW5ndGg7XG4gIHJldHVybiBib3VuZEZuXG59XG5cbmZ1bmN0aW9uIG5hdGl2ZUJpbmQgKGZuLCBjdHgpIHtcbiAgcmV0dXJuIGZuLmJpbmQoY3R4KVxufVxuXG52YXIgYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG4gID8gbmF0aXZlQmluZFxuICA6IHBvbHlmaWxsQmluZDtcblxuLyoqXG4gKiBDb252ZXJ0IGFuIEFycmF5LWxpa2Ugb2JqZWN0IHRvIGEgcmVhbCBBcnJheS5cbiAqL1xuZnVuY3Rpb24gdG9BcnJheSAobGlzdCwgc3RhcnQpIHtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICB2YXIgaSA9IGxpc3QubGVuZ3RoIC0gc3RhcnQ7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0pIHtcbiAgICByZXRbaV0gPSBsaXN0W2kgKyBzdGFydF07XG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG4vKipcbiAqIE1peCBwcm9wZXJ0aWVzIGludG8gdGFyZ2V0IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kICh0bywgX2Zyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIF9mcm9tKSB7XG4gICAgdG9ba2V5XSA9IF9mcm9tW2tleV07XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogTWVyZ2UgYW4gQXJyYXkgb2YgT2JqZWN0cyBpbnRvIGEgc2luZ2xlIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gdG9PYmplY3QgKGFycikge1xuICB2YXIgcmVzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFycltpXSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXJyW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFBlcmZvcm0gbm8gb3BlcmF0aW9uLlxuICogU3R1YmJpbmcgYXJncyB0byBtYWtlIEZsb3cgaGFwcHkgd2l0aG91dCBsZWF2aW5nIHVzZWxlc3MgdHJhbnNwaWxlZCBjb2RlXG4gKiB3aXRoIC4uLnJlc3QgKGh0dHBzOi8vZmxvdy5vcmcvYmxvZy8yMDE3LzA1LzA3L1N0cmljdC1GdW5jdGlvbi1DYWxsLUFyaXR5LykuXG4gKi9cbmZ1bmN0aW9uIG5vb3AgKGEsIGIsIGMpIHt9XG5cbi8qKlxuICogQWx3YXlzIHJldHVybiBmYWxzZS5cbiAqL1xudmFyIG5vID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsgcmV0dXJuIGZhbHNlOyB9O1xuXG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUmV0dXJuIHRoZSBzYW1lIHZhbHVlLlxuICovXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTtcblxuLyoqXG4gKiBDaGVjayBpZiB0d28gdmFsdWVzIGFyZSBsb29zZWx5IGVxdWFsIC0gdGhhdCBpcyxcbiAqIGlmIHRoZXkgYXJlIHBsYWluIG9iamVjdHMsIGRvIHRoZXkgaGF2ZSB0aGUgc2FtZSBzaGFwZT9cbiAqL1xuZnVuY3Rpb24gbG9vc2VFcXVhbCAoYSwgYikge1xuICBpZiAoYSA9PT0gYikgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpc09iamVjdEEgPSBpc09iamVjdChhKTtcbiAgdmFyIGlzT2JqZWN0QiA9IGlzT2JqZWN0KGIpO1xuICBpZiAoaXNPYmplY3RBICYmIGlzT2JqZWN0Qikge1xuICAgIHRyeSB7XG4gICAgICB2YXIgaXNBcnJheUEgPSBBcnJheS5pc0FycmF5KGEpO1xuICAgICAgdmFyIGlzQXJyYXlCID0gQXJyYXkuaXNBcnJheShiKTtcbiAgICAgIGlmIChpc0FycmF5QSAmJiBpc0FycmF5Qikge1xuICAgICAgICByZXR1cm4gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChlLCBiW2ldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmIChhIGluc3RhbmNlb2YgRGF0ZSAmJiBiIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gYS5nZXRUaW1lKCkgPT09IGIuZ2V0VGltZSgpXG4gICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgZmlyc3QgaW5kZXggYXQgd2hpY2ggYSBsb29zZWx5IGVxdWFsIHZhbHVlIGNhbiBiZVxuICogZm91bmQgaW4gdGhlIGFycmF5IChpZiB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdCwgdGhlIGFycmF5IG11c3RcbiAqIGNvbnRhaW4gYW4gb2JqZWN0IG9mIHRoZSBzYW1lIHNoYXBlKSwgb3IgLTEgaWYgaXQgaXMgbm90IHByZXNlbnQuXG4gKi9cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZiAoYXJyLCB2YWwpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobG9vc2VFcXVhbChhcnJbaV0sIHZhbCkpIHsgcmV0dXJuIGkgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG4vKipcbiAqIEVuc3VyZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmx5IG9uY2UuXG4gKi9cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBBU1NFVF9UWVBFUyA9IFtcbiAgJ2NvbXBvbmVudCcsXG4gICdkaXJlY3RpdmUnLFxuICAnZmlsdGVyJ1xuXTtcblxudmFyIExJRkVDWUNMRV9IT09LUyA9IFtcbiAgJ2JlZm9yZUNyZWF0ZScsXG4gICdjcmVhdGVkJyxcbiAgJ2JlZm9yZU1vdW50JyxcbiAgJ21vdW50ZWQnLFxuICAnYmVmb3JlVXBkYXRlJyxcbiAgJ3VwZGF0ZWQnLFxuICAnYmVmb3JlRGVzdHJveScsXG4gICdkZXN0cm95ZWQnLFxuICAnYWN0aXZhdGVkJyxcbiAgJ2RlYWN0aXZhdGVkJyxcbiAgJ2Vycm9yQ2FwdHVyZWQnLFxuICAnc2VydmVyUHJlZmV0Y2gnXG5dO1xuXG4vKiAgKi9cblxuXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICovXG4gIHByb2R1Y3Rpb25UaXA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byByZWNvcmQgcGVyZlxuICAgKi9cbiAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBFcnJvciBoYW5kbGVyIGZvciB3YXRjaGVyIGVycm9yc1xuICAgKi9cbiAgZXJyb3JIYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnNcbiAgICovXG4gIHdhcm5IYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcbiAgICovXG4gIGlnbm9yZWRFbGVtZW50czogW10sXG5cbiAgLyoqXG4gICAqIEN1c3RvbSB1c2VyIGtleSBhbGlhc2VzIGZvciB2LW9uXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAga2V5Q29kZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnRcbiAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRBdHRyOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgYW4gdW5rbm93biBlbGVtZW50LlxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBpc1Vua25vd25FbGVtZW50OiBubyxcblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgKi9cbiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBtdXN0VXNlUHJvcDogbm8sXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gdXBkYXRlcyBhc3luY2hyb25vdXNseS4gSW50ZW5kZWQgdG8gYmUgdXNlZCBieSBWdWUgVGVzdCBVdGlsc1xuICAgKiBUaGlzIHdpbGwgc2lnbmlmaWNhbnRseSByZWR1Y2UgcGVyZm9ybWFuY2UgaWYgc2V0IHRvIGZhbHNlLlxuICAgKi9cbiAgYXN5bmM6IHRydWUsXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IExJRkVDWUNMRV9IT09LU1xufSk7XG5cbi8qICAqL1xuXG4vKipcbiAqIHVuaWNvZGUgbGV0dGVycyB1c2VkIGZvciBwYXJzaW5nIGh0bWwgdGFncywgY29tcG9uZW50IG5hbWVzIGFuZCBwcm9wZXJ0eSBwYXRocy5cbiAqIHVzaW5nIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNTMvc2VtYW50aWNzLXNjcmlwdGluZy5odG1sI3BvdGVudGlhbGN1c3RvbWVsZW1lbnRuYW1lXG4gKiBza2lwcGluZyBcXHUxMDAwMC1cXHVFRkZGRiBkdWUgdG8gaXQgZnJlZXppbmcgdXAgUGhhbnRvbUpTXG4gKi9cbnZhciB1bmljb2RlUmVnRXhwID0gL2EtekEtWlxcdTAwQjdcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDNGLVxcdTIwNDBcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkQvO1xuXG4vKipcbiAqIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoICQgb3IgX1xuICovXG5mdW5jdGlvbiBpc1Jlc2VydmVkIChzdHIpIHtcbiAgdmFyIGMgPSAoc3RyICsgJycpLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiBjID09PSAweDI0IHx8IGMgPT09IDB4NUZcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZGVmIChvYmosIGtleSwgdmFsLCBlbnVtZXJhYmxlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIHZhbHVlOiB2YWwsXG4gICAgZW51bWVyYWJsZTogISFlbnVtZXJhYmxlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBQYXJzZSBzaW1wbGUgcGF0aC5cbiAqL1xudmFyIGJhaWxSRSA9IG5ldyBSZWdFeHAoKFwiW15cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIi4kX1xcXFxkXVwiKSk7XG5mdW5jdGlvbiBwYXJzZVBhdGggKHBhdGgpIHtcbiAgaWYgKGJhaWxSRS50ZXN0KHBhdGgpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLicpO1xuICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghb2JqKSB7IHJldHVybiB9XG4gICAgICBvYmogPSBvYmpbc2VnbWVudHNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gb2JqXG4gIH1cbn1cblxuLyogICovXG5cbi8vIGNhbiB3ZSB1c2UgX19wcm90b19fP1xudmFyIGhhc1Byb3RvID0gJ19fcHJvdG9fXycgaW4ge307XG5cbi8vIEJyb3dzZXIgZW52aXJvbm1lbnQgc25pZmZpbmdcbnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbnZhciBpbldlZXggPSB0eXBlb2YgV1hFbnZpcm9ubWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgISFXWEVudmlyb25tZW50LnBsYXRmb3JtO1xudmFyIHdlZXhQbGF0Zm9ybSA9IGluV2VleCAmJiBXWEVudmlyb25tZW50LnBsYXRmb3JtLnRvTG93ZXJDYXNlKCk7XG52YXIgVUEgPSBpbkJyb3dzZXIgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbnZhciBpc0lFID0gVUEgJiYgL21zaWV8dHJpZGVudC8udGVzdChVQSk7XG52YXIgaXNJRTkgPSBVQSAmJiBVQS5pbmRleE9mKCdtc2llIDkuMCcpID4gMDtcbnZhciBpc0VkZ2UgPSBVQSAmJiBVQS5pbmRleE9mKCdlZGdlLycpID4gMDtcbnZhciBpc0FuZHJvaWQgPSAoVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMCkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2FuZHJvaWQnKTtcbnZhciBpc0lPUyA9IChVQSAmJiAvaXBob25lfGlwYWR8aXBvZHxpb3MvLnRlc3QoVUEpKSB8fCAod2VleFBsYXRmb3JtID09PSAnaW9zJyk7XG52YXIgaXNDaHJvbWUgPSBVQSAmJiAvY2hyb21lXFwvXFxkKy8udGVzdChVQSkgJiYgIWlzRWRnZTtcbnZhciBpc1BoYW50b21KUyA9IFVBICYmIC9waGFudG9tanMvLnRlc3QoVUEpO1xudmFyIGlzRkYgPSBVQSAmJiBVQS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pO1xuXG4vLyBGaXJlZm94IGhhcyBhIFwid2F0Y2hcIiBmdW5jdGlvbiBvbiBPYmplY3QucHJvdG90eXBlLi4uXG52YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoO1xuaWYgKGluQnJvd3Nlcikge1xuICB0cnkge1xuICAgIHZhciBvcHRzID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdHMsICdwYXNzaXZlJywgKHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgIH1cbiAgICB9KSk7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdC1wYXNzaXZlJywgbnVsbCwgb3B0cyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbi8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlZcbnZhciBfaXNTZXJ2ZXI7XG52YXIgaXNTZXJ2ZXJSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChfaXNTZXJ2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghaW5Ccm93c2VyICYmICFpbldlZXggJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGRldGVjdCBwcmVzZW5jZSBvZiB2dWUtc2VydmVyLXJlbmRlcmVyIGFuZCBhdm9pZFxuICAgICAgLy8gV2VicGFjayBzaGltbWluZyB0aGUgcHJvY2Vzc1xuICAgICAgX2lzU2VydmVyID0gZ2xvYmFsWydwcm9jZXNzJ10gJiYgZ2xvYmFsWydwcm9jZXNzJ10uZW52LlZVRV9FTlYgPT09ICdzZXJ2ZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICBfaXNTZXJ2ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9pc1NlcnZlclxufTtcblxuLy8gZGV0ZWN0IGRldnRvb2xzXG52YXIgZGV2dG9vbHMgPSBpbkJyb3dzZXIgJiYgd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBpc05hdGl2ZSAoQ3Rvcikge1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KEN0b3IudG9TdHJpbmcoKSlcbn1cblxudmFyIGhhc1N5bWJvbCA9XG4gIHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFN5bWJvbCkgJiZcbiAgdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFJlZmxlY3Qub3duS2V5cyk7XG5cbnZhciBfU2V0O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovIC8vICRmbG93LWRpc2FibGUtbGluZVxuaWYgKHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFNldCkpIHtcbiAgLy8gdXNlIG5hdGl2ZSBTZXQgd2hlbiBhdmFpbGFibGUuXG4gIF9TZXQgPSBTZXQ7XG59IGVsc2Uge1xuICAvLyBhIG5vbi1zdGFuZGFyZCBTZXQgcG9seWZpbGwgdGhhdCBvbmx5IHdvcmtzIHdpdGggcHJpbWl0aXZlIGtleXMuXG4gIF9TZXQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXQgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRba2V5XSA9PT0gdHJ1ZVxuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGtleSkge1xuICAgICAgdGhpcy5zZXRba2V5XSA9IHRydWU7XG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2V0O1xuICB9KCkpO1xufVxuXG4vKiAgKi9cblxudmFyIHdhcm4gPSBub29wO1xudmFyIHRpcCA9IG5vb3A7XG52YXIgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IChub29wKTsgLy8gd29yayBhcm91bmQgZmxvdyBjaGVja1xudmFyIGZvcm1hdENvbXBvbmVudE5hbWUgPSAobm9vcCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBoYXNDb25zb2xlID0gdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnO1xuICB2YXIgY2xhc3NpZnlSRSA9IC8oPzpefFstX10pKFxcdykvZztcbiAgdmFyIGNsYXNzaWZ5ID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gc3RyXG4gICAgLnJlcGxhY2UoY2xhc3NpZnlSRSwgZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudG9VcHBlckNhc2UoKTsgfSlcbiAgICAucmVwbGFjZSgvWy1fXS9nLCAnJyk7IH07XG5cbiAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgdmFyIHRyYWNlID0gdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnO1xuXG4gICAgaWYgKGNvbmZpZy53YXJuSGFuZGxlcikge1xuICAgICAgY29uZmlnLndhcm5IYW5kbGVyLmNhbGwobnVsbCwgbXNnLCB2bSwgdHJhY2UpO1xuICAgIH0gZWxzZSBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIltWdWUgd2Fybl06IFwiICsgbXNnICsgdHJhY2UpKTtcbiAgICB9XG4gIH07XG5cbiAgdGlwID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJbVnVlIHRpcF06IFwiICsgbXNnICsgKFxuICAgICAgICB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJydcbiAgICAgICkpO1xuICAgIH1cbiAgfTtcblxuICBmb3JtYXRDb21wb25lbnROYW1lID0gZnVuY3Rpb24gKHZtLCBpbmNsdWRlRmlsZSkge1xuICAgIGlmICh2bS4kcm9vdCA9PT0gdm0pIHtcbiAgICAgIGlmICh2bS4kb3B0aW9ucyAmJiB2bS4kb3B0aW9ucy5fX2ZpbGUpIHsgLy8gZml4ZWQgYnkgeHh4eHh4XG4gICAgICAgIHJldHVybiAoJycpICsgdm0uJG9wdGlvbnMuX19maWxlXG4gICAgICB9XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm07XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0gJiYgdm0uJG9wdGlvbnMubmFtZSAhPT0gJ1BhZ2VCb2R5Jykge1xuICAgICAgICBpZiAodHJlZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIGxhc3QgPSB0cmVlW3RyZWUubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKGxhc3QuY29uc3RydWN0b3IgPT09IHZtLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UrKztcbiAgICAgICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPiAwKSB7XG4gICAgICAgICAgICB0cmVlW3RyZWUubGVuZ3RoIC0gMV0gPSBbbGFzdCwgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlXTtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICF2bS4kb3B0aW9ucy5pc1Jlc2VydmVkICYmIHRyZWUucHVzaCh2bSk7XG4gICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnXFxuXFxuZm91bmQgaW5cXG5cXG4nICsgdHJlZVxuICAgICAgICAubWFwKGZ1bmN0aW9uICh2bSwgaSkgeyByZXR1cm4gKFwiXCIgKyAoaSA9PT0gMCA/ICctLS0+ICcgOiByZXBlYXQoJyAnLCA1ICsgaSAqIDIpKSArIChBcnJheS5pc0FycmF5KHZtKVxuICAgICAgICAgICAgPyAoKGZvcm1hdENvbXBvbmVudE5hbWUodm1bMF0pKSArIFwiLi4uIChcIiArICh2bVsxXSkgKyBcIiByZWN1cnNpdmUgY2FsbHMpXCIpXG4gICAgICAgICAgICA6IGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSk7IH0pXG4gICAgICAgIC5qb2luKCdcXG4nKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKFwiXFxuXFxuKGZvdW5kIGluIFwiICsgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiKVwiKVxuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQgPSAwO1xuXG4vKipcbiAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC5cbiAqL1xudmFyIERlcCA9IGZ1bmN0aW9uIERlcCAoKSB7XG4gIHRoaXMuaWQgPSB1aWQrKztcbiAgdGhpcy5zdWJzID0gW107XG59O1xuXG5EZXAucHJvdG90eXBlLmFkZFN1YiA9IGZ1bmN0aW9uIGFkZFN1YiAoc3ViKSB7XG4gIHRoaXMuc3Vicy5wdXNoKHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YiAoc3ViKSB7XG4gIHJlbW92ZSh0aGlzLnN1YnMsIHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIGlmIChEZXAuU2hhcmVkT2JqZWN0LnRhcmdldCkge1xuICAgIERlcC5TaGFyZWRPYmplY3QudGFyZ2V0LmFkZERlcCh0aGlzKTtcbiAgfVxufTtcblxuRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkgKCkge1xuICAvLyBzdGFiaWxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgLy8gc3VicyBhcmVuJ3Qgc29ydGVkIGluIHNjaGVkdWxlciBpZiBub3QgcnVubmluZyBhc3luY1xuICAgIC8vIHdlIG5lZWQgdG8gc29ydCB0aGVtIG5vdyB0byBtYWtlIHN1cmUgdGhleSBmaXJlIGluIGNvcnJlY3RcbiAgICAvLyBvcmRlclxuICAgIHN1YnMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyBUaGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4vLyBUaGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIG9ubHkgb25lIHdhdGNoZXJcbi8vIGNhbiBiZSBldmFsdWF0ZWQgYXQgYSB0aW1lLlxuLy8gZml4ZWQgYnkgeHh4eHh4IChudnVlIHNoYXJlZCB2dWV4KVxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbkRlcC5TaGFyZWRPYmplY3QgPSB7fTtcbkRlcC5TaGFyZWRPYmplY3QudGFyZ2V0ID0gbnVsbDtcbkRlcC5TaGFyZWRPYmplY3QudGFyZ2V0U3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gcHVzaFRhcmdldCAodGFyZ2V0KSB7XG4gIERlcC5TaGFyZWRPYmplY3QudGFyZ2V0U3RhY2sucHVzaCh0YXJnZXQpO1xuICBEZXAuU2hhcmVkT2JqZWN0LnRhcmdldCA9IHRhcmdldDtcbn1cblxuZnVuY3Rpb24gcG9wVGFyZ2V0ICgpIHtcbiAgRGVwLlNoYXJlZE9iamVjdC50YXJnZXRTdGFjay5wb3AoKTtcbiAgRGVwLlNoYXJlZE9iamVjdC50YXJnZXQgPSBEZXAuU2hhcmVkT2JqZWN0LnRhcmdldFN0YWNrW0RlcC5TaGFyZWRPYmplY3QudGFyZ2V0U3RhY2subGVuZ3RoIC0gMV07XG59XG5cbi8qICAqL1xuXG52YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIHRleHQsXG4gIGVsbSxcbiAgY29udGV4dCxcbiAgY29tcG9uZW50T3B0aW9ucyxcbiAgYXN5bmNGYWN0b3J5XG4pIHtcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgdGhpcy5lbG0gPSBlbG07XG4gIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuZm5Db250ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmF3ID0gZmFsc2U7XG4gIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gIHRoaXMuaXNPbmNlID0gZmFsc2U7XG4gIHRoaXMuYXN5bmNGYWN0b3J5ID0gYXN5bmNGYWN0b3J5O1xuICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXIgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgaWYgKCB0ZXh0ID09PSB2b2lkIDAgKSB0ZXh0ID0gJyc7XG5cbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gdGV4dDtcbiAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICByZXR1cm4gbm9kZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSlcbn1cblxuLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgLy8gIzc5NzVcbiAgICAvLyBjbG9uZSBjaGlsZHJlbiBhcnJheSB0byBhdm9pZCBtdXRhdGluZyBvcmlnaW5hbCBpbiBjYXNlIG9mIGNsb25pbmdcbiAgICAvLyBhIGNoaWxkLlxuICAgIHZub2RlLmNoaWxkcmVuICYmIHZub2RlLmNoaWxkcmVuLnNsaWNlKCksXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zLFxuICAgIHZub2RlLmFzeW5jRmFjdG9yeVxuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gIGNsb25lZC5mbkNvbnRleHQgPSB2bm9kZS5mbkNvbnRleHQ7XG4gIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7XG4gIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XG4gIGNsb25lZC5hc3luY01ldGEgPSB2bm9kZS5hc3luY01ldGE7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtcblxudmFyIG1ldGhvZHNUb1BhdGNoID0gW1xuICAncHVzaCcsXG4gICdwb3AnLFxuICAnc2hpZnQnLFxuICAndW5zaGlmdCcsXG4gICdzcGxpY2UnLFxuICAnc29ydCcsXG4gICdyZXZlcnNlJ1xuXTtcblxuLyoqXG4gKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHNcbiAqL1xubWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzXG4gKiB1cGRhdGUgY29tcHV0YXRpb24uXG4gKi9cbnZhciBzaG91bGRPYnNlcnZlID0gdHJ1ZTtcblxuZnVuY3Rpb24gdG9nZ2xlT2JzZXJ2aW5nICh2YWx1ZSkge1xuICBzaG91bGRPYnNlcnZlID0gdmFsdWU7XG59XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBpcyBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoIHVwZGF0ZXMuXG4gKi9cbnZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICB0aGlzLnZtQ291bnQgPSAwO1xuICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgaWYgKGhhc1Byb3RvKSB7XG4gICAgICB7Ly8gZml4ZWQgYnkgeHh4eHh4IOW+ruS/oeWwj+eoi+W6j+S9v+eUqCBwbHVnaW5zIOS5i+WQju+8jOaVsOe7hOaWueazleiiq+ebtOaOpeaMgui9veWIsOS6huaVsOe7hOWvueixoeS4iu+8jOmcgOimgeaJp+ihjCBjb3B5QXVnbWVudCDpgLvovpFcbiAgICAgICAgaWYodmFsdWUucHVzaCAhPT0gdmFsdWUuX19wcm90b19fLnB1c2gpe1xuICAgICAgICAgIGNvcHlBdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvdG9BdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvcHlBdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgfVxuICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhbGsodmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgdGhyb3VnaCBhbGwgcHJvcGVydGllcyBhbmQgY29udmVydCB0aGVtIGludG9cbiAqIGdldHRlci9zZXR0ZXJzLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlblxuICogdmFsdWUgdHlwZSBpcyBPYmplY3QuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gd2FsayAob2JqKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEob2JqLCBrZXlzW2ldKTtcbiAgfVxufTtcblxuLyoqXG4gKiBPYnNlcnZlIGEgbGlzdCBvZiBBcnJheSBpdGVtcy5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IGZ1bmN0aW9uIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvYnNlcnZlKGl0ZW1zW2ldKTtcbiAgfVxufTtcblxuLy8gaGVscGVyc1xuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgZGVmaW5pbmdcbiAqIGhpZGRlbiBwcm9wZXJ0aWVzLlxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gY29weUF1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLFxuICogcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGlmIHN1Y2Nlc3NmdWxseSBvYnNlcnZlZCxcbiAqIG9yIHRoZSBleGlzdGluZyBvYnNlcnZlciBpZiB0aGUgdmFsdWUgYWxyZWFkeSBoYXMgb25lLlxuICovXG5mdW5jdGlvbiBvYnNlcnZlICh2YWx1ZSwgYXNSb290RGF0YSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iO1xuICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICBvYiA9IHZhbHVlLl9fb2JfXztcbiAgfSBlbHNlIGlmIChcbiAgICBzaG91bGRPYnNlcnZlICYmXG4gICAgIWlzU2VydmVyUmVuZGVyaW5nKCkgJiZcbiAgICAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgaXNQbGFpbk9iamVjdCh2YWx1ZSkpICYmXG4gICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkgJiZcbiAgICAhdmFsdWUuX2lzVnVlXG4gICkge1xuICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKTtcbiAgfVxuICBpZiAoYXNSb290RGF0YSAmJiBvYikge1xuICAgIG9iLnZtQ291bnQrKztcbiAgfVxuICByZXR1cm4gb2Jcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiBhbiBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlJCQxIChcbiAgb2JqLFxuICBrZXksXG4gIHZhbCxcbiAgY3VzdG9tU2V0dGVyLFxuICBzaGFsbG93XG4pIHtcbiAgdmFyIGRlcCA9IG5ldyBEZXAoKTtcblxuICB2YXIgcHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcbiAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnR5LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGNhdGVyIGZvciBwcmUtZGVmaW5lZCBnZXR0ZXIvc2V0dGVyc1xuICB2YXIgZ2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuZ2V0O1xuICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0O1xuICBpZiAoKCFnZXR0ZXIgfHwgc2V0dGVyKSAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgdmFsID0gb2JqW2tleV07XG4gIH1cblxuICB2YXIgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUodmFsKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiByZWFjdGl2ZUdldHRlciAoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgaWYgKERlcC5TaGFyZWRPYmplY3QudGFyZ2V0KSB7IC8vIGZpeGVkIGJ5IHh4eHh4eFxuICAgICAgICBkZXAuZGVwZW5kKCk7XG4gICAgICAgIGlmIChjaGlsZE9iKSB7XG4gICAgICAgICAgY2hpbGRPYi5kZXAuZGVwZW5kKCk7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gcmVhY3RpdmVTZXR0ZXIgKG5ld1ZhbCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKG5ld1ZhbCA9PT0gdmFsdWUgfHwgKG5ld1ZhbCAhPT0gbmV3VmFsICYmIHZhbHVlICE9PSB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY3VzdG9tU2V0dGVyKSB7XG4gICAgICAgIGN1c3RvbVNldHRlcigpO1xuICAgICAgfVxuICAgICAgLy8gIzc5ODE6IGZvciBhY2Nlc3NvciBwcm9wZXJ0aWVzIHdpdGhvdXQgc2V0dGVyXG4gICAgICBpZiAoZ2V0dGVyICYmICFzZXR0ZXIpIHsgcmV0dXJuIH1cbiAgICAgIGlmIChzZXR0ZXIpIHtcbiAgICAgICAgc2V0dGVyLmNhbGwob2JqLCBuZXdWYWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gbmV3VmFsO1xuICAgICAgfVxuICAgICAgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUobmV3VmFsKTtcbiAgICAgIGRlcC5ub3RpZnkoKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCBhIHByb3BlcnR5IG9uIGFuIG9iamVjdC4gQWRkcyB0aGUgbmV3IHByb3BlcnR5IGFuZFxuICogdHJpZ2dlcnMgY2hhbmdlIG5vdGlmaWNhdGlvbiBpZiB0aGUgcHJvcGVydHkgZG9lc24ndFxuICogYWxyZWFkeSBleGlzdC5cbiAqL1xuZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBzZXQgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5sZW5ndGggPSBNYXRoLm1heCh0YXJnZXQubGVuZ3RoLCBrZXkpO1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxLCB2YWwpO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoa2V5IGluIHRhcmdldCAmJiAhKGtleSBpbiBPYmplY3QucHJvdG90eXBlKSkge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBhZGRpbmcgcmVhY3RpdmUgcHJvcGVydGllcyB0byBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICdhdCBydW50aW1lIC0gZGVjbGFyZSBpdCB1cGZyb250IGluIHRoZSBkYXRhIG9wdGlvbi4nXG4gICAgKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKCFvYikge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBkZWZpbmVSZWFjdGl2ZSQkMShvYi52YWx1ZSwga2V5LCB2YWwpO1xuICBvYi5kZXAubm90aWZ5KCk7XG4gIHJldHVybiB2YWxcbn1cblxuLyoqXG4gKiBEZWxldGUgYSBwcm9wZXJ0eSBhbmQgdHJpZ2dlciBjaGFuZ2UgaWYgbmVjZXNzYXJ5LlxuICovXG5mdW5jdGlvbiBkZWwgKHRhcmdldCwga2V5KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBkZWxldGUgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdBdm9pZCBkZWxldGluZyBwcm9wZXJ0aWVzIG9uIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJy0ganVzdCBzZXQgaXQgdG8gbnVsbC4nXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoIWhhc093bih0YXJnZXQsIGtleSkpIHtcbiAgICByZXR1cm5cbiAgfVxuICBkZWxldGUgdGFyZ2V0W2tleV07XG4gIGlmICghb2IpIHtcbiAgICByZXR1cm5cbiAgfVxuICBvYi5kZXAubm90aWZ5KCk7XG59XG5cbi8qKlxuICogQ29sbGVjdCBkZXBlbmRlbmNpZXMgb24gYXJyYXkgZWxlbWVudHMgd2hlbiB0aGUgYXJyYXkgaXMgdG91Y2hlZCwgc2luY2VcbiAqIHdlIGNhbm5vdCBpbnRlcmNlcHQgYXJyYXkgZWxlbWVudCBhY2Nlc3MgbGlrZSBwcm9wZXJ0eSBnZXR0ZXJzLlxuICovXG5mdW5jdGlvbiBkZXBlbmRBcnJheSAodmFsdWUpIHtcbiAgZm9yICh2YXIgZSA9ICh2b2lkIDApLCBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGUgPSB2YWx1ZVtpXTtcbiAgICBlICYmIGUuX19vYl9fICYmIGUuX19vYl9fLmRlcC5kZXBlbmQoKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgZGVwZW5kQXJyYXkoZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIE9wdGlvbiBvdmVyd3JpdGluZyBzdHJhdGVnaWVzIGFyZSBmdW5jdGlvbnMgdGhhdCBoYW5kbGVcbiAqIGhvdyB0byBtZXJnZSBhIHBhcmVudCBvcHRpb24gdmFsdWUgYW5kIGEgY2hpbGQgb3B0aW9uXG4gKiB2YWx1ZSBpbnRvIHRoZSBmaW5hbCB2YWx1ZS5cbiAqL1xudmFyIHN0cmF0cyA9IGNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG5cbi8qKlxuICogT3B0aW9ucyB3aXRoIHJlc3RyaWN0aW9uc1xuICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIm9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgaW5zdGFuY2UgXCIgK1xuICAgICAgICAnY3JlYXRpb24gd2l0aCB0aGUgYG5ld2Aga2V5d29yZC4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCwgY2hpbGQpXG4gIH07XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgcmVjdXJzaXZlbHkgbWVyZ2VzIHR3byBkYXRhIG9iamVjdHMgdG9nZXRoZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YSAodG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7IHJldHVybiB0byB9XG4gIHZhciBrZXksIHRvVmFsLCBmcm9tVmFsO1xuXG4gIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgPyBSZWZsZWN0Lm93bktleXMoZnJvbSlcbiAgICA6IE9iamVjdC5rZXlzKGZyb20pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgLy8gaW4gY2FzZSB0aGUgb2JqZWN0IGlzIGFscmVhZHkgb2JzZXJ2ZWQuLi5cbiAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgdG9WYWwgPSB0b1trZXldO1xuICAgIGZyb21WYWwgPSBmcm9tW2tleV07XG4gICAgaWYgKCFoYXNPd24odG8sIGtleSkpIHtcbiAgICAgIHNldCh0bywga2V5LCBmcm9tVmFsKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgdG9WYWwgIT09IGZyb21WYWwgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QodG9WYWwpICYmXG4gICAgICBpc1BsYWluT2JqZWN0KGZyb21WYWwpXG4gICAgKSB7XG4gICAgICBtZXJnZURhdGEodG9WYWwsIGZyb21WYWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBEYXRhXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YU9yRm4gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICAvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xuICAgIGlmICghY2hpbGRWYWwpIHtcbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgIH1cbiAgICAvLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXG4gICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvXG4gICAgLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXG4gICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbiAoKSB7XG4gICAgICByZXR1cm4gbWVyZ2VEYXRhKFxuICAgICAgICB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbicgPyBjaGlsZFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogY2hpbGRWYWwsXG4gICAgICAgIHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbicgPyBwYXJlbnRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IHBhcmVudFZhbFxuICAgICAgKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkSW5zdGFuY2VEYXRhRm4gKCkge1xuICAgICAgLy8gaW5zdGFuY2UgbWVyZ2VcbiAgICAgIHZhciBpbnN0YW5jZURhdGEgPSB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBjaGlsZFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBjaGlsZFZhbDtcbiAgICAgIHZhciBkZWZhdWx0RGF0YSA9IHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwYXJlbnRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogcGFyZW50VmFsO1xuICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VEYXRhKGluc3RhbmNlRGF0YSwgZGVmYXVsdERhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERhdGFcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIGlmIChjaGlsZFZhbCAmJiB0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ1RoZSBcImRhdGFcIiBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gJyArXG4gICAgICAgICd0aGF0IHJldHVybnMgYSBwZXItaW5zdGFuY2UgdmFsdWUgaW4gY29tcG9uZW50ICcgK1xuICAgICAgICAnZGVmaW5pdGlvbnMuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbClcbiAgfVxuXG4gIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKVxufTtcblxuLyoqXG4gKiBIb29rcyBhbmQgcHJvcHMgYXJlIG1lcmdlZCBhcyBhcnJheXMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlSG9vayAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWxcbikge1xuICB2YXIgcmVzID0gY2hpbGRWYWxcbiAgICA/IHBhcmVudFZhbFxuICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkVmFsKVxuICAgICAgICA/IGNoaWxkVmFsXG4gICAgICAgIDogW2NoaWxkVmFsXVxuICAgIDogcGFyZW50VmFsO1xuICByZXR1cm4gcmVzXG4gICAgPyBkZWR1cGVIb29rcyhyZXMpXG4gICAgOiByZXNcbn1cblxuZnVuY3Rpb24gZGVkdXBlSG9va3MgKGhvb2tzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChyZXMuaW5kZXhPZihob29rc1tpXSkgPT09IC0xKSB7XG4gICAgICByZXMucHVzaChob29rc1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuTElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xufSk7XG5cbi8qKlxuICogQXNzZXRzXG4gKlxuICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICogb3B0aW9ucyBhbmQgcGFyZW50IG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQXNzZXRzIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTtcbiAgaWYgKGNoaWxkVmFsKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgICByZXR1cm4gZXh0ZW5kKHJlcywgY2hpbGRWYWwpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbkFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG59KTtcblxuLyoqXG4gKiBXYXRjaGVycy5cbiAqXG4gKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lXG4gKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAqL1xuc3RyYXRzLndhdGNoID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgLy8gd29yayBhcm91bmQgRmlyZWZveCdzIE9iamVjdC5wcm90b3R5cGUud2F0Y2guLi5cbiAgaWYgKHBhcmVudFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgcGFyZW50VmFsID0gdW5kZWZpbmVkOyB9XG4gIGlmIChjaGlsZFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgY2hpbGRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0ge307XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGZvciAodmFyIGtleSQxIGluIGNoaWxkVmFsKSB7XG4gICAgdmFyIHBhcmVudCA9IHJldFtrZXkkMV07XG4gICAgdmFyIGNoaWxkID0gY2hpbGRWYWxba2V5JDFdO1xuICAgIGlmIChwYXJlbnQgJiYgIUFycmF5LmlzQXJyYXkocGFyZW50KSkge1xuICAgICAgcGFyZW50ID0gW3BhcmVudF07XG4gICAgfVxuICAgIHJldFtrZXkkMV0gPSBwYXJlbnRcbiAgICAgID8gcGFyZW50LmNvbmNhdChjaGlsZClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZCkgPyBjaGlsZCA6IFtjaGlsZF07XG4gIH1cbiAgcmV0dXJuIHJldFxufTtcblxuLyoqXG4gKiBPdGhlciBvYmplY3QgaGFzaGVzLlxuICovXG5zdHJhdHMucHJvcHMgPVxuc3RyYXRzLm1ldGhvZHMgPVxuc3RyYXRzLmluamVjdCA9XG5zdHJhdHMuY29tcHV0ZWQgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICBpZiAoY2hpbGRWYWwgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBpZiAoY2hpbGRWYWwpIHsgZXh0ZW5kKHJldCwgY2hpbGRWYWwpOyB9XG4gIHJldHVybiByZXRcbn07XG5zdHJhdHMucHJvdmlkZSA9IG1lcmdlRGF0YU9yRm47XG5cbi8qKlxuICogRGVmYXVsdCBzdHJhdGVneS5cbiAqL1xudmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkXG4gICAgPyBwYXJlbnRWYWxcbiAgICA6IGNoaWxkVmFsXG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGNvbXBvbmVudCBuYW1lc1xuICovXG5mdW5jdGlvbiBjaGVja0NvbXBvbmVudHMgKG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMuY29tcG9uZW50cykge1xuICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ29tcG9uZW50TmFtZSAobmFtZSkge1xuICBpZiAoIW5ldyBSZWdFeHAoKFwiXlthLXpBLVpdW1xcXFwtXFxcXC4wLTlfXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCJdKiRcIikpLnRlc3QobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgY29tcG9uZW50IG5hbWU6IFwiJyArIG5hbWUgKyAnXCIuIENvbXBvbmVudCBuYW1lcyAnICtcbiAgICAgICdzaG91bGQgY29uZm9ybSB0byB2YWxpZCBjdXN0b20gZWxlbWVudCBuYW1lIGluIGh0bWw1IHNwZWNpZmljYXRpb24uJ1xuICAgICk7XG4gIH1cbiAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCAnICtcbiAgICAgICdpZDogJyArIG5hbWVcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlXG4gKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyAob3B0aW9ucywgdm0pIHtcbiAgdmFyIHByb3BzID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKCFwcm9wcykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBpLCB2YWwsIG5hbWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFsID0gcHJvcHNbaV07XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbmFtZSA9IGNhbWVsaXplKHZhbCk7XG4gICAgICAgIHJlc1tuYW1lXSA9IHsgdHlwZTogbnVsbCB9O1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oJ3Byb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIHZhbCA9IHByb3BzW2tleV07XG4gICAgICBuYW1lID0gY2FtZWxpemUoa2V5KTtcbiAgICAgIHJlc1tuYW1lXSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IHZhbFxuICAgICAgICA6IHsgdHlwZTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcInByb3BzXFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHByb3BzKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICBvcHRpb25zLnByb3BzID0gcmVzO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhbGwgaW5qZWN0aW9ucyBpbnRvIE9iamVjdC1iYXNlZCBmb3JtYXRcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0IChvcHRpb25zLCB2bSkge1xuICB2YXIgaW5qZWN0ID0gb3B0aW9ucy5pbmplY3Q7XG4gIGlmICghaW5qZWN0KSB7IHJldHVybiB9XG4gIHZhciBub3JtYWxpemVkID0gb3B0aW9ucy5pbmplY3QgPSB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5qZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBub3JtYWxpemVkW2luamVjdFtpXV0gPSB7IGZyb206IGluamVjdFtpXSB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5qZWN0KSB7XG4gICAgICB2YXIgdmFsID0gaW5qZWN0W2tleV07XG4gICAgICBub3JtYWxpemVkW2tleV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyBleHRlbmQoeyBmcm9tOiBrZXkgfSwgdmFsKVxuICAgICAgICA6IHsgZnJvbTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcImluamVjdFxcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShpbmplY3QpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTm9ybWFsaXplIHJhdyBmdW5jdGlvbiBkaXJlY3RpdmVzIGludG8gb2JqZWN0IGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyAob3B0aW9ucykge1xuICB2YXIgZGlycyA9IG9wdGlvbnMuZGlyZWN0aXZlcztcbiAgaWYgKGRpcnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGlycykge1xuICAgICAgdmFyIGRlZiQkMSA9IGRpcnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgZGVmJCQxID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRpcnNba2V5XSA9IHsgYmluZDogZGVmJCQxLCB1cGRhdGU6IGRlZiQkMSB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRPYmplY3RUeXBlIChuYW1lLCB2YWx1ZSwgdm0pIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiOiBleHBlY3RlZCBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9wdGlvbiBvYmplY3RzIGludG8gYSBuZXcgb25lLlxuICogQ29yZSB1dGlsaXR5IHVzZWQgaW4gYm90aCBpbnN0YW50aWF0aW9uIGFuZCBpbmhlcml0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VPcHRpb25zIChcbiAgcGFyZW50LFxuICBjaGlsZCxcbiAgdm1cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrQ29tcG9uZW50cyhjaGlsZCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGNoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2hpbGQgPSBjaGlsZC5vcHRpb25zO1xuICB9XG5cbiAgbm9ybWFsaXplUHJvcHMoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplSW5qZWN0KGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpO1xuXG4gIC8vIEFwcGx5IGV4dGVuZHMgYW5kIG1peGlucyBvbiB0aGUgY2hpbGQgb3B0aW9ucyxcbiAgLy8gYnV0IG9ubHkgaWYgaXQgaXMgYSByYXcgb3B0aW9ucyBvYmplY3QgdGhhdCBpc24ndFxuICAvLyB0aGUgcmVzdWx0IG9mIGFub3RoZXIgbWVyZ2VPcHRpb25zIGNhbGwuXG4gIC8vIE9ubHkgbWVyZ2VkIG9wdGlvbnMgaGFzIHRoZSBfYmFzZSBwcm9wZXJ0eS5cbiAgaWYgKCFjaGlsZC5fYmFzZSkge1xuICAgIGlmIChjaGlsZC5leHRlbmRzKSB7XG4gICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5leHRlbmRzLCB2bSk7XG4gICAgfVxuICAgIGlmIChjaGlsZC5taXhpbnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5taXhpbnNbaV0sIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IHt9O1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBwYXJlbnQpIHtcbiAgICBtZXJnZUZpZWxkKGtleSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gY2hpbGQpIHtcbiAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWVyZ2VGaWVsZCAoa2V5KSB7XG4gICAgdmFyIHN0cmF0ID0gc3RyYXRzW2tleV0gfHwgZGVmYXVsdFN0cmF0O1xuICAgIG9wdGlvbnNba2V5XSA9IHN0cmF0KHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSwga2V5KTtcbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG4vKipcbiAqIFJlc29sdmUgYW4gYXNzZXQuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3NcbiAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0IChcbiAgb3B0aW9ucyxcbiAgdHlwZSxcbiAgaWQsXG4gIHdhcm5NaXNzaW5nXG4pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGFzc2V0cyA9IG9wdGlvbnNbdHlwZV07XG4gIC8vIGNoZWNrIGxvY2FsIHJlZ2lzdHJhdGlvbiB2YXJpYXRpb25zIGZpcnN0XG4gIGlmIChoYXNPd24oYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfVxuICB2YXIgY2FtZWxpemVkSWQgPSBjYW1lbGl6ZShpZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBjYW1lbGl6ZWRJZCkpIHsgcmV0dXJuIGFzc2V0c1tjYW1lbGl6ZWRJZF0gfVxuICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBQYXNjYWxDYXNlSWQpKSB7IHJldHVybiBhc3NldHNbUGFzY2FsQ2FzZUlkXSB9XG4gIC8vIGZhbGxiYWNrIHRvIHByb3RvdHlwZSBjaGFpblxuICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuTWlzc2luZyAmJiAhcmVzKSB7XG4gICAgd2FybihcbiAgICAgICdGYWlsZWQgdG8gcmVzb2x2ZSAnICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnOiAnICsgaWQsXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wIChcbiAga2V5LFxuICBwcm9wT3B0aW9ucyxcbiAgcHJvcHNEYXRhLFxuICB2bVxuKSB7XG4gIHZhciBwcm9wID0gcHJvcE9wdGlvbnNba2V5XTtcbiAgdmFyIGFic2VudCA9ICFoYXNPd24ocHJvcHNEYXRhLCBrZXkpO1xuICB2YXIgdmFsdWUgPSBwcm9wc0RhdGFba2V5XTtcbiAgLy8gYm9vbGVhbiBjYXN0aW5nXG4gIHZhciBib29sZWFuSW5kZXggPSBnZXRUeXBlSW5kZXgoQm9vbGVhbiwgcHJvcC50eXBlKTtcbiAgaWYgKGJvb2xlYW5JbmRleCA+IC0xKSB7XG4gICAgaWYgKGFic2VudCAmJiAhaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSB7XG4gICAgICAvLyBvbmx5IGNhc3QgZW1wdHkgc3RyaW5nIC8gc2FtZSBuYW1lIHRvIGJvb2xlYW4gaWZcbiAgICAgIC8vIGJvb2xlYW4gaGFzIGhpZ2hlciBwcmlvcml0eVxuICAgICAgdmFyIHN0cmluZ0luZGV4ID0gZ2V0VHlwZUluZGV4KFN0cmluZywgcHJvcC50eXBlKTtcbiAgICAgIGlmIChzdHJpbmdJbmRleCA8IDAgfHwgYm9vbGVhbkluZGV4IDwgc3RyaW5nSW5kZXgpIHtcbiAgICAgICAgdmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBjaGVjayBkZWZhdWx0IHZhbHVlXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsdWUgPSBnZXRQcm9wRGVmYXVsdFZhbHVlKHZtLCBwcm9wLCBrZXkpO1xuICAgIC8vIHNpbmNlIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGEgZnJlc2ggY29weSxcbiAgICAvLyBtYWtlIHN1cmUgdG8gb2JzZXJ2ZSBpdC5cbiAgICB2YXIgcHJldlNob3VsZE9ic2VydmUgPSBzaG91bGRPYnNlcnZlO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICBvYnNlcnZlKHZhbHVlKTtcbiAgICB0b2dnbGVPYnNlcnZpbmcocHJldlNob3VsZE9ic2VydmUpO1xuICB9XG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgLy8gc2tpcCB2YWxpZGF0aW9uIGZvciB3ZWV4IHJlY3ljbGUtbGlzdCBjaGlsZCBjb21wb25lbnQgcHJvcHNcbiAgICAhKGZhbHNlKVxuICApIHtcbiAgICBhc3NlcnRQcm9wKHByb3AsIGtleSwgdmFsdWUsIHZtLCBhYnNlbnQpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUgKHZtLCBwcm9wLCBrZXkpIHtcbiAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHZhciBkZWYgPSBwcm9wLmRlZmF1bHQ7XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tZmFjdG9yeSBkZWZhdWx0cyBmb3IgT2JqZWN0ICYgQXJyYXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF2YWxpZCkge1xuICAgIHdhcm4oXG4gICAgICBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZSAobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgdmFyIG1lc3NhZ2UgPSBcIkludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIiArXG4gICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSk7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xuICB2YXIgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgdmFyIGV4cGVjdGVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgcmVjZWl2ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSk7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSBleHBlY3RlZCB2YWx1ZVxuICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiZcbiAgICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmXG4gICAgICAhaXNCb29sZWFuKGV4cGVjdGVkVHlwZSwgcmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCIgd2l0aCB2YWx1ZSBcIiArIGV4cGVjdGVkVmFsdWU7XG4gIH1cbiAgbWVzc2FnZSArPSBcIiwgZ290IFwiICsgcmVjZWl2ZWRUeXBlICsgXCIgXCI7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxuICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwid2l0aCB2YWx1ZSBcIiArIHJlY2VpdmVkVmFsdWUgKyBcIi5cIjtcbiAgfVxuICByZXR1cm4gbWVzc2FnZVxufVxuXG5mdW5jdGlvbiBzdHlsZVZhbHVlICh2YWx1ZSwgdHlwZSkge1xuICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICByZXR1cm4gKFwiXFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIilcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnTnVtYmVyJykge1xuICAgIHJldHVybiAoXCJcIiArIChOdW1iZXIodmFsdWUpKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiXCIgKyB2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0V4cGxpY2FibGUgKHZhbHVlKSB7XG4gIHZhciBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcbiAgcmV0dXJuIGV4cGxpY2l0VHlwZXMuc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbTsgfSlcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuICgpIHtcbiAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICByZXR1cm4gYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJzsgfSlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIC8vIERlYWN0aXZhdGUgZGVwcyB0cmFja2luZyB3aGlsZSBwcm9jZXNzaW5nIGVycm9yIGhhbmRsZXIgdG8gYXZvaWQgcG9zc2libGUgaW5maW5pdGUgcmVuZGVyaW5nLlxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWV4L2lzc3Vlcy8xNTA1XG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICBpZiAodm0pIHtcbiAgICAgIHZhciBjdXIgPSB2bTtcbiAgICAgIHdoaWxlICgoY3VyID0gY3VyLiRwYXJlbnQpKSB7XG4gICAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgY2FwdHVyZSA9IGhvb2tzW2ldLmNhbGwoY3VyLCBlcnIsIHZtLCBpbmZvKSA9PT0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmIChjYXB0dXJlKSB7IHJldHVybiB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGdsb2JhbEhhbmRsZUVycm9yKGUsIGN1ciwgJ2Vycm9yQ2FwdHVyZWQgaG9vaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBnbG9iYWxIYW5kbGVFcnJvcihlcnIsIHZtLCBpbmZvKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyAoXG4gIGhhbmRsZXIsXG4gIGNvbnRleHQsXG4gIGFyZ3MsXG4gIHZtLFxuICBpbmZvXG4pIHtcbiAgdmFyIHJlcztcbiAgdHJ5IHtcbiAgICByZXMgPSBhcmdzID8gaGFuZGxlci5hcHBseShjb250ZXh0LCBhcmdzKSA6IGhhbmRsZXIuY2FsbChjb250ZXh0KTtcbiAgICBpZiAocmVzICYmICFyZXMuX2lzVnVlICYmIGlzUHJvbWlzZShyZXMpICYmICFyZXMuX2hhbmRsZWQpIHtcbiAgICAgIHJlcy5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8gKyBcIiAoUHJvbWlzZS9hc3luYylcIik7IH0pO1xuICAgICAgLy8gaXNzdWUgIzk1MTFcbiAgICAgIC8vIGF2b2lkIGNhdGNoIHRyaWdnZXJpbmcgbXVsdGlwbGUgdGltZXMgd2hlbiBuZXN0ZWQgY2FsbHNcbiAgICAgIHJlcy5faGFuZGxlZCA9IHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8pO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2xvYmFsSGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlcnIsIHZtLCBpbmZvKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGlmIHRoZSB1c2VyIGludGVudGlvbmFsbHkgdGhyb3dzIHRoZSBvcmlnaW5hbCBlcnJvciBpbiB0aGUgaGFuZGxlcixcbiAgICAgIC8vIGRvIG5vdCBsb2cgaXQgdHdpY2VcbiAgICAgIGlmIChlICE9PSBlcnIpIHtcbiAgICAgICAgbG9nRXJyb3IoZSwgbnVsbCwgJ2NvbmZpZy5lcnJvckhhbmRsZXInKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGxvZ0Vycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybigoXCJFcnJvciBpbiBcIiArIGluZm8gKyBcIjogXFxcIlwiICsgKGVyci50b1N0cmluZygpKSArIFwiXFxcIlwiKSwgdm0pO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICgoaW5Ccm93c2VyIHx8IGluV2VleCkgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGVyclxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgY2FsbGJhY2tzID0gW107XG52YXIgcGVuZGluZyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBmbHVzaENhbGxiYWNrcyAoKSB7XG4gIHBlbmRpbmcgPSBmYWxzZTtcbiAgdmFyIGNvcGllcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcbiAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29waWVzW2ldKCk7XG4gIH1cbn1cblxuLy8gSGVyZSB3ZSBoYXZlIGFzeW5jIGRlZmVycmluZyB3cmFwcGVycyB1c2luZyBtaWNyb3Rhc2tzLlxuLy8gSW4gMi41IHdlIHVzZWQgKG1hY3JvKSB0YXNrcyAoaW4gY29tYmluYXRpb24gd2l0aCBtaWNyb3Rhc2tzKS5cbi8vIEhvd2V2ZXIsIGl0IGhhcyBzdWJ0bGUgcHJvYmxlbXMgd2hlbiBzdGF0ZSBpcyBjaGFuZ2VkIHJpZ2h0IGJlZm9yZSByZXBhaW50XG4vLyAoZS5nLiAjNjgxMywgb3V0LWluIHRyYW5zaXRpb25zKS5cbi8vIEFsc28sIHVzaW5nIChtYWNybykgdGFza3MgaW4gZXZlbnQgaGFuZGxlciB3b3VsZCBjYXVzZSBzb21lIHdlaXJkIGJlaGF2aW9yc1xuLy8gdGhhdCBjYW5ub3QgYmUgY2lyY3VtdmVudGVkIChlLmcuICM3MTA5LCAjNzE1MywgIzc1NDYsICM3ODM0LCAjODEwOSkuXG4vLyBTbyB3ZSBub3cgdXNlIG1pY3JvdGFza3MgZXZlcnl3aGVyZSwgYWdhaW4uXG4vLyBBIG1ham9yIGRyYXdiYWNrIG9mIHRoaXMgdHJhZGVvZmYgaXMgdGhhdCB0aGVyZSBhcmUgc29tZSBzY2VuYXJpb3Ncbi8vIHdoZXJlIG1pY3JvdGFza3MgaGF2ZSB0b28gaGlnaCBhIHByaW9yaXR5IGFuZCBmaXJlIGluIGJldHdlZW4gc3VwcG9zZWRseVxuLy8gc2VxdWVudGlhbCBldmVudHMgKGUuZy4gIzQ1MjEsICM2NjkwLCB3aGljaCBoYXZlIHdvcmthcm91bmRzKVxuLy8gb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lIGV2ZW50ICgjNjU2NikuXG52YXIgdGltZXJGdW5jO1xuXG4vLyBUaGUgbmV4dFRpY2sgYmVoYXZpb3IgbGV2ZXJhZ2VzIHRoZSBtaWNyb3Rhc2sgcXVldWUsIHdoaWNoIGNhbiBiZSBhY2Nlc3NlZFxuLy8gdmlhIGVpdGhlciBuYXRpdmUgUHJvbWlzZS50aGVuIG9yIE11dGF0aW9uT2JzZXJ2ZXIuXG4vLyBNdXRhdGlvbk9ic2VydmVyIGhhcyB3aWRlciBzdXBwb3J0LCBob3dldmVyIGl0IGlzIHNlcmlvdXNseSBidWdnZWQgaW5cbi8vIFVJV2ViVmlldyBpbiBpT1MgPj0gOS4zLjMgd2hlbiB0cmlnZ2VyZWQgaW4gdG91Y2ggZXZlbnQgaGFuZGxlcnMuIEl0XG4vLyBjb21wbGV0ZWx5IHN0b3BzIHdvcmtpbmcgYWZ0ZXIgdHJpZ2dlcmluZyBhIGZldyB0aW1lcy4uLiBzbywgaWYgbmF0aXZlXG4vLyBQcm9taXNlIGlzIGF2YWlsYWJsZSwgd2Ugd2lsbCB1c2UgaXQ6XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCwgJGZsb3ctZGlzYWJsZS1saW5lICovXG5pZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwLnRoZW4oZmx1c2hDYWxsYmFja3MpO1xuICAgIC8vIEluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuICAgIC8vIGl0IGNhbiBnZXQgc3R1Y2sgaW4gYSB3ZWlyZCBzdGF0ZSB3aGVyZSBjYWxsYmFja3MgYXJlIHB1c2hlZCBpbnRvIHRoZVxuICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG4gICAgLy8gXCJmb3JjZVwiIHRoZSBtaWNyb3Rhc2sgcXVldWUgdG8gYmUgZmx1c2hlZCBieSBhZGRpbmcgYW4gZW1wdHkgdGltZXIuXG4gICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgfTtcbn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbikpIHtcbiAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgLy8gZS5nLiBQaGFudG9tSlMsIGlPUzcsIEFuZHJvaWQgNC40XG4gIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgdmFyIGNvdW50ZXIgPSAxO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaENhbGxiYWNrcyk7XG4gIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gIH0pO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gIH07XG59IGVsc2UgaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKHNldEltbWVkaWF0ZSkpIHtcbiAgLy8gRmFsbGJhY2sgdG8gc2V0SW1tZWRpYXRlLlxuICAvLyBUZWNobmljYWxseSBpdCBsZXZlcmFnZXMgdGhlIChtYWNybykgdGFzayBxdWV1ZSxcbiAgLy8gYnV0IGl0IGlzIHN0aWxsIGEgYmV0dGVyIGNob2ljZSB0aGFuIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRJbW1lZGlhdGUoZmx1c2hDYWxsYmFja3MpO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gRmFsbGJhY2sgdG8gc2V0VGltZW91dC5cbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldFRpbWVvdXQoZmx1c2hDYWxsYmFja3MsIDApO1xuICB9O1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayAoY2IsIGN0eCkge1xuICB2YXIgX3Jlc29sdmU7XG4gIGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNiLmNhbGwoY3R4KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZSwgY3R4LCAnbmV4dFRpY2snKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKF9yZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZShjdHgpO1xuICAgIH1cbiAgfSk7XG4gIGlmICghcGVuZGluZykge1xuICAgIHBlbmRpbmcgPSB0cnVlO1xuICAgIHRpbWVyRnVuYygpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBpZiAoIWNiICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pXG4gIH1cbn1cblxuLyogICovXG5cbi8qIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aCBQcm94eSAqL1xuXG52YXIgaW5pdFByb3h5O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgYWxsb3dlZEdsb2JhbHMgPSBtYWtlTWFwKFxuICAgICdJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLCcgK1xuICAgICdwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCwnICtcbiAgICAnTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLCcgK1xuICAgICdyZXF1aXJlJyAvLyBmb3IgV2VicGFjay9Ccm93c2VyaWZ5XG4gICk7XG5cbiAgdmFyIHdhcm5Ob25QcmVzZW50ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgb3IgbWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UgYnV0IFwiICtcbiAgICAgICdyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgcmVhY3RpdmUsICcgK1xuICAgICAgJ2VpdGhlciBpbiB0aGUgZGF0YSBvcHRpb24sIG9yIGZvciBjbGFzcy1iYXNlZCBjb21wb25lbnRzLCBieSAnICtcbiAgICAgICdpbml0aWFsaXppbmcgdGhlIHByb3BlcnR5LiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL3JlYWN0aXZpdHkuaHRtbCNEZWNsYXJpbmctUmVhY3RpdmUtUHJvcGVydGllcy4nLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgd2FyblJlc2VydmVkUHJlZml4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIG11c3QgYmUgYWNjZXNzZWQgd2l0aCBcXFwiJGRhdGEuXCIgKyBrZXkgKyBcIlxcXCIgYmVjYXVzZSBcIiArXG4gICAgICAncHJvcGVydGllcyBzdGFydGluZyB3aXRoIFwiJFwiIG9yIFwiX1wiIGFyZSBub3QgcHJveGllZCBpbiB0aGUgVnVlIGluc3RhbmNlIHRvICcgK1xuICAgICAgJ3ByZXZlbnQgY29uZmxpY3RzIHdpdGggVnVlIGludGVybmFscy4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9hcGkvI2RhdGEnLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgaGFzUHJveHkgPVxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJveHkpO1xuXG4gIGlmIChoYXNQcm94eSkge1xuICAgIHZhciBpc0J1aWx0SW5Nb2RpZmllciA9IG1ha2VNYXAoJ3N0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QnKTtcbiAgICBjb25maWcua2V5Q29kZXMgPSBuZXcgUHJveHkoY29uZmlnLmtleUNvZGVzLCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgd2FybigoXCJBdm9pZCBvdmVyd3JpdGluZyBidWlsdC1pbiBtb2RpZmllciBpbiBjb25maWcua2V5Q29kZXM6IC5cIiArIGtleSkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhc0hhbmRsZXIgPSB7XG4gICAgaGFzOiBmdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gICAgICB2YXIgaGFzID0ga2V5IGluIHRhcmdldDtcbiAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8XG4gICAgICAgICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnXycgJiYgIShrZXkgaW4gdGFyZ2V0LiRkYXRhKSk7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkXG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRIYW5kbGVyID0ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIC8vIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKVxuICAgIH07XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBub3JtYWxpemVFdmVudCA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgcGFzc2l2ZSA9IG5hbWUuY2hhckF0KDApID09PSAnJic7XG4gIG5hbWUgPSBwYXNzaXZlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBvbmNlJCQxID0gbmFtZS5jaGFyQXQoMCkgPT09ICd+JzsgLy8gUHJlZml4ZWQgbGFzdCwgY2hlY2tlZCBmaXJzdFxuICBuYW1lID0gb25jZSQkMSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgY2FwdHVyZSA9IG5hbWUuY2hhckF0KDApID09PSAnISc7XG4gIG5hbWUgPSBjYXB0dXJlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBvbmNlOiBvbmNlJCQxLFxuICAgIGNhcHR1cmU6IGNhcHR1cmUsXG4gICAgcGFzc2l2ZTogcGFzc2l2ZVxuICB9XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlRm5JbnZva2VyIChmbnMsIHZtKSB7XG4gIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjbG9uZWRbaV0sIG51bGwsIGFyZ3VtZW50cyQxLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJldHVybiBoYW5kbGVyIHJldHVybiB2YWx1ZSBmb3Igc2luZ2xlIGhhbmRsZXJzXG4gICAgICByZXR1cm4gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoZm5zLCBudWxsLCBhcmd1bWVudHMsIHZtLCBcInYtb24gaGFuZGxlclwiKVxuICAgIH1cbiAgfVxuICBpbnZva2VyLmZucyA9IGZucztcbiAgcmV0dXJuIGludm9rZXJcbn1cblxuZnVuY3Rpb24gdXBkYXRlTGlzdGVuZXJzIChcbiAgb24sXG4gIG9sZE9uLFxuICBhZGQsXG4gIHJlbW92ZSQkMSxcbiAgY3JlYXRlT25jZUhhbmRsZXIsXG4gIHZtXG4pIHtcbiAgdmFyIG5hbWUsIGRlZiQkMSwgY3VyLCBvbGQsIGV2ZW50O1xuICBmb3IgKG5hbWUgaW4gb24pIHtcbiAgICBkZWYkJDEgPSBjdXIgPSBvbltuYW1lXTtcbiAgICBvbGQgPSBvbGRPbltuYW1lXTtcbiAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgIGlmIChpc1VuZGVmKGN1cikpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJJbnZhbGlkIGhhbmRsZXIgZm9yIGV2ZW50IFxcXCJcIiArIChldmVudC5uYW1lKSArIFwiXFxcIjogZ290IFwiICsgU3RyaW5nKGN1ciksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGQpKSB7XG4gICAgICBpZiAoaXNVbmRlZihjdXIuZm5zKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZUZuSW52b2tlcihjdXIsIHZtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1RydWUoZXZlbnQub25jZSkpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVPbmNlSGFuZGxlcihldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUpO1xuICAgICAgfVxuICAgICAgYWRkKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSwgZXZlbnQucGFzc2l2ZSwgZXZlbnQucGFyYW1zKTtcbiAgICB9IGVsc2UgaWYgKGN1ciAhPT0gb2xkKSB7XG4gICAgICBvbGQuZm5zID0gY3VyO1xuICAgICAgb25bbmFtZV0gPSBvbGQ7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgIGlmIChpc1VuZGVmKG9uW25hbWVdKSkge1xuICAgICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAgIHJlbW92ZSQkMShldmVudC5uYW1lLCBvbGRPbltuYW1lXSwgZXZlbnQuY2FwdHVyZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gZml4ZWQgYnkgeHh4eHh4IChtcCBwcm9wZXJ0aWVzKVxuZnVuY3Rpb24gZXh0cmFjdFByb3BlcnRpZXNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHJlcywgY29udGV4dCkge1xuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMubXBPcHRpb25zICYmIEN0b3Iub3B0aW9ucy5tcE9wdGlvbnMucHJvcGVydGllcztcbiAgaWYgKGlzVW5kZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG4gIHZhciBleHRlcm5hbENsYXNzZXMgPSBDdG9yLm9wdGlvbnMubXBPcHRpb25zLmV4dGVybmFsQ2xhc3NlcyB8fCBbXTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIHZhciByZXN1bHQgPSBjaGVja1Byb3AocmVzLCBwcm9wcywga2V5LCBhbHRLZXksIHRydWUpIHx8XG4gICAgICAgICAgY2hlY2tQcm9wKHJlcywgYXR0cnMsIGtleSwgYWx0S2V5LCBmYWxzZSk7XG4gICAgICAvLyBleHRlcm5hbENsYXNzXG4gICAgICBpZiAoXG4gICAgICAgIHJlc3VsdCAmJlxuICAgICAgICByZXNba2V5XSAmJlxuICAgICAgICBleHRlcm5hbENsYXNzZXMuaW5kZXhPZihhbHRLZXkpICE9PSAtMSAmJlxuICAgICAgICBjb250ZXh0W2NhbWVsaXplKHJlc1trZXldKV1cbiAgICAgICkge1xuICAgICAgICAvLyDotYvlgLwgZXh0ZXJuYWxDbGFzcyDnnJ/mraPnmoTlgLwo5qih5p2/6YeMIGV4dGVybmFsQ2xhc3Mg55qE5YC85Y+v6IO95piv5a2X56ym5LiyKVxuICAgICAgICByZXNba2V5XSA9IGNvbnRleHRbY2FtZWxpemUocmVzW2tleV0pXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnLFxuICBjb250ZXh0Ly8gZml4ZWQgYnkgeHh4eHh4XG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIC8vIGZpeGVkIGJ5IHh4eHh4eFxuICAgIHJldHVybiBleHRyYWN0UHJvcGVydGllc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3Rvciwge30sIGNvbnRleHQpXG4gIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzO1xuICB2YXIgcHJvcHMgPSBkYXRhLnByb3BzO1xuICBpZiAoaXNEZWYoYXR0cnMpIHx8IGlzRGVmKHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgdmFyIGFsdEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIGtleUluTG93ZXJDYXNlID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgIT09IGtleUluTG93ZXJDYXNlICYmXG4gICAgICAgICAgYXR0cnMgJiYgaGFzT3duKGF0dHJzLCBrZXlJbkxvd2VyQ2FzZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGlwKFxuICAgICAgICAgICAgXCJQcm9wIFxcXCJcIiArIGtleUluTG93ZXJDYXNlICsgXCJcXFwiIGlzIHBhc3NlZCB0byBjb21wb25lbnQgXCIgK1xuICAgICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodGFnIHx8IEN0b3IpKSArIFwiLCBidXQgdGhlIGRlY2xhcmVkIHByb3AgbmFtZSBpc1wiICtcbiAgICAgICAgICAgIFwiIFxcXCJcIiArIGtleSArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCBjYW1lbENhc2VkIFwiICtcbiAgICAgICAgICAgIFwicHJvcHMgbmVlZCB0byB1c2UgdGhlaXIga2ViYWItY2FzZSBlcXVpdmFsZW50cyB3aGVuIHVzaW5nIGluLURPTSBcIiArXG4gICAgICAgICAgICBcInRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgYWx0S2V5ICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fFxuICAgICAgY2hlY2tQcm9wKHJlcywgYXR0cnMsIGtleSwgYWx0S2V5LCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIC8vIGZpeGVkIGJ5IHh4eHh4eFxuICByZXR1cm4gZXh0cmFjdFByb3BlcnRpZXNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHJlcywgY29udGV4dClcbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wIChcbiAgcmVzLFxuICBoYXNoLFxuICBrZXksXG4gIGFsdEtleSxcbiAgcHJlc2VydmVcbikge1xuICBpZiAoaXNEZWYoaGFzaCkpIHtcbiAgICBpZiAoaGFzT3duKGhhc2gsIGtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFtrZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2UgaWYgKGhhc093bihoYXNoLCBhbHRLZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hbYWx0S2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxuLy8gVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGF0dGVtcHRzIHRvIG1pbmltaXplIHRoZSBuZWVkIGZvciBub3JtYWxpemF0aW9uIGJ5XG4vLyBzdGF0aWNhbGx5IGFuYWx5emluZyB0aGUgdGVtcGxhdGUgYXQgY29tcGlsZSB0aW1lLlxuLy9cbi8vIEZvciBwbGFpbiBIVE1MIG1hcmt1cCwgbm9ybWFsaXphdGlvbiBjYW4gYmUgY29tcGxldGVseSBza2lwcGVkIGJlY2F1c2UgdGhlXG4vLyBnZW5lcmF0ZWQgcmVuZGVyIGZ1bmN0aW9uIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIEFycmF5PFZOb2RlPi4gVGhlcmUgYXJlXG4vLyB0d28gY2FzZXMgd2hlcmUgZXh0cmEgbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQ6XG5cbi8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbi8vIG1heSByZXR1cm4gYW4gQXJyYXkgaW5zdGVhZCBvZiBhIHNpbmdsZSByb290LiBJbiB0aGlzIGNhc2UsIGp1c3QgYSBzaW1wbGVcbi8vIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkIC0gaWYgYW55IGNoaWxkIGlzIGFuIEFycmF5LCB3ZSBmbGF0dGVuIHRoZSB3aG9sZVxuLy8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwXG4vLyBiZWNhdXNlIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhbHJlYWR5IG5vcm1hbGl6ZSB0aGVpciBvd24gY2hpbGRyZW4uXG5mdW5jdGlvbiBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuW2ldKSkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGNoaWxkcmVuKVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2hpbGRyZW5cbn1cblxuLy8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RydWN0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cyxcbi8vIGUuZy4gPHRlbXBsYXRlPiwgPHNsb3Q+LCB2LWZvciwgb3Igd2hlbiB0aGUgY2hpbGRyZW4gaXMgcHJvdmlkZWQgYnkgdXNlclxuLy8gd2l0aCBoYW5kLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucyAvIEpTWC4gSW4gc3VjaCBjYXNlcyBhIGZ1bGwgbm9ybWFsaXphdGlvblxuLy8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuXG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGlzUHJpbWl0aXZlKGNoaWxkcmVuKVxuICAgID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildXG4gICAgOiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKVxuICAgICAgPyBub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgOiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gaXNUZXh0Tm9kZSAobm9kZSkge1xuICByZXR1cm4gaXNEZWYobm9kZSkgJiYgaXNEZWYobm9kZS50ZXh0KSAmJiBpc0ZhbHNlKG5vZGUuaXNDb21tZW50KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuIChjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaSwgYywgbGFzdEluZGV4LCBsYXN0O1xuICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGlzVW5kZWYoYykgfHwgdHlwZW9mIGMgPT09ICdib29sZWFuJykgeyBjb250aW51ZSB9XG4gICAgbGFzdEluZGV4ID0gcmVzLmxlbmd0aCAtIDE7XG4gICAgbGFzdCA9IHJlc1tsYXN0SW5kZXhdO1xuICAgIC8vICBuZXN0ZWRcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkge1xuICAgICAgaWYgKGMubGVuZ3RoID4gMCkge1xuICAgICAgICBjID0gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjLCAoKG5lc3RlZEluZGV4IHx8ICcnKSArIFwiX1wiICsgaSkpO1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIGlmIChpc1RleHROb2RlKGNbMF0pICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyAoY1swXSkudGV4dCk7XG4gICAgICAgICAgYy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgYyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZShjKSkge1xuICAgICAgaWYgKGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgU1NSIGh5ZHJhdGlvbiBiZWNhdXNlIHRleHQgbm9kZXMgYXJlXG4gICAgICAgIC8vIGVzc2VudGlhbGx5IG1lcmdlZCB3aGVuIHJlbmRlcmVkIHRvIEhUTUwgc3RyaW5nc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjKTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPT0gJycpIHtcbiAgICAgICAgLy8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGVcbiAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzVGV4dE5vZGUoYykgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMudGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuICAgICAgICBpZiAoaXNUcnVlKGNoaWxkcmVuLl9pc1ZMaXN0KSAmJlxuICAgICAgICAgIGlzRGVmKGMudGFnKSAmJlxuICAgICAgICAgIGlzVW5kZWYoYy5rZXkpICYmXG4gICAgICAgICAgaXNEZWYobmVzdGVkSW5kZXgpKSB7XG4gICAgICAgICAgYy5rZXkgPSBcIl9fdmxpc3RcIiArIG5lc3RlZEluZGV4ICsgXCJfXCIgKyBpICsgXCJfX1wiO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UHJvdmlkZSAodm0pIHtcbiAgdmFyIHByb3ZpZGUgPSB2bS4kb3B0aW9ucy5wcm92aWRlO1xuICBpZiAocHJvdmlkZSkge1xuICAgIHZtLl9wcm92aWRlZCA9IHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHByb3ZpZGUuY2FsbCh2bSlcbiAgICAgIDogcHJvdmlkZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0SW5qZWN0aW9ucyAodm0pIHtcbiAgdmFyIHJlc3VsdCA9IHJlc29sdmVJbmplY3Qodm0uJG9wdGlvbnMuaW5qZWN0LCB2bSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhbiBpbmplY3RlZCB2YWx1ZSBkaXJlY3RseSBzaW5jZSB0aGUgY2hhbmdlcyB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHByb3ZpZGVkIGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcImluamVjdGlvbiBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVJbmplY3QgKGluamVjdCwgdm0pIHtcbiAgaWYgKGluamVjdCkge1xuICAgIC8vIGluamVjdCBpcyA6YW55IGJlY2F1c2UgZmxvdyBpcyBub3Qgc21hcnQgZW5vdWdoIHRvIGZpZ3VyZSBvdXQgY2FjaGVkXG4gICAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICAgID8gUmVmbGVjdC5vd25LZXlzKGluamVjdClcbiAgICAgIDogT2JqZWN0LmtleXMoaW5qZWN0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAvLyAjNjU3NCBpbiBjYXNlIHRoZSBpbmplY3Qgb2JqZWN0IGlzIG9ic2VydmVkLi4uXG4gICAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgICB2YXIgcHJvdmlkZUtleSA9IGluamVjdFtrZXldLmZyb207XG4gICAgICB2YXIgc291cmNlID0gdm07XG4gICAgICB3aGlsZSAoc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuX3Byb3ZpZGVkICYmIGhhc093bihzb3VyY2UuX3Byb3ZpZGVkLCBwcm92aWRlS2V5KSkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gc291cmNlLl9wcm92aWRlZFtwcm92aWRlS2V5XTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZSA9IHNvdXJjZS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiBpbmplY3Rba2V5XSkge1xuICAgICAgICAgIHZhciBwcm92aWRlRGVmYXVsdCA9IGluamVjdFtrZXldLmRlZmF1bHQ7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB0eXBlb2YgcHJvdmlkZURlZmF1bHQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gcHJvdmlkZURlZmF1bHQuY2FsbCh2bSlcbiAgICAgICAgICAgIDogcHJvdmlkZURlZmF1bHQ7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oKFwiSW5qZWN0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBub3QgZm91bmRcIiksIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuLyogICovXG5cblxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgcmF3IGNoaWxkcmVuIFZOb2RlcyBpbnRvIGEgc2xvdCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVTbG90cyAoXG4gIGNoaWxkcmVuLFxuICBjb250ZXh0XG4pIHtcbiAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cbiAgdmFyIHNsb3RzID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgdmFyIGRhdGEgPSBjaGlsZC5kYXRhO1xuICAgIC8vIHJlbW92ZSBzbG90IGF0dHJpYnV0ZSBpZiB0aGUgbm9kZSBpcyByZXNvbHZlZCBhcyBhIFZ1ZSBzbG90IG5vZGVcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMuc2xvdCkge1xuICAgICAgZGVsZXRlIGRhdGEuYXR0cnMuc2xvdDtcbiAgICB9XG4gICAgLy8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlXG4gICAgLy8gc2FtZSBjb250ZXh0LlxuICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mbkNvbnRleHQgPT09IGNvbnRleHQpICYmXG4gICAgICBkYXRhICYmIGRhdGEuc2xvdCAhPSBudWxsXG4gICAgKSB7XG4gICAgICB2YXIgbmFtZSA9IGRhdGEuc2xvdDtcbiAgICAgIHZhciBzbG90ID0gKHNsb3RzW25hbWVdIHx8IChzbG90c1tuYW1lXSA9IFtdKSk7XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHNsb3QucHVzaC5hcHBseShzbG90LCBjaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmaXhlZCBieSB4eHh4eHgg5Li05pe2IGhhY2sg5o6JIHVuaS1hcHAg5Lit55qE5byC5q2lIG5hbWUgc2xvdCBwYWdlXG4gICAgICBpZihjaGlsZC5hc3luY01ldGEgJiYgY2hpbGQuYXN5bmNNZXRhLmRhdGEgJiYgY2hpbGQuYXN5bmNNZXRhLmRhdGEuc2xvdCA9PT0gJ3BhZ2UnKXtcbiAgICAgICAgKHNsb3RzWydwYWdlJ10gfHwgKHNsb3RzWydwYWdlJ10gPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdHMgKFxuICBzbG90cyxcbiAgbm9ybWFsU2xvdHMsXG4gIHByZXZTbG90c1xuKSB7XG4gIHZhciByZXM7XG4gIHZhciBoYXNOb3JtYWxTbG90cyA9IE9iamVjdC5rZXlzKG5vcm1hbFNsb3RzKS5sZW5ndGggPiAwO1xuICB2YXIgaXNTdGFibGUgPSBzbG90cyA/ICEhc2xvdHMuJHN0YWJsZSA6ICFoYXNOb3JtYWxTbG90cztcbiAgdmFyIGtleSA9IHNsb3RzICYmIHNsb3RzLiRrZXk7XG4gIGlmICghc2xvdHMpIHtcbiAgICByZXMgPSB7fTtcbiAgfSBlbHNlIGlmIChzbG90cy5fbm9ybWFsaXplZCkge1xuICAgIC8vIGZhc3QgcGF0aCAxOiBjaGlsZCBjb21wb25lbnQgcmUtcmVuZGVyIG9ubHksIHBhcmVudCBkaWQgbm90IGNoYW5nZVxuICAgIHJldHVybiBzbG90cy5fbm9ybWFsaXplZFxuICB9IGVsc2UgaWYgKFxuICAgIGlzU3RhYmxlICYmXG4gICAgcHJldlNsb3RzICYmXG4gICAgcHJldlNsb3RzICE9PSBlbXB0eU9iamVjdCAmJlxuICAgIGtleSA9PT0gcHJldlNsb3RzLiRrZXkgJiZcbiAgICAhaGFzTm9ybWFsU2xvdHMgJiZcbiAgICAhcHJldlNsb3RzLiRoYXNOb3JtYWxcbiAgKSB7XG4gICAgLy8gZmFzdCBwYXRoIDI6IHN0YWJsZSBzY29wZWQgc2xvdHMgdy8gbm8gbm9ybWFsIHNsb3RzIHRvIHByb3h5LFxuICAgIC8vIG9ubHkgbmVlZCB0byBub3JtYWxpemUgb25jZVxuICAgIHJldHVybiBwcmV2U2xvdHNcbiAgfSBlbHNlIHtcbiAgICByZXMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkkMSBpbiBzbG90cykge1xuICAgICAgaWYgKHNsb3RzW2tleSQxXSAmJiBrZXkkMVswXSAhPT0gJyQnKSB7XG4gICAgICAgIHJlc1trZXkkMV0gPSBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXkkMSwgc2xvdHNba2V5JDFdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gZXhwb3NlIG5vcm1hbCBzbG90cyBvbiBzY29wZWRTbG90c1xuICBmb3IgKHZhciBrZXkkMiBpbiBub3JtYWxTbG90cykge1xuICAgIGlmICghKGtleSQyIGluIHJlcykpIHtcbiAgICAgIHJlc1trZXkkMl0gPSBwcm94eU5vcm1hbFNsb3Qobm9ybWFsU2xvdHMsIGtleSQyKTtcbiAgICB9XG4gIH1cbiAgLy8gYXZvcmlheiBzZWVtcyB0byBtb2NrIGEgbm9uLWV4dGVuc2libGUgJHNjb3BlZFNsb3RzIG9iamVjdFxuICAvLyBhbmQgd2hlbiB0aGF0IGlzIHBhc3NlZCBkb3duIHRoaXMgd291bGQgY2F1c2UgYW4gZXJyb3JcbiAgaWYgKHNsb3RzICYmIE9iamVjdC5pc0V4dGVuc2libGUoc2xvdHMpKSB7XG4gICAgKHNsb3RzKS5fbm9ybWFsaXplZCA9IHJlcztcbiAgfVxuICBkZWYocmVzLCAnJHN0YWJsZScsIGlzU3RhYmxlKTtcbiAgZGVmKHJlcywgJyRrZXknLCBrZXkpO1xuICBkZWYocmVzLCAnJGhhc05vcm1hbCcsIGhhc05vcm1hbFNsb3RzKTtcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXksIGZuKSB7XG4gIHZhciBub3JtYWxpemVkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXMgPSBhcmd1bWVudHMubGVuZ3RoID8gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKSA6IGZuKHt9KTtcbiAgICByZXMgPSByZXMgJiYgdHlwZW9mIHJlcyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkocmVzKVxuICAgICAgPyBbcmVzXSAvLyBzaW5nbGUgdm5vZGVcbiAgICAgIDogbm9ybWFsaXplQ2hpbGRyZW4ocmVzKTtcbiAgICByZXR1cm4gcmVzICYmIChcbiAgICAgIHJlcy5sZW5ndGggPT09IDAgfHxcbiAgICAgIChyZXMubGVuZ3RoID09PSAxICYmIHJlc1swXS5pc0NvbW1lbnQpIC8vICM5NjU4XG4gICAgKSA/IHVuZGVmaW5lZFxuICAgICAgOiByZXNcbiAgfTtcbiAgLy8gdGhpcyBpcyBhIHNsb3QgdXNpbmcgdGhlIG5ldyB2LXNsb3Qgc3ludGF4IHdpdGhvdXQgc2NvcGUuIGFsdGhvdWdoIGl0IGlzXG4gIC8vIGNvbXBpbGVkIGFzIGEgc2NvcGVkIHNsb3QsIHJlbmRlciBmbiB1c2VycyB3b3VsZCBleHBlY3QgaXQgdG8gYmUgcHJlc2VudFxuICAvLyBvbiB0aGlzLiRzbG90cyBiZWNhdXNlIHRoZSB1c2FnZSBpcyBzZW1hbnRpY2FsbHkgYSBub3JtYWwgc2xvdC5cbiAgaWYgKGZuLnByb3h5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vcm1hbFNsb3RzLCBrZXksIHtcbiAgICAgIGdldDogbm9ybWFsaXplZCxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbm9ybWFsaXplZFxufVxuXG5mdW5jdGlvbiBwcm94eU5vcm1hbFNsb3Qoc2xvdHMsIGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gc2xvdHNba2V5XTsgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHYtZm9yIGxpc3RzLlxuICovXG5mdW5jdGlvbiByZW5kZXJMaXN0IChcbiAgdmFsLFxuICByZW5kZXJcbikge1xuICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxbaV0sIGksIGksIGkpOyAvLyBmaXhlZCBieSB4eHh4eHhcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdmFsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSwgaSwgaSk7IC8vIGZpeGVkIGJ5IHh4eHh4eFxuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCwgaSsrLCBpKSk7IC8vIGZpeGVkIGJ5IHh4eHh4eFxuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSwgaSk7IC8vIGZpeGVkIGJ5IHh4eHh4eFxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzRGVmKHJldCkpIHtcbiAgICByZXQgPSBbXTtcbiAgfVxuICAocmV0KS5faXNWTGlzdCA9IHRydWU7XG4gIHJldHVybiByZXRcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyA8c2xvdD5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU2xvdCAoXG4gIG5hbWUsXG4gIGZhbGxiYWNrLFxuICBwcm9wcyxcbiAgYmluZE9iamVjdFxuKSB7XG4gIHZhciBzY29wZWRTbG90Rm4gPSB0aGlzLiRzY29wZWRTbG90c1tuYW1lXTtcbiAgdmFyIG5vZGVzO1xuICBpZiAoc2NvcGVkU2xvdEZuKSB7IC8vIHNjb3BlZCBzbG90XG4gICAgcHJvcHMgPSBwcm9wcyB8fCB7fTtcbiAgICBpZiAoYmluZE9iamVjdCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzT2JqZWN0KGJpbmRPYmplY3QpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ3Nsb3Qgdi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QnLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHByb3BzID0gZXh0ZW5kKGV4dGVuZCh7fSwgYmluZE9iamVjdCksIHByb3BzKTtcbiAgICB9XG4gICAgLy8gZml4ZWQgYnkgeHh4eHh4IGFwcC1wbHVzIHNjb3BlZFNsb3RcbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcywgdGhpcywgcHJvcHMuX2kpIHx8IGZhbGxiYWNrO1xuICB9IGVsc2Uge1xuICAgIG5vZGVzID0gdGhpcy4kc2xvdHNbbmFtZV0gfHwgZmFsbGJhY2s7XG4gIH1cblxuICB2YXIgdGFyZ2V0ID0gcHJvcHMgJiYgcHJvcHMuc2xvdDtcbiAgaWYgKHRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScsIHsgc2xvdDogdGFyZ2V0IH0sIG5vZGVzKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBub2Rlc1xuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgZmlsdGVyc1xuICovXG5mdW5jdGlvbiByZXNvbHZlRmlsdGVyIChpZCkge1xuICByZXR1cm4gcmVzb2x2ZUFzc2V0KHRoaXMuJG9wdGlvbnMsICdmaWx0ZXJzJywgaWQsIHRydWUpIHx8IGlkZW50aXR5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0tleU5vdE1hdGNoIChleHBlY3QsIGFjdHVhbCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3QpKSB7XG4gICAgcmV0dXJuIGV4cGVjdC5pbmRleE9mKGFjdHVhbCkgPT09IC0xXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGV4cGVjdCAhPT0gYWN0dWFsXG4gIH1cbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgY2hlY2tpbmcga2V5Q29kZXMgZnJvbSBjb25maWcuXG4gKiBleHBvc2VkIGFzIFZ1ZS5wcm90b3R5cGUuX2tcbiAqIHBhc3NpbmcgaW4gZXZlbnRLZXlOYW1lIGFzIGxhc3QgYXJndW1lbnQgc2VwYXJhdGVseSBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICovXG5mdW5jdGlvbiBjaGVja0tleUNvZGVzIChcbiAgZXZlbnRLZXlDb2RlLFxuICBrZXksXG4gIGJ1aWx0SW5LZXlDb2RlLFxuICBldmVudEtleU5hbWUsXG4gIGJ1aWx0SW5LZXlOYW1lXG4pIHtcbiAgdmFyIG1hcHBlZEtleUNvZGUgPSBjb25maWcua2V5Q29kZXNba2V5XSB8fCBidWlsdEluS2V5Q29kZTtcbiAgaWYgKGJ1aWx0SW5LZXlOYW1lICYmIGV2ZW50S2V5TmFtZSAmJiAhY29uZmlnLmtleUNvZGVzW2tleV0pIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChidWlsdEluS2V5TmFtZSwgZXZlbnRLZXlOYW1lKVxuICB9IGVsc2UgaWYgKG1hcHBlZEtleUNvZGUpIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChtYXBwZWRLZXlDb2RlLCBldmVudEtleUNvZGUpXG4gIH0gZWxzZSBpZiAoZXZlbnRLZXlOYW1lKSB7XG4gICAgcmV0dXJuIGh5cGhlbmF0ZShldmVudEtleU5hbWUpICE9PSBrZXlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgbWVyZ2luZyB2LWJpbmQ9XCJvYmplY3RcIiBpbnRvIGEgVk5vZGUncyBkYXRhLlxuICovXG5mdW5jdGlvbiBiaW5kT2JqZWN0UHJvcHMgKFxuICBkYXRhLFxuICB0YWcsXG4gIHZhbHVlLFxuICBhc1Byb3AsXG4gIGlzU3luY1xuKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHRvT2JqZWN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNoO1xuICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSA9PT0gJ2NsYXNzJyB8fFxuICAgICAgICAgIGtleSA9PT0gJ3N0eWxlJyB8fFxuICAgICAgICAgIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoa2V5KVxuICAgICAgICApIHtcbiAgICAgICAgICBoYXNoID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlO1xuICAgICAgICAgIGhhc2ggPSBhc1Byb3AgfHwgY29uZmlnLm11c3RVc2VQcm9wKHRhZywgdHlwZSwga2V5KVxuICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG4gICAgICAgICAgICA6IGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIGlmICghKGNhbWVsaXplZEtleSBpbiBoYXNoKSAmJiAhKGh5cGhlbmF0ZWRLZXkgaW4gaGFzaCkpIHtcbiAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXG4gICAgICAgICAgaWYgKGlzU3luYykge1xuICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgICAgICAgICAgIG9uWyhcInVwZGF0ZTpcIiArIGtleSldID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgbG9vcCgga2V5ICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLlxuICovXG5mdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICBpbmRleCxcbiAgaXNJbkZvclxuKSB7XG4gIHZhciBjYWNoZWQgPSB0aGlzLl9zdGF0aWNUcmVlcyB8fCAodGhpcy5fc3RhdGljVHJlZXMgPSBbXSk7XG4gIHZhciB0cmVlID0gY2FjaGVkW2luZGV4XTtcbiAgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4gIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlLlxuICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgIHJldHVybiB0cmVlXG4gIH1cbiAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuICB0cmVlID0gY2FjaGVkW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKFxuICAgIHRoaXMuX3JlbmRlclByb3h5LFxuICAgIG51bGwsXG4gICAgdGhpcyAvLyBmb3IgcmVuZGVyIGZucyBnZW5lcmF0ZWQgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IHRlbXBsYXRlc1xuICApO1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fc3RhdGljX19cIiArIGluZGV4KSwgZmFsc2UpO1xuICByZXR1cm4gdHJlZVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciB2LW9uY2UuXG4gKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS5cbiAqL1xuZnVuY3Rpb24gbWFya09uY2UgKFxuICB0cmVlLFxuICBpbmRleCxcbiAga2V5XG4pIHtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX29uY2VfX1wiICsgaW5kZXggKyAoa2V5ID8gKFwiX1wiICsga2V5KSA6IFwiXCIpKSwgdHJ1ZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMgKFxuICB0cmVlLFxuICBrZXksXG4gIGlzT25jZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHRyZWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWFya1N0YXRpY05vZGUodHJlZVtpXSwgKGtleSArIFwiX1wiICsgaSksIGlzT25jZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcbiAgbm9kZS5pc1N0YXRpYyA9IHRydWU7XG4gIG5vZGUua2V5ID0ga2V5O1xuICBub2RlLmlzT25jZSA9IGlzT25jZTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmRPYmplY3RMaXN0ZW5lcnMgKGRhdGEsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3Ytb24gd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvbiA9IGRhdGEub24gPSBkYXRhLm9uID8gZXh0ZW5kKHt9LCBkYXRhLm9uKSA6IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIHZhciBleGlzdGluZyA9IG9uW2tleV07XG4gICAgICAgIHZhciBvdXJzID0gdmFsdWVba2V5XTtcbiAgICAgICAgb25ba2V5XSA9IGV4aXN0aW5nID8gW10uY29uY2F0KGV4aXN0aW5nLCBvdXJzKSA6IG91cnM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlcyxcbiAgLy8gdGhlIGZvbGxvd2luZyBhcmUgYWRkZWQgaW4gMi42XG4gIGhhc0R5bmFtaWNLZXlzLFxuICBjb250ZW50SGFzaEtleVxuKSB7XG4gIHJlcyA9IHJlcyB8fCB7ICRzdGFibGU6ICFoYXNEeW5hbWljS2V5cyB9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzbG90ID0gZm5zW2ldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNsb3QpKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoc2xvdCwgcmVzLCBoYXNEeW5hbWljS2V5cyk7XG4gICAgfSBlbHNlIGlmIChzbG90KSB7XG4gICAgICAvLyBtYXJrZXIgZm9yIHJldmVyc2UgcHJveHlpbmcgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbiAgICAgIGlmIChzbG90LnByb3h5KSB7XG4gICAgICAgIHNsb3QuZm4ucHJveHkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmVzW3Nsb3Qua2V5XSA9IHNsb3QuZm47XG4gICAgfVxuICB9XG4gIGlmIChjb250ZW50SGFzaEtleSkge1xuICAgIChyZXMpLiRrZXkgPSBjb250ZW50SGFzaEtleTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kRHluYW1pY0tleXMgKGJhc2VPYmosIHZhbHVlcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBrZXkgPSB2YWx1ZXNbaV07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleSkge1xuICAgICAgYmFzZU9ialt2YWx1ZXNbaV1dID0gdmFsdWVzW2kgKyAxXTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5ICE9PSAnJyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgIC8vIG51bGwgaXMgYSBzcGVjaWFsIHZhbHVlIGZvciBleHBsaWNpdGx5IHJlbW92aW5nIGEgYmluZGluZ1xuICAgICAgd2FybihcbiAgICAgICAgKFwiSW52YWxpZCB2YWx1ZSBmb3IgZHluYW1pYyBkaXJlY3RpdmUgYXJndW1lbnQgKGV4cGVjdGVkIHN0cmluZyBvciBudWxsKTogXCIgKyBrZXkpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmFzZU9ialxufVxuXG4vLyBoZWxwZXIgdG8gZHluYW1pY2FsbHkgYXBwZW5kIG1vZGlmaWVyIHJ1bnRpbWUgbWFya2VycyB0byBldmVudCBuYW1lcy5cbi8vIGVuc3VyZSBvbmx5IGFwcGVuZCB3aGVuIHZhbHVlIGlzIGFscmVhZHkgc3RyaW5nLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBjYXN0XG4vLyB0byBzdHJpbmcgYW5kIGNhdXNlIHRoZSB0eXBlIGNoZWNrIHRvIG1pc3MuXG5mdW5jdGlvbiBwcmVwZW5kTW9kaWZpZXIgKHZhbHVlLCBzeW1ib2wpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBzeW1ib2wgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbnN0YWxsUmVuZGVySGVscGVycyAodGFyZ2V0KSB7XG4gIHRhcmdldC5fbyA9IG1hcmtPbmNlO1xuICB0YXJnZXQuX24gPSB0b051bWJlcjtcbiAgdGFyZ2V0Ll9zID0gdG9TdHJpbmc7XG4gIHRhcmdldC5fbCA9IHJlbmRlckxpc3Q7XG4gIHRhcmdldC5fdCA9IHJlbmRlclNsb3Q7XG4gIHRhcmdldC5fcSA9IGxvb3NlRXF1YWw7XG4gIHRhcmdldC5faSA9IGxvb3NlSW5kZXhPZjtcbiAgdGFyZ2V0Ll9tID0gcmVuZGVyU3RhdGljO1xuICB0YXJnZXQuX2YgPSByZXNvbHZlRmlsdGVyO1xuICB0YXJnZXQuX2sgPSBjaGVja0tleUNvZGVzO1xuICB0YXJnZXQuX2IgPSBiaW5kT2JqZWN0UHJvcHM7XG4gIHRhcmdldC5fdiA9IGNyZWF0ZVRleHRWTm9kZTtcbiAgdGFyZ2V0Ll9lID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgdGFyZ2V0Ll91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzO1xuICB0YXJnZXQuX2cgPSBiaW5kT2JqZWN0TGlzdGVuZXJzO1xuICB0YXJnZXQuX2QgPSBiaW5kRHluYW1pY0tleXM7XG4gIHRhcmdldC5fcCA9IHByZXBlbmRNb2RpZmllcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IChcbiAgZGF0YSxcbiAgcHJvcHMsXG4gIGNoaWxkcmVuLFxuICBwYXJlbnQsXG4gIEN0b3Jcbikge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgLy8gZW5zdXJlIHRoZSBjcmVhdGVFbGVtZW50IGZ1bmN0aW9uIGluIGZ1bmN0aW9uYWwgY29tcG9uZW50c1xuICAvLyBnZXRzIGEgdW5pcXVlIGNvbnRleHQgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdCBuYW1lZCBzbG90IGNoZWNrXG4gIHZhciBjb250ZXh0Vm07XG4gIGlmIChoYXNPd24ocGFyZW50LCAnX3VpZCcpKSB7XG4gICAgY29udGV4dFZtID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQpO1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIGNvbnRleHRWbS5fb3JpZ2luYWwgPSBwYXJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNvbnRleHQgdm0gcGFzc2VkIGluIGlzIGEgZnVuY3Rpb25hbCBjb250ZXh0IGFzIHdlbGwuXG4gICAgLy8gaW4gdGhpcyBjYXNlIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFyZSBhYmxlIHRvIGdldCBhIGhvbGQgdG8gdGhlXG4gICAgLy8gcmVhbCBjb250ZXh0IGluc3RhbmNlLlxuICAgIGNvbnRleHRWbSA9IHBhcmVudDtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBwYXJlbnQgPSBwYXJlbnQuX29yaWdpbmFsO1xuICB9XG4gIHZhciBpc0NvbXBpbGVkID0gaXNUcnVlKG9wdGlvbnMuX2NvbXBpbGVkKTtcbiAgdmFyIG5lZWROb3JtYWxpemF0aW9uID0gIWlzQ29tcGlsZWQ7XG5cbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLmxpc3RlbmVycyA9IGRhdGEub24gfHwgZW1wdHlPYmplY3Q7XG4gIHRoaXMuaW5qZWN0aW9ucyA9IHJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QsIHBhcmVudCk7XG4gIHRoaXMuc2xvdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzJDEuJHNsb3RzKSB7XG4gICAgICBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdGhpcyQxLiRzbG90cyA9IHJlc29sdmVTbG90cyhjaGlsZHJlbiwgcGFyZW50KVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMkMS4kc2xvdHNcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Njb3BlZFNsb3RzJywgKHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLnNsb3RzKCkpXG4gICAgfVxuICB9KSk7XG5cbiAgLy8gc3VwcG9ydCBmb3IgY29tcGlsZWQgZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoaXNDb21waWxlZCkge1xuICAgIC8vIGV4cG9zaW5nICRvcHRpb25zIGZvciByZW5kZXJTdGF0aWMoKVxuICAgIHRoaXMuJG9wdGlvbnMgPSBvcHRpb25zO1xuICAgIC8vIHByZS1yZXNvbHZlIHNsb3RzIGZvciByZW5kZXJTbG90KClcbiAgICB0aGlzLiRzbG90cyA9IHRoaXMuc2xvdHMoKTtcbiAgICB0aGlzLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuJHNsb3RzKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLl9zY29wZUlkKSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pO1xuICAgICAgaWYgKHZub2RlICYmICFBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB2bm9kZS5mblNjb3BlSWQgPSBvcHRpb25zLl9zY29wZUlkO1xuICAgICAgICB2bm9kZS5mbkNvbnRleHQgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm5vZGVcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTsgfTtcbiAgfVxufVxuXG5pbnN0YWxsUmVuZGVySGVscGVycyhGdW5jdGlvbmFsUmVuZGVyQ29udGV4dC5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgcHJvcHNEYXRhLFxuICBkYXRhLFxuICBjb250ZXh0Vm0sXG4gIGNoaWxkcmVuXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBwcm9wcyA9IHt9O1xuICB2YXIgcHJvcE9wdGlvbnMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoaXNEZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSB8fCBlbXB0eU9iamVjdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0RlZihkYXRhLmF0dHJzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLmF0dHJzKTsgfVxuICAgIGlmIChpc0RlZihkYXRhLnByb3BzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLnByb3BzKTsgfVxuICB9XG5cbiAgdmFyIHJlbmRlckNvbnRleHQgPSBuZXcgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQoXG4gICAgZGF0YSxcbiAgICBwcm9wcyxcbiAgICBjaGlsZHJlbixcbiAgICBjb250ZXh0Vm0sXG4gICAgQ3RvclxuICApO1xuXG4gIHZhciB2bm9kZSA9IG9wdGlvbnMucmVuZGVyLmNhbGwobnVsbCwgcmVuZGVyQ29udGV4dC5fYywgcmVuZGVyQ29udGV4dCk7XG5cbiAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm4gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICB2YXIgdm5vZGVzID0gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUpIHx8IFtdO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXkodm5vZGVzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc1tpXSA9IGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGVzW2ldLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0ICh2bm9kZSwgZGF0YSwgY29udGV4dFZtLCBvcHRpb25zLCByZW5kZXJDb250ZXh0KSB7XG4gIC8vICM3ODE3IGNsb25lIG5vZGUgYmVmb3JlIHNldHRpbmcgZm5Db250ZXh0LCBvdGhlcndpc2UgaWYgdGhlIG5vZGUgaXMgcmV1c2VkXG4gIC8vIChlLmcuIGl0IHdhcyBmcm9tIGEgY2FjaGVkIG5vcm1hbCBzbG90KSB0aGUgZm5Db250ZXh0IGNhdXNlcyBuYW1lZCBzbG90c1xuICAvLyB0aGF0IHNob3VsZCBub3QgYmUgbWF0Y2hlZCB0byBtYXRjaC5cbiAgdmFyIGNsb25lID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gIGNsb25lLmZuQ29udGV4dCA9IGNvbnRleHRWbTtcbiAgY2xvbmUuZm5PcHRpb25zID0gb3B0aW9ucztcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAoY2xvbmUuZGV2dG9vbHNNZXRhID0gY2xvbmUuZGV2dG9vbHNNZXRhIHx8IHt9KS5yZW5kZXJDb250ZXh0ID0gcmVuZGVyQ29udGV4dDtcbiAgfVxuICBpZiAoZGF0YS5zbG90KSB7XG4gICAgKGNsb25lLmRhdGEgfHwgKGNsb25lLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gIH1cbiAgcmV0dXJuIGNsb25lXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGlubGluZSBob29rcyB0byBiZSBpbnZva2VkIG9uIGNvbXBvbmVudCBWTm9kZXMgZHVyaW5nIHBhdGNoXG52YXIgY29tcG9uZW50Vk5vZGVIb29rcyA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIGlmIChcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAhdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkICYmXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZVxuICAgICkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgIHZub2RlLFxuICAgICAgICBhY3RpdmVJbnN0YW5jZVxuICAgICAgKTtcbiAgICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XG4gICAgfVxuICB9LFxuXG4gIHByZXBhdGNoOiBmdW5jdGlvbiBwcmVwYXRjaCAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgdXBkYXRlQ2hpbGRDb21wb25lbnQoXG4gICAgICBjaGlsZCxcbiAgICAgIG9wdGlvbnMucHJvcHNEYXRhLCAvLyB1cGRhdGVkIHByb3BzXG4gICAgICBvcHRpb25zLmxpc3RlbmVycywgLy8gdXBkYXRlZCBsaXN0ZW5lcnNcbiAgICAgIHZub2RlLCAvLyBuZXcgcGFyZW50IHZub2RlXG4gICAgICBvcHRpb25zLmNoaWxkcmVuIC8vIG5ldyBjaGlsZHJlblxuICAgICk7XG4gIH0sXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQgKHZub2RlKSB7XG4gICAgdmFyIGNvbnRleHQgPSB2bm9kZS5jb250ZXh0O1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCkge1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdvblNlcnZpY2VDcmVhdGVkJyk7XG4gICAgICBjYWxsSG9vayhjb21wb25lbnRJbnN0YW5jZSwgJ29uU2VydmljZUF0dGFjaGVkJyk7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgLy8gdnVlLXJvdXRlciMxMjEyXG4gICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgIC8vIG9uIGluY29ycmVjdCBjaGlsZHJlbi4gSW5zdGVhZCB3ZSBwdXNoIHRoZW0gaW50byBhIHF1ZXVlIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICBDdG9yLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgaWYgKGlzVW5kZWYoQ3RvcikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7XG5cbiAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXG4gIGlmIChpc09iamVjdChDdG9yKSkge1xuICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG4gIH1cblxuICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksXG4gIC8vIHJlamVjdC5cbiAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICB2YXIgYXN5bmNGYWN0b3J5O1xuICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHtcbiAgICBhc3luY0ZhY3RvcnkgPSBDdG9yO1xuICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoYXN5bmNGYWN0b3J5LCBiYXNlQ3Rvcik7XG4gICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxuICAgICAgLy8gYXMgYSBjb21tZW50IG5vZGUgYnV0IHByZXNlcnZlcyBhbGwgdGhlIHJhdyBpbmZvcm1hdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uXG4gICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihcbiAgICAgICAgYXN5bmNGYWN0b3J5LFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgdGFnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgZGF0YSBpbnRvIHByb3BzICYgZXZlbnRzXG4gIGlmIChpc0RlZihkYXRhLm1vZGVsKSkge1xuICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XG4gIH1cblxuICAvLyBleHRyYWN0IHByb3BzXG4gIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHRhZywgY29udGV4dCk7IC8vIGZpeGVkIGJ5IHh4eHh4eFxuXG4gIC8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbilcbiAgfVxuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzLCBzaW5jZSB0aGVzZSBuZWVkcyB0byBiZSB0cmVhdGVkIGFzXG4gIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzXG4gIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICAvLyBzbyBpdCBnZXRzIHByb2Nlc3NlZCBkdXJpbmcgcGFyZW50IGNvbXBvbmVudCBwYXRjaC5cbiAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuYWJzdHJhY3QpKSB7XG4gICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90XG5cbiAgICAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgdmFyIHNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgZGF0YSA9IHt9O1xuICAgIGlmIChzbG90KSB7XG4gICAgICBkYXRhLnNsb3QgPSBzbG90O1xuICAgIH1cbiAgfVxuXG4gIC8vIGluc3RhbGwgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZVxuICBpbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7XG5cbiAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG4gIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICBhc3luY0ZhY3RvcnlcbiAgKTtcblxuICByZXR1cm4gdm5vZGVcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSAoXG4gIHZub2RlLCAvLyB3ZSBrbm93IGl0J3MgTW91bnRlZENvbXBvbmVudFZOb2RlIGJ1dCBmbG93IGRvZXNuJ3RcbiAgcGFyZW50IC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIHBhcmVudDogcGFyZW50XG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICB2YXIgZXhpc3RpbmcgPSBob29rc1trZXldO1xuICAgIHZhciB0b01lcmdlID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7XG4gICAgICBob29rc1trZXldID0gZXhpc3RpbmcgPyBtZXJnZUhvb2skMSh0b01lcmdlLCBleGlzdGluZykgOiB0b01lcmdlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2skMSAoZjEsIGYyKSB7XG4gIHZhciBtZXJnZWQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIC8vIGZsb3cgY29tcGxhaW5zIGFib3V0IGV4dHJhIGFyZ3Mgd2hpY2ggaXMgd2h5IHdlIHVzZSBhbnlcbiAgICBmMShhLCBiKTtcbiAgICBmMihhLCBiKTtcbiAgfTtcbiAgbWVyZ2VkLl9tZXJnZWQgPSB0cnVlO1xuICByZXR1cm4gbWVyZ2VkXG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCdcbiAgOyhkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pKVtwcm9wXSA9IGRhdGEubW9kZWwudmFsdWU7XG4gIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gIHZhciBleGlzdGluZyA9IG9uW2V2ZW50XTtcbiAgdmFyIGNhbGxiYWNrID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgaWYgKGlzRGVmKGV4aXN0aW5nKSkge1xuICAgIGlmIChcbiAgICAgIEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpXG4gICAgICAgID8gZXhpc3RpbmcuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xXG4gICAgICAgIDogZXhpc3RpbmcgIT09IGNhbGxiYWNrXG4gICAgKSB7XG4gICAgICBvbltldmVudF0gPSBbY2FsbGJhY2tdLmNvbmNhdChleGlzdGluZyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG9uW2V2ZW50XSA9IGNhbGxiYWNrO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG52YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7XG5cbi8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZSxcbiAgYWx3YXlzTm9ybWFsaXplXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IGNoaWxkcmVuO1xuICAgIGNoaWxkcmVuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGVcbikge1xuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoKGRhdGEpLl9fb2JfXykpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIkF2b2lkIHVzaW5nIG9ic2VydmVkIGRhdGEgb2JqZWN0IGFzIHZub2RlIGRhdGE6IFwiICsgKEpTT04uc3RyaW5naWZ5KGRhdGEpKSArIFwiXFxuXCIgK1xuICAgICAgJ0Fsd2F5cyBjcmVhdGUgZnJlc2ggdm5vZGUgZGF0YSBvYmplY3RzIGluIGVhY2ggcmVuZGVyIScsXG4gICAgICBjb250ZXh0XG4gICAgKTtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gb2JqZWN0IHN5bnRheCBpbiB2LWJpbmRcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEuaXMpKSB7XG4gICAgdGFnID0gZGF0YS5pcztcbiAgfVxuICBpZiAoIXRhZykge1xuICAgIC8vIGluIGNhc2Ugb2YgY29tcG9uZW50IDppcyBzZXQgdG8gZmFsc3kgdmFsdWVcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1wcmltaXRpdmUga2V5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5rZXkpICYmICFpc1ByaW1pdGl2ZShkYXRhLmtleSlcbiAgKSB7XG4gICAge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHVzaW5nIG5vbi1wcmltaXRpdmUgdmFsdWUgYXMga2V5LCAnICtcbiAgICAgICAgJ3VzZSBzdHJpbmcvbnVtYmVyIHZhbHVlIGluc3RlYWQuJyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5zY29wZWRTbG90cyA9IHsgZGVmYXVsdDogY2hpbGRyZW5bMF0gfTtcbiAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH1cbiAgdmFyIHZub2RlLCBucztcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIEN0b3I7XG4gICAgbnMgPSAoY29udGV4dC4kdm5vZGUgJiYgY29udGV4dC4kdm5vZGUubnMpIHx8IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEubmF0aXZlT24pKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiVGhlIC5uYXRpdmUgbW9kaWZpZXIgZm9yIHYtb24gaXMgb25seSB2YWxpZCBvbiBjb21wb25lbnRzIGJ1dCBpdCB3YXMgdXNlZCBvbiA8XCIgKyB0YWcgKyBcIj4uXCIpLFxuICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICBjb25maWcucGFyc2VQbGF0Zm9ybVRhZ05hbWUodGFnKSwgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoKCFkYXRhIHx8ICFkYXRhLnByZSkgJiYgaXNEZWYoQ3RvciA9IHJlc29sdmVBc3NldChjb250ZXh0LiRvcHRpb25zLCAnY29tcG9uZW50cycsIHRhZykpKSB7XG4gICAgICAvLyBjb21wb25lbnRcbiAgICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KEN0b3IsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuLCB0YWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1bmtub3duIG9yIHVubGlzdGVkIG5hbWVzcGFjZWQgZWxlbWVudHNcbiAgICAgIC8vIGNoZWNrIGF0IHJ1bnRpbWUgYmVjYXVzZSBpdCBtYXkgZ2V0IGFzc2lnbmVkIGEgbmFtZXNwYWNlIHdoZW4gaXRzXG4gICAgICAvLyBwYXJlbnQgbm9ybWFsaXplcyBjaGlsZHJlblxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIHRhZywgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBkaXJlY3QgY29tcG9uZW50IG9wdGlvbnMgLyBjb25zdHJ1Y3RvclxuICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KHRhZywgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2UgaWYgKGlzRGVmKHZub2RlKSkge1xuICAgIGlmIChpc0RlZihucykpIHsgYXBwbHlOUyh2bm9kZSwgbnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7IHJlZ2lzdGVyRGVlcEJpbmRpbmdzKGRhdGEpOyB9XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5TlMgKHZub2RlLCBucywgZm9yY2UpIHtcbiAgdm5vZGUubnMgPSBucztcbiAgaWYgKHZub2RlLnRhZyA9PT0gJ2ZvcmVpZ25PYmplY3QnKSB7XG4gICAgLy8gdXNlIGRlZmF1bHQgbmFtZXNwYWNlIGluc2lkZSBmb3JlaWduT2JqZWN0XG4gICAgbnMgPSB1bmRlZmluZWQ7XG4gICAgZm9yY2UgPSB0cnVlO1xuICB9XG4gIGlmIChpc0RlZih2bm9kZS5jaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoY2hpbGQudGFnKSAmJiAoXG4gICAgICAgIGlzVW5kZWYoY2hpbGQubnMpIHx8IChpc1RydWUoZm9yY2UpICYmIGNoaWxkLnRhZyAhPT0gJ3N2ZycpKSkge1xuICAgICAgICBhcHBseU5TKGNoaWxkLCBucywgZm9yY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyByZWYgIzUzMThcbi8vIG5lY2Vzc2FyeSB0byBlbnN1cmUgcGFyZW50IHJlLXJlbmRlciB3aGVuIGRlZXAgYmluZGluZ3MgbGlrZSA6c3R5bGUgYW5kXG4vLyA6Y2xhc3MgYXJlIHVzZWQgb24gc2xvdCBub2Rlc1xuZnVuY3Rpb24gcmVnaXN0ZXJEZWVwQmluZGluZ3MgKGRhdGEpIHtcbiAgaWYgKGlzT2JqZWN0KGRhdGEuc3R5bGUpKSB7XG4gICAgdHJhdmVyc2UoZGF0YS5zdHlsZSk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KGRhdGEuY2xhc3MpKSB7XG4gICAgdHJhdmVyc2UoZGF0YS5jbGFzcyk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRSZW5kZXIgKHZtKSB7XG4gIHZtLl92bm9kZSA9IG51bGw7IC8vIHRoZSByb290IG9mIHRoZSBjaGlsZCB0cmVlXG4gIHZtLl9zdGF0aWNUcmVlcyA9IG51bGw7IC8vIHYtb25jZSBjYWNoZWQgdHJlZXNcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgdmFyIHBhcmVudFZub2RlID0gdm0uJHZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7IC8vIHRoZSBwbGFjZWhvbGRlciBub2RlIGluIHBhcmVudCB0cmVlXG4gIHZhciByZW5kZXJDb250ZXh0ID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuY29udGV4dDtcbiAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLCByZW5kZXJDb250ZXh0KTtcbiAgdm0uJHNjb3BlZFNsb3RzID0gZW1wdHlPYmplY3Q7XG4gIC8vIGJpbmQgdGhlIGNyZWF0ZUVsZW1lbnQgZm4gdG8gdGhpcyBpbnN0YW5jZVxuICAvLyBzbyB0aGF0IHdlIGdldCBwcm9wZXIgcmVuZGVyIGNvbnRleHQgaW5zaWRlIGl0LlxuICAvLyBhcmdzIG9yZGVyOiB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSwgYWx3YXlzTm9ybWFsaXplXG4gIC8vIGludGVybmFsIHZlcnNpb24gaXMgdXNlZCBieSByZW5kZXIgZnVuY3Rpb25zIGNvbXBpbGVkIGZyb20gdGVtcGxhdGVzXG4gIHZtLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIGZhbHNlKTsgfTtcbiAgLy8gbm9ybWFsaXphdGlvbiBpcyBhbHdheXMgYXBwbGllZCBmb3IgdGhlIHB1YmxpYyB2ZXJzaW9uLCB1c2VkIGluXG4gIC8vIHVzZXItd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zLlxuICB2bS4kY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCB0cnVlKTsgfTtcblxuICAvLyAkYXR0cnMgJiAkbGlzdGVuZXJzIGFyZSBleHBvc2VkIGZvciBlYXNpZXIgSE9DIGNyZWF0aW9uLlxuICAvLyB0aGV5IG5lZWQgdG8gYmUgcmVhY3RpdmUgc28gdGhhdCBIT0NzIHVzaW5nIHRoZW0gYXJlIGFsd2F5cyB1cGRhdGVkXG4gIHZhciBwYXJlbnREYXRhID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuZGF0YTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkYXR0cnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRsaXN0ZW5lcnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgfVxufVxuXG52YXIgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICBpZiAoX3BhcmVudFZub2RlKSB7XG4gICAgICB2bS4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHZtLiRzbG90cyxcbiAgICAgICAgdm0uJHNjb3BlZFNsb3RzXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHNldCBwYXJlbnQgdm5vZGUuIHRoaXMgYWxsb3dzIHJlbmRlciBmdW5jdGlvbnMgdG8gaGF2ZSBhY2Nlc3NcbiAgICAvLyB0byB0aGUgZGF0YSBvbiB0aGUgcGxhY2Vob2xkZXIgbm9kZS5cbiAgICB2bS4kdm5vZGUgPSBfcGFyZW50Vm5vZGU7XG4gICAgLy8gcmVuZGVyIHNlbGZcbiAgICB2YXIgdm5vZGU7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBtYWludGFpbiBhIHN0YWNrIGJlY2F1c2UgYWxsIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gc2VwYXJhdGVseSBmcm9tIG9uZSBhbm90aGVyLiBOZXN0ZWQgY29tcG9uZW50J3MgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyB3aGVuIHBhcmVudCBjb21wb25lbnQgaXMgcGF0Y2hlZC5cbiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IHZtO1xuICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJcIik7XG4gICAgICAvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCxcbiAgICAgIC8vIG9yIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2bm9kZSA9IHZtLiRvcHRpb25zLnJlbmRlckVycm9yLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCwgZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJFcnJvclwiKTtcbiAgICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuICAgIC8vIGlmIHRoZSByZXR1cm5lZCBhcnJheSBjb250YWlucyBvbmx5IGEgc2luZ2xlIG5vZGUsIGFsbG93IGl0XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpICYmIHZub2RlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdm5vZGUgPSB2bm9kZVswXTtcbiAgICB9XG4gICAgLy8gcmV0dXJuIGVtcHR5IHZub2RlIGluIGNhc2UgdGhlIHJlbmRlciBmdW5jdGlvbiBlcnJvcmVkIG91dFxuICAgIGlmICghKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdNdWx0aXBsZSByb290IG5vZGVzIHJldHVybmVkIGZyb20gcmVuZGVyIGZ1bmN0aW9uLiBSZW5kZXIgZnVuY3Rpb24gJyArXG4gICAgICAgICAgJ3Nob3VsZCByZXR1cm4gYSBzaW5nbGUgcm9vdCBub2RlLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICAgIH1cbiAgICAvLyBzZXQgcGFyZW50XG4gICAgdm5vZGUucGFyZW50ID0gX3BhcmVudFZub2RlO1xuICAgIHJldHVybiB2bm9kZVxuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW5zdXJlQ3RvciAoY29tcCwgYmFzZSkge1xuICBpZiAoXG4gICAgY29tcC5fX2VzTW9kdWxlIHx8XG4gICAgKGhhc1N5bWJvbCAmJiBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxuICApIHtcbiAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICB9XG4gIHJldHVybiBpc09iamVjdChjb21wKVxuICAgID8gYmFzZS5leHRlbmQoY29tcClcbiAgICA6IGNvbXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlciAoXG4gIGZhY3RvcnksXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICB2YXIgbm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgbm9kZS5hc3luY0ZhY3RvcnkgPSBmYWN0b3J5O1xuICBub2RlLmFzeW5jTWV0YSA9IHsgZGF0YTogZGF0YSwgY29udGV4dDogY29udGV4dCwgY2hpbGRyZW46IGNoaWxkcmVuLCB0YWc6IHRhZyB9O1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICBmYWN0b3J5LFxuICBiYXNlQ3RvclxuKSB7XG4gIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZXJyb3JDb21wXG4gIH1cblxuICBpZiAoaXNEZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5yZXNvbHZlZFxuICB9XG5cbiAgdmFyIG93bmVyID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuICBpZiAob3duZXIgJiYgaXNEZWYoZmFjdG9yeS5vd25lcnMpICYmIGZhY3Rvcnkub3duZXJzLmluZGV4T2Yob3duZXIpID09PSAtMSkge1xuICAgIC8vIGFscmVhZHkgcGVuZGluZ1xuICAgIGZhY3Rvcnkub3duZXJzLnB1c2gob3duZXIpO1xuICB9XG5cbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgfVxuXG4gIGlmIChvd25lciAmJiAhaXNEZWYoZmFjdG9yeS5vd25lcnMpKSB7XG4gICAgdmFyIG93bmVycyA9IGZhY3Rvcnkub3duZXJzID0gW293bmVyXTtcbiAgICB2YXIgc3luYyA9IHRydWU7XG4gICAgdmFyIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgdmFyIHRpbWVyVGltZW91dCA9IG51bGxcblxuICAgIDsob3duZXIpLiRvbignaG9vazpkZXN0cm95ZWQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmUob3duZXJzLCBvd25lcik7IH0pO1xuXG4gICAgdmFyIGZvcmNlUmVuZGVyID0gZnVuY3Rpb24gKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvd25lcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIChvd25lcnNbaV0pLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgICBpZiAodGltZXJMb2FkaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyTG9hZGluZyk7XG4gICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZXJUaW1lb3V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyVGltZW91dCk7XG4gICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVzb2x2ZSA9IG9uY2UoZnVuY3Rpb24gKHJlcykge1xuICAgICAgLy8gY2FjaGUgcmVzb2x2ZWRcbiAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpO1xuICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZXMgPSBmYWN0b3J5KHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICBpZiAoaXNPYmplY3QocmVzKSkge1xuICAgICAgaWYgKGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZShyZXMuY29tcG9uZW50KSkge1xuICAgICAgICByZXMuY29tcG9uZW50LnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgICAgICBpZiAoaXNEZWYocmVzLmVycm9yKSkge1xuICAgICAgICAgIGZhY3RvcnkuZXJyb3JDb21wID0gZW5zdXJlQ3RvcihyZXMuZXJyb3IsIGJhc2VDdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMubG9hZGluZykpIHtcbiAgICAgICAgICBmYWN0b3J5LmxvYWRpbmdDb21wID0gZW5zdXJlQ3RvcihyZXMubG9hZGluZywgYmFzZUN0b3IpO1xuICAgICAgICAgIGlmIChyZXMuZGVsYXkgPT09IDApIHtcbiAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSAmJiBpc1VuZGVmKGZhY3RvcnkuZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3JjZVJlbmRlcihmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlcy5kZWxheSB8fCAyMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMudGltZW91dCkpIHtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgICAgICAgICAgICAgICAgPyAoXCJ0aW1lb3V0IChcIiArIChyZXMudGltZW91dCkgKyBcIm1zKVwiKVxuICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgcmVzLnRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3luYyA9IGZhbHNlO1xuICAgIC8vIHJldHVybiBpbiBjYXNlIHJlc29sdmVkIHN5bmNocm9ub3VzbHlcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nXG4gICAgICA/IGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgICAgIDogZmFjdG9yeS5yZXNvbHZlZFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0FzeW5jUGxhY2Vob2xkZXIgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuaXNDb21tZW50ICYmIG5vZGUuYXN5bmNGYWN0b3J5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZXRGaXJzdENvbXBvbmVudENoaWxkIChjaGlsZHJlbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIChpc0RlZihjLmNvbXBvbmVudE9wdGlvbnMpIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKSkpIHtcbiAgICAgICAgcmV0dXJuIGNcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXZlbnRzICh2bSkge1xuICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlO1xuICAvLyBpbml0IHBhcmVudCBhdHRhY2hlZCBldmVudHNcbiAgdmFyIGxpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGlmIChsaXN0ZW5lcnMpIHtcbiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycyk7XG4gIH1cbn1cblxudmFyIHRhcmdldDtcblxuZnVuY3Rpb24gYWRkIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMSAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb2ZmKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyIChldmVudCwgZm4pIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQ7XG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgX3RhcmdldC4kb2ZmKGV2ZW50LCBvbmNlSGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyAoXG4gIHZtLFxuICBsaXN0ZW5lcnMsXG4gIG9sZExpc3RlbmVyc1xuKSB7XG4gIHRhcmdldCA9IHZtO1xuICB1cGRhdGVMaXN0ZW5lcnMobGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMgfHwge30sIGFkZCwgcmVtb3ZlJDEsIGNyZWF0ZU9uY2VIYW5kbGVyLCB2bSk7XG4gIHRhcmdldCA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXZlbnRzTWl4aW4gKFZ1ZSkge1xuICB2YXIgaG9va1JFID0gL15ob29rOi87XG4gIFZ1ZS5wcm90b3R5cGUuJG9uID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2bS4kb24oZXZlbnRbaV0sIGZuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHZtLl9ldmVudHNbZXZlbnRdIHx8ICh2bS5fZXZlbnRzW2V2ZW50XSA9IFtdKSkucHVzaChmbik7XG4gICAgICAvLyBvcHRpbWl6ZSBob29rOmV2ZW50IGNvc3QgYnkgdXNpbmcgYSBib29sZWFuIGZsYWcgbWFya2VkIGF0IHJlZ2lzdHJhdGlvblxuICAgICAgLy8gaW5zdGVhZCBvZiBhIGhhc2ggbG9va3VwXG4gICAgICBpZiAoaG9va1JFLnRlc3QoZXZlbnQpKSB7XG4gICAgICAgIHZtLl9oYXNIb29rRXZlbnQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgZnVuY3Rpb24gb24gKCkge1xuICAgICAgdm0uJG9mZihldmVudCwgb24pO1xuICAgICAgZm4uYXBwbHkodm0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIG9uLmZuID0gZm47XG4gICAgdm0uJG9uKGV2ZW50LCBvbik7XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBhcnJheSBvZiBldmVudHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkkMSA8IGw7IGkkMSsrKSB7XG4gICAgICAgIHZtLiRvZmYoZXZlbnRbaSQxXSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGV2ZW50XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmICghY2JzKSB7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKCFmbikge1xuICAgICAgdm0uX2V2ZW50c1tldmVudF0gPSBudWxsO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGhhbmRsZXJcbiAgICB2YXIgY2I7XG4gICAgdmFyIGkgPSBjYnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNiID0gY2JzW2ldO1xuICAgICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgICAgY2JzLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBsb3dlckNhc2VFdmVudCA9IGV2ZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAobG93ZXJDYXNlRXZlbnQgIT09IGV2ZW50ICYmIHZtLl9ldmVudHNbbG93ZXJDYXNlRXZlbnRdKSB7XG4gICAgICAgIHRpcChcbiAgICAgICAgICBcIkV2ZW50IFxcXCJcIiArIGxvd2VyQ2FzZUV2ZW50ICsgXCJcXFwiIGlzIGVtaXR0ZWQgaW4gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIgYnV0IHRoZSBoYW5kbGVyIGlzIHJlZ2lzdGVyZWQgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSBcIiArXG4gICAgICAgICAgXCJ2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gXCIgK1xuICAgICAgICAgIFwiWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgKGh5cGhlbmF0ZShldmVudCkpICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmIChjYnMpIHtcbiAgICAgIGNicyA9IGNicy5sZW5ndGggPiAxID8gdG9BcnJheShjYnMpIDogY2JzO1xuICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgICB2YXIgaW5mbyA9IFwiZXZlbnQgaGFuZGxlciBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCJcIjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjYnNbaV0sIHZtLCBhcmdzLCB2bSwgaW5mbyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIGFjdGl2ZUluc3RhbmNlID0gbnVsbDtcbnZhciBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcblxuZnVuY3Rpb24gc2V0QWN0aXZlSW5zdGFuY2Uodm0pIHtcbiAgdmFyIHByZXZBY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlO1xuICBhY3RpdmVJbnN0YW5jZSA9IHZtO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGFjdGl2ZUluc3RhbmNlID0gcHJldkFjdGl2ZUluc3RhbmNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRMaWZlY3ljbGUgKHZtKSB7XG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cbiAgLy8gbG9jYXRlIGZpcnN0IG5vbi1hYnN0cmFjdCBwYXJlbnRcbiAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBpZiAocGFyZW50ICYmICFvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgd2hpbGUgKHBhcmVudC4kb3B0aW9ucy5hYnN0cmFjdCAmJiBwYXJlbnQuJHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIHBhcmVudC4kY2hpbGRyZW4ucHVzaCh2bSk7XG4gIH1cblxuICB2bS4kcGFyZW50ID0gcGFyZW50O1xuICB2bS4kcm9vdCA9IHBhcmVudCA/IHBhcmVudC4kcm9vdCA6IHZtO1xuXG4gIHZtLiRjaGlsZHJlbiA9IFtdO1xuICB2bS4kcmVmcyA9IHt9O1xuXG4gIHZtLl93YXRjaGVyID0gbnVsbDtcbiAgdm0uX2luYWN0aXZlID0gbnVsbDtcbiAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gIHZtLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciBwcmV2RWwgPSB2bS4kZWw7XG4gICAgdmFyIHByZXZWbm9kZSA9IHZtLl92bm9kZTtcbiAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2Uodm0pO1xuICAgIHZtLl92bm9kZSA9IHZub2RlO1xuICAgIC8vIFZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fIGlzIGluamVjdGVkIGluIGVudHJ5IHBvaW50c1xuICAgIC8vIGJhc2VkIG9uIHRoZSByZW5kZXJpbmcgYmFja2VuZCB1c2VkLlxuICAgIGlmICghcHJldlZub2RlKSB7XG4gICAgICAvLyBpbml0aWFsIHJlbmRlclxuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UgLyogcmVtb3ZlT25seSAqLyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVwZGF0ZXNcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyhwcmV2Vm5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgLy8gdXBkYXRlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHByZXZFbCkge1xuICAgICAgcHJldkVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IHZtO1xuICAgIH1cbiAgICAvLyBpZiBwYXJlbnQgaXMgYW4gSE9DLCB1cGRhdGUgaXRzICRlbCBhcyB3ZWxsXG4gICAgaWYgKHZtLiR2bm9kZSAmJiB2bS4kcGFyZW50ICYmIHZtLiR2bm9kZSA9PT0gdm0uJHBhcmVudC5fdm5vZGUpIHtcbiAgICAgIHZtLiRwYXJlbnQuJGVsID0gdm0uJGVsO1xuICAgIH1cbiAgICAvLyB1cGRhdGVkIGhvb2sgaXMgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIgdG8gZW5zdXJlIHRoYXQgY2hpbGRyZW4gYXJlXG4gICAgLy8gdXBkYXRlZCBpbiBhIHBhcmVudCdzIHVwZGF0ZWQgaG9vay5cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRmb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZURlc3Ryb3knKTtcbiAgICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSBwYXJlbnRcbiAgICB2YXIgcGFyZW50ID0gdm0uJHBhcmVudDtcbiAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuX2lzQmVpbmdEZXN0cm95ZWQgJiYgIXZtLiRvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgICByZW1vdmUocGFyZW50LiRjaGlsZHJlbiwgdm0pO1xuICAgIH1cbiAgICAvLyB0ZWFyZG93biB3YXRjaGVyc1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gICAgdmFyIGkgPSB2bS5fd2F0Y2hlcnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZtLl93YXRjaGVyc1tpXS50ZWFyZG93bigpO1xuICAgIH1cbiAgICAvLyByZW1vdmUgcmVmZXJlbmNlIGZyb20gZGF0YSBvYlxuICAgIC8vIGZyb3plbiBvYmplY3QgbWF5IG5vdCBoYXZlIG9ic2VydmVyLlxuICAgIGlmICh2bS5fZGF0YS5fX29iX18pIHtcbiAgICAgIHZtLl9kYXRhLl9fb2JfXy52bUNvdW50LS07XG4gICAgfVxuICAgIC8vIGNhbGwgdGhlIGxhc3QgaG9vay4uLlxuICAgIHZtLl9pc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gaW52b2tlIGRlc3Ryb3kgaG9va3Mgb24gY3VycmVudCByZW5kZXJlZCB0cmVlXG4gICAgdm0uX19wYXRjaF9fKHZtLl92bm9kZSwgbnVsbCk7XG4gICAgLy8gZmlyZSBkZXN0cm95ZWQgaG9va1xuICAgIGNhbGxIb29rKHZtLCAnZGVzdHJveWVkJyk7XG4gICAgLy8gdHVybiBvZmYgYWxsIGluc3RhbmNlIGxpc3RlbmVycy5cbiAgICB2bS4kb2ZmKCk7XG4gICAgLy8gcmVtb3ZlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICAvLyByZWxlYXNlIGNpcmN1bGFyIHJlZmVyZW5jZSAoIzY3NTkpXG4gICAgaWYgKHZtLiR2bm9kZSkge1xuICAgICAgdm0uJHZub2RlLnBhcmVudCA9IG51bGw7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgLy8gZHluYW1pYyBzbG90IG5hbWVzKS4gU3RhdGljIHNjb3BlZCBzbG90cyBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGhhcyB0aGVcbiAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7XG4gIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSlcbiAgKTtcblxuICAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXG4gIC8vIHVwZGF0ZS4gRHluYW1pYyBzY29wZWQgc2xvdHMgbWF5IGFsc28gaGF2ZSBjaGFuZ2VkLiBJbiBzdWNoIGNhc2VzLCBhIGZvcmNlZFxuICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIGhhc0R5bmFtaWNTY29wZWRTbG90XG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG5cbiAgLy8gdXBkYXRlIHByb3BzXG4gIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIC8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gIH1cbiAgXG4gIC8vIGZpeGVkIGJ5IHh4eHh4eCB1cGRhdGUgcHJvcGVydGllcyhtcCBydW50aW1lKVxuICB2bS5fJHVwZGF0ZVByb3BlcnRpZXMgJiYgdm0uXyR1cGRhdGVQcm9wZXJ0aWVzKHZtKTtcbiAgXG4gIC8vIHVwZGF0ZSBsaXN0ZW5lcnNcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyk7XG5cbiAgLy8gcmVzb2x2ZSBzbG90cyArIGZvcmNlIHVwZGF0ZSBpZiBoYXMgY2hpbGRyZW5cbiAgaWYgKG5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgcHVzaFRhcmdldCgpO1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgdmFyIGluZm8gPSBob29rICsgXCIgaG9va1wiO1xuICBpZiAoaGFuZGxlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBudWxsLCB2bSwgaW5mbyk7XG4gICAgfVxuICB9XG4gIGlmICh2bS5faGFzSG9va0V2ZW50KSB7XG4gICAgdm0uJGVtaXQoJ2hvb2s6JyArIGhvb2spO1xuICB9XG4gIHBvcFRhcmdldCgpO1xufVxuXG4vKiAgKi9cblxudmFyIE1BWF9VUERBVEVfQ09VTlQgPSAxMDA7XG5cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGFjdGl2YXRlZENoaWxkcmVuID0gW107XG52YXIgaGFzID0ge307XG52YXIgY2lyY3VsYXIgPSB7fTtcbnZhciB3YWl0aW5nID0gZmFsc2U7XG52YXIgZmx1c2hpbmcgPSBmYWxzZTtcbnZhciBpbmRleCA9IDA7XG5cbi8qKlxuICogUmVzZXQgdGhlIHNjaGVkdWxlcidzIHN0YXRlLlxuICovXG5mdW5jdGlvbiByZXNldFNjaGVkdWxlclN0YXRlICgpIHtcbiAgaW5kZXggPSBxdWV1ZS5sZW5ndGggPSBhY3RpdmF0ZWRDaGlsZHJlbi5sZW5ndGggPSAwO1xuICBoYXMgPSB7fTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaXJjdWxhciA9IHt9O1xuICB9XG4gIHdhaXRpbmcgPSBmbHVzaGluZyA9IGZhbHNlO1xufVxuXG4vLyBBc3luYyBlZGdlIGNhc2UgIzY1NjYgcmVxdWlyZXMgc2F2aW5nIHRoZSB0aW1lc3RhbXAgd2hlbiBldmVudCBsaXN0ZW5lcnMgYXJlXG4vLyBhdHRhY2hlZC4gSG93ZXZlciwgY2FsbGluZyBwZXJmb3JtYW5jZS5ub3coKSBoYXMgYSBwZXJmIG92ZXJoZWFkIGVzcGVjaWFsbHlcbi8vIGlmIHRoZSBwYWdlIGhhcyB0aG91c2FuZHMgb2YgZXZlbnQgbGlzdGVuZXJzLiBJbnN0ZWFkLCB3ZSB0YWtlIGEgdGltZXN0YW1wXG4vLyBldmVyeSB0aW1lIHRoZSBzY2hlZHVsZXIgZmx1c2hlcyBhbmQgdXNlIHRoYXQgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnNcbi8vIGF0dGFjaGVkIGR1cmluZyB0aGF0IGZsdXNoLlxudmFyIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IDA7XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSBmaXggcmVxdWlyZXMgc3RvcmluZyBhbiBldmVudCBsaXN0ZW5lcidzIGF0dGFjaCB0aW1lc3RhbXAuXG52YXIgZ2V0Tm93ID0gRGF0ZS5ub3c7XG5cbi8vIERldGVybWluZSB3aGF0IGV2ZW50IHRpbWVzdGFtcCB0aGUgYnJvd3NlciBpcyB1c2luZy4gQW5ub3lpbmdseSwgdGhlXG4vLyB0aW1lc3RhbXAgY2FuIGVpdGhlciBiZSBoaS1yZXMgKHJlbGF0aXZlIHRvIHBhZ2UgbG9hZCkgb3IgbG93LXJlc1xuLy8gKHJlbGF0aXZlIHRvIFVOSVggZXBvY2gpLCBzbyBpbiBvcmRlciB0byBjb21wYXJlIHRpbWUgd2UgaGF2ZSB0byB1c2UgdGhlXG4vLyBzYW1lIHRpbWVzdGFtcCB0eXBlIHdoZW4gc2F2aW5nIHRoZSBmbHVzaCB0aW1lc3RhbXAuXG4vLyBBbGwgSUUgdmVyc2lvbnMgdXNlIGxvdy1yZXMgZXZlbnQgdGltZXN0YW1wcywgYW5kIGhhdmUgcHJvYmxlbWF0aWMgY2xvY2tcbi8vIGltcGxlbWVudGF0aW9ucyAoIzk2MzIpXG5pZiAoaW5Ccm93c2VyICYmICFpc0lFKSB7XG4gIHZhciBwZXJmb3JtYW5jZSA9IHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgaWYgKFxuICAgIHBlcmZvcm1hbmNlICYmXG4gICAgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIGdldE5vdygpID4gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50JykudGltZVN0YW1wXG4gICkge1xuICAgIC8vIGlmIHRoZSBldmVudCB0aW1lc3RhbXAsIGFsdGhvdWdoIGV2YWx1YXRlZCBBRlRFUiB0aGUgRGF0ZS5ub3coKSwgaXNcbiAgICAvLyBzbWFsbGVyIHRoYW4gaXQsIGl0IG1lYW5zIHRoZSBldmVudCBpcyB1c2luZyBhIGhpLXJlcyB0aW1lc3RhbXAsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gdXNlIHRoZSBoaS1yZXMgdmVyc2lvbiBmb3IgZXZlbnQgbGlzdGVuZXIgdGltZXN0YW1wcyBhc1xuICAgIC8vIHdlbGwuXG4gICAgZ2V0Tm93ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7IH07XG4gIH1cbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IGdldE5vdygpO1xuICBmbHVzaGluZyA9IHRydWU7XG4gIHZhciB3YXRjaGVyLCBpZDtcblxuICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XG4gIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKVxuICAvLyAyLiBBIGNvbXBvbmVudCdzIHVzZXIgd2F0Y2hlcnMgYXJlIHJ1biBiZWZvcmUgaXRzIHJlbmRlciB3YXRjaGVyIChiZWNhdXNlXG4gIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcbiAgLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1bixcbiAgLy8gICAgaXRzIHdhdGNoZXJzIGNhbiBiZSBza2lwcGVkLlxuICBxdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG5cbiAgLy8gZG8gbm90IGNhY2hlIGxlbmd0aCBiZWNhdXNlIG1vcmUgd2F0Y2hlcnMgbWlnaHQgYmUgcHVzaGVkXG4gIC8vIGFzIHdlIHJ1biBleGlzdGluZyB3YXRjaGVyc1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBxdWV1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICB3YXRjaGVyID0gcXVldWVbaW5kZXhdO1xuICAgIGlmICh3YXRjaGVyLmJlZm9yZSkge1xuICAgICAgd2F0Y2hlci5iZWZvcmUoKTtcbiAgICB9XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhc1tpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblxuICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbFVwZGF0ZWRIb29rcyAocXVldWUpIHtcbiAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgIHZhciB2bSA9IHdhdGNoZXIudm07XG4gICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgY2FsbEhvb2sodm0sICd1cGRhdGVkJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUXVldWUgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCB0aGF0IHdhcyBhY3RpdmF0ZWQgZHVyaW5nIHBhdGNoLlxuICogVGhlIHF1ZXVlIHdpbGwgYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSBlbnRpcmUgdHJlZSBoYXMgYmVlbiBwYXRjaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudCAodm0pIHtcbiAgLy8gc2V0dGluZyBfaW5hY3RpdmUgdG8gZmFsc2UgaGVyZSBzbyB0aGF0IGEgcmVuZGVyIGZ1bmN0aW9uIGNhblxuICAvLyByZWx5IG9uIGNoZWNraW5nIHdoZXRoZXIgaXQncyBpbiBhbiBpbmFjdGl2ZSB0cmVlIChlLmcuIHJvdXRlci12aWV3KVxuICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgYWN0aXZhdGVkQ2hpbGRyZW4ucHVzaCh2bSk7XG59XG5cbmZ1bmN0aW9uIGNhbGxBY3RpdmF0ZWRIb29rcyAocXVldWUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIHF1ZXVlW2ldLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChxdWV1ZVtpXSwgdHJ1ZSAvKiB0cnVlICovKTtcbiAgfVxufVxuXG4vKipcbiAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXG4gKiBKb2JzIHdpdGggZHVwbGljYXRlIElEcyB3aWxsIGJlIHNraXBwZWQgdW5sZXNzIGl0J3NcbiAqIHB1c2hlZCB3aGVuIHRoZSBxdWV1ZSBpcyBiZWluZyBmbHVzaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZVdhdGNoZXIgKHdhdGNoZXIpIHtcbiAgdmFyIGlkID0gd2F0Y2hlci5pZDtcbiAgaWYgKGhhc1tpZF0gPT0gbnVsbCkge1xuICAgIGhhc1tpZF0gPSB0cnVlO1xuICAgIGlmICghZmx1c2hpbmcpIHtcbiAgICAgIHF1ZXVlLnB1c2god2F0Y2hlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIGFscmVhZHkgZmx1c2hpbmcsIHNwbGljZSB0aGUgd2F0Y2hlciBiYXNlZCBvbiBpdHMgaWRcbiAgICAgIC8vIGlmIGFscmVhZHkgcGFzdCBpdHMgaWQsIGl0IHdpbGwgYmUgcnVuIG5leHQgaW1tZWRpYXRlbHkuXG4gICAgICB2YXIgaSA9IHF1ZXVlLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoaSA+IGluZGV4ICYmIHF1ZXVlW2ldLmlkID4gd2F0Y2hlci5pZCkge1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgICBxdWV1ZS5zcGxpY2UoaSArIDEsIDAsIHdhdGNoZXIpO1xuICAgIH1cbiAgICAvLyBxdWV1ZSB0aGUgZmx1c2hcbiAgICBpZiAoIXdhaXRpbmcpIHtcbiAgICAgIHdhaXRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgICAgIGZsdXNoU2NoZWR1bGVyUXVldWUoKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cblxuXG52YXIgdWlkJDIgPSAwO1xuXG4vKipcbiAqIEEgd2F0Y2hlciBwYXJzZXMgYW4gZXhwcmVzc2lvbiwgY29sbGVjdHMgZGVwZW5kZW5jaWVzLFxuICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cbiAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuICovXG52YXIgV2F0Y2hlciA9IGZ1bmN0aW9uIFdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgY2IsXG4gIG9wdGlvbnMsXG4gIGlzUmVuZGVyV2F0Y2hlclxuKSB7XG4gIHRoaXMudm0gPSB2bTtcbiAgaWYgKGlzUmVuZGVyV2F0Y2hlcikge1xuICAgIHZtLl93YXRjaGVyID0gdGhpcztcbiAgfVxuICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTtcbiAgLy8gb3B0aW9uc1xuICBpZiAob3B0aW9ucykge1xuICAgIHRoaXMuZGVlcCA9ICEhb3B0aW9ucy5kZWVwO1xuICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgIHRoaXMubGF6eSA9ICEhb3B0aW9ucy5sYXp5O1xuICAgIHRoaXMuc3luYyA9ICEhb3B0aW9ucy5zeW5jO1xuICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5jYiA9IGNiO1xuICB0aGlzLmlkID0gKyt1aWQkMjsgLy8gdWlkIGZvciBiYXRjaGluZ1xuICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gIHRoaXMuZGVwcyA9IFtdO1xuICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMuZXhwcmVzc2lvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICA/IGV4cE9yRm4udG9TdHJpbmcoKVxuICAgIDogJyc7XG4gIC8vIHBhcnNlIGV4cHJlc3Npb24gZm9yIGdldHRlclxuICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLmdldHRlciA9IGV4cE9yRm47XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBwYXJzZVBhdGgoZXhwT3JGbik7XG4gICAgaWYgKCF0aGlzLmdldHRlcikge1xuICAgICAgdGhpcy5nZXR0ZXIgPSBub29wO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGRlcCA9IHRoaXMuZGVwc1tpXTtcbiAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxuICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7XG4gIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICB0bXAgPSB0aGlzLmRlcHM7XG4gIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodGhpcy5sYXp5KSB7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgdGhpcy5ydW4oKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmIChcbiAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG4gICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgIC8vIGhhdmUgbXV0YXRlZC5cbiAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgdGhpcy5kZWVwXG4gICAgKSB7XG4gICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdGhpcy52bSwgKFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaXNSb290ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZih2bS5tcEhvc3QgPT09ICdtcC1iYWlkdScpey8v55m+5bqmIG9ic2VydmVyIOWcqCBzZXREYXRhIGNhbGxiYWNrIOS5i+WQjuinpuWPke+8jOebtOaOpeW/veeVpeivpSB3YXJuXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2ZpeGVkIGJ5IHh4eHh4eCBfX25leHRfdGlja19wZW5kaW5nLHVuaTovL2Zvcm0tZmllbGQg5pe25LiN5ZGK6K2mXG4gICAgICAgICAgICBpZihcbiAgICAgICAgICAgICAgICBrZXkgPT09ICd2YWx1ZScgJiYgXG4gICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh2bS4kb3B0aW9ucy5iZWhhdmlvcnMpICYmXG4gICAgICAgICAgICAgICAgdm0uJG9wdGlvbnMuYmVoYXZpb3JzLmluZGV4T2YoJ3VuaTovL2Zvcm0tZmllbGQnKSAhPT0gLTFcbiAgICAgICAgICAgICAgKXtcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZih2bS5fZ2V0Rm9ybURhdGEpe1xuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciAkcGFyZW50ID0gdm0uJHBhcmVudDtcbiAgICAgICAgICAgIHdoaWxlKCRwYXJlbnQpe1xuICAgICAgICAgICAgICBpZigkcGFyZW50Ll9fbmV4dF90aWNrX3BlbmRpbmcpe1xuICAgICAgICAgICAgICAgIHJldHVybiAgXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgJHBhcmVudCA9ICRwYXJlbnQuJHBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NTUikge1xuICAgICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgdm0sXG4gICAgICAgIGdldHRlciB8fCBub29wLFxuICAgICAgICBub29wLFxuICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmKTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmLmdldClcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAuU2hhcmVkT2JqZWN0LnRhcmdldCkgey8vIGZpeGVkIGJ5IHh4eHh4eFxuICAgICAgICB3YXRjaGVyLmRlcGVuZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdhdGNoZXIudmFsdWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlR2V0dGVySW52b2tlcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIHRoaXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdE1ldGhvZHMgKHZtLCBtZXRob2RzKSB7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgdHlwZSBcXFwiXCIgKyAodHlwZW9mIG1ldGhvZHNba2V5XSkgKyBcIlxcXCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgICAgXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKChrZXkgaW4gdm0pICYmIGlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBjb25mbGljdHMgd2l0aCBhbiBleGlzdGluZyBWdWUgaW5zdGFuY2UgbWV0aG9kLiBcIiArXG4gICAgICAgICAgXCJBdm9pZCBkZWZpbmluZyBjb21wb25lbnQgbWV0aG9kcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZtW2tleV0gPSB0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nID8gbm9vcCA6IGJpbmQobWV0aG9kc1trZXldLCB2bSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFdhdGNoICh2bSwgd2F0Y2gpIHtcbiAgZm9yICh2YXIga2V5IGluIHdhdGNoKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBoYW5kbGVyLFxuICBvcHRpb25zXG4pIHtcbiAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICBvcHRpb25zID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gaGFuZGxlci5oYW5kbGVyO1xuICB9XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcbiAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XG4gIH1cbiAgcmV0dXJuIHZtLiR3YXRjaChleHBPckZuLCBoYW5kbGVyLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0XG4gIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxuICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gIHZhciBkYXRhRGVmID0ge307XG4gIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YSB9O1xuICB2YXIgcHJvcHNEZWYgPSB7fTtcbiAgcHJvcHNEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJvcHMgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgICBwcm9wc0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcHJvcHMnLCBwcm9wc0RlZik7XG5cbiAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0O1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbCh2bSwgd2F0Y2hlci52YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnJvciwgdm0sIChcImNhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiB1bndhdGNoRm4gKCkge1xuICAgICAgd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQkMyA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkJDMrKztcblxuICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArICh2bS5fdWlkKTtcbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgIH1cblxuICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG4gICAgdm0uX2lzVnVlID0gdHJ1ZTtcbiAgICAvLyBtZXJnZSBvcHRpb25zXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5faXNDb21wb25lbnQpIHtcbiAgICAgIC8vIG9wdGltaXplIGludGVybmFsIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uXG4gICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlXG4gICAgICAvLyBpbnRlcm5hbCBjb21wb25lbnQgb3B0aW9ucyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudC5cbiAgICAgIGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKHZtLmNvbnN0cnVjdG9yKSxcbiAgICAgICAgb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgICAvLyBleHBvc2UgcmVhbCBzZWxmXG4gICAgdm0uX3NlbGYgPSB2bTtcbiAgICBpbml0TGlmZWN5Y2xlKHZtKTtcbiAgICBpbml0RXZlbnRzKHZtKTtcbiAgICBpbml0UmVuZGVyKHZtKTtcbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZUNyZWF0ZScpO1xuICAgICF2bS5fJGZhbGxiYWNrICYmIGluaXRJbmplY3Rpb25zKHZtKTsgLy8gcmVzb2x2ZSBpbmplY3Rpb25zIGJlZm9yZSBkYXRhL3Byb3BzICBcbiAgICBpbml0U3RhdGUodm0pO1xuICAgICF2bS5fJGZhbGxiYWNrICYmIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICAhdm0uXyRmYWxsYmFjayAmJiBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTsgICAgICBcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcbiAgZm9yICh2YXIga2V5IGluIGxhdGVzdCkge1xuICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfVxuICAgICAgbW9kaWZpZWRba2V5XSA9IGxhdGVzdFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWRcbn1cblxuZnVuY3Rpb24gVnVlIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgLy8gMi42IGV4cGxpY2l0IG9ic2VydmFibGUgQVBJXG4gIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIG9ic2VydmUob2JqKTtcbiAgICByZXR1cm4gb2JqXG4gIH07XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi42LjExJztcblxuLyoqXG4gKiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vVGVuY2VudC93ZXN0b3JlL21hc3Rlci9wYWNrYWdlcy93ZXN0b3JlL3V0aWxzL2RpZmYuanNcbiAqL1xudmFyIEFSUkFZVFlQRSA9ICdbb2JqZWN0IEFycmF5XSc7XG52YXIgT0JKRUNUVFlQRSA9ICdbb2JqZWN0IE9iamVjdF0nO1xuLy8gY29uc3QgRlVOQ1RJT05UWVBFID0gJ1tvYmplY3QgRnVuY3Rpb25dJ1xuXG5mdW5jdGlvbiBkaWZmKGN1cnJlbnQsIHByZSkge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBzeW5jS2V5cyhjdXJyZW50LCBwcmUpO1xuICAgIF9kaWZmKGN1cnJlbnQsIHByZSwgJycsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBzeW5jS2V5cyhjdXJyZW50LCBwcmUpIHtcbiAgICBpZiAoY3VycmVudCA9PT0gcHJlKSB7IHJldHVybiB9XG4gICAgdmFyIHJvb3RDdXJyZW50VHlwZSA9IHR5cGUoY3VycmVudCk7XG4gICAgdmFyIHJvb3RQcmVUeXBlID0gdHlwZShwcmUpO1xuICAgIGlmIChyb290Q3VycmVudFR5cGUgPT0gT0JKRUNUVFlQRSAmJiByb290UHJlVHlwZSA9PSBPQkpFQ1RUWVBFKSB7XG4gICAgICAgIGlmKE9iamVjdC5rZXlzKGN1cnJlbnQpLmxlbmd0aCA+PSBPYmplY3Qua2V5cyhwcmUpLmxlbmd0aCl7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IGN1cnJlbnRba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFtrZXldID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzeW5jS2V5cyhjdXJyZW50VmFsdWUsIHByZVtrZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJvb3RDdXJyZW50VHlwZSA9PSBBUlJBWVRZUEUgJiYgcm9vdFByZVR5cGUgPT0gQVJSQVlUWVBFKSB7XG4gICAgICAgIGlmIChjdXJyZW50Lmxlbmd0aCA+PSBwcmUubGVuZ3RoKSB7XG4gICAgICAgICAgICBwcmUuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBzeW5jS2V5cyhjdXJyZW50W2luZGV4XSwgaXRlbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gX2RpZmYoY3VycmVudCwgcHJlLCBwYXRoLCByZXN1bHQpIHtcbiAgICBpZiAoY3VycmVudCA9PT0gcHJlKSB7IHJldHVybiB9XG4gICAgdmFyIHJvb3RDdXJyZW50VHlwZSA9IHR5cGUoY3VycmVudCk7XG4gICAgdmFyIHJvb3RQcmVUeXBlID0gdHlwZShwcmUpO1xuICAgIGlmIChyb290Q3VycmVudFR5cGUgPT0gT0JKRUNUVFlQRSkge1xuICAgICAgICBpZiAocm9vdFByZVR5cGUgIT0gT0JKRUNUVFlQRSB8fCBPYmplY3Qua2V5cyhjdXJyZW50KS5sZW5ndGggPCBPYmplY3Qua2V5cyhwcmUpLmxlbmd0aCkge1xuICAgICAgICAgICAgc2V0UmVzdWx0KHJlc3VsdCwgcGF0aCwgY3VycmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBjdXJyZW50W2tleV07XG4gICAgICAgICAgICAgICAgdmFyIHByZVZhbHVlID0gcHJlW2tleV07XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRUeXBlID0gdHlwZShjdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgICAgIHZhciBwcmVUeXBlID0gdHlwZShwcmVWYWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRUeXBlICE9IEFSUkFZVFlQRSAmJiBjdXJyZW50VHlwZSAhPSBPQkpFQ1RUWVBFKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgIT0gcHJlW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdChyZXN1bHQsIChwYXRoID09ICcnID8gJycgOiBwYXRoICsgXCIuXCIpICsga2V5LCBjdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50VHlwZSA9PSBBUlJBWVRZUEUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZVR5cGUgIT0gQVJSQVlUWVBFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQocmVzdWx0LCAocGF0aCA9PSAnJyA/ICcnIDogcGF0aCArIFwiLlwiKSArIGtleSwgY3VycmVudFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUubGVuZ3RoIDwgcHJlVmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KHJlc3VsdCwgKHBhdGggPT0gJycgPyAnJyA6IHBhdGggKyBcIi5cIikgKyBrZXksIGN1cnJlbnRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZGlmZihpdGVtLCBwcmVWYWx1ZVtpbmRleF0sIChwYXRoID09ICcnID8gJycgOiBwYXRoICsgXCIuXCIpICsga2V5ICsgJ1snICsgaW5kZXggKyAnXScsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRUeXBlID09IE9CSkVDVFRZUEUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZVR5cGUgIT0gT0JKRUNUVFlQRSB8fCBPYmplY3Qua2V5cyhjdXJyZW50VmFsdWUpLmxlbmd0aCA8IE9iamVjdC5rZXlzKHByZVZhbHVlKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdChyZXN1bHQsIChwYXRoID09ICcnID8gJycgOiBwYXRoICsgXCIuXCIpICsga2V5LCBjdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc3ViS2V5IGluIGN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kaWZmKGN1cnJlbnRWYWx1ZVtzdWJLZXldLCBwcmVWYWx1ZVtzdWJLZXldLCAocGF0aCA9PSAnJyA/ICcnIDogcGF0aCArIFwiLlwiKSArIGtleSArICcuJyArIHN1YktleSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBjdXJyZW50KSBsb29wKCBrZXkgKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAocm9vdEN1cnJlbnRUeXBlID09IEFSUkFZVFlQRSkge1xuICAgICAgICBpZiAocm9vdFByZVR5cGUgIT0gQVJSQVlUWVBFKSB7XG4gICAgICAgICAgICBzZXRSZXN1bHQocmVzdWx0LCBwYXRoLCBjdXJyZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50Lmxlbmd0aCA8IHByZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzZXRSZXN1bHQocmVzdWx0LCBwYXRoLCBjdXJyZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3VycmVudC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBfZGlmZihpdGVtLCBwcmVbaW5kZXhdLCBwYXRoICsgJ1snICsgaW5kZXggKyAnXScsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBzZXRSZXN1bHQocmVzdWx0LCBwYXRoLCBjdXJyZW50KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFJlc3VsdChyZXN1bHQsIGssIHYpIHtcbiAgICAvLyBpZiAodHlwZSh2KSAhPSBGVU5DVElPTlRZUEUpIHtcbiAgICAgICAgcmVzdWx0W2tdID0gdjtcbiAgICAvLyB9XG59XG5cbmZ1bmN0aW9uIHR5cGUob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBmbHVzaENhbGxiYWNrcyQxKHZtKSB7XG4gICAgaWYgKHZtLl9fbmV4dF90aWNrX2NhbGxiYWNrcyAmJiB2bS5fX25leHRfdGlja19jYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5WVUVfQVBQX0RFQlVHKSB7XG4gICAgICAgICAgICB2YXIgbXBJbnN0YW5jZSA9IHZtLiRzY29wZTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbJyArICgrbmV3IERhdGUpICsgJ11bJyArIChtcEluc3RhbmNlLmlzIHx8IG1wSW5zdGFuY2Uucm91dGUpICsgJ11bJyArIHZtLl91aWQgK1xuICAgICAgICAgICAgICAgICddOmZsdXNoQ2FsbGJhY2tzWycgKyB2bS5fX25leHRfdGlja19jYWxsYmFja3MubGVuZ3RoICsgJ10nKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29waWVzID0gdm0uX19uZXh0X3RpY2tfY2FsbGJhY2tzLnNsaWNlKDApO1xuICAgICAgICB2bS5fX25leHRfdGlja19jYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvcGllc1tpXSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYXNSZW5kZXJXYXRjaGVyKHZtKSB7XG4gICAgcmV0dXJuIHF1ZXVlLmZpbmQoZnVuY3Rpb24gKHdhdGNoZXIpIHsgcmV0dXJuIHZtLl93YXRjaGVyID09PSB3YXRjaGVyOyB9KVxufVxuXG5mdW5jdGlvbiBuZXh0VGljayQxKHZtLCBjYikge1xuICAgIC8vMS5uZXh0VGljayDkuYvliY0g5beyIHNldERhdGEg5LiUIHNldERhdGEg6L+Y5pyq5Zue6LCD5a6M5oiQXG4gICAgLy8yLm5leHRUaWNrIOS5i+WJjeWtmOWcqCByZW5kZXIgd2F0Y2hlclxuICAgIGlmICghdm0uX19uZXh0X3RpY2tfcGVuZGluZyAmJiAhaGFzUmVuZGVyV2F0Y2hlcih2bSkpIHtcbiAgICAgICAgaWYocHJvY2Vzcy5lbnYuVlVFX0FQUF9ERUJVRyl7XG4gICAgICAgICAgICB2YXIgbXBJbnN0YW5jZSA9IHZtLiRzY29wZTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbJyArICgrbmV3IERhdGUpICsgJ11bJyArIChtcEluc3RhbmNlLmlzIHx8IG1wSW5zdGFuY2Uucm91dGUpICsgJ11bJyArIHZtLl91aWQgK1xuICAgICAgICAgICAgICAgICddOm5leHRWdWVUaWNrJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHRUaWNrKGNiLCB2bSlcbiAgICB9ZWxzZXtcbiAgICAgICAgaWYocHJvY2Vzcy5lbnYuVlVFX0FQUF9ERUJVRyl7XG4gICAgICAgICAgICB2YXIgbXBJbnN0YW5jZSQxID0gdm0uJHNjb3BlO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1snICsgKCtuZXcgRGF0ZSkgKyAnXVsnICsgKG1wSW5zdGFuY2UkMS5pcyB8fCBtcEluc3RhbmNlJDEucm91dGUpICsgJ11bJyArIHZtLl91aWQgK1xuICAgICAgICAgICAgICAgICddOm5leHRNUFRpY2snKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgX3Jlc29sdmU7XG4gICAgaWYgKCF2bS5fX25leHRfdGlja19jYWxsYmFja3MpIHtcbiAgICAgICAgdm0uX19uZXh0X3RpY2tfY2FsbGJhY2tzID0gW107XG4gICAgfVxuICAgIHZtLl9fbmV4dF90aWNrX2NhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNiLmNhbGwodm0pO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAnbmV4dFRpY2snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgICAgICAgX3Jlc29sdmUodm0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIH0pXG4gICAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY2xvbmVXaXRoRGF0YSh2bSkge1xuICAvLyDnoa7kv53lvZPliY0gdm0g5omA5pyJ5pWw5o2u6KKr5ZCM5q2lXG4gIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgZGF0YUtleXMgPSBbXS5jb25jYXQoXG4gICAgT2JqZWN0LmtleXModm0uX2RhdGEgfHwge30pLFxuICAgIE9iamVjdC5rZXlzKHZtLl9jb21wdXRlZFdhdGNoZXJzIHx8IHt9KSk7XG5cbiAgZGF0YUtleXMucmVkdWNlKGZ1bmN0aW9uKHJldCwga2V5KSB7XG4gICAgcmV0W2tleV0gPSB2bVtrZXldO1xuICAgIHJldHVybiByZXRcbiAgfSwgcmV0KTtcblxuICAvLyB2dWUtY29tcG9zaXRpb24tYXBpXG4gIHZhciByYXdCaW5kaW5ncyA9IHZtLl9fc2VjcmV0X3ZmYV9zdGF0ZV9fICYmIHZtLl9fc2VjcmV0X3ZmYV9zdGF0ZV9fLnJhd0JpbmRpbmdzO1xuICBpZiAocmF3QmluZGluZ3MpIHtcbiAgICBPYmplY3Qua2V5cyhyYXdCaW5kaW5ncykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXRba2V5XSA9IHZtW2tleV07XG4gICAgfSk7XG4gIH1cbiAgXG4gIC8vVE9ETyDpnIDopoHmiorml6DnlKjmlbDmja7lpITnkIbmjonvvIzmr5TlpoIgbGlzdD0+bDAg5YiZIGxpc3Qg6ZyA6KaB56e76Zmk77yM5ZCm5YiZ5aSa5Lyg6L6T5LiA5Lu95pWw5o2uXG4gIE9iamVjdC5hc3NpZ24ocmV0LCB2bS4kbXAuZGF0YSB8fCB7fSk7XG4gIGlmIChcbiAgICBBcnJheS5pc0FycmF5KHZtLiRvcHRpb25zLmJlaGF2aW9ycykgJiZcbiAgICB2bS4kb3B0aW9ucy5iZWhhdmlvcnMuaW5kZXhPZigndW5pOi8vZm9ybS1maWVsZCcpICE9PSAtMVxuICApIHsgLy9mb3JtLWZpZWxkXG4gICAgcmV0WyduYW1lJ10gPSB2bS5uYW1lO1xuICAgIHJldFsndmFsdWUnXSA9IHZtLnZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmV0KSlcbn1cblxudmFyIHBhdGNoID0gZnVuY3Rpb24ob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmICh2bm9kZSA9PT0gbnVsbCkgeyAvL2Rlc3Ryb3lcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodGhpcy5tcFR5cGUgPT09ICdwYWdlJyB8fCB0aGlzLm1wVHlwZSA9PT0gJ2NvbXBvbmVudCcpIHtcbiAgICB2YXIgbXBJbnN0YW5jZSA9IHRoaXMuJHNjb3BlO1xuICAgIHZhciBkYXRhID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0cnkge1xuICAgICAgZGF0YSA9IGNsb25lV2l0aERhdGEodGhpcyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuICAgIGRhdGEuX193ZWJ2aWV3SWRfXyA9IG1wSW5zdGFuY2UuZGF0YS5fX3dlYnZpZXdJZF9fO1xuICAgIHZhciBtcERhdGEgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyAvL+S7heWQjOatpSBkYXRhIOS4reacieeahOaVsOaNrlxuICAgICAgbXBEYXRhW2tleV0gPSBtcEluc3RhbmNlLmRhdGFba2V5XTtcbiAgICB9KTtcbiAgICB2YXIgZGlmZkRhdGEgPSB0aGlzLiRzaG91bGREaWZmRGF0YSA9PT0gZmFsc2UgPyBkYXRhIDogZGlmZihkYXRhLCBtcERhdGEpO1xuICAgIGlmIChPYmplY3Qua2V5cyhkaWZmRGF0YSkubGVuZ3RoKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuVlVFX0FQUF9ERUJVRykge1xuICAgICAgICBjb25zb2xlLmxvZygnWycgKyAoK25ldyBEYXRlKSArICddWycgKyAobXBJbnN0YW5jZS5pcyB8fCBtcEluc3RhbmNlLnJvdXRlKSArICddWycgKyB0aGlzLl91aWQgK1xuICAgICAgICAgICdd5beu6YeP5pu05pawJyxcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeShkaWZmRGF0YSkpO1xuICAgICAgfVxuICAgICAgdGhpcy5fX25leHRfdGlja19wZW5kaW5nID0gdHJ1ZTtcbiAgICAgIG1wSW5zdGFuY2Uuc2V0RGF0YShkaWZmRGF0YSwgZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzJDEuX19uZXh0X3RpY2tfcGVuZGluZyA9IGZhbHNlO1xuICAgICAgICBmbHVzaENhbGxiYWNrcyQxKHRoaXMkMSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZmx1c2hDYWxsYmFja3MkMSh0aGlzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbXB0eVJlbmRlcigpIHtcblxufVxuXG5mdW5jdGlvbiBtb3VudENvbXBvbmVudCQxKFxuICB2bSxcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGlmICghdm0ubXBUeXBlKSB7Ly9tYWluLmpzIOS4reeahCBuZXcgVnVlXG4gICAgcmV0dXJuIHZtXG4gIH1cbiAgaWYgKHZtLm1wVHlwZSA9PT0gJ2FwcCcpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVJlbmRlcjtcbiAgfVxuICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5UmVuZGVyO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFxuICAhdm0uXyRmYWxsYmFjayAmJiBjYWxsSG9vayh2bSwgJ2JlZm9yZU1vdW50Jyk7XG5cbiAgdmFyIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2bS5fdXBkYXRlKHZtLl9yZW5kZXIoKSwgaHlkcmF0aW5nKTtcbiAgfTtcblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSgpIHtcbiAgICAgIGlmICh2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG4gIHJldHVybiB2bVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVuZGVyQ2xhc3MgKFxuICBzdGF0aWNDbGFzcyxcbiAgZHluYW1pY0NsYXNzXG4pIHtcbiAgaWYgKGlzRGVmKHN0YXRpY0NsYXNzKSB8fCBpc0RlZihkeW5hbWljQ2xhc3MpKSB7XG4gICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG4gIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpXG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIHN0cmluZ2lmaWVkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChpc0RlZihzdHJpbmdpZmllZCA9IHN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkgJiYgc3RyaW5naWZpZWQgIT09ICcnKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlW2tleV0pIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIHBhcnNlU3R5bGVUZXh0ID0gY2FjaGVkKGZ1bmN0aW9uIChjc3NUZXh0KSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGxpc3REZWxpbWl0ZXIgPSAvOyg/IVteKF0qXFwpKS9nO1xuICB2YXIgcHJvcGVydHlEZWxpbWl0ZXIgPSAvOiguKykvO1xuICBjc3NUZXh0LnNwbGl0KGxpc3REZWxpbWl0ZXIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgdmFyIHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXIpO1xuICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0XG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZUJpbmRpbmcgKGJpbmRpbmdTdHlsZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShiaW5kaW5nU3R5bGUpKSB7XG4gICAgcmV0dXJuIHRvT2JqZWN0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICBpZiAodHlwZW9mIGJpbmRpbmdTdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGFyc2VTdHlsZVRleHQoYmluZGluZ1N0eWxlKVxuICB9XG4gIHJldHVybiBiaW5kaW5nU3R5bGVcbn1cblxuLyogICovXG5cbnZhciBNUF9NRVRIT0RTID0gWydjcmVhdGVTZWxlY3RvclF1ZXJ5JywgJ2NyZWF0ZUludGVyc2VjdGlvbk9ic2VydmVyJywgJ3NlbGVjdEFsbENvbXBvbmVudHMnLCAnc2VsZWN0Q29tcG9uZW50J107XG5cbmZ1bmN0aW9uIGdldFRhcmdldChvYmosIHBhdGgpIHtcbiAgdmFyIHBhcnRzID0gcGF0aC5zcGxpdCgnLicpO1xuICB2YXIga2V5ID0gcGFydHNbMF07XG4gIGlmIChrZXkuaW5kZXhPZignX18kbicpID09PSAwKSB7IC8vbnVtYmVyIGluZGV4XG4gICAga2V5ID0gcGFyc2VJbnQoa2V5LnJlcGxhY2UoJ19fJG4nLCAnJykpO1xuICB9XG4gIGlmIChwYXJ0cy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gb2JqW2tleV1cbiAgfVxuICByZXR1cm4gZ2V0VGFyZ2V0KG9ialtrZXldLCBwYXJ0cy5zbGljZSgxKS5qb2luKCcuJykpXG59XG5cbmZ1bmN0aW9uIGludGVybmFsTWl4aW4oVnVlKSB7XG5cbiAgVnVlLmNvbmZpZy5lcnJvckhhbmRsZXIgPSBmdW5jdGlvbihlcnIsIHZtLCBpbmZvKSB7XG4gICAgVnVlLnV0aWwud2FybigoXCJFcnJvciBpbiBcIiArIGluZm8gKyBcIjogXFxcIlwiICsgKGVyci50b1N0cmluZygpKSArIFwiXFxcIlwiKSwgdm0pO1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuICAgIHZhciBhcHAgPSBnZXRBcHAoKTtcbiAgICBpZiAoYXBwICYmIGFwcC5vbkVycm9yKSB7XG4gICAgICBhcHAub25FcnJvcihlcnIpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgb2xkRW1pdCA9IFZ1ZS5wcm90b3R5cGUuJGVtaXQ7XG5cbiAgVnVlLnByb3RvdHlwZS4kZW1pdCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuJHNjb3BlICYmIGV2ZW50KSB7XG4gICAgICB0aGlzLiRzY29wZVsndHJpZ2dlckV2ZW50J10oZXZlbnQsIHtcbiAgICAgICAgX19hcmdzX186IHRvQXJyYXkoYXJndW1lbnRzLCAxKVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBvbGRFbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgcmV0dXJuIG5leHRUaWNrJDEodGhpcywgZm4pXG4gIH07XG5cbiAgTVBfTUVUSE9EUy5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICBWdWUucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmdzKSB7XG4gICAgICBpZiAodGhpcy4kc2NvcGUgJiYgdGhpcy4kc2NvcGVbbWV0aG9kXSkge1xuICAgICAgICByZXR1cm4gdGhpcy4kc2NvcGVbbWV0aG9kXShhcmdzKVxuICAgICAgfVxuICAgICAgLy8gbXAtYWxpcGF5XG4gICAgICBpZiAodHlwZW9mIG15ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmIChtZXRob2QgPT09ICdjcmVhdGVTZWxlY3RvclF1ZXJ5Jykge1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuICAgICAgICByZXR1cm4gbXkuY3JlYXRlU2VsZWN0b3JRdWVyeShhcmdzKVxuICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09ICdjcmVhdGVJbnRlcnNlY3Rpb25PYnNlcnZlcicpIHtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbiAgICAgICAgcmV0dXJuIG15LmNyZWF0ZUludGVyc2VjdGlvbk9ic2VydmVyKGFyZ3MpXG4gICAgICB9XG4gICAgICAvLyBUT0RPIG1wLWFsaXBheSDmmoLkuI3mlK/mjIEgc2VsZWN0QWxsQ29tcG9uZW50cyxzZWxlY3RDb21wb25lbnRcbiAgICB9O1xuICB9KTtcblxuICBWdWUucHJvdG90eXBlLl9faW5pdF9wcm92aWRlID0gaW5pdFByb3ZpZGU7XG5cbiAgVnVlLnByb3RvdHlwZS5fX2luaXRfaW5qZWN0aW9ucyA9IGluaXRJbmplY3Rpb25zO1xuXG4gIFZ1ZS5wcm90b3R5cGUuX19jYWxsX2hvb2sgPSBmdW5jdGlvbihob29rLCBhcmdzKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgbGlmZWN5Y2xlIGhvb2tzXG4gICAgcHVzaFRhcmdldCgpO1xuICAgIHZhciBoYW5kbGVycyA9IHZtLiRvcHRpb25zW2hvb2tdO1xuICAgIHZhciBpbmZvID0gaG9vayArIFwiIGhvb2tcIjtcbiAgICB2YXIgcmV0O1xuICAgIGlmIChoYW5kbGVycykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgcmV0ID0gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBhcmdzID8gW2FyZ3NdIDogbnVsbCwgdm0sIGluZm8pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgICAgdm0uJGVtaXQoJ2hvb2s6JyArIGhvb2ssIGFyZ3MpO1xuICAgIH1cbiAgICBwb3BUYXJnZXQoKTtcbiAgICByZXR1cm4gcmV0XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fX3NldF9tb2RlbCA9IGZ1bmN0aW9uKHRhcmdldCwga2V5LCB2YWx1ZSwgbW9kaWZpZXJzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobW9kaWZpZXJzKSkge1xuICAgICAgaWYgKG1vZGlmaWVycy5pbmRleE9mKCd0cmltJykgIT09IC0xKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUudHJpbSgpO1xuICAgICAgfVxuICAgICAgaWYgKG1vZGlmaWVycy5pbmRleE9mKCdudW1iZXInKSAhPT0gLTEpIHtcbiAgICAgICAgdmFsdWUgPSB0aGlzLl9uKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRhcmdldCA9IHRoaXM7XG4gICAgfVxuICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fX3NldF9zeW5jID0gZnVuY3Rpb24odGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRhcmdldCA9IHRoaXM7XG4gICAgfVxuICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fX2dldF9vcmlnID0gZnVuY3Rpb24oaXRlbSkge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KGl0ZW0pKSB7XG4gICAgICByZXR1cm4gaXRlbVsnJG9yaWcnXSB8fCBpdGVtXG4gICAgfVxuICAgIHJldHVybiBpdGVtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fX2dldF92YWx1ZSA9IGZ1bmN0aW9uKGRhdGFQYXRoLCB0YXJnZXQpIHtcbiAgICByZXR1cm4gZ2V0VGFyZ2V0KHRhcmdldCB8fCB0aGlzLCBkYXRhUGF0aClcbiAgfTtcblxuXG4gIFZ1ZS5wcm90b3R5cGUuX19nZXRfY2xhc3MgPSBmdW5jdGlvbihkeW5hbWljQ2xhc3MsIHN0YXRpY0NsYXNzKSB7XG4gICAgcmV0dXJuIHJlbmRlckNsYXNzKHN0YXRpY0NsYXNzLCBkeW5hbWljQ2xhc3MpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fX2dldF9zdHlsZSA9IGZ1bmN0aW9uKGR5bmFtaWNTdHlsZSwgc3RhdGljU3R5bGUpIHtcbiAgICBpZiAoIWR5bmFtaWNTdHlsZSAmJiAhc3RhdGljU3R5bGUpIHtcbiAgICAgIHJldHVybiAnJ1xuICAgIH1cbiAgICB2YXIgZHluYW1pY1N0eWxlT2JqID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGR5bmFtaWNTdHlsZSk7XG4gICAgdmFyIHN0eWxlT2JqID0gc3RhdGljU3R5bGUgPyBleHRlbmQoc3RhdGljU3R5bGUsIGR5bmFtaWNTdHlsZU9iaikgOiBkeW5hbWljU3R5bGVPYmo7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHN0eWxlT2JqKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuICgoaHlwaGVuYXRlKG5hbWUpKSArIFwiOlwiICsgKHN0eWxlT2JqW25hbWVdKSk7IH0pLmpvaW4oJzsnKVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX19tYXAgPSBmdW5jdGlvbih2YWwsIGl0ZXJhdGVlKSB7XG4gICAgLy9UT0RPIOaaguS4jeiAg+iZkSBzdHJpbmdcbiAgICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgcmV0ID0gbmV3IEFycmF5KHZhbC5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcmV0W2ldID0gaXRlcmF0ZWUodmFsW2ldLCBpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXRcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRba2V5XSA9IGl0ZXJhdGVlKHZhbFtrZXldLCBrZXksIGkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldCA9IG5ldyBBcnJheSh2YWwpO1xuICAgICAgZm9yIChpID0gMCwgbCA9IHZhbDsgaSA8IGw7IGkrKykge1xuICAgICAgICAvLyDnrKzkuIDkuKrlj4LmlbDmmoLml7bku43lkozlsI/nqIvluo/kuIDoh7RcbiAgICAgICAgcmV0W2ldID0gaXRlcmF0ZWUoaSwgaSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0XG4gICAgfVxuICAgIHJldHVybiBbXVxuICB9O1xuXG59XG5cbi8qICAqL1xuXG52YXIgTElGRUNZQ0xFX0hPT0tTJDEgPSBbXG4gICAgLy9BcHBcbiAgICAnb25MYXVuY2gnLFxuICAgICdvblNob3cnLFxuICAgICdvbkhpZGUnLFxuICAgICdvblVuaU5WaWV3TWVzc2FnZScsXG4gICAgJ29uUGFnZU5vdEZvdW5kJyxcbiAgICAnb25UaGVtZUNoYW5nZScsXG4gICAgJ29uRXJyb3InLFxuICAgICdvblVuaGFuZGxlZFJlamVjdGlvbicsXG4gICAgLy9QYWdlXG4gICAgJ29uTG9hZCcsXG4gICAgLy8gJ29uU2hvdycsXG4gICAgJ29uUmVhZHknLFxuICAgIC8vICdvbkhpZGUnLFxuICAgICdvblVubG9hZCcsXG4gICAgJ29uUHVsbERvd25SZWZyZXNoJyxcbiAgICAnb25SZWFjaEJvdHRvbScsXG4gICAgJ29uVGFiSXRlbVRhcCcsXG4gICAgJ29uQWRkVG9GYXZvcml0ZXMnLFxuICAgICdvblNoYXJlVGltZWxpbmUnLFxuICAgICdvblNoYXJlQXBwTWVzc2FnZScsXG4gICAgJ29uUmVzaXplJyxcbiAgICAnb25QYWdlU2Nyb2xsJyxcbiAgICAnb25OYXZpZ2F0aW9uQmFyQnV0dG9uVGFwJyxcbiAgICAnb25CYWNrUHJlc3MnLFxuICAgICdvbk5hdmlnYXRpb25CYXJTZWFyY2hJbnB1dENoYW5nZWQnLFxuICAgICdvbk5hdmlnYXRpb25CYXJTZWFyY2hJbnB1dENvbmZpcm1lZCcsXG4gICAgJ29uTmF2aWdhdGlvbkJhclNlYXJjaElucHV0Q2xpY2tlZCcsXG4gICAgLy9Db21wb25lbnRcbiAgICAvLyAnb25SZWFkeScsIC8vIOWFvOWuueaXp+eJiOacrO+8jOW6lOivpeenu+mZpOivpeS6i+S7tlxuICAgICdvblBhZ2VTaG93JyxcbiAgICAnb25QYWdlSGlkZScsXG4gICAgJ29uUGFnZVJlc2l6ZSdcbl07XG5mdW5jdGlvbiBsaWZlY3ljbGVNaXhpbiQxKFZ1ZSkge1xuXG4gICAgLy9maXhlZCB2dWUtY2xhc3MtY29tcG9uZW50XG4gICAgdmFyIG9sZEV4dGVuZCA9IFZ1ZS5leHRlbmQ7XG4gICAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uKGV4dGVuZE9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG5cbiAgICAgICAgdmFyIG1ldGhvZHMgPSBleHRlbmRPcHRpb25zLm1ldGhvZHM7XG4gICAgICAgIGlmIChtZXRob2RzKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhtZXRob2RzKS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKExJRkVDWUNMRV9IT09LUyQxLmluZGV4T2YobWV0aG9kTmFtZSkhPT0tMSkge1xuICAgICAgICAgICAgICAgICAgICBleHRlbmRPcHRpb25zW21ldGhvZE5hbWVdID0gbWV0aG9kc1ttZXRob2ROYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1ldGhvZHNbbWV0aG9kTmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2xkRXh0ZW5kLmNhbGwodGhpcywgZXh0ZW5kT3B0aW9ucylcbiAgICB9O1xuXG4gICAgdmFyIHN0cmF0ZWdpZXMgPSBWdWUuY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcbiAgICB2YXIgbWVyZ2VIb29rID0gc3RyYXRlZ2llcy5jcmVhdGVkO1xuICAgIExJRkVDWUNMRV9IT09LUyQxLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgICAgICAgc3RyYXRlZ2llc1tob29rXSA9IG1lcmdlSG9vaztcbiAgICB9KTtcblxuICAgIFZ1ZS5wcm90b3R5cGUuX19saWZlY3ljbGVfaG9va3NfXyA9IExJRkVDWUNMRV9IT09LUyQxO1xufVxuXG4vKiAgKi9cblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gPSBwYXRjaDtcblxuLy8gcHVibGljIG1vdW50IG1ldGhvZFxuVnVlLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbihcbiAgICBlbCAsXG4gICAgaHlkcmF0aW5nIFxuKSB7XG4gICAgcmV0dXJuIG1vdW50Q29tcG9uZW50JDEodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbmxpZmVjeWNsZU1peGluJDEoVnVlKTtcbmludGVybmFsTWl4aW4oVnVlKTtcblxuLyogICovXG5cbmV4cG9ydCBkZWZhdWx0IFZ1ZTtcbiIsIi8qXHJcbiAqIHVDaGFydHMgdjEuOC41LjIwMTkwODE1XHJcbiAqIHVuaS1hcHDlubPlj7Dpq5jmgKfog73ot6jlhajnq6/lm77ooajvvIzmlK/mjIFINeOAgUFQUOOAgeWwj+eoi+W6j++8iOW+ruS/oS/mlK/ku5jlrp0v55m+5bqmL+WktOadoS9RUS8zNjDvvIlcclxuICogQ29weXJpZ2h0IChjKSAyMDE5IFFJVU7np4vkupEgaHR0cHM6Ly93d3cudWNoYXJ0cy5jbiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCAoIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMCApXHJcbiAqXHJcbiAqIHVDaGFydHPlrpjmlrnnvZHnq5lcclxuICogaHR0cHM6Ly93d3cudUNoYXJ0cy5jblxyXG4gKlxyXG4gKiDlvIDmupDlnLDlnYA6XHJcbiAqIGh0dHBzOi8vZ2l0ZWUuY29tL3VDaGFydHMvdUNoYXJ0c1xyXG4gKlxyXG4gKiB1bmktYXBw5o+S5Lu25biC5Zy65Zyw5Z2A77yaXHJcbiAqIGh0dHA6Ly9leHQuZGNsb3VkLm5ldC5jbi9wbHVnaW4/aWQ9MjcxXHJcbiAqXHJcbiAqL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGNvbmZpZyA9IHtcclxuICB5QXhpc1dpZHRoOiAxNSxcclxuICB5QXhpc1NwbGl0OiA1LFxyXG4gIHhBeGlzSGVpZ2h0OiAxNSxcclxuICB4QXhpc0xpbmVIZWlnaHQ6IDE1LFxyXG4gIGxlZ2VuZEhlaWdodDogMTUsXHJcbiAgeUF4aXNUaXRsZVdpZHRoOiAxNSxcclxuICBwYWRkaW5nOiBbMTAsIDEwLCAxMCwgMTBdLFxyXG4gIHBpeGVsUmF0aW86IDEsXHJcbiAgcm90YXRlOiBmYWxzZSxcclxuICBjb2x1bWVQYWRkaW5nOiAzLFxyXG4gIGZvbnRTaXplOiAxMyxcclxuICAvL2RhdGFQb2ludFNoYXBlOiBbJ2RpYW1vbmQnLCAnY2lyY2xlJywgJ3RyaWFuZ2xlJywgJ3JlY3QnXSxcclxuICBkYXRhUG9pbnRTaGFwZTogWydjaXJjbGUnLCAnY2lyY2xlJywgJ2NpcmNsZScsICdjaXJjbGUnXSxcclxuICBjb2xvcnM6IFsnIzE4OTBmZicsICcjMmZjMjViJywgJyNmYWNjMTQnLCAnI2YwNDg2NCcsICcjODU0M2UwJywgJyM5MGVkN2QnXSxcclxuICBwaWVDaGFydExpbmVQYWRkaW5nOiAxNSxcclxuICBwaWVDaGFydFRleHRQYWRkaW5nOiA1LFxyXG4gIHhBeGlzVGV4dFBhZGRpbmc6IDMsXHJcbiAgdGl0bGVDb2xvcjogJyMzMzMzMzMnLFxyXG4gIHRpdGxlRm9udFNpemU6IDIwLFxyXG4gIHN1YnRpdGxlQ29sb3I6ICcjOTk5OTk5JyxcclxuICBzdWJ0aXRsZUZvbnRTaXplOiAxNSxcclxuICB0b29sVGlwUGFkZGluZzogMyxcclxuICB0b29sVGlwQmFja2dyb3VuZDogJyMwMDAwMDAnLFxyXG4gIHRvb2xUaXBPcGFjaXR5OiAwLjcsXHJcbiAgdG9vbFRpcExpbmVIZWlnaHQ6IDIwLFxyXG4gIHJhZGFyR3JpZENvdW50OiAzLFxyXG4gIHJhZGFyTGFiZWxUZXh0TWFyZ2luOiAxNSxcclxuICBnYXVnZUxhYmVsVGV4dE1hcmdpbjogMTVcclxufTtcclxuXHJcbmxldCBhc3NpZ247XHJcbmlmIChPYmplY3QuYXNzaWduKSB7XHJcbiAgYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcclxufSBlbHNlIHtcclxuICAvLyDkvb/nlKhwb2x5ZmlsbFxyXG4gIGFzc2lnbiA9IGZ1bmN0aW9uKHRhcmdldCwgdmFyQXJncykge1xyXG4gICAgaWYgKHRhcmdldCA9PSBudWxsKSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcpO1xyXG4gICAgfVxyXG4gICAgdmFyIHRvID0gT2JqZWN0KHRhcmdldCk7XHJcbiAgICBmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICB2YXIgbmV4dFNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF07XHJcbiAgICAgIGlmIChuZXh0U291cmNlICE9IG51bGwpIHtcclxuICAgICAgICBmb3IgKHZhciBuZXh0S2V5IGluIG5leHRTb3VyY2UpIHtcclxuICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobmV4dFNvdXJjZSwgbmV4dEtleSkpIHtcclxuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvO1xyXG4gIH1cclxufVxyXG5cclxudmFyIHV0aWwgPSB7XHJcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChudW0sIGxpbWl0KSB7XHJcbiAgICBsaW1pdCA9IGxpbWl0IHx8IDI7XHJcbiAgICBpZiAodGhpcy5pc0Zsb2F0KG51bSkpIHtcclxuICAgICAgbnVtID0gbnVtLnRvRml4ZWQobGltaXQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bTtcclxuICB9LFxyXG4gIGlzRmxvYXQ6IGZ1bmN0aW9uIGlzRmxvYXQobnVtKSB7XHJcbiAgICByZXR1cm4gbnVtICUgMSAhPT0gMDtcclxuICB9LFxyXG4gIGFwcHJveGltYXRlbHlFcXVhbDogZnVuY3Rpb24gYXBwcm94aW1hdGVseUVxdWFsKG51bTEsIG51bTIpIHtcclxuICAgIHJldHVybiBNYXRoLmFicyhudW0xIC0gbnVtMikgPCAxZS0xMDtcclxuICB9LFxyXG4gIGlzU2FtZVNpZ246IGZ1bmN0aW9uIGlzU2FtZVNpZ24obnVtMSwgbnVtMikge1xyXG4gICAgcmV0dXJuIE1hdGguYWJzKG51bTEpID09PSBudW0xICYmIE1hdGguYWJzKG51bTIpID09PSBudW0yIHx8IE1hdGguYWJzKG51bTEpICE9PSBudW0xICYmIE1hdGguYWJzKG51bTIpICE9PSBudW0yO1xyXG4gIH0sXHJcbiAgaXNTYW1lWENvb3JkaW5hdGVBcmVhOiBmdW5jdGlvbiBpc1NhbWVYQ29vcmRpbmF0ZUFyZWEocDEsIHAyKSB7XHJcbiAgICByZXR1cm4gdGhpcy5pc1NhbWVTaWduKHAxLngsIHAyLngpO1xyXG4gIH0sXHJcbiAgaXNDb2xsaXNpb246IGZ1bmN0aW9uIGlzQ29sbGlzaW9uKG9iajEsIG9iajIpIHtcclxuICAgIG9iajEuZW5kID0ge307XHJcbiAgICBvYmoxLmVuZC54ID0gb2JqMS5zdGFydC54ICsgb2JqMS53aWR0aDtcclxuICAgIG9iajEuZW5kLnkgPSBvYmoxLnN0YXJ0LnkgLSBvYmoxLmhlaWdodDtcclxuICAgIG9iajIuZW5kID0ge307XHJcbiAgICBvYmoyLmVuZC54ID0gb2JqMi5zdGFydC54ICsgb2JqMi53aWR0aDtcclxuICAgIG9iajIuZW5kLnkgPSBvYmoyLnN0YXJ0LnkgLSBvYmoyLmhlaWdodDtcclxuICAgIHZhciBmbGFnID0gb2JqMi5zdGFydC54ID4gb2JqMS5lbmQueCB8fCBvYmoyLmVuZC54IDwgb2JqMS5zdGFydC54IHx8IG9iajIuZW5kLnkgPiBvYmoxLnN0YXJ0LnkgfHwgb2JqMi5zdGFydC55IDwgb2JqMS5lbmQueTtcclxuICAgIHJldHVybiAhZmxhZztcclxuICB9XHJcbn07XHJcblxyXG4vL+WFvOWuuUg154K55Ye75LqL5Lu2XHJcbmZ1bmN0aW9uIGdldEg1T2Zmc2V0KGUpIHtcclxuICBlLm1wID0ge1xyXG4gICAgY2hhbmdlZFRvdWNoZXM6IFtdXHJcbiAgfTtcclxuICBlLm1wLmNoYW5nZWRUb3VjaGVzLnB1c2goe1xyXG4gICAgeDogZS5vZmZzZXRYLFxyXG4gICAgeTogZS5vZmZzZXRZXHJcbiAgfSk7XHJcbiAgcmV0dXJuIGU7XHJcbn1cclxuXHJcbi8vIGhleCDovawgcmdiYVxyXG5mdW5jdGlvbiBoZXhUb1JnYihoZXhWYWx1ZSwgb3BjKSB7XHJcbiAgdmFyIHJneCA9IC9eIz8oW2EtZlxcZF0pKFthLWZcXGRdKShbYS1mXFxkXSkkL2k7XHJcbiAgdmFyIGhleCA9IGhleFZhbHVlLnJlcGxhY2Uocmd4LCBmdW5jdGlvbihtLCByLCBnLCBiKSB7XHJcbiAgICByZXR1cm4gciArIHIgKyBnICsgZyArIGIgKyBiO1xyXG4gIH0pO1xyXG4gIHZhciByZ2IgPSAvXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pLmV4ZWMoaGV4KTtcclxuICB2YXIgciA9IHBhcnNlSW50KHJnYlsxXSwgMTYpO1xyXG4gIHZhciBnID0gcGFyc2VJbnQocmdiWzJdLCAxNik7XHJcbiAgdmFyIGIgPSBwYXJzZUludChyZ2JbM10sIDE2KTtcclxuICByZXR1cm4gJ3JnYmEoJyArIHIgKyAnLCcgKyBnICsgJywnICsgYiArICcsJyArIG9wYyArICcpJztcclxufVxyXG5cclxuZnVuY3Rpb24gZmluZFJhbmdlKG51bSwgdHlwZSwgbGltaXQpIHtcclxuICBpZiAoaXNOYU4obnVtKSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdbdUNoYXJ0c10gdW52YWxpZCBzZXJpZXMgZGF0YSEnKTtcclxuICB9XHJcbiAgbGltaXQgPSBsaW1pdCB8fCAxMDtcclxuICB0eXBlID0gdHlwZSA/IHR5cGUgOiAndXBwZXInO1xyXG4gIHZhciBtdWx0aXBsZSA9IDE7XHJcbiAgd2hpbGUgKGxpbWl0IDwgMSkge1xyXG4gICAgbGltaXQgKj0gMTA7XHJcbiAgICBtdWx0aXBsZSAqPSAxMDtcclxuICB9XHJcbiAgaWYgKHR5cGUgPT09ICd1cHBlcicpIHtcclxuICAgIG51bSA9IE1hdGguY2VpbChudW0gKiBtdWx0aXBsZSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIG51bSA9IE1hdGguZmxvb3IobnVtICogbXVsdGlwbGUpO1xyXG4gIH1cclxuICB3aGlsZSAobnVtICUgbGltaXQgIT09IDApIHtcclxuICAgIGlmICh0eXBlID09PSAndXBwZXInKSB7XHJcbiAgICAgIG51bSsrO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbnVtLS07XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBudW0gLyBtdWx0aXBsZTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsQ2FuZGxlTUEoZGF5QXJyLCBuYW1lQXJyLCBjb2xvckFyciwga2RhdGEpIHtcclxuICBsZXQgc2VyaWVzVGVtcCA9IFtdO1xyXG4gIGZvciAobGV0IGsgPSAwOyBrIDwgZGF5QXJyLmxlbmd0aDsgaysrKSB7XHJcbiAgICBsZXQgc2VyaWVzSXRlbSA9IHtcclxuICAgICAgZGF0YTogW10sXHJcbiAgICAgIG5hbWU6IG5hbWVBcnJba10sXHJcbiAgICAgIGNvbG9yOiBjb2xvckFycltrXVxyXG4gICAgfTtcclxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBrZGF0YS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICBpZiAoaSA8IGRheUFycltrXSkge1xyXG4gICAgICAgIHNlcmllc0l0ZW0uZGF0YS5wdXNoKG51bGwpO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBzdW0gPSAwO1xyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGRheUFycltrXTsgaisrKSB7XHJcbiAgICAgICAgc3VtICs9IGtkYXRhW2kgLSBqXVsxXTtcclxuICAgICAgfVxyXG4gICAgICBzZXJpZXNJdGVtLmRhdGEucHVzaCgrKHN1bSAvIGRheUFycltrXSkudG9GaXhlZCgzKSk7XHJcbiAgICB9XHJcbiAgICBzZXJpZXNUZW1wLnB1c2goc2VyaWVzSXRlbSk7XHJcbiAgfVxyXG4gIHJldHVybiBzZXJpZXNUZW1wO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxWYWxpZERpc3RhbmNlKGRpc3RhbmNlLCBjaGFydERhdGEsIGNvbmZpZywgb3B0cykge1xyXG4gIHZhciBkYXRhQ2hhcnRBcmVhV2lkdGggPSBvcHRzLndpZHRoIC0gb3B0cy5hcmVhWzFdIC0gb3B0cy5hcmVhWzNdO1xyXG4gIHZhciBkYXRhQ2hhcnRXaWR0aCA9IGNoYXJ0RGF0YS5lYWNoU3BhY2luZyAqIChvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEueEF4aXNQb2ludHMubGVuZ3RoLTEpO1xyXG4gIHZhciB2YWxpZERpc3RhbmNlID0gZGlzdGFuY2U7XHJcbiAgaWYgKGRpc3RhbmNlID49IDApIHtcclxuICAgIHZhbGlkRGlzdGFuY2UgPSAwO1xyXG4gIH0gZWxzZSBpZiAoTWF0aC5hYnMoZGlzdGFuY2UpID49IGRhdGFDaGFydFdpZHRoIC0gZGF0YUNoYXJ0QXJlYVdpZHRoKSB7XHJcbiAgICB2YWxpZERpc3RhbmNlID0gZGF0YUNoYXJ0QXJlYVdpZHRoIC0gZGF0YUNoYXJ0V2lkdGg7XHJcbiAgfVxyXG4gIHJldHVybiB2YWxpZERpc3RhbmNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0luQW5nbGVSYW5nZShhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUpIHtcclxuICBmdW5jdGlvbiBhZGp1c3QoYW5nbGUpIHtcclxuICAgIHdoaWxlIChhbmdsZSA8IDApIHtcclxuICAgICAgYW5nbGUgKz0gMiAqIE1hdGguUEk7XHJcbiAgICB9XHJcbiAgICB3aGlsZSAoYW5nbGUgPiAyICogTWF0aC5QSSkge1xyXG4gICAgICBhbmdsZSAtPSAyICogTWF0aC5QSTtcclxuICAgIH1cclxuICAgIHJldHVybiBhbmdsZTtcclxuICB9XHJcbiAgYW5nbGUgPSBhZGp1c3QoYW5nbGUpO1xyXG4gIHN0YXJ0QW5nbGUgPSBhZGp1c3Qoc3RhcnRBbmdsZSk7XHJcbiAgZW5kQW5nbGUgPSBhZGp1c3QoZW5kQW5nbGUpO1xyXG4gIGlmIChzdGFydEFuZ2xlID4gZW5kQW5nbGUpIHtcclxuICAgIGVuZEFuZ2xlICs9IDIgKiBNYXRoLlBJO1xyXG4gICAgaWYgKGFuZ2xlIDwgc3RhcnRBbmdsZSkge1xyXG4gICAgICBhbmdsZSArPSAyICogTWF0aC5QSTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGFuZ2xlID49IHN0YXJ0QW5nbGUgJiYgYW5nbGUgPD0gZW5kQW5nbGU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbFJvdGF0ZVRyYW5zbGF0ZSh4LCB5LCBoKSB7XHJcbiAgdmFyIHh2ID0geDtcclxuICB2YXIgeXYgPSBoIC0geTtcclxuICB2YXIgdHJhbnNYID0geHYgKyAoaCAtIHl2IC0geHYpIC8gTWF0aC5zcXJ0KDIpO1xyXG4gIHRyYW5zWCAqPSAtMTtcclxuICB2YXIgdHJhbnNZID0gKGggLSB5dikgKiAoTWF0aC5zcXJ0KDIpIC0gMSkgLSAoaCAtIHl2IC0geHYpIC8gTWF0aC5zcXJ0KDIpO1xyXG4gIHJldHVybiB7XHJcbiAgICB0cmFuc1g6IHRyYW5zWCxcclxuICAgIHRyYW5zWTogdHJhbnNZXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlQ3VydmVDb250cm9sUG9pbnRzKHBvaW50cywgaSkge1xyXG5cclxuICBmdW5jdGlvbiBpc05vdE1pZGRsZVBvaW50KHBvaW50cywgaSkge1xyXG4gICAgaWYgKHBvaW50c1tpIC0gMV0gJiYgcG9pbnRzW2kgKyAxXSkge1xyXG4gICAgICByZXR1cm4gcG9pbnRzW2ldLnkgPj0gTWF0aC5tYXgocG9pbnRzW2kgLSAxXS55LCBwb2ludHNbaSArIDFdLnkpIHx8IHBvaW50c1tpXS55IDw9IE1hdGgubWluKHBvaW50c1tpIC0gMV0ueSxcclxuICAgICAgICBwb2ludHNbXHJcbiAgICAgICAgICBpICsgMV0ueSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHZhciBhID0gMC4yO1xyXG4gIHZhciBiID0gMC4yO1xyXG4gIHZhciBwQXggPSBudWxsO1xyXG4gIHZhciBwQXkgPSBudWxsO1xyXG4gIHZhciBwQnggPSBudWxsO1xyXG4gIHZhciBwQnkgPSBudWxsO1xyXG4gIGlmIChpIDwgMSkge1xyXG4gICAgcEF4ID0gcG9pbnRzWzBdLnggKyAocG9pbnRzWzFdLnggLSBwb2ludHNbMF0ueCkgKiBhO1xyXG4gICAgcEF5ID0gcG9pbnRzWzBdLnkgKyAocG9pbnRzWzFdLnkgLSBwb2ludHNbMF0ueSkgKiBhO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBwQXggPSBwb2ludHNbaV0ueCArIChwb2ludHNbaSArIDFdLnggLSBwb2ludHNbaSAtIDFdLngpICogYTtcclxuICAgIHBBeSA9IHBvaW50c1tpXS55ICsgKHBvaW50c1tpICsgMV0ueSAtIHBvaW50c1tpIC0gMV0ueSkgKiBhO1xyXG4gIH1cclxuXHJcbiAgaWYgKGkgPiBwb2ludHMubGVuZ3RoIC0gMykge1xyXG4gICAgdmFyIGxhc3QgPSBwb2ludHMubGVuZ3RoIC0gMTtcclxuICAgIHBCeCA9IHBvaW50c1tsYXN0XS54IC0gKHBvaW50c1tsYXN0XS54IC0gcG9pbnRzW2xhc3QgLSAxXS54KSAqIGI7XHJcbiAgICBwQnkgPSBwb2ludHNbbGFzdF0ueSAtIChwb2ludHNbbGFzdF0ueSAtIHBvaW50c1tsYXN0IC0gMV0ueSkgKiBiO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBwQnggPSBwb2ludHNbaSArIDFdLnggLSAocG9pbnRzW2kgKyAyXS54IC0gcG9pbnRzW2ldLngpICogYjtcclxuICAgIHBCeSA9IHBvaW50c1tpICsgMV0ueSAtIChwb2ludHNbaSArIDJdLnkgLSBwb2ludHNbaV0ueSkgKiBiO1xyXG4gIH1cclxuICBpZiAoaXNOb3RNaWRkbGVQb2ludChwb2ludHMsIGkgKyAxKSkge1xyXG4gICAgcEJ5ID0gcG9pbnRzW2kgKyAxXS55O1xyXG4gIH1cclxuICBpZiAoaXNOb3RNaWRkbGVQb2ludChwb2ludHMsIGkpKSB7XHJcbiAgICBwQXkgPSBwb2ludHNbaV0ueTtcclxuICB9XHJcbiAgcmV0dXJuIHtcclxuICAgIGN0ckE6IHtcclxuICAgICAgeDogcEF4LFxyXG4gICAgICB5OiBwQXlcclxuICAgIH0sXHJcbiAgICBjdHJCOiB7XHJcbiAgICAgIHg6IHBCeCxcclxuICAgICAgeTogcEJ5XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gY29udmVydENvb3JkaW5hdGVPcmlnaW4oeCwgeSwgY2VudGVyKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHg6IGNlbnRlci54ICsgeCxcclxuICAgIHk6IGNlbnRlci55IC0geVxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGF2b2lkQ29sbGlzaW9uKG9iaiwgdGFyZ2V0KSB7XHJcbiAgaWYgKHRhcmdldCkge1xyXG4gICAgLy8gaXMgY29sbGlzaW9uIHRlc3RcclxuICAgIHdoaWxlICh1dGlsLmlzQ29sbGlzaW9uKG9iaiwgdGFyZ2V0KSkge1xyXG4gICAgICBpZiAob2JqLnN0YXJ0LnggPiAwKSB7XHJcbiAgICAgICAgb2JqLnN0YXJ0LnktLTtcclxuICAgICAgfSBlbHNlIGlmIChvYmouc3RhcnQueCA8IDApIHtcclxuICAgICAgICBvYmouc3RhcnQueSsrO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChvYmouc3RhcnQueSA+IDApIHtcclxuICAgICAgICAgIG9iai5zdGFydC55Kys7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG9iai5zdGFydC55LS07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbGxTZXJpZXMoc2VyaWVzLCBvcHRzLCBjb25maWcpIHtcclxuICB2YXIgaW5kZXggPSAwO1xyXG4gIHJldHVybiBzZXJpZXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIGlmICghaXRlbS5jb2xvcikge1xyXG4gICAgICBpdGVtLmNvbG9yID0gY29uZmlnLmNvbG9yc1tpbmRleF07XHJcbiAgICAgIGluZGV4ID0gKGluZGV4ICsgMSkgJSBjb25maWcuY29sb3JzLmxlbmd0aDtcclxuICAgIH1cclxuICAgIGlmICghaXRlbS50eXBlKSB7XHJcbiAgICAgIGl0ZW0udHlwZSA9IG9wdHMudHlwZTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgaXRlbS5zaG93ID09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgaXRlbS5zaG93ID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmICghaXRlbS50eXBlKSB7XHJcbiAgICAgIGl0ZW0udHlwZSA9IG9wdHMudHlwZTtcclxuICAgIH1cclxuICAgIGlmICghaXRlbS5wb2ludFNoYXBlKSB7XHJcbiAgICAgIGl0ZW0ucG9pbnRTaGFwZSA9IFwiY2lyY2xlXCI7XHJcbiAgICB9XHJcbiAgICBpZiAoIWl0ZW0ubGVnZW5kU2hhcGUpIHtcclxuICAgICAgc3dpdGNoIChpdGVtLnR5cGUpIHtcclxuICAgICAgICBjYXNlICdsaW5lJzpcclxuICAgICAgICAgIGl0ZW0ubGVnZW5kU2hhcGUgPSBcImxpbmVcIjtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2NvbHVtbic6XHJcbiAgICAgICAgICBpdGVtLmxlZ2VuZFNoYXBlID0gXCJyZWN0XCI7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdhcmVhJzpcclxuICAgICAgICAgIGl0ZW0ubGVnZW5kU2hhcGUgPSBcInRyaWFuZ2xlXCI7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgaXRlbS5sZWdlbmRTaGFwZSA9IFwiY2lyY2xlXCI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBpdGVtO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXREYXRhUmFuZ2UobWluRGF0YSwgbWF4RGF0YSkge1xyXG4gIHZhciBsaW1pdCA9IDA7XHJcbiAgdmFyIHJhbmdlID0gbWF4RGF0YSAtIG1pbkRhdGE7XHJcbiAgaWYgKHJhbmdlID49IDEwMDAwKSB7XHJcbiAgICBsaW1pdCA9IDEwMDA7XHJcbiAgfSBlbHNlIGlmIChyYW5nZSA+PSAxMDAwKSB7XHJcbiAgICBsaW1pdCA9IDEwMDtcclxuICB9IGVsc2UgaWYgKHJhbmdlID49IDEwMCkge1xyXG4gICAgbGltaXQgPSAxMDtcclxuICB9IGVsc2UgaWYgKHJhbmdlID49IDEwKSB7XHJcbiAgICBsaW1pdCA9IDU7XHJcbiAgfSBlbHNlIGlmIChyYW5nZSA+PSAxKSB7XHJcbiAgICBsaW1pdCA9IDE7XHJcbiAgfSBlbHNlIGlmIChyYW5nZSA+PSAwLjEpIHtcclxuICAgIGxpbWl0ID0gMC4xO1xyXG4gIH0gZWxzZSBpZiAocmFuZ2UgPj0gMC4wMSkge1xyXG4gICAgbGltaXQgPSAwLjAxO1xyXG4gIH0gZWxzZSBpZiAocmFuZ2UgPj0gMC4wMDEpIHtcclxuICAgIGxpbWl0ID0gMC4wMDE7XHJcbiAgfSBlbHNlIGlmIChyYW5nZSA+PSAwLjAwMDEpIHtcclxuICAgIGxpbWl0ID0gMC4wMDAxO1xyXG4gIH0gZWxzZSBpZiAocmFuZ2UgPj0gMC4wMDAwMSkge1xyXG4gICAgbGltaXQgPSAwLjAwMDAxO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBsaW1pdCA9IDAuMDAwMDAxO1xyXG4gIH1cclxuICByZXR1cm4ge1xyXG4gICAgbWluUmFuZ2U6IGZpbmRSYW5nZShtaW5EYXRhLCAnbG93ZXInLCBsaW1pdCksXHJcbiAgICBtYXhSYW5nZTogZmluZFJhbmdlKG1heERhdGEsICd1cHBlcicsIGxpbWl0KVxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1lYXN1cmVUZXh0KHRleHQpIHtcclxuICB2YXIgZm9udFNpemUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGNvbmZpZy5mb250U2l6ZTtcclxuICB0ZXh0ID0gU3RyaW5nKHRleHQpO1xyXG4gIHZhciB0ZXh0ID0gdGV4dC5zcGxpdCgnJyk7XHJcbiAgdmFyIHdpZHRoID0gMDtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBpdGVtID0gdGV4dFtpXTtcclxuICAgIGlmICgvW2EtekEtWl0vLnRlc3QoaXRlbSkpIHtcclxuICAgICAgd2lkdGggKz0gNztcclxuICAgIH0gZWxzZSBpZiAoL1swLTldLy50ZXN0KGl0ZW0pKSB7XHJcbiAgICAgIHdpZHRoICs9IDUuNTtcclxuICAgIH0gZWxzZSBpZiAoL1xcLi8udGVzdChpdGVtKSkge1xyXG4gICAgICB3aWR0aCArPSAyLjc7XHJcbiAgICB9IGVsc2UgaWYgKC8tLy50ZXN0KGl0ZW0pKSB7XHJcbiAgICAgIHdpZHRoICs9IDMuMjU7XHJcbiAgICB9IGVsc2UgaWYgKC9bXFx1NGUwMC1cXHU5ZmE1XS8udGVzdChpdGVtKSkge1xyXG4gICAgICB3aWR0aCArPSAxMDtcclxuICAgIH0gZWxzZSBpZiAoL1xcKHxcXCkvLnRlc3QoaXRlbSkpIHtcclxuICAgICAgd2lkdGggKz0gMy43MztcclxuICAgIH0gZWxzZSBpZiAoL1xccy8udGVzdChpdGVtKSkge1xyXG4gICAgICB3aWR0aCArPSAyLjU7XHJcbiAgICB9IGVsc2UgaWYgKC8lLy50ZXN0KGl0ZW0pKSB7XHJcbiAgICAgIHdpZHRoICs9IDg7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB3aWR0aCArPSAxMDtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHdpZHRoICogZm9udFNpemUgLyAxMDtcclxufVxyXG5cclxuZnVuY3Rpb24gZGF0YUNvbWJpbmUoc2VyaWVzKSB7XHJcbiAgcmV0dXJuIHNlcmllcy5yZWR1Y2UoZnVuY3Rpb24oYSwgYikge1xyXG4gICAgcmV0dXJuIChhLmRhdGEgPyBhLmRhdGEgOiBhKS5jb25jYXQoYi5kYXRhKTtcclxuICB9LCBbXSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRhdGFDb21iaW5lU3RhY2soc2VyaWVzLCBsZW4pIHtcclxuICB2YXIgc3VtID0gbmV3IEFycmF5KGxlbik7XHJcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBzdW0ubGVuZ3RoOyBqKyspIHtcclxuICAgIHN1bVtqXSA9IDA7XHJcbiAgfVxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN1bS5sZW5ndGg7IGorKykge1xyXG4gICAgICBzdW1bal0gKz0gc2VyaWVzW2ldLmRhdGFbal07XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBzZXJpZXMucmVkdWNlKGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgIHJldHVybiAoYS5kYXRhID8gYS5kYXRhIDogYSkuY29uY2F0KGIuZGF0YSkuY29uY2F0KHN1bSk7XHJcbiAgfSwgW10pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUb3VjaGVzKHRvdWNoZXMsIG9wdHMsIGUpIHtcclxuICBsZXQgeCwgeTtcclxuICBpZiAodG91Y2hlcy5jbGllbnRYKSB7XHJcbiAgICBpZiAob3B0cy5yb3RhdGUpIHtcclxuICAgICAgeSA9IG9wdHMuaGVpZ2h0IC0gdG91Y2hlcy5jbGllbnRYICogb3B0cy5waXhlbFJhdGlvO1xyXG4gICAgICB4ID0gKHRvdWNoZXMucGFnZVkgLSBlLmN1cnJlbnRUYXJnZXQub2Zmc2V0VG9wIC0gKG9wdHMuaGVpZ2h0IC8gb3B0cy5waXhlbFJhdGlvIC8gMikgKiAob3B0cy5waXhlbFJhdGlvIC0gMSkpICpcclxuICAgICAgICBvcHRzLnBpeGVsUmF0aW87XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB4ID0gdG91Y2hlcy5jbGllbnRYICogb3B0cy5waXhlbFJhdGlvO1xyXG4gICAgICB5ID0gKHRvdWNoZXMucGFnZVkgLSBlLmN1cnJlbnRUYXJnZXQub2Zmc2V0VG9wIC0gKG9wdHMuaGVpZ2h0IC8gb3B0cy5waXhlbFJhdGlvIC8gMikgKiAob3B0cy5waXhlbFJhdGlvIC0gMSkpICpcclxuICAgICAgICBvcHRzLnBpeGVsUmF0aW87XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGlmIChvcHRzLnJvdGF0ZSkge1xyXG4gICAgICB5ID0gb3B0cy5oZWlnaHQgLSB0b3VjaGVzLnggKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgICAgIHggPSB0b3VjaGVzLnkgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB4ID0gdG91Y2hlcy54ICogb3B0cy5waXhlbFJhdGlvO1xyXG4gICAgICB5ID0gdG91Y2hlcy55ICogb3B0cy5waXhlbFJhdGlvO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4ge1xyXG4gICAgeDogeCxcclxuICAgIHk6IHlcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFNlcmllc0RhdGFJdGVtKHNlcmllcywgaW5kZXgpIHtcclxuICB2YXIgZGF0YSA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgaXRlbSA9IHNlcmllc1tpXTtcclxuICAgIGlmIChpdGVtLmRhdGFbaW5kZXhdICE9PSBudWxsICYmIHR5cGVvZiBpdGVtLmRhdGFbaW5kZXhdICE9PSAndW5kZWZpbmVkJyAmJiBpdGVtLnNob3cpIHtcclxuICAgICAgbGV0IHNlcmllc0l0ZW0gPSB7fTtcclxuICAgICAgc2VyaWVzSXRlbS5jb2xvciA9IGl0ZW0uY29sb3I7XHJcbiAgICAgIHNlcmllc0l0ZW0udHlwZSA9IGl0ZW0udHlwZTtcclxuICAgICAgc2VyaWVzSXRlbS5zdHlsZSA9IGl0ZW0uc3R5bGU7XHJcbiAgICAgIHNlcmllc0l0ZW0ucG9pbnRTaGFwZSA9IGl0ZW0ucG9pbnRTaGFwZTtcclxuICAgICAgc2VyaWVzSXRlbS5kaXNhYmxlTGVnZW5kID0gaXRlbS5kaXNhYmxlTGVnZW5kO1xyXG4gICAgICBzZXJpZXNJdGVtLm5hbWUgPSBpdGVtLm5hbWU7XHJcbiAgICAgIHNlcmllc0l0ZW0uc2hvdyA9IGl0ZW0uc2hvdztcclxuICAgICAgc2VyaWVzSXRlbS5kYXRhID0gaXRlbS5mb3JtYXQgPyBpdGVtLmZvcm1hdChpdGVtLmRhdGFbaW5kZXhdKSA6IGl0ZW0uZGF0YVtpbmRleF07XHJcbiAgICAgIGRhdGEucHVzaChzZXJpZXNJdGVtKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldE1heFRleHRMaXN0TGVuZ3RoKGxpc3QpIHtcclxuICB2YXIgbGVuZ3RoTGlzdCA9IGxpc3QubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIHJldHVybiBtZWFzdXJlVGV4dChpdGVtKTtcclxuICB9KTtcclxuICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgbGVuZ3RoTGlzdCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFJhZGFyQ29vcmRpbmF0ZVNlcmllcyhsZW5ndGgpIHtcclxuICB2YXIgZWFjaEFuZ2xlID0gMiAqIE1hdGguUEkgLyBsZW5ndGg7XHJcbiAgdmFyIENvb3JkaW5hdGVTZXJpZXMgPSBbXTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICBDb29yZGluYXRlU2VyaWVzLnB1c2goZWFjaEFuZ2xlICogaSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gQ29vcmRpbmF0ZVNlcmllcy5tYXAoZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgcmV0dXJuIC0xICogaXRlbSArIE1hdGguUEkgLyAyO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUb29sVGlwRGF0YShzZXJpZXNEYXRhLCBjYWxQb2ludHMsIGluZGV4LCBjYXRlZ29yaWVzKSB7XHJcbiAgdmFyIG9wdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDoge307XHJcblxyXG4gIHZhciB0ZXh0TGlzdCA9IHNlcmllc0RhdGEubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRleHQ6IG9wdGlvbi5mb3JtYXQgPyBvcHRpb24uZm9ybWF0KGl0ZW0sIGNhdGVnb3JpZXNbaW5kZXhdKSA6IGl0ZW0ubmFtZSArICc6ICcgKyBpdGVtLmRhdGEsXHJcbiAgICAgIGNvbG9yOiBpdGVtLmNvbG9yXHJcbiAgICB9O1xyXG4gIH0pO1xyXG4gIHZhciB2YWxpZENhbFBvaW50cyA9IFtdO1xyXG4gIHZhciBvZmZzZXQgPSB7XHJcbiAgICB4OiAwLFxyXG4gICAgeTogMFxyXG4gIH07XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYWxQb2ludHMubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBwb2ludHMgPSBjYWxQb2ludHNbaV07XHJcbiAgICBpZiAodHlwZW9mIHBvaW50c1tpbmRleF0gIT09ICd1bmRlZmluZWQnICYmIHBvaW50c1tpbmRleF0gIT09IG51bGwpIHtcclxuICAgICAgdmFsaWRDYWxQb2ludHMucHVzaChwb2ludHNbaW5kZXhdKTtcclxuICAgIH1cclxuICB9XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWxpZENhbFBvaW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IGl0ZW0gPSB2YWxpZENhbFBvaW50c1tpXTtcclxuICAgIG9mZnNldC54ID0gTWF0aC5yb3VuZChpdGVtLngpO1xyXG4gICAgb2Zmc2V0LnkgKz0gaXRlbS55O1xyXG4gIH1cclxuICBvZmZzZXQueSAvPSB2YWxpZENhbFBvaW50cy5sZW5ndGg7XHJcbiAgcmV0dXJuIHtcclxuICAgIHRleHRMaXN0OiB0ZXh0TGlzdCxcclxuICAgIG9mZnNldDogb2Zmc2V0XHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TWl4VG9vbFRpcERhdGEoc2VyaWVzRGF0YSwgY2FsUG9pbnRzLCBpbmRleCwgY2F0ZWdvcmllcykge1xyXG4gIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHt9O1xyXG4gIHZhciB0ZXh0TGlzdCA9IHNlcmllc0RhdGEubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRleHQ6IG9wdGlvbi5mb3JtYXQgPyBvcHRpb24uZm9ybWF0KGl0ZW0sIGNhdGVnb3JpZXNbaW5kZXhdKSA6IGl0ZW0ubmFtZSArICc6ICcgKyBpdGVtLmRhdGEsXHJcbiAgICAgIGNvbG9yOiBpdGVtLmNvbG9yLFxyXG4gICAgICBkaXNhYmxlTGVnZW5kOiBpdGVtLmRpc2FibGVMZWdlbmQgPyB0cnVlIDogZmFsc2VcclxuICAgIH07XHJcbiAgfSk7XHJcbiAgdGV4dExpc3QgPSB0ZXh0TGlzdC5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgaWYgKGl0ZW0uZGlzYWJsZUxlZ2VuZCAhPT0gdHJ1ZSkge1xyXG4gICAgICByZXR1cm4gaXRlbTtcclxuICAgIH1cclxuICB9KTtcclxuICB2YXIgdmFsaWRDYWxQb2ludHMgPSBbXTtcclxuICB2YXIgb2Zmc2V0ID0ge1xyXG4gICAgeDogMCxcclxuICAgIHk6IDBcclxuICB9O1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2FsUG9pbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgcG9pbnRzID0gY2FsUG9pbnRzW2ldO1xyXG4gICAgaWYgKHR5cGVvZiBwb2ludHNbaW5kZXhdICE9PSAndW5kZWZpbmVkJyAmJiBwb2ludHNbaW5kZXhdICE9PSBudWxsKSB7XHJcbiAgICAgIHZhbGlkQ2FsUG9pbnRzLnB1c2gocG9pbnRzW2luZGV4XSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsaWRDYWxQb2ludHMubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBpdGVtID0gdmFsaWRDYWxQb2ludHNbaV07XHJcbiAgICBvZmZzZXQueCA9IE1hdGgucm91bmQoaXRlbS54KTtcclxuICAgIG9mZnNldC55ICs9IGl0ZW0ueTtcclxuICB9XHJcbiAgb2Zmc2V0LnkgLz0gdmFsaWRDYWxQb2ludHMubGVuZ3RoO1xyXG4gIHJldHVybiB7XHJcbiAgICB0ZXh0TGlzdDogdGV4dExpc3QsXHJcbiAgICBvZmZzZXQ6IG9mZnNldFxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENhbmRsZVRvb2xUaXBEYXRhKHNlcmllcywgc2VyaWVzRGF0YSwgY2FsUG9pbnRzLCBpbmRleCwgY2F0ZWdvcmllcywgZXh0cmEpIHtcclxuICB2YXIgb3B0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgYXJndW1lbnRzWzZdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNl0gOiB7fTtcclxuICBsZXQgdXBDb2xvciA9IGV4dHJhLmNvbG9yLnVwRmlsbDtcclxuICBsZXQgZG93bkNvbG9yID0gZXh0cmEuY29sb3IuZG93bkZpbGw7XHJcbiAgLy/popzoibLpobrluo/kuLrlvIDnm5jvvIzmlLbnm5jvvIzmnIDkvY7vvIzmnIDpq5hcclxuICBsZXQgY29sb3IgPSBbdXBDb2xvciwgdXBDb2xvciwgZG93bkNvbG9yLCB1cENvbG9yXTtcclxuICB2YXIgdGV4dExpc3QgPSBbXTtcclxuICBsZXQgdGV4dDAgPSB7XHJcbiAgICB0ZXh0OiBjYXRlZ29yaWVzW2luZGV4XSxcclxuICAgIGNvbG9yOiBudWxsXHJcbiAgfTtcclxuICB0ZXh0TGlzdC5wdXNoKHRleHQwKTtcclxuICBzZXJpZXNEYXRhLm1hcChmdW5jdGlvbihpdGVtKSB7XHJcbiAgICBpZiAoaW5kZXggPT0gMCAmJiBpdGVtLmRhdGFbMV0gLSBpdGVtLmRhdGFbMF0gPCAwKSB7XHJcbiAgICAgIGNvbG9yWzFdID0gZG93bkNvbG9yO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKGl0ZW0uZGF0YVswXSA8IHNlcmllc1tpbmRleCAtIDFdWzFdKSB7XHJcbiAgICAgICAgY29sb3JbMF0gPSBkb3duQ29sb3I7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGl0ZW0uZGF0YVsxXSA8IGl0ZW0uZGF0YVswXSkge1xyXG4gICAgICAgIGNvbG9yWzFdID0gZG93bkNvbG9yO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChpdGVtLmRhdGFbMl0gPiBzZXJpZXNbaW5kZXggLSAxXVsxXSkge1xyXG4gICAgICAgIGNvbG9yWzJdID0gdXBDb2xvcjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaXRlbS5kYXRhWzNdIDwgc2VyaWVzW2luZGV4IC0gMV1bMV0pIHtcclxuICAgICAgICBjb2xvclszXSA9IGRvd25Db2xvcjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IHRleHQxID0ge1xyXG4gICAgICB0ZXh0OiAn5byA55uY77yaJyArIGl0ZW0uZGF0YVswXSxcclxuICAgICAgY29sb3I6IGNvbG9yWzBdXHJcbiAgICB9O1xyXG4gICAgbGV0IHRleHQyID0ge1xyXG4gICAgICB0ZXh0OiAn5pS255uY77yaJyArIGl0ZW0uZGF0YVsxXSxcclxuICAgICAgY29sb3I6IGNvbG9yWzFdXHJcbiAgICB9O1xyXG4gICAgbGV0IHRleHQzID0ge1xyXG4gICAgICB0ZXh0OiAn5pyA5L2O77yaJyArIGl0ZW0uZGF0YVsyXSxcclxuICAgICAgY29sb3I6IGNvbG9yWzJdXHJcbiAgICB9O1xyXG4gICAgbGV0IHRleHQ0ID0ge1xyXG4gICAgICB0ZXh0OiAn5pyA6auY77yaJyArIGl0ZW0uZGF0YVszXSxcclxuICAgICAgY29sb3I6IGNvbG9yWzNdXHJcbiAgICB9O1xyXG4gICAgdGV4dExpc3QucHVzaCh0ZXh0MSwgdGV4dDIsIHRleHQzLCB0ZXh0NCk7XHJcbiAgfSk7XHJcbiAgdmFyIHZhbGlkQ2FsUG9pbnRzID0gW107XHJcbiAgdmFyIG9mZnNldCA9IHtcclxuICAgIHg6IDAsXHJcbiAgICB5OiAwXHJcbiAgfTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNhbFBvaW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IHBvaW50cyA9IGNhbFBvaW50c1tpXTtcclxuICAgIGlmICh0eXBlb2YgcG9pbnRzW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcgJiYgcG9pbnRzW2luZGV4XSAhPT0gbnVsbCkge1xyXG4gICAgICB2YWxpZENhbFBvaW50cy5wdXNoKHBvaW50c1tpbmRleF0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBvZmZzZXQueCA9IE1hdGgucm91bmQodmFsaWRDYWxQb2ludHNbMF1bMF0ueCk7XHJcbiAgcmV0dXJuIHtcclxuICAgIHRleHRMaXN0OiB0ZXh0TGlzdCxcclxuICAgIG9mZnNldDogb2Zmc2V0XHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZmlsdGVyU2VyaWVzKHNlcmllcykge1xyXG4gIGxldCB0ZW1wU2VyaWVzID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIGlmIChzZXJpZXNbaV0uc2hvdyA9PSB0cnVlKSB7XHJcbiAgICAgIHRlbXBTZXJpZXMucHVzaChzZXJpZXNbaV0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB0ZW1wU2VyaWVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kQ3VycmVudEluZGV4KGN1cnJlbnRQb2ludHMsIHhBeGlzUG9pbnRzLCBvcHRzLCBjb25maWcpIHtcclxuICB2YXIgb2Zmc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAwO1xyXG4gIHZhciBjdXJyZW50SW5kZXggPSAtMTtcclxuICB2YXIgc3BhY2luZyA9IDA7XHJcbiAgaWYoKG9wdHMudHlwZT09J2xpbmUnIHx8IG9wdHMudHlwZT09J2FyZWEnKSAmJiBvcHRzLnhBeGlzLmJvdW5kYXJ5R2FwPT0nanVzdGlmeScpe1xyXG4gICAgc3BhY2luZyA9IG9wdHMuY2hhcnREYXRhLmVhY2hTcGFjaW5nLzI7XHJcbiAgfVxyXG4gIGlmIChpc0luRXhhY3RDaGFydEFyZWEoY3VycmVudFBvaW50cywgb3B0cywgY29uZmlnKSkge1xyXG4gICAgeEF4aXNQb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICBpZiAoY3VycmVudFBvaW50cy54ICsgb2Zmc2V0ICsgc3BhY2luZyA+IGl0ZW0pIHtcclxuICAgICAgICBjdXJyZW50SW5kZXggPSBpbmRleDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHJldHVybiBjdXJyZW50SW5kZXg7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRMZWdlbmRJbmRleChjdXJyZW50UG9pbnRzLCBsZWdlbmREYXRhLCBvcHRzKSB7XHJcbiAgbGV0IGN1cnJlbnRJbmRleCA9IC0xO1xyXG4gIGlmIChpc0luRXhhY3RMZWdlbmRBcmVhKGN1cnJlbnRQb2ludHMsIGxlZ2VuZERhdGEuYXJlYSkpIHtcclxuICAgIGxldCBwb2ludHMgPSBsZWdlbmREYXRhLnBvaW50cztcclxuICAgIGxldCBpbmRleCA9IC0xO1xyXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICBsZXQgaXRlbSA9IHBvaW50c1tpXTtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBpdGVtLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgaW5kZXggKz0gMTtcclxuICAgICAgICBsZXQgYXJlYSA9IGl0ZW1bal1bJ2FyZWEnXTtcclxuICAgICAgICBpZiAoY3VycmVudFBvaW50cy54ID4gYXJlYVswXSAmJiBjdXJyZW50UG9pbnRzLnggPCBhcmVhWzJdICYmIGN1cnJlbnRQb2ludHMueSA+IGFyZWFbMV0gJiYgY3VycmVudFBvaW50cy55IDwgYXJlYVszXSkge1xyXG4gICAgICAgICAgY3VycmVudEluZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjdXJyZW50SW5kZXg7XHJcbiAgfVxyXG4gIHJldHVybiBjdXJyZW50SW5kZXg7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzSW5FeGFjdExlZ2VuZEFyZWEoY3VycmVudFBvaW50cywgYXJlYSkge1xyXG4gIHJldHVybiBjdXJyZW50UG9pbnRzLnggPiBhcmVhLnN0YXJ0LnggJiYgY3VycmVudFBvaW50cy54IDwgYXJlYS5lbmQueCAmJiBjdXJyZW50UG9pbnRzLnkgPiBhcmVhLnN0YXJ0LnkgJiZcclxuICAgIGN1cnJlbnRQb2ludHMueSA8IGFyZWEuZW5kLnk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzSW5FeGFjdENoYXJ0QXJlYShjdXJyZW50UG9pbnRzLCBvcHRzLCBjb25maWcpIHtcclxuICByZXR1cm4gY3VycmVudFBvaW50cy54IDwgb3B0cy53aWR0aCAtIG9wdHMuYXJlYVsxXSArIDEwICYmIGN1cnJlbnRQb2ludHMueCA+IG9wdHMuYXJlYVszXSAtMTAgJiYgY3VycmVudFBvaW50cy55ID4gb3B0cy5hcmVhWzBdICYmIGN1cnJlbnRQb2ludHMueSA8IG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzJdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kUmFkYXJDaGFydEN1cnJlbnRJbmRleChjdXJyZW50UG9pbnRzLCByYWRhckRhdGEsIGNvdW50KSB7XHJcbiAgdmFyIGVhY2hBbmdsZUFyZWEgPSAyICogTWF0aC5QSSAvIGNvdW50O1xyXG4gIHZhciBjdXJyZW50SW5kZXggPSAtMTtcclxuICBpZiAoaXNJbkV4YWN0UGllQ2hhcnRBcmVhKGN1cnJlbnRQb2ludHMsIHJhZGFyRGF0YS5jZW50ZXIsIHJhZGFyRGF0YS5yYWRpdXMpKSB7XHJcbiAgICB2YXIgZml4QW5nbGUgPSBmdW5jdGlvbiBmaXhBbmdsZShhbmdsZSkge1xyXG4gICAgICBpZiAoYW5nbGUgPCAwKSB7XHJcbiAgICAgICAgYW5nbGUgKz0gMiAqIE1hdGguUEk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGFuZ2xlID4gMiAqIE1hdGguUEkpIHtcclxuICAgICAgICBhbmdsZSAtPSAyICogTWF0aC5QSTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYW5nbGU7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBhbmdsZSA9IE1hdGguYXRhbjIocmFkYXJEYXRhLmNlbnRlci55IC0gY3VycmVudFBvaW50cy55LCBjdXJyZW50UG9pbnRzLnggLSByYWRhckRhdGEuY2VudGVyLngpO1xyXG4gICAgYW5nbGUgPSAtMSAqIGFuZ2xlO1xyXG4gICAgaWYgKGFuZ2xlIDwgMCkge1xyXG4gICAgICBhbmdsZSArPSAyICogTWF0aC5QSTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgYW5nbGVMaXN0ID0gcmFkYXJEYXRhLmFuZ2xlTGlzdC5tYXAoZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICBpdGVtID0gZml4QW5nbGUoLTEgKiBpdGVtKTtcclxuXHJcbiAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfSk7XHJcblxyXG4gICAgYW5nbGVMaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgICAgdmFyIHJhbmdlU3RhcnQgPSBmaXhBbmdsZShpdGVtIC0gZWFjaEFuZ2xlQXJlYSAvIDIpO1xyXG4gICAgICB2YXIgcmFuZ2VFbmQgPSBmaXhBbmdsZShpdGVtICsgZWFjaEFuZ2xlQXJlYSAvIDIpO1xyXG4gICAgICBpZiAocmFuZ2VFbmQgPCByYW5nZVN0YXJ0KSB7XHJcbiAgICAgICAgcmFuZ2VFbmQgKz0gMiAqIE1hdGguUEk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGFuZ2xlID49IHJhbmdlU3RhcnQgJiYgYW5nbGUgPD0gcmFuZ2VFbmQgfHwgYW5nbGUgKyAyICogTWF0aC5QSSA+PSByYW5nZVN0YXJ0ICYmIGFuZ2xlICsgMiAqIE1hdGguUEkgPD1cclxuICAgICAgICByYW5nZUVuZCkge1xyXG4gICAgICAgIGN1cnJlbnRJbmRleCA9IGluZGV4O1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJldHVybiBjdXJyZW50SW5kZXg7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRGdW5uZWxDaGFydEN1cnJlbnRJbmRleChjdXJyZW50UG9pbnRzLCBmdW5uZWxEYXRhKSB7XHJcbiAgdmFyIGN1cnJlbnRJbmRleCA9IC0xO1xyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBmdW5uZWxEYXRhLnNlcmllcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgdmFyIGl0ZW0gPSBmdW5uZWxEYXRhLnNlcmllc1tpXTtcclxuICAgIGlmIChjdXJyZW50UG9pbnRzLnggPiBpdGVtLmZ1bm5lbEFyZWFbMF0gJiYgY3VycmVudFBvaW50cy54IDwgaXRlbS5mdW5uZWxBcmVhWzJdICYmIGN1cnJlbnRQb2ludHMueSA+IGl0ZW0uZnVubmVsQXJlYVsxXSAmJiBjdXJyZW50UG9pbnRzLnkgPCBpdGVtLmZ1bm5lbEFyZWFbM10pIHtcclxuICAgICAgY3VycmVudEluZGV4ID0gaTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBjdXJyZW50SW5kZXg7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRXb3JkQ2hhcnRDdXJyZW50SW5kZXgoY3VycmVudFBvaW50cywgd29yZERhdGEpIHtcclxuICB2YXIgY3VycmVudEluZGV4ID0gLTE7XHJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHdvcmREYXRhLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICB2YXIgaXRlbSA9IHdvcmREYXRhW2ldO1xyXG4gICAgaWYgKGN1cnJlbnRQb2ludHMueCA+IGl0ZW0uYXJlYVswXSAmJiBjdXJyZW50UG9pbnRzLnggPCBpdGVtLmFyZWFbMl0gJiYgY3VycmVudFBvaW50cy55ID4gaXRlbS5hcmVhWzFdICYmIGN1cnJlbnRQb2ludHMueSA8IGl0ZW0uYXJlYVszXSkge1xyXG4gICAgICBjdXJyZW50SW5kZXggPSBpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGN1cnJlbnRJbmRleDtcclxufVxyXG5cclxuZnVuY3Rpb24gZmluZE1hcENoYXJ0Q3VycmVudEluZGV4KGN1cnJlbnRQb2ludHMsIG9wdHMpIHtcclxuICB2YXIgY3VycmVudEluZGV4ID0gLTE7XHJcbiAgdmFyIGNEYXRhPW9wdHMuY2hhcnREYXRhLm1hcERhdGE7XHJcbiAgdmFyIGRhdGE9b3B0cy5zZXJpZXM7XHJcbiAgdmFyIHRtcD1wb2ludFRvQ29vcmRpbmF0ZShjdXJyZW50UG9pbnRzLnksIGN1cnJlbnRQb2ludHMueCxjRGF0YS5ib3VuZHMsY0RhdGEuc2NhbGUsY0RhdGEueG9mZnNldCxjRGF0YS55b2Zmc2V0KTtcclxuICB2YXIgcG9pPVt0bXAueCwgdG1wLnldO1xyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICB2YXIgaXRlbSA9IGRhdGFbaV0uZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XHJcbiAgICBpZihpc1BvaVdpdGhpblBvbHkocG9pLGl0ZW0pKXtcclxuICAgICAgY3VycmVudEluZGV4ID0gaTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBjdXJyZW50SW5kZXg7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRQaWVDaGFydEN1cnJlbnRJbmRleChjdXJyZW50UG9pbnRzLCBwaWVEYXRhKSB7XHJcbiAgdmFyIGN1cnJlbnRJbmRleCA9IC0xO1xyXG4gIGlmIChpc0luRXhhY3RQaWVDaGFydEFyZWEoY3VycmVudFBvaW50cywgcGllRGF0YS5jZW50ZXIsIHBpZURhdGEucmFkaXVzKSkge1xyXG4gICAgdmFyIGFuZ2xlID0gTWF0aC5hdGFuMihwaWVEYXRhLmNlbnRlci55IC0gY3VycmVudFBvaW50cy55LCBjdXJyZW50UG9pbnRzLnggLSBwaWVEYXRhLmNlbnRlci54KTtcclxuICAgIGFuZ2xlID0gLWFuZ2xlO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHBpZURhdGEuc2VyaWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgIHZhciBpdGVtID0gcGllRGF0YS5zZXJpZXNbaV07XHJcbiAgICAgIGlmIChpc0luQW5nbGVSYW5nZShhbmdsZSwgaXRlbS5fc3RhcnRfLCBpdGVtLl9zdGFydF8gKyBpdGVtLl9wcm9wb3J0aW9uXyAqIDIgKiBNYXRoLlBJKSkge1xyXG4gICAgICAgIGN1cnJlbnRJbmRleCA9IGk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBjdXJyZW50SW5kZXg7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzSW5FeGFjdFBpZUNoYXJ0QXJlYShjdXJyZW50UG9pbnRzLCBjZW50ZXIsIHJhZGl1cykge1xyXG4gIHJldHVybiBNYXRoLnBvdyhjdXJyZW50UG9pbnRzLnggLSBjZW50ZXIueCwgMikgKyBNYXRoLnBvdyhjdXJyZW50UG9pbnRzLnkgLSBjZW50ZXIueSwgMikgPD0gTWF0aC5wb3cocmFkaXVzLCAyKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc3BsaXRQb2ludHMocG9pbnRzKSB7XHJcbiAgdmFyIG5ld1BvaW50cyA9IFtdO1xyXG4gIHZhciBpdGVtcyA9IFtdO1xyXG4gIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xyXG4gICAgICBpdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgIG5ld1BvaW50cy5wdXNoKGl0ZW1zKTtcclxuICAgICAgfVxyXG4gICAgICBpdGVtcyA9IFtdO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIGlmIChpdGVtcy5sZW5ndGgpIHtcclxuICAgIG5ld1BvaW50cy5wdXNoKGl0ZW1zKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBuZXdQb2ludHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbExlZ2VuZERhdGEoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNoYXJ0RGF0YSkge1xyXG4gIGxldCBsZWdlbmREYXRhID0ge1xyXG4gICAgYXJlYToge1xyXG4gICAgICBzdGFydDoge1xyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMFxyXG4gICAgICB9LFxyXG4gICAgICBlbmQ6IHtcclxuICAgICAgICB4OiAwLFxyXG4gICAgICAgIHk6IDBcclxuICAgICAgfSxcclxuICAgICAgd2lkdGg6IDAsXHJcbiAgICAgIGhlaWdodDogMCxcclxuICAgICAgd2hvbGVXaWR0aDogMCxcclxuICAgICAgd2hvbGVIZWlnaHQ6IDBcclxuICAgIH0sXHJcbiAgICBwb2ludHM6IFtdLFxyXG4gICAgd2lkdGhBcnI6IFtdLFxyXG4gICAgaGVpZ2h0QXJyOiBbXVxyXG4gIH07XHJcbiAgaWYgKG9wdHMubGVnZW5kLnNob3cgPT09IGZhbHNlKSB7XHJcbiAgICBjaGFydERhdGEubGVnZW5kRGF0YSA9IGxlZ2VuZERhdGE7XHJcbiAgICByZXR1cm4gbGVnZW5kRGF0YTtcclxuICB9XHJcblxyXG4gIGxldCBwYWRkaW5nID0gb3B0cy5sZWdlbmQucGFkZGluZztcclxuICBsZXQgbWFyZ2luID0gb3B0cy5sZWdlbmQubWFyZ2luO1xyXG4gIGxldCBmb250U2l6ZSA9IG9wdHMubGVnZW5kLmZvbnRTaXplO1xyXG4gIGxldCBzaGFwZVdpZHRoID0gMTUgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgbGV0IHNoYXBlUmlnaHQgPSA1ICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIGxldCBsaW5lSGVpZ2h0ID0gTWF0aC5tYXgob3B0cy5sZWdlbmQubGluZUhlaWdodCAqIG9wdHMucGl4ZWxSYXRpbywgZm9udFNpemUpO1xyXG4gIGlmIChvcHRzLmxlZ2VuZC5wb3NpdGlvbiA9PSAndG9wJyB8fCBvcHRzLmxlZ2VuZC5wb3NpdGlvbiA9PSAnYm90dG9tJykge1xyXG4gICAgbGV0IGxlZ2VuZExpc3QgPSBbXTtcclxuICAgIGxldCB3aWR0aENvdW50ID0gMDtcclxuICAgIGxldCB3aWR0aENvdW50QXJyID0gW107XHJcbiAgICBsZXQgY3VycmVudFJvdyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgbGV0IGl0ZW0gPSBzZXJpZXNbaV07XHJcbiAgICAgIGxldCBpdGVtV2lkdGggPSBzaGFwZVdpZHRoICsgc2hhcGVSaWdodCArIG1lYXN1cmVUZXh0KGl0ZW0ubmFtZSB8fCAndW5kZWZpbmVkJywgZm9udFNpemUpICsgb3B0cy5sZWdlbmQuaXRlbUdhcDtcclxuICAgICAgaWYgKHdpZHRoQ291bnQgKyBpdGVtV2lkdGggPiBvcHRzLndpZHRoIC0gb3B0cy5wYWRkaW5nWzFdIC0gb3B0cy5wYWRkaW5nWzNdKSB7XHJcbiAgICAgICAgbGVnZW5kTGlzdC5wdXNoKGN1cnJlbnRSb3cpO1xyXG4gICAgICAgIHdpZHRoQ291bnRBcnIucHVzaCh3aWR0aENvdW50IC0gb3B0cy5sZWdlbmQuaXRlbUdhcCk7XHJcbiAgICAgICAgd2lkdGhDb3VudCA9IGl0ZW1XaWR0aDtcclxuICAgICAgICBjdXJyZW50Um93ID0gW2l0ZW1dO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHdpZHRoQ291bnQgKz0gaXRlbVdpZHRoO1xyXG4gICAgICAgIGN1cnJlbnRSb3cucHVzaChpdGVtKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGN1cnJlbnRSb3cubGVuZ3RoKSB7XHJcbiAgICAgIGxlZ2VuZExpc3QucHVzaChjdXJyZW50Um93KTtcclxuICAgICAgd2lkdGhDb3VudEFyci5wdXNoKHdpZHRoQ291bnQgLSBvcHRzLmxlZ2VuZC5pdGVtR2FwKTtcclxuICAgICAgbGVnZW5kRGF0YS53aWR0aEFyciA9IHdpZHRoQ291bnRBcnI7XHJcbiAgICAgIGxldCBsZWdlbmRXaWR0aCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIHdpZHRoQ291bnRBcnIpO1xyXG4gICAgICBzd2l0Y2ggKG9wdHMubGVnZW5kLmZsb2F0KSB7XHJcbiAgICAgICAgY2FzZSAnbGVmdCc6XHJcbiAgICAgICAgICBsZWdlbmREYXRhLmFyZWEuc3RhcnQueCA9IG9wdHMucGFkZGluZ1szXTtcclxuICAgICAgICAgIGxlZ2VuZERhdGEuYXJlYS5lbmQueCA9IG9wdHMucGFkZGluZ1szXSArIDIgKiBwYWRkaW5nO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAncmlnaHQnOlxyXG4gICAgICAgICAgbGVnZW5kRGF0YS5hcmVhLnN0YXJ0LnggPSBvcHRzLndpZHRoIC0gb3B0cy5wYWRkaW5nWzFdIC0gbGVnZW5kV2lkdGggLSAyICogcGFkZGluZztcclxuICAgICAgICAgIGxlZ2VuZERhdGEuYXJlYS5lbmQueCA9IG9wdHMud2lkdGggLSBvcHRzLnBhZGRpbmdbMV07XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgbGVnZW5kRGF0YS5hcmVhLnN0YXJ0LnggPSAob3B0cy53aWR0aCAtIGxlZ2VuZFdpZHRoKSAvIDIgLSBwYWRkaW5nO1xyXG4gICAgICAgICAgbGVnZW5kRGF0YS5hcmVhLmVuZC54ID0gKG9wdHMud2lkdGggKyBsZWdlbmRXaWR0aCkgLyAyICsgcGFkZGluZztcclxuICAgICAgfVxyXG4gICAgICBsZWdlbmREYXRhLmFyZWEud2lkdGggPSBsZWdlbmRXaWR0aCArIDIgKiBwYWRkaW5nO1xyXG4gICAgICBsZWdlbmREYXRhLmFyZWEud2hvbGVXaWR0aCA9IGxlZ2VuZFdpZHRoICsgMiAqIHBhZGRpbmc7XHJcbiAgICAgIGxlZ2VuZERhdGEuYXJlYS5oZWlnaHQgPSBsZWdlbmRMaXN0Lmxlbmd0aCAqIGxpbmVIZWlnaHQgKyAyICogcGFkZGluZztcclxuICAgICAgbGVnZW5kRGF0YS5hcmVhLndob2xlSGVpZ2h0ID0gbGVnZW5kTGlzdC5sZW5ndGggKiBsaW5lSGVpZ2h0ICsgMiAqIHBhZGRpbmcgKyAyICogbWFyZ2luO1xyXG4gICAgICBsZWdlbmREYXRhLnBvaW50cyA9IGxlZ2VuZExpc3Q7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGxldCBsZW4gPSBzZXJpZXMubGVuZ3RoO1xyXG4gICAgbGV0IG1heEhlaWdodCA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5wYWRkaW5nWzBdIC0gb3B0cy5wYWRkaW5nWzJdIC0gMiAqIG1hcmdpbiAtIDIgKiBwYWRkaW5nO1xyXG4gICAgbGV0IG1heExlbmd0aCA9IE1hdGgubWluKE1hdGguZmxvb3IobWF4SGVpZ2h0IC8gbGluZUhlaWdodCksIGxlbik7XHJcbiAgICBsZWdlbmREYXRhLmFyZWEuaGVpZ2h0ID0gbWF4TGVuZ3RoICogbGluZUhlaWdodCArIHBhZGRpbmcgKiAyO1xyXG4gICAgbGVnZW5kRGF0YS5hcmVhLndob2xlSGVpZ2h0ID0gbWF4TGVuZ3RoICogbGluZUhlaWdodCArIHBhZGRpbmcgKiAyO1xyXG4gICAgc3dpdGNoIChvcHRzLmxlZ2VuZC5mbG9hdCkge1xyXG4gICAgICBjYXNlICd0b3AnOlxyXG4gICAgICAgIGxlZ2VuZERhdGEuYXJlYS5zdGFydC55ID0gb3B0cy5wYWRkaW5nWzBdICsgbWFyZ2luO1xyXG4gICAgICAgIGxlZ2VuZERhdGEuYXJlYS5lbmQueSA9IG9wdHMucGFkZGluZ1swXSArIG1hcmdpbiArIGxlZ2VuZERhdGEuYXJlYS5oZWlnaHQ7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2JvdHRvbSc6XHJcbiAgICAgICAgbGVnZW5kRGF0YS5hcmVhLnN0YXJ0LnkgPSBvcHRzLmhlaWdodCAtIG9wdHMucGFkZGluZ1syXSAtIG1hcmdpbiAtIGxlZ2VuZERhdGEuYXJlYS5oZWlnaHQ7XHJcbiAgICAgICAgbGVnZW5kRGF0YS5hcmVhLmVuZC55ID0gb3B0cy5oZWlnaHQgLSBvcHRzLnBhZGRpbmdbMl0gLSBtYXJnaW47XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgbGVnZW5kRGF0YS5hcmVhLnN0YXJ0LnkgPSAob3B0cy5oZWlnaHQgLSBsZWdlbmREYXRhLmFyZWEuaGVpZ2h0KSAvIDI7XHJcbiAgICAgICAgbGVnZW5kRGF0YS5hcmVhLmVuZC55ID0gKG9wdHMuaGVpZ2h0ICsgbGVnZW5kRGF0YS5hcmVhLmhlaWdodCkgLyAyO1xyXG4gICAgfVxyXG4gICAgbGV0IGxpbmVOdW0gPSBsZW4gJSBtYXhMZW5ndGggPT09IDAgPyBsZW4gLyBtYXhMZW5ndGggOiBNYXRoLmZsb29yKChsZW4gLyBtYXhMZW5ndGgpICsgMSk7XHJcbiAgICBsZXQgY3VycmVudFJvdyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lTnVtOyBpKyspIHtcclxuICAgICAgbGV0IHRlbXAgPSBzZXJpZXMuc2xpY2UoaSAqIG1heExlbmd0aCwgaSAqIG1heExlbmd0aCArIG1heExlbmd0aCk7XHJcbiAgICAgIGN1cnJlbnRSb3cucHVzaCh0ZW1wKTtcclxuICAgIH1cclxuXHJcbiAgICBsZWdlbmREYXRhLnBvaW50cyA9IGN1cnJlbnRSb3c7XHJcblxyXG4gICAgaWYgKGN1cnJlbnRSb3cubGVuZ3RoKSB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFJvdy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCBpdGVtID0gY3VycmVudFJvd1tpXTtcclxuICAgICAgICBsZXQgbWF4V2lkdGggPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgaXRlbS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgbGV0IGl0ZW1XaWR0aCA9IHNoYXBlV2lkdGggKyBzaGFwZVJpZ2h0ICsgbWVhc3VyZVRleHQoaXRlbVtqXS5uYW1lIHx8ICd1bmRlZmluZWQnLCBmb250U2l6ZSkgKyBvcHRzLmxlZ2VuZC5pdGVtR2FwO1xyXG4gICAgICAgICAgaWYgKGl0ZW1XaWR0aCA+IG1heFdpZHRoKSB7XHJcbiAgICAgICAgICAgIG1heFdpZHRoID0gaXRlbVdpZHRoO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZWdlbmREYXRhLndpZHRoQXJyLnB1c2gobWF4V2lkdGgpO1xyXG4gICAgICAgIGxlZ2VuZERhdGEuaGVpZ2h0QXJyLnB1c2goaXRlbS5sZW5ndGggKiBsaW5lSGVpZ2h0ICsgcGFkZGluZyAqIDIpO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBsZWdlbmRXaWR0aCA9IDBcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZWdlbmREYXRhLndpZHRoQXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGVnZW5kV2lkdGggKz0gbGVnZW5kRGF0YS53aWR0aEFycltpXTtcclxuICAgICAgfVxyXG4gICAgICBsZWdlbmREYXRhLmFyZWEud2lkdGggPSBsZWdlbmRXaWR0aCAtIG9wdHMubGVnZW5kLml0ZW1HYXAgKyAyICogcGFkZGluZztcclxuICAgICAgbGVnZW5kRGF0YS5hcmVhLndob2xlV2lkdGggPSBsZWdlbmREYXRhLmFyZWEud2lkdGggKyBwYWRkaW5nO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3dpdGNoIChvcHRzLmxlZ2VuZC5wb3NpdGlvbikge1xyXG4gICAgY2FzZSAndG9wJzpcclxuICAgICAgbGVnZW5kRGF0YS5hcmVhLnN0YXJ0LnkgPSBvcHRzLnBhZGRpbmdbMF0gKyBtYXJnaW47XHJcbiAgICAgIGxlZ2VuZERhdGEuYXJlYS5lbmQueSA9IG9wdHMucGFkZGluZ1swXSArIG1hcmdpbiArIGxlZ2VuZERhdGEuYXJlYS5oZWlnaHQ7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnYm90dG9tJzpcclxuICAgICAgbGVnZW5kRGF0YS5hcmVhLnN0YXJ0LnkgPSBvcHRzLmhlaWdodCAtIG9wdHMucGFkZGluZ1syXSAtIGxlZ2VuZERhdGEuYXJlYS5oZWlnaHQgLSBtYXJnaW47XHJcbiAgICAgIGxlZ2VuZERhdGEuYXJlYS5lbmQueSA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5wYWRkaW5nWzJdIC0gbWFyZ2luO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ2xlZnQnOlxyXG4gICAgICBsZWdlbmREYXRhLmFyZWEuc3RhcnQueCA9IG9wdHMucGFkZGluZ1szXTtcclxuICAgICAgbGVnZW5kRGF0YS5hcmVhLmVuZC54ID0gb3B0cy5wYWRkaW5nWzNdICsgbGVnZW5kRGF0YS5hcmVhLndpZHRoO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ3JpZ2h0JzpcclxuICAgICAgbGVnZW5kRGF0YS5hcmVhLnN0YXJ0LnggPSBvcHRzLndpZHRoIC0gb3B0cy5wYWRkaW5nWzFdIC0gbGVnZW5kRGF0YS5hcmVhLndpZHRoO1xyXG4gICAgICBsZWdlbmREYXRhLmFyZWEuZW5kLnggPSBvcHRzLndpZHRoIC0gb3B0cy5wYWRkaW5nWzFdO1xyXG4gICAgICBicmVhaztcclxuICB9XHJcbiAgY2hhcnREYXRhLmxlZ2VuZERhdGEgPSBsZWdlbmREYXRhO1xyXG4gIHJldHVybiBsZWdlbmREYXRhO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxDYXRlZ29yaWVzRGF0YShjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcsIGVhY2hTcGFjaW5nKSB7XHJcbiAgdmFyIHJlc3VsdCA9IHtcclxuICAgIGFuZ2xlOiAwLFxyXG4gICAgeEF4aXNIZWlnaHQ6IGNvbmZpZy54QXhpc0hlaWdodFxyXG4gIH07XHJcbiAgdmFyIGNhdGVnb3JpZXNUZXh0TGVudGggPSBjYXRlZ29yaWVzLm1hcChmdW5jdGlvbihpdGVtKSB7XHJcbiAgICByZXR1cm4gbWVhc3VyZVRleHQoaXRlbSk7XHJcbiAgfSk7XHJcbiAgdmFyIG1heFRleHRMZW5ndGggPSBNYXRoLm1heC5hcHBseSh0aGlzLCBjYXRlZ29yaWVzVGV4dExlbnRoKTtcclxuXHJcbiAgaWYgKG9wdHMueEF4aXMucm90YXRlTGFiZWwgPT0gdHJ1ZSAmJiBtYXhUZXh0TGVuZ3RoICsgMiAqIGNvbmZpZy54QXhpc1RleHRQYWRkaW5nID4gZWFjaFNwYWNpbmcpIHtcclxuICAgIHJlc3VsdC5hbmdsZSA9IDQ1ICogTWF0aC5QSSAvIDE4MDtcclxuICAgIHJlc3VsdC54QXhpc0hlaWdodCA9IDIgKiBjb25maWcueEF4aXNUZXh0UGFkZGluZyArIG1heFRleHRMZW5ndGggKiBNYXRoLnNpbihyZXN1bHQuYW5nbGUpO1xyXG4gIH1cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRSYWRhckRhdGFQb2ludHMoYW5nbGVMaXN0LCBjZW50ZXIsIHJhZGl1cywgc2VyaWVzLCBvcHRzKSB7XHJcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDE7XHJcblxyXG4gIHZhciByYWRhck9wdGlvbiA9IG9wdHMuZXh0cmEucmFkYXIgfHwge307XHJcbiAgcmFkYXJPcHRpb24ubWF4ID0gcmFkYXJPcHRpb24ubWF4IHx8IDA7XHJcbiAgdmFyIG1heERhdGEgPSBNYXRoLm1heChyYWRhck9wdGlvbi5tYXgsIE1hdGgubWF4LmFwcGx5KG51bGwsIGRhdGFDb21iaW5lKHNlcmllcykpKTtcclxuXHJcbiAgdmFyIGRhdGEgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IGVhY2ggPSBzZXJpZXNbaV07XHJcbiAgICBsZXQgbGlzdEl0ZW0gPSB7fTtcclxuICAgIGxpc3RJdGVtLmNvbG9yID0gZWFjaC5jb2xvcjtcclxuICAgIGxpc3RJdGVtLmRhdGEgPSBbXTtcclxuICAgIGVhY2guZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgIGxldCB0bXAgPSB7fTtcclxuICAgICAgdG1wLmFuZ2xlID0gYW5nbGVMaXN0W2luZGV4XTtcclxuXHJcbiAgICAgIHRtcC5wcm9wb3J0aW9uID0gaXRlbSAvIG1heERhdGE7XHJcbiAgICAgIHRtcC5wb3NpdGlvbiA9IGNvbnZlcnRDb29yZGluYXRlT3JpZ2luKHJhZGl1cyAqIHRtcC5wcm9wb3J0aW9uICogcHJvY2VzcyAqIE1hdGguY29zKHRtcC5hbmdsZSksIHJhZGl1cyAqIHRtcC5wcm9wb3J0aW9uICpcclxuICAgICAgICBwcm9jZXNzICogTWF0aC5zaW4odG1wLmFuZ2xlKSwgY2VudGVyKTtcclxuICAgICAgbGlzdEl0ZW0uZGF0YS5wdXNoKHRtcCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkYXRhLnB1c2gobGlzdEl0ZW0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFBpZURhdGFQb2ludHMoc2VyaWVzLCByYWRpdXMpIHtcclxuICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcclxuXHJcbiAgdmFyIGNvdW50ID0gMDtcclxuICB2YXIgX3N0YXJ0XyA9IDA7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBpdGVtID0gc2VyaWVzW2ldO1xyXG4gICAgaXRlbS5kYXRhID0gaXRlbS5kYXRhID09PSBudWxsID8gMCA6IGl0ZW0uZGF0YTtcclxuICAgIGNvdW50ICs9IGl0ZW0uZGF0YTtcclxuICB9XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBpdGVtID0gc2VyaWVzW2ldO1xyXG4gICAgaXRlbS5kYXRhID0gaXRlbS5kYXRhID09PSBudWxsID8gMCA6IGl0ZW0uZGF0YTtcclxuICAgIGlmIChjb3VudCA9PT0gMCkge1xyXG4gICAgICBpdGVtLl9wcm9wb3J0aW9uXyA9IDEgLyBzZXJpZXMubGVuZ3RoICogcHJvY2VzcztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGl0ZW0uX3Byb3BvcnRpb25fID0gaXRlbS5kYXRhIC8gY291bnQgKiBwcm9jZXNzO1xyXG4gICAgfVxyXG4gICAgaXRlbS5fcmFkaXVzXyA9IHJhZGl1cztcclxuICB9XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBpdGVtID0gc2VyaWVzW2ldO1xyXG4gICAgaXRlbS5fc3RhcnRfID0gX3N0YXJ0XztcclxuICAgIF9zdGFydF8gKz0gMiAqIGl0ZW0uX3Byb3BvcnRpb25fICogTWF0aC5QSTtcclxuICB9XHJcblxyXG4gIHJldHVybiBzZXJpZXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEZ1bm5lbERhdGFQb2ludHMoc2VyaWVzLCByYWRpdXMpIHtcclxuICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcclxuICBzZXJpZXMgPSBzZXJpZXMuc29ydChmdW5jdGlvbihhLGIpe3JldHVybiBwYXJzZUludChiLmRhdGEpLXBhcnNlSW50KGEuZGF0YSk7fSk7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIHNlcmllc1tpXS5yYWRpdXMgPSBzZXJpZXNbaV0uZGF0YS9zZXJpZXNbMF0uZGF0YSpyYWRpdXMqcHJvY2VzcztcclxuICAgIHNlcmllc1tpXS5fcHJvcG9ydGlvbl8gPSBzZXJpZXNbaV0uZGF0YS9zZXJpZXNbMF0uZGF0YTtcclxuICB9XHJcbiAgcmV0dXJuIHNlcmllcy5yZXZlcnNlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFJvc2VEYXRhUG9pbnRzKHNlcmllcywgdHlwZSwgbWluUmFkaXVzLCByYWRpdXMpIHtcclxuICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMTtcclxuICB2YXIgY291bnQgPSAwO1xyXG4gIHZhciBfc3RhcnRfID0gMDtcclxuXHJcbiAgdmFyIGRhdGFBcnIgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IGl0ZW0gPSBzZXJpZXNbaV07XHJcbiAgICBpdGVtLmRhdGEgPSBpdGVtLmRhdGEgPT09IG51bGwgPyAwIDogaXRlbS5kYXRhO1xyXG4gICAgY291bnQgKz0gaXRlbS5kYXRhO1xyXG4gICAgZGF0YUFyci5wdXNoKGl0ZW0uZGF0YSk7XHJcbiAgfVxyXG5cclxuICB2YXIgbWluRGF0YSA9IE1hdGgubWluLmFwcGx5KG51bGwsIGRhdGFBcnIpO1xyXG4gIHZhciBtYXhEYXRhID0gTWF0aC5tYXguYXBwbHkobnVsbCwgZGF0YUFycik7XHJcbiAgdmFyIHJhZGl1c0xlbmd0aCA9IHJhZGl1cyAtIG1pblJhZGl1cztcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBpdGVtID0gc2VyaWVzW2ldO1xyXG4gICAgaXRlbS5kYXRhID0gaXRlbS5kYXRhID09PSBudWxsID8gMCA6IGl0ZW0uZGF0YTtcclxuICAgIGlmIChjb3VudCA9PT0gMCB8fCB0eXBlID09ICdhcmVhJykge1xyXG4gICAgICBpdGVtLl9wcm9wb3J0aW9uXyA9IGl0ZW0uZGF0YSAvIGNvdW50ICogcHJvY2VzcztcclxuICAgICAgaXRlbS5fcm9zZV9wcm9wb3J0aW9uXyA9IDEgLyBzZXJpZXMubGVuZ3RoICogcHJvY2VzcztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGl0ZW0uX3Byb3BvcnRpb25fID0gaXRlbS5kYXRhIC8gY291bnQgKiBwcm9jZXNzO1xyXG4gICAgICBpdGVtLl9yb3NlX3Byb3BvcnRpb25fID0gaXRlbS5kYXRhIC8gY291bnQgKiBwcm9jZXNzO1xyXG4gICAgfVxyXG4gICAgaXRlbS5fcmFkaXVzXyA9IG1pblJhZGl1cyArIHJhZGl1c0xlbmd0aCAqICgoaXRlbS5kYXRhIC0gbWluRGF0YSkgLyAobWF4RGF0YSAtIG1pbkRhdGEpKTtcclxuICB9XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBpdGVtID0gc2VyaWVzW2ldO1xyXG4gICAgaXRlbS5fc3RhcnRfID0gX3N0YXJ0XztcclxuICAgIF9zdGFydF8gKz0gMiAqIGl0ZW0uX3Jvc2VfcHJvcG9ydGlvbl8gKiBNYXRoLlBJO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHNlcmllcztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QXJjYmFyRGF0YVBvaW50cyhzZXJpZXMsIGFyY2Jhck9wdGlvbikge1xyXG4gIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAxO1xyXG4gIGlmIChwcm9jZXNzID09IDEpIHtcclxuICAgIHByb2Nlc3MgPSAwLjk5OTk5OTtcclxuICB9XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBpdGVtID0gc2VyaWVzW2ldO1xyXG4gICAgaXRlbS5kYXRhID0gaXRlbS5kYXRhID09PSBudWxsID8gMCA6IGl0ZW0uZGF0YTtcclxuICAgIGxldCB0b3RhbEFuZ2xlO1xyXG4gICAgaWYgKGFyY2Jhck9wdGlvbi50eXBlID09ICdkZWZhdWx0Jykge1xyXG4gICAgICBpZiAoYXJjYmFyT3B0aW9uLmVuZEFuZ2xlIDwgYXJjYmFyT3B0aW9uLnN0YXJ0QW5nbGUpIHtcclxuICAgICAgICB0b3RhbEFuZ2xlID0gMiArIGFyY2Jhck9wdGlvbi5lbmRBbmdsZSAtIGFyY2Jhck9wdGlvbi5zdGFydEFuZ2xlO1xyXG4gICAgICB9IGVsc2V7XHJcbiAgICAgICAgdG90YWxBbmdsZSA9IGFyY2Jhck9wdGlvbi5zdGFydEFuZ2xlIC0gYXJjYmFyT3B0aW9uLmVuZEFuZ2xlO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0b3RhbEFuZ2xlID0gMjtcclxuICAgIH1cclxuICAgIGl0ZW0uX3Byb3BvcnRpb25fID0gdG90YWxBbmdsZSAqIGl0ZW0uZGF0YSAqIHByb2Nlc3MgKyBhcmNiYXJPcHRpb24uc3RhcnRBbmdsZTtcclxuICAgIGlmIChpdGVtLl9wcm9wb3J0aW9uXyA+PSAyKSB7XHJcbiAgICAgIGl0ZW0uX3Byb3BvcnRpb25fID0gaXRlbS5fcHJvcG9ydGlvbl8gJSAyO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gc2VyaWVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRHYXVnZUF4aXNQb2ludHMoY2F0ZWdvcmllcywgc3RhcnRBbmdsZSwgZW5kQW5nbGUpIHtcclxuICBsZXQgdG90YWxBbmdsZSA9IHN0YXJ0QW5nbGUgLSBlbmRBbmdsZSArIDE7XHJcbiAgbGV0IHRlbXBTdGFydEFuZ2xlID0gc3RhcnRBbmdsZTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNhdGVnb3JpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIGNhdGVnb3JpZXNbaV0udmFsdWUgPSBjYXRlZ29yaWVzW2ldLnZhbHVlID09PSBudWxsID8gMCA6IGNhdGVnb3JpZXNbaV0udmFsdWU7XHJcbiAgICBjYXRlZ29yaWVzW2ldLl9zdGFydEFuZ2xlXyA9IHRlbXBTdGFydEFuZ2xlO1xyXG4gICAgY2F0ZWdvcmllc1tpXS5fZW5kQW5nbGVfID0gdG90YWxBbmdsZSAqIGNhdGVnb3JpZXNbaV0udmFsdWUgKyBzdGFydEFuZ2xlO1xyXG4gICAgaWYgKGNhdGVnb3JpZXNbaV0uX2VuZEFuZ2xlXyA+PSAyKSB7XHJcbiAgICAgIGNhdGVnb3JpZXNbaV0uX2VuZEFuZ2xlXyA9IGNhdGVnb3JpZXNbaV0uX2VuZEFuZ2xlXyAlIDI7XHJcbiAgICB9XHJcbiAgICB0ZW1wU3RhcnRBbmdsZSA9IGNhdGVnb3JpZXNbaV0uX2VuZEFuZ2xlXztcclxuICB9XHJcbiAgcmV0dXJuIGNhdGVnb3JpZXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEdhdWdlRGF0YVBvaW50cyhzZXJpZXMsIGNhdGVnb3JpZXMsIGdhdWdlT3B0aW9uKSB7XHJcbiAgbGV0IHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDE7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBpdGVtID0gc2VyaWVzW2ldO1xyXG4gICAgaXRlbS5kYXRhID0gaXRlbS5kYXRhID09PSBudWxsID8gMCA6IGl0ZW0uZGF0YTtcclxuICAgIGlmIChnYXVnZU9wdGlvbi5wb2ludGVyLmNvbG9yID09ICdhdXRvJykge1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhdGVnb3JpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoaXRlbS5kYXRhIDw9IGNhdGVnb3JpZXNbaV0udmFsdWUpIHtcclxuICAgICAgICAgIGl0ZW0uY29sb3IgPSBjYXRlZ29yaWVzW2ldLmNvbG9yO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpdGVtLmNvbG9yID0gZ2F1Z2VPcHRpb24ucG9pbnRlci5jb2xvcjtcclxuICAgIH1cclxuICAgIGxldCB0b3RhbEFuZ2xlID0gZ2F1Z2VPcHRpb24uc3RhcnRBbmdsZSAtIGdhdWdlT3B0aW9uLmVuZEFuZ2xlICsgMTtcclxuICAgIGl0ZW0uX2VuZEFuZ2xlXyA9IHRvdGFsQW5nbGUgKiBpdGVtLmRhdGEgKyBnYXVnZU9wdGlvbi5zdGFydEFuZ2xlO1xyXG4gICAgaXRlbS5fb2xkQW5nbGVfID0gZ2F1Z2VPcHRpb24ub2xkQW5nbGU7XHJcbiAgICBpZiAoZ2F1Z2VPcHRpb24ub2xkQW5nbGUgPCBnYXVnZU9wdGlvbi5lbmRBbmdsZSkge1xyXG4gICAgICBpdGVtLl9vbGRBbmdsZV8gKz0gMjtcclxuICAgIH1cclxuICAgIGlmIChpdGVtLmRhdGEgPj0gZ2F1Z2VPcHRpb24ub2xkRGF0YSkge1xyXG4gICAgICBpdGVtLl9wcm9wb3J0aW9uXyA9IChpdGVtLl9lbmRBbmdsZV8gLSBpdGVtLl9vbGRBbmdsZV8pICogcHJvY2VzcyArIGdhdWdlT3B0aW9uLm9sZEFuZ2xlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaXRlbS5fcHJvcG9ydGlvbl8gPSBpdGVtLl9vbGRBbmdsZV8gLSAoaXRlbS5fb2xkQW5nbGVfIC0gaXRlbS5fZW5kQW5nbGVfKSAqIHByb2Nlc3M7XHJcbiAgICB9XHJcbiAgICBpZiAoaXRlbS5fcHJvcG9ydGlvbl8gPj0gMikge1xyXG4gICAgICBpdGVtLl9wcm9wb3J0aW9uXyA9IGl0ZW0uX3Byb3BvcnRpb25fICUgMjtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHNlcmllcztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UGllVGV4dE1heExlbmd0aChzZXJpZXMpIHtcclxuICBzZXJpZXMgPSBnZXRQaWVEYXRhUG9pbnRzKHNlcmllcyk7XHJcbiAgbGV0IG1heExlbmd0aCA9IDA7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBpdGVtID0gc2VyaWVzW2ldO1xyXG4gICAgbGV0IHRleHQgPSBpdGVtLmZvcm1hdCA/IGl0ZW0uZm9ybWF0KCtpdGVtLl9wcm9wb3J0aW9uXy50b0ZpeGVkKDIpKSA6IHV0aWwudG9GaXhlZChpdGVtLl9wcm9wb3J0aW9uXyAqIDEwMCkgKyAnJSc7XHJcbiAgICBtYXhMZW5ndGggPSBNYXRoLm1heChtYXhMZW5ndGgsIG1lYXN1cmVUZXh0KHRleHQpKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBtYXhMZW5ndGg7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpeENvbHVtZURhdGEocG9pbnRzLCBlYWNoU3BhY2luZywgY29sdW1uTGVuLCBpbmRleCwgY29uZmlnLCBvcHRzKSB7XHJcbiAgcmV0dXJuIHBvaW50cy5tYXAoZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgaWYgKGl0ZW0gPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBpdGVtLndpZHRoID0gTWF0aC5jZWlsKChlYWNoU3BhY2luZyAtIDIgKiBjb25maWcuY29sdW1lUGFkZGluZykgLyBjb2x1bW5MZW4pO1xyXG5cclxuICAgIGlmIChvcHRzLmV4dHJhLmNvbHVtbiAmJiBvcHRzLmV4dHJhLmNvbHVtbi53aWR0aCAmJiArb3B0cy5leHRyYS5jb2x1bW4ud2lkdGggPiAwKSB7XHJcbiAgICAgIGl0ZW0ud2lkdGggPSBNYXRoLm1pbihpdGVtLndpZHRoLCArb3B0cy5leHRyYS5jb2x1bW4ud2lkdGgpO1xyXG4gICAgfVxyXG4gICAgaWYgKGl0ZW0ud2lkdGggPD0gMCkge1xyXG4gICAgICBpdGVtLndpZHRoID0gMTtcclxuICAgIH1cclxuICAgIGl0ZW0ueCArPSAoaW5kZXggKyAwLjUgLSBjb2x1bW5MZW4gLyAyKSAqIGl0ZW0ud2lkdGg7XHJcbiAgICByZXR1cm4gaXRlbTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZml4Q29sdW1lTWV0ZXJEYXRhKHBvaW50cywgZWFjaFNwYWNpbmcsIGNvbHVtbkxlbiwgaW5kZXgsIGNvbmZpZywgb3B0cywgYm9yZGVyKSB7XHJcbiAgcmV0dXJuIHBvaW50cy5tYXAoZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgaWYgKGl0ZW0gPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBpdGVtLndpZHRoID0gTWF0aC5jZWlsKChlYWNoU3BhY2luZyAtIDIgKiBjb25maWcuY29sdW1lUGFkZGluZykgLyAyKTtcclxuXHJcbiAgICBpZiAob3B0cy5leHRyYS5jb2x1bW4gJiYgb3B0cy5leHRyYS5jb2x1bW4ud2lkdGggJiYgK29wdHMuZXh0cmEuY29sdW1uLndpZHRoID4gMCkge1xyXG4gICAgICBpdGVtLndpZHRoID0gTWF0aC5taW4oaXRlbS53aWR0aCwgK29wdHMuZXh0cmEuY29sdW1uLndpZHRoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaW5kZXggPiAwKSB7XHJcbiAgICAgIGl0ZW0ud2lkdGggLT0gMiAqIGJvcmRlcjtcclxuICAgIH1cclxuICAgIHJldHVybiBpdGVtO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaXhDb2x1bWVTdGFja0RhdGEocG9pbnRzLCBlYWNoU3BhY2luZywgY29sdW1uTGVuLCBpbmRleCwgY29uZmlnLCBvcHRzLCBzZXJpZXMpIHtcclxuXHJcbiAgcmV0dXJuIHBvaW50cy5tYXAoZnVuY3Rpb24oaXRlbSwgaW5kZXhuKSB7XHJcblxyXG4gICAgaWYgKGl0ZW0gPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBpdGVtLndpZHRoID0gTWF0aC5jZWlsKChlYWNoU3BhY2luZyAtIDIgKiBjb25maWcuY29sdW1lUGFkZGluZykgLyAyKTtcclxuXHJcbiAgICBpZiAob3B0cy5leHRyYS5jb2x1bW4gJiYgb3B0cy5leHRyYS5jb2x1bW4ud2lkdGggJiYgK29wdHMuZXh0cmEuY29sdW1uLndpZHRoID4gMCkge1xyXG4gICAgICBpdGVtLndpZHRoID0gTWF0aC5taW4oaXRlbS53aWR0aCwgK29wdHMuZXh0cmEuY29sdW1uLndpZHRoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBpdGVtO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRYQXhpc1BvaW50cyhjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcpIHtcclxuICB2YXIgeUF4aXNUb3RhbFdpZHRoID0gY29uZmlnLnlBeGlzV2lkdGggKyBjb25maWcueUF4aXNUaXRsZVdpZHRoO1xyXG4gIHZhciBzcGFjaW5nVmFsaWQgPSBvcHRzLndpZHRoIC0gb3B0cy5hcmVhWzFdIC0gb3B0cy5hcmVhWzNdO1xyXG4gIHZhciBkYXRhQ291bnQgPSBvcHRzLmVuYWJsZVNjcm9sbCA/IE1hdGgubWluKG9wdHMueEF4aXMuaXRlbUNvdW50LCBjYXRlZ29yaWVzLmxlbmd0aCkgOiBjYXRlZ29yaWVzLmxlbmd0aDtcclxuICBpZigob3B0cy50eXBlPT0nbGluZScgfHwgb3B0cy50eXBlPT0nYXJlYScpICYmIGRhdGFDb3VudD4xICYmIG9wdHMueEF4aXMuYm91bmRhcnlHYXA9PSdqdXN0aWZ5Jyl7XHJcbiAgICBkYXRhQ291bnQgLT0xO1xyXG4gIH1cclxuICB2YXIgZWFjaFNwYWNpbmcgPSBzcGFjaW5nVmFsaWQgLyBkYXRhQ291bnQ7XHJcblxyXG4gIHZhciB4QXhpc1BvaW50cyA9IFtdO1xyXG4gIHZhciBzdGFydFggPSBvcHRzLmFyZWFbM107XHJcbiAgdmFyIGVuZFggPSBvcHRzLndpZHRoIC0gb3B0cy5hcmVhWzFdO1xyXG4gIGNhdGVnb3JpZXMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgeEF4aXNQb2ludHMucHVzaChzdGFydFggKyBpbmRleCAqIGVhY2hTcGFjaW5nKTtcclxuICB9KTtcclxuICBpZihvcHRzLnhBeGlzLmJvdW5kYXJ5R2FwICE9PSdqdXN0aWZ5Jyl7XHJcbiAgICBpZiAob3B0cy5lbmFibGVTY3JvbGwgPT09IHRydWUpIHtcclxuICAgICAgeEF4aXNQb2ludHMucHVzaChzdGFydFggKyBjYXRlZ29yaWVzLmxlbmd0aCAqIGVhY2hTcGFjaW5nKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHhBeGlzUG9pbnRzLnB1c2goZW5kWCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB7XHJcbiAgICB4QXhpc1BvaW50czogeEF4aXNQb2ludHMsXHJcbiAgICBzdGFydFg6IHN0YXJ0WCxcclxuICAgIGVuZFg6IGVuZFgsXHJcbiAgICBlYWNoU3BhY2luZzogZWFjaFNwYWNpbmdcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDYW5kbGVEYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcpIHtcclxuICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA3ICYmIGFyZ3VtZW50c1s3XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzddIDogMTtcclxuICB2YXIgcG9pbnRzID0gW107XHJcbiAgdmFyIHZhbGlkSGVpZ2h0ID0gb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMF0gLSBvcHRzLmFyZWFbMl07XHJcbiAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICBpZiAoaXRlbSA9PT0gbnVsbCkge1xyXG4gICAgICBwb2ludHMucHVzaChudWxsKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciBjUG9pbnRzID0gW107XHJcbiAgICAgIGl0ZW0uZm9yRWFjaChmdW5jdGlvbihpdGVtcywgaW5kZXhzKSB7XHJcbiAgICAgICAgdmFyIHBvaW50ID0ge307XHJcbiAgICAgICAgcG9pbnQueCA9IHhBeGlzUG9pbnRzW2luZGV4XSArIE1hdGgucm91bmQoZWFjaFNwYWNpbmcgLyAyKTtcclxuICAgICAgICB2YXIgdmFsdWUgPSBpdGVtcy52YWx1ZSB8fCBpdGVtcztcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gdmFsaWRIZWlnaHQgKiAodmFsdWUgLSBtaW5SYW5nZSkgLyAobWF4UmFuZ2UgLSBtaW5SYW5nZSk7XHJcbiAgICAgICAgaGVpZ2h0ICo9IHByb2Nlc3M7XHJcbiAgICAgICAgcG9pbnQueSA9IG9wdHMuaGVpZ2h0IC0gTWF0aC5yb3VuZChoZWlnaHQpIC0gb3B0cy5hcmVhWzJdO1xyXG4gICAgICAgIGNQb2ludHMucHVzaChwb2ludCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBwb2ludHMucHVzaChjUG9pbnRzKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHBvaW50cztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RGF0YVBvaW50cyhkYXRhLCBtaW5SYW5nZSwgbWF4UmFuZ2UsIHhBeGlzUG9pbnRzLCBlYWNoU3BhY2luZywgb3B0cywgY29uZmlnKSB7XHJcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNyAmJiBhcmd1bWVudHNbN10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s3XSA6IDE7XHJcbiAgdmFyIGJvdW5kYXJ5R2FwPSdjZW50ZXInO1xyXG4gIGlmIChvcHRzLnR5cGUgPT0gJ2xpbmUnfHxvcHRzLnR5cGUgPT0gJ2FyZWEnKXtcclxuICAgIGJvdW5kYXJ5R2FwPW9wdHMueEF4aXMuYm91bmRhcnlHYXA7XHJcbiAgfVxyXG4gIHZhciBwb2ludHMgPSBbXTtcclxuICB2YXIgdmFsaWRIZWlnaHQgPSBvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVswXSAtIG9wdHMuYXJlYVsyXTtcclxuICBkYXRhLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgIGlmIChpdGVtID09PSBudWxsKSB7XHJcbiAgICAgIHBvaW50cy5wdXNoKG51bGwpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIHBvaW50ID0ge307XHJcbiAgICAgIHBvaW50LmNvbG9yID0gaXRlbS5jb2xvcjtcclxuICAgICAgcG9pbnQueCA9IHhBeGlzUG9pbnRzW2luZGV4XTtcclxuICAgICAgaWYoYm91bmRhcnlHYXA9PSdjZW50ZXInKXtcclxuICAgICAgICBwb2ludC54ICs9IE1hdGgucm91bmQoZWFjaFNwYWNpbmcgLyAyKTtcclxuICAgICAgfVxyXG4gICAgICB2YXIgdmFsdWUgPSBpdGVtO1xyXG4gICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0gIT09IG51bGwpIHtcclxuICAgICAgICB2YWx1ZSA9IGl0ZW0udmFsdWVcclxuICAgICAgfVxyXG4gICAgICB2YXIgaGVpZ2h0ID0gdmFsaWRIZWlnaHQgKiAodmFsdWUgLSBtaW5SYW5nZSkgLyAobWF4UmFuZ2UgLSBtaW5SYW5nZSk7XHJcbiAgICAgIGhlaWdodCAqPSBwcm9jZXNzO1xyXG4gICAgICBwb2ludC55ID0gb3B0cy5oZWlnaHQgLSBNYXRoLnJvdW5kKGhlaWdodCkgLSBvcHRzLmFyZWFbMl07XHJcbiAgICAgIHBvaW50cy5wdXNoKHBvaW50KTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHBvaW50cztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U3RhY2tEYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHNlcmllc0luZGV4LCBzdGFja1Nlcmllcykge1xyXG4gIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDkgJiYgYXJndW1lbnRzWzldICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbOV0gOiAxO1xyXG4gIHZhciBwb2ludHMgPSBbXTtcclxuICB2YXIgdmFsaWRIZWlnaHQgPSBvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVswXSAtIG9wdHMuYXJlYVsyXTtcclxuXHJcbiAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICBpZiAoaXRlbSA9PT0gbnVsbCkge1xyXG4gICAgICBwb2ludHMucHVzaChudWxsKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciBwb2ludCA9IHt9O1xyXG4gICAgICBwb2ludC5jb2xvciA9IGl0ZW0uY29sb3I7XHJcbiAgICAgIHBvaW50LnggPSB4QXhpc1BvaW50c1tpbmRleF0gKyBNYXRoLnJvdW5kKGVhY2hTcGFjaW5nIC8gMik7XHJcblxyXG4gICAgICBpZiAoc2VyaWVzSW5kZXggPiAwKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBzZXJpZXNJbmRleDsgaSsrKSB7XHJcbiAgICAgICAgICB2YWx1ZSArPSBzdGFja1Nlcmllc1tpXS5kYXRhW2luZGV4XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZhbHVlMCA9IHZhbHVlIC0gaXRlbTtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gdmFsaWRIZWlnaHQgKiAodmFsdWUgLSBtaW5SYW5nZSkgLyAobWF4UmFuZ2UgLSBtaW5SYW5nZSk7XHJcbiAgICAgICAgdmFyIGhlaWdodDAgPSB2YWxpZEhlaWdodCAqICh2YWx1ZTAgLSBtaW5SYW5nZSkgLyAobWF4UmFuZ2UgLSBtaW5SYW5nZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gaXRlbTtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gdmFsaWRIZWlnaHQgKiAodmFsdWUgLSBtaW5SYW5nZSkgLyAobWF4UmFuZ2UgLSBtaW5SYW5nZSk7XHJcbiAgICAgICAgdmFyIGhlaWdodDAgPSAwO1xyXG4gICAgICB9XHJcbiAgICAgIHZhciBoZWlnaHRjID0gaGVpZ2h0MDtcclxuICAgICAgaGVpZ2h0ICo9IHByb2Nlc3M7XHJcbiAgICAgIGhlaWdodGMgKj0gcHJvY2VzcztcclxuICAgICAgcG9pbnQueSA9IG9wdHMuaGVpZ2h0IC0gTWF0aC5yb3VuZChoZWlnaHQpIC0gb3B0cy5hcmVhWzJdO1xyXG4gICAgICBwb2ludC55MCA9IG9wdHMuaGVpZ2h0IC0gTWF0aC5yb3VuZChoZWlnaHRjKSAtIG9wdHMuYXJlYVsyXTtcclxuICAgICAgcG9pbnRzLnB1c2gocG9pbnQpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gcG9pbnRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRZQXhpc1RleHRMaXN0KHNlcmllcywgb3B0cywgY29uZmlnLCBzdGFjaykge1xyXG4gIHZhciBkYXRhO1xyXG4gIGlmIChzdGFjayA9PSAnc3RhY2snKSB7XHJcbiAgICBkYXRhID0gZGF0YUNvbWJpbmVTdGFjayhzZXJpZXMsIG9wdHMuY2F0ZWdvcmllcy5sZW5ndGgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBkYXRhID0gZGF0YUNvbWJpbmUoc2VyaWVzKTtcclxuICB9XHJcbiAgdmFyIHNvcnRlZCA9IFtdO1xyXG4gIC8vIHJlbW92ZSBudWxsIGZyb20gZGF0YVxyXG4gIGRhdGEgPSBkYXRhLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAvL3JldHVybiBpdGVtICE9PSBudWxsO1xyXG4gICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiBpdGVtICE9PSBudWxsKSB7XHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKSB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IG51bGw7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0udmFsdWUgIT09IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBpdGVtICE9PSBudWxsO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIGRhdGEubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcclxuICAgICAgICBpdGVtLm1hcChmdW5jdGlvbihzdWJpdGVtKSB7XHJcbiAgICAgICAgICBzb3J0ZWQucHVzaChzdWJpdGVtKTtcclxuICAgICAgICB9KVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNvcnRlZC5wdXNoKGl0ZW0udmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzb3J0ZWQucHVzaChpdGVtKTtcclxuICAgIH1cclxuICB9KVxyXG4gIHZhciBtaW5EYXRhID0gMDtcclxuICB2YXIgbWF4RGF0YSA9IDA7XHJcbiAgaWYgKHNvcnRlZC5sZW5ndGggPiAwKSB7XHJcbiAgICBtaW5EYXRhID0gTWF0aC5taW4uYXBwbHkodGhpcywgc29ydGVkKTtcclxuICAgIG1heERhdGEgPSBNYXRoLm1heC5hcHBseSh0aGlzLCBzb3J0ZWQpO1xyXG4gIH1cclxuICBpZiAodHlwZW9mIG9wdHMueUF4aXMubWluID09PSAnbnVtYmVyJykge1xyXG4gICAgbWluRGF0YSA9IE1hdGgubWluKG9wdHMueUF4aXMubWluLCBtaW5EYXRhKTtcclxuICB9XHJcbiAgaWYgKHR5cGVvZiBvcHRzLnlBeGlzLm1heCA9PT0gJ251bWJlcicpIHtcclxuICAgIG1heERhdGEgPSBNYXRoLm1heChvcHRzLnlBeGlzLm1heCwgbWF4RGF0YSk7XHJcbiAgfVxyXG5cclxuICBpZiAobWluRGF0YSA9PT0gbWF4RGF0YSkge1xyXG4gICAgdmFyIHJhbmdlU3BhbiA9IG1heERhdGEgfHwgMTA7XHJcbiAgICBtYXhEYXRhICs9IHJhbmdlU3BhbjtcclxuICB9XHJcblxyXG4gIHZhciBkYXRhUmFuZ2UgPSBnZXREYXRhUmFuZ2UobWluRGF0YSwgbWF4RGF0YSk7XHJcbiAgdmFyIG1pblJhbmdlID0gZGF0YVJhbmdlLm1pblJhbmdlO1xyXG4gIHZhciBtYXhSYW5nZSA9IGRhdGFSYW5nZS5tYXhSYW5nZTtcclxuXHJcbiAgdmFyIHJhbmdlID0gW107XHJcbiAgdmFyIGVhY2hSYW5nZSA9IChtYXhSYW5nZSAtIG1pblJhbmdlKSAvIGNvbmZpZy55QXhpc1NwbGl0O1xyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8PSBjb25maWcueUF4aXNTcGxpdDsgaSsrKSB7XHJcbiAgICByYW5nZS5wdXNoKG1pblJhbmdlICsgZWFjaFJhbmdlICogaSk7XHJcbiAgfVxyXG4gIHJldHVybiByYW5nZS5yZXZlcnNlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbFlBeGlzRGF0YShzZXJpZXMsIG9wdHMsIGNvbmZpZykge1xyXG4gIC8v5aCG5Y+g5Zu+6YeN566XWei9tFxyXG4gIHZhciBjb2x1bW5zdHlsZSA9IGFzc2lnbih7fSwge1xyXG4gICAgdHlwZTogXCJcIlxyXG4gIH0sIG9wdHMuZXh0cmEuY29sdW1uKTtcclxuICB2YXIgcmFuZ2VzID0gZ2V0WUF4aXNUZXh0TGlzdChzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29sdW1uc3R5bGUudHlwZSk7XHJcbiAgdmFyIHlBeGlzV2lkdGggPSBjb25maWcueUF4aXNXaWR0aDtcclxuICB2YXIgeUF4aXNGb250U2l6ZSA9IG9wdHMueUF4aXMuZm9udFNpemUgfHwgY29uZmlnLmZvbnRTaXplO1xyXG4gIHZhciByYW5nZXNGb3JtYXQgPSByYW5nZXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIGl0ZW0gPSB1dGlsLnRvRml4ZWQoaXRlbSwgNik7XHJcbiAgICBpdGVtID0gb3B0cy55QXhpcy5mb3JtYXQgPyBvcHRzLnlBeGlzLmZvcm1hdChOdW1iZXIoaXRlbSkpIDogaXRlbTtcclxuICAgIHlBeGlzV2lkdGggPSBNYXRoLm1heCh5QXhpc1dpZHRoLCBtZWFzdXJlVGV4dChpdGVtLCB5QXhpc0ZvbnRTaXplKSArIDUpO1xyXG4gICAgcmV0dXJuIGl0ZW07XHJcbiAgfSk7XHJcbiAgaWYgKG9wdHMueUF4aXMuZGlzYWJsZWQgPT09IHRydWUpIHtcclxuICAgIHlBeGlzV2lkdGggPSAwO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHJhbmdlc0Zvcm1hdDogcmFuZ2VzRm9ybWF0LFxyXG4gICAgcmFuZ2VzOiByYW5nZXMsXHJcbiAgICB5QXhpc1dpZHRoOiB5QXhpc1dpZHRoXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsVG9vbHRpcFlBeGlzRGF0YShwb2ludCwgc2VyaWVzLCBvcHRzLCBjb25maWcsIGVhY2hTcGFjaW5nKSB7XHJcbiAgdmFyIHJhbmdlcyA9IGdldFlBeGlzVGV4dExpc3Qoc2VyaWVzLCBvcHRzLCBjb25maWcpO1xyXG4gIHZhciBzcGFjaW5nVmFsaWQgPSBvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVswXSAtIG9wdHMuYXJlYVsyXTtcclxuICBsZXQgbWF4VmFsID0gcmFuZ2VzWzBdO1xyXG4gIGxldCBtaW5WYWwgPSByYW5nZXNbcmFuZ2VzLmxlbmd0aCAtIDFdO1xyXG4gIGxldCBtaW5BeGlzID0gb3B0cy5wYWRkaW5nWzNdO1xyXG4gIGxldCBtYXhBeGlzID0gb3B0cy5wYWRkaW5nWzFdICsgc3BhY2luZ1ZhbGlkO1xyXG4gIGxldCBpdGVtID0gbWF4VmFsIC0gKG1heFZhbCAtIG1pblZhbCkgKiAocG9pbnQgLSBtaW5BeGlzKSAvIChtYXhBeGlzIC0gbWluQXhpcyk7XHJcbiAgaXRlbSA9IG9wdHMueUF4aXMuZm9ybWF0ID8gb3B0cy55QXhpcy5mb3JtYXQoTnVtYmVyKGl0ZW0pKSA6IGl0ZW07XHJcbiAgcmV0dXJuIGl0ZW07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbE1hcmtMaW5lRGF0YShtaW5SYW5nZSwgbWF4UmFuZ2UsIHBvaW50cywgb3B0cykge1xyXG4gIGxldCBzcGFjaW5nVmFsaWQgPSBvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVswXSAtIG9wdHMuYXJlYVsyXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IGhlaWdodCA9IHNwYWNpbmdWYWxpZCAqIChwb2ludHNbaV0udmFsdWUgLSBtaW5SYW5nZSkgLyAobWF4UmFuZ2UgLSBtaW5SYW5nZSk7XHJcbiAgICBwb2ludHNbaV0ueSA9IG9wdHMuaGVpZ2h0IC0gTWF0aC5yb3VuZChoZWlnaHQpIC0gb3B0cy5hcmVhWzJdO1xyXG4gIH1cclxuICByZXR1cm4gcG9pbnRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb250ZXh0Um90YXRlKGNvbnRleHQsIG9wdHMpIHtcclxuICBpZiAob3B0cy5yb3RhdGVMb2NrICE9PSB0cnVlKSB7XHJcbiAgICBjb250ZXh0LnRyYW5zbGF0ZShvcHRzLmhlaWdodCwgMCk7XHJcbiAgICBjb250ZXh0LnJvdGF0ZSg5MCAqIE1hdGguUEkgLyAxODApO1xyXG4gIH0gZWxzZSBpZiAob3B0cy5fcm90YXRlXyAhPT0gdHJ1ZSkge1xyXG4gICAgY29udGV4dC50cmFuc2xhdGUob3B0cy5oZWlnaHQsIDApO1xyXG4gICAgY29udGV4dC5yb3RhdGUoOTAgKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgIG9wdHMuX3JvdGF0ZV8gPSB0cnVlO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1BvaW50U2hhcGUocG9pbnRzLCBjb2xvciwgc2hhcGUsIGNvbnRleHQsIG9wdHMpIHtcclxuICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoXCIjZmZmZmZmXCIpO1xyXG4gIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gIGNvbnRleHQuc2V0RmlsbFN0eWxlKGNvbG9yKTtcclxuICBpZiAoc2hhcGUgPT09ICdkaWFtb25kJykge1xyXG4gICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgICAgaWYgKGl0ZW0gIT09IG51bGwpIHtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtLngsIGl0ZW0ueSAtIDQuNSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54IC0gNC41LCBpdGVtLnkpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCwgaXRlbS55ICsgNC41KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLnggKyA0LjUsIGl0ZW0ueSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54LCBpdGVtLnkgLSA0LjUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9IGVsc2UgaWYgKHNoYXBlID09PSAnY2lyY2xlJykge1xyXG4gICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgICAgaWYgKGl0ZW0gIT09IG51bGwpIHtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtLnggKyAzLjUgKiBvcHRzLnBpeGVsUmF0aW8sIGl0ZW0ueSk7XHJcbiAgICAgICAgY29udGV4dC5hcmMoaXRlbS54LCBpdGVtLnksIDQgKiBvcHRzLnBpeGVsUmF0aW8sIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0gZWxzZSBpZiAoc2hhcGUgPT09ICdyZWN0Jykge1xyXG4gICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgICAgaWYgKGl0ZW0gIT09IG51bGwpIHtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtLnggLSAzLjUsIGl0ZW0ueSAtIDMuNSk7XHJcbiAgICAgICAgY29udGV4dC5yZWN0KGl0ZW0ueCAtIDMuNSwgaXRlbS55IC0gMy41LCA3LCA3KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmIChzaGFwZSA9PT0gJ3RyaWFuZ2xlJykge1xyXG4gICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgICAgaWYgKGl0ZW0gIT09IG51bGwpIHtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtLngsIGl0ZW0ueSAtIDQuNSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54IC0gNC41LCBpdGVtLnkgKyA0LjUpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCArIDQuNSwgaXRlbS55ICsgNC41KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLngsIGl0ZW0ueSAtIDQuNSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gIGNvbnRleHQuZmlsbCgpO1xyXG4gIGNvbnRleHQuc3Ryb2tlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdSaW5nVGl0bGUob3B0cywgY29uZmlnLCBjb250ZXh0LCBjZW50ZXIpIHtcclxuICB2YXIgdGl0bGVmb250U2l6ZSA9IG9wdHMudGl0bGUuZm9udFNpemUgfHwgY29uZmlnLnRpdGxlRm9udFNpemU7XHJcbiAgdmFyIHN1YnRpdGxlZm9udFNpemUgPSBvcHRzLnN1YnRpdGxlLmZvbnRTaXplIHx8IGNvbmZpZy5zdWJ0aXRsZUZvbnRTaXplO1xyXG4gIHZhciB0aXRsZSA9IG9wdHMudGl0bGUubmFtZSB8fCAnJztcclxuICB2YXIgc3VidGl0bGUgPSBvcHRzLnN1YnRpdGxlLm5hbWUgfHwgJyc7XHJcbiAgdmFyIHRpdGxlRm9udENvbG9yID0gb3B0cy50aXRsZS5jb2xvciB8fCBjb25maWcudGl0bGVDb2xvcjtcclxuICB2YXIgc3VidGl0bGVGb250Q29sb3IgPSBvcHRzLnN1YnRpdGxlLmNvbG9yIHx8IGNvbmZpZy5zdWJ0aXRsZUNvbG9yO1xyXG4gIHZhciB0aXRsZUhlaWdodCA9IHRpdGxlID8gdGl0bGVmb250U2l6ZSA6IDA7XHJcbiAgdmFyIHN1YnRpdGxlSGVpZ2h0ID0gc3VidGl0bGUgPyBzdWJ0aXRsZWZvbnRTaXplIDogMDtcclxuICB2YXIgbWFyZ2luID0gNTtcclxuXHJcbiAgaWYgKHN1YnRpdGxlKSB7XHJcbiAgICB2YXIgdGV4dFdpZHRoID0gbWVhc3VyZVRleHQoc3VidGl0bGUsIHN1YnRpdGxlZm9udFNpemUpO1xyXG4gICAgdmFyIHN0YXJ0WCA9IGNlbnRlci54IC0gdGV4dFdpZHRoIC8gMiArIChvcHRzLnN1YnRpdGxlLm9mZnNldFggfHwgMCk7XHJcbiAgICB2YXIgc3RhcnRZID0gY2VudGVyLnkgKyBzdWJ0aXRsZWZvbnRTaXplIC8gMiArIChvcHRzLnN1YnRpdGxlLm9mZnNldFkgfHwgMCk7XHJcbiAgICBpZiAodGl0bGUpIHtcclxuICAgICAgc3RhcnRZICs9ICh0aXRsZUhlaWdodCArIG1hcmdpbikgLyAyO1xyXG4gICAgfVxyXG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgIGNvbnRleHQuc2V0Rm9udFNpemUoc3VidGl0bGVmb250U2l6ZSk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShzdWJ0aXRsZUZvbnRDb2xvcik7XHJcbiAgICBjb250ZXh0LmZpbGxUZXh0KHN1YnRpdGxlLCBzdGFydFgsIHN0YXJ0WSk7XHJcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgY29udGV4dC5zdHJva2UoKTtcclxuICB9XHJcbiAgaWYgKHRpdGxlKSB7XHJcbiAgICB2YXIgX3RleHRXaWR0aCA9IG1lYXN1cmVUZXh0KHRpdGxlLCB0aXRsZWZvbnRTaXplKTtcclxuICAgIHZhciBfc3RhcnRYID0gY2VudGVyLnggLSBfdGV4dFdpZHRoIC8gMiArIChvcHRzLnRpdGxlLm9mZnNldFggfHwgMCk7XHJcbiAgICB2YXIgX3N0YXJ0WSA9IGNlbnRlci55ICsgdGl0bGVmb250U2l6ZSAvIDIgKyAob3B0cy50aXRsZS5vZmZzZXRZIHx8IDApO1xyXG4gICAgaWYgKHN1YnRpdGxlKSB7XHJcbiAgICAgIF9zdGFydFkgLT0gKHN1YnRpdGxlSGVpZ2h0ICsgbWFyZ2luKSAvIDI7XHJcbiAgICB9XHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRGb250U2l6ZSh0aXRsZWZvbnRTaXplKTtcclxuICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKHRpdGxlRm9udENvbG9yKTtcclxuICAgIGNvbnRleHQuZmlsbFRleHQodGl0bGUsIF9zdGFydFgsIF9zdGFydFkpO1xyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3UG9pbnRUZXh0KHBvaW50cywgc2VyaWVzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICAvLyDnu5jliLbmlbDmja7mlofmoYhcclxuICB2YXIgZGF0YSA9IHNlcmllcy5kYXRhO1xyXG4gIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xyXG4gICAgICAvL3ZhciBmb3JtYXRWYWwgPSBzZXJpZXMuZm9ybWF0ID8gc2VyaWVzLmZvcm1hdChkYXRhW2luZGV4XSkgOiBkYXRhW2luZGV4XTtcclxuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgY29udGV4dC5zZXRGb250U2l6ZShzZXJpZXMudGV4dFNpemUgfHwgY29uZmlnLmZvbnRTaXplKTtcclxuICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoc2VyaWVzLnRleHRDb2xvciB8fCAnIzY2NjY2NicpO1xyXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW2luZGV4XVxyXG4gICAgICBpZiAodHlwZW9mIGRhdGFbaW5kZXhdID09PSAnb2JqZWN0JyAmJiBkYXRhW2luZGV4XSAhPT0gbnVsbCkge1xyXG4gICAgICAgIHZhbHVlID0gZGF0YVtpbmRleF0udmFsdWVcclxuICAgICAgfVxyXG4gICAgICB2YXIgZm9ybWF0VmFsID0gc2VyaWVzLmZvcm1hdCA/IHNlcmllcy5mb3JtYXQodmFsdWUpIDogdmFsdWU7XHJcbiAgICAgIGNvbnRleHQuZmlsbFRleHQoU3RyaW5nKGZvcm1hdFZhbCksIGl0ZW0ueCAtIG1lYXN1cmVUZXh0KGZvcm1hdFZhbCwgc2VyaWVzLnRleHRTaXplIHx8IGNvbmZpZy5mb250U2l6ZSkgLyAyLCBpdGVtLnkgLVxyXG4gICAgICAgIDIpO1xyXG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0dhdWdlTGFiZWwoZ2F1Z2VPcHRpb24sIHJhZGl1cywgY2VudGVyUG9zaXRpb24sIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gIHJhZGl1cyAtPSBnYXVnZU9wdGlvbi53aWR0aCAvIDIgKyBjb25maWcuZ2F1Z2VMYWJlbFRleHRNYXJnaW47XHJcblxyXG4gIGxldCB0b3RhbEFuZ2xlID0gZ2F1Z2VPcHRpb24uc3RhcnRBbmdsZSAtIGdhdWdlT3B0aW9uLmVuZEFuZ2xlICsgMTtcclxuICBsZXQgc3BsaXRBbmdsZSA9IHRvdGFsQW5nbGUgLyBnYXVnZU9wdGlvbi5zcGxpdExpbmUuc3BsaXROdW1iZXI7XHJcbiAgbGV0IHRvdGFsTnVtYmVyID0gZ2F1Z2VPcHRpb24uZW5kTnVtYmVyIC0gZ2F1Z2VPcHRpb24uc3RhcnROdW1iZXI7XHJcbiAgbGV0IHNwbGl0TnVtYmVyID0gdG90YWxOdW1iZXIgLyBnYXVnZU9wdGlvbi5zcGxpdExpbmUuc3BsaXROdW1iZXI7XHJcbiAgbGV0IG5vd0FuZ2xlID0gZ2F1Z2VPcHRpb24uc3RhcnRBbmdsZTtcclxuICBsZXQgbm93TnVtYmVyID0gZ2F1Z2VPcHRpb24uc3RhcnROdW1iZXI7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBnYXVnZU9wdGlvbi5zcGxpdExpbmUuc3BsaXROdW1iZXIgKyAxOyBpKyspIHtcclxuICAgIHZhciBwb3MgPSB7XHJcbiAgICAgIHg6IHJhZGl1cyAqIE1hdGguY29zKG5vd0FuZ2xlICogTWF0aC5QSSksXHJcbiAgICAgIHk6IHJhZGl1cyAqIE1hdGguc2luKG5vd0FuZ2xlICogTWF0aC5QSSlcclxuICAgIH07XHJcbiAgICB2YXIgbGFiZWxUZXh0ID0gZ2F1Z2VPcHRpb24ubGFiZWxGb3JtYXQgPyBnYXVnZU9wdGlvbi5sYWJlbEZvcm1hdChub3dOdW1iZXIpIDogbm93TnVtYmVyO1xyXG4gICAgcG9zLnggKz0gY2VudGVyUG9zaXRpb24ueCAtIG1lYXN1cmVUZXh0KGxhYmVsVGV4dCkgLyAyO1xyXG4gICAgcG9zLnkgKz0gY2VudGVyUG9zaXRpb24ueTtcclxuICAgIHZhciBzdGFydFggPSBwb3MueDtcclxuICAgIHZhciBzdGFydFkgPSBwb3MueTtcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShnYXVnZU9wdGlvbi5sYWJlbENvbG9yIHx8ICcjNjY2NjY2Jyk7XHJcbiAgICBjb250ZXh0LmZpbGxUZXh0KGxhYmVsVGV4dCwgc3RhcnRYLCBzdGFydFkgKyBjb25maWcuZm9udFNpemUgLyAyKTtcclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG5cclxuICAgIG5vd0FuZ2xlICs9IHNwbGl0QW5nbGU7XHJcbiAgICBpZiAobm93QW5nbGUgPj0gMikge1xyXG4gICAgICBub3dBbmdsZSA9IG5vd0FuZ2xlICUgMjtcclxuICAgIH1cclxuICAgIG5vd051bWJlciArPSBzcGxpdE51bWJlcjtcclxuICB9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3UmFkYXJMYWJlbChhbmdsZUxpc3QsIHJhZGl1cywgY2VudGVyUG9zaXRpb24sIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gIHZhciByYWRhck9wdGlvbiA9IG9wdHMuZXh0cmEucmFkYXIgfHwge307XHJcbiAgcmFkaXVzICs9IGNvbmZpZy5yYWRhckxhYmVsVGV4dE1hcmdpbjtcclxuXHJcbiAgYW5nbGVMaXN0LmZvckVhY2goZnVuY3Rpb24oYW5nbGUsIGluZGV4KSB7XHJcbiAgICB2YXIgcG9zID0ge1xyXG4gICAgICB4OiByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSksXHJcbiAgICAgIHk6IHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKVxyXG4gICAgfTtcclxuICAgIHZhciBwb3NSZWxhdGl2ZUNhbnZhcyA9IGNvbnZlcnRDb29yZGluYXRlT3JpZ2luKHBvcy54LCBwb3MueSwgY2VudGVyUG9zaXRpb24pO1xyXG4gICAgdmFyIHN0YXJ0WCA9IHBvc1JlbGF0aXZlQ2FudmFzLng7XHJcbiAgICB2YXIgc3RhcnRZID0gcG9zUmVsYXRpdmVDYW52YXMueTtcclxuICAgIGlmICh1dGlsLmFwcHJveGltYXRlbHlFcXVhbChwb3MueCwgMCkpIHtcclxuICAgICAgc3RhcnRYIC09IG1lYXN1cmVUZXh0KG9wdHMuY2F0ZWdvcmllc1tpbmRleF0gfHwgJycpIC8gMjtcclxuICAgIH0gZWxzZSBpZiAocG9zLnggPCAwKSB7XHJcbiAgICAgIHN0YXJ0WCAtPSBtZWFzdXJlVGV4dChvcHRzLmNhdGVnb3JpZXNbaW5kZXhdIHx8ICcnKTtcclxuICAgIH1cclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShyYWRhck9wdGlvbi5sYWJlbENvbG9yIHx8ICcjNjY2NjY2Jyk7XHJcbiAgICBjb250ZXh0LmZpbGxUZXh0KG9wdHMuY2F0ZWdvcmllc1tpbmRleF0gfHwgJycsIHN0YXJ0WCwgc3RhcnRZICsgY29uZmlnLmZvbnRTaXplIC8gMik7XHJcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgY29udGV4dC5zdHJva2UoKTtcclxuICB9KTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdQaWVUZXh0KHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCByYWRpdXMsIGNlbnRlcikge1xyXG4gIHZhciBsaW5lUmFkaXVzID0gY29uZmlnLnBpZUNoYXJ0TGluZVBhZGRpbmc7XHJcbiAgdmFyIHRleHRPYmplY3RDb2xsZWN0aW9uID0gW107XHJcbiAgdmFyIGxhc3RUZXh0T2JqZWN0ID0gbnVsbDtcclxuXHJcbiAgdmFyIHNlcmllc0NvbnZlcnQgPSBzZXJpZXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIHZhciB0ZXh0ID0gaXRlbS5mb3JtYXQgPyBpdGVtLmZvcm1hdCgraXRlbS5fcHJvcG9ydGlvbl8udG9GaXhlZCgyKSkgOiB1dGlsLnRvRml4ZWQoaXRlbS5fcHJvcG9ydGlvbl8udG9GaXhlZCg0KSAqIDEwMCkgKyclJztcclxuICAgIGlmKGl0ZW0uX3Jvc2VfcHJvcG9ydGlvbl8pIGl0ZW0uX3Byb3BvcnRpb25fPWl0ZW0uX3Jvc2VfcHJvcG9ydGlvbl87XHJcbiAgICB2YXIgYXJjID0gMiAqIE1hdGguUEkgLSAoaXRlbS5fc3RhcnRfICsgMiAqIE1hdGguUEkgKiBpdGVtLl9wcm9wb3J0aW9uXyAvIDIpO1xyXG4gICAgdmFyIGNvbG9yID0gaXRlbS5jb2xvcjtcclxuICAgIHZhciByYWRpdXMgPSBpdGVtLl9yYWRpdXNfO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYXJjOiBhcmMsXHJcbiAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgIGNvbG9yOiBjb2xvcixcclxuICAgICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICAgIHRleHRDb2xvcjogaXRlbS50ZXh0Q29sb3IsXHJcbiAgICAgIHRleHRTaXplOiBpdGVtLnRleHRTaXplLFxyXG4gICAgfTtcclxuICB9KTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllc0NvbnZlcnQubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBpdGVtID0gc2VyaWVzQ29udmVydFtpXTtcclxuICAgIC8vIGxpbmUgZW5kXHJcbiAgICBsZXQgb3JnaW5YMSA9IE1hdGguY29zKGl0ZW0uYXJjKSAqIChpdGVtLnJhZGl1cyArIGxpbmVSYWRpdXMpO1xyXG4gICAgbGV0IG9yZ2luWTEgPSBNYXRoLnNpbihpdGVtLmFyYykgKiAoaXRlbS5yYWRpdXMgKyBsaW5lUmFkaXVzKTtcclxuXHJcbiAgICAvLyBsaW5lIHN0YXJ0XHJcbiAgICBsZXQgb3JnaW5YMiA9IE1hdGguY29zKGl0ZW0uYXJjKSAqIGl0ZW0ucmFkaXVzO1xyXG4gICAgbGV0IG9yZ2luWTIgPSBNYXRoLnNpbihpdGVtLmFyYykgKiBpdGVtLnJhZGl1cztcclxuXHJcbiAgICAvLyB0ZXh0IHN0YXJ0XHJcbiAgICBsZXQgb3JnaW5YMyA9IG9yZ2luWDEgPj0gMCA/IG9yZ2luWDEgKyBjb25maWcucGllQ2hhcnRUZXh0UGFkZGluZyA6IG9yZ2luWDEgLSBjb25maWcucGllQ2hhcnRUZXh0UGFkZGluZztcclxuICAgIGxldCBvcmdpblkzID0gb3JnaW5ZMTtcclxuICAgIGxldCB0ZXh0V2lkdGggPSBtZWFzdXJlVGV4dChpdGVtLnRleHQpO1xyXG4gICAgbGV0IHN0YXJ0WSA9IG9yZ2luWTM7XHJcblxyXG4gICAgaWYgKGxhc3RUZXh0T2JqZWN0ICYmIHV0aWwuaXNTYW1lWENvb3JkaW5hdGVBcmVhKGxhc3RUZXh0T2JqZWN0LnN0YXJ0LCB7XHJcbiAgICAgICAgeDogb3JnaW5YM1xyXG4gICAgICB9KSkge1xyXG4gICAgICBpZiAob3JnaW5YMyA+IDApIHtcclxuICAgICAgICBzdGFydFkgPSBNYXRoLm1pbihvcmdpblkzLCBsYXN0VGV4dE9iamVjdC5zdGFydC55KTtcclxuICAgICAgfSBlbHNlIGlmIChvcmdpblgxIDwgMCkge1xyXG4gICAgICAgIHN0YXJ0WSA9IE1hdGgubWF4KG9yZ2luWTMsIGxhc3RUZXh0T2JqZWN0LnN0YXJ0LnkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChvcmdpblkzID4gMCkge1xyXG4gICAgICAgICAgc3RhcnRZID0gTWF0aC5tYXgob3JnaW5ZMywgbGFzdFRleHRPYmplY3Quc3RhcnQueSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHN0YXJ0WSA9IE1hdGgubWluKG9yZ2luWTMsIGxhc3RUZXh0T2JqZWN0LnN0YXJ0LnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKG9yZ2luWDMgPCAwKSB7XHJcbiAgICAgIG9yZ2luWDMgLT0gdGV4dFdpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB0ZXh0T2JqZWN0ID0ge1xyXG4gICAgICBsaW5lU3RhcnQ6IHtcclxuICAgICAgICB4OiBvcmdpblgyLFxyXG4gICAgICAgIHk6IG9yZ2luWTJcclxuICAgICAgfSxcclxuICAgICAgbGluZUVuZDoge1xyXG4gICAgICAgIHg6IG9yZ2luWDEsXHJcbiAgICAgICAgeTogb3JnaW5ZMVxyXG4gICAgICB9LFxyXG4gICAgICBzdGFydDoge1xyXG4gICAgICAgIHg6IG9yZ2luWDMsXHJcbiAgICAgICAgeTogc3RhcnRZXHJcbiAgICAgIH0sXHJcbiAgICAgIHdpZHRoOiB0ZXh0V2lkdGgsXHJcbiAgICAgIGhlaWdodDogY29uZmlnLmZvbnRTaXplLFxyXG4gICAgICB0ZXh0OiBpdGVtLnRleHQsXHJcbiAgICAgIGNvbG9yOiBpdGVtLmNvbG9yLFxyXG4gICAgICB0ZXh0Q29sb3I6IGl0ZW0udGV4dENvbG9yLFxyXG4gICAgICB0ZXh0U2l6ZTogaXRlbS50ZXh0U2l6ZVxyXG4gICAgfTtcclxuICAgIGxhc3RUZXh0T2JqZWN0ID0gYXZvaWRDb2xsaXNpb24odGV4dE9iamVjdCwgbGFzdFRleHRPYmplY3QpO1xyXG4gICAgdGV4dE9iamVjdENvbGxlY3Rpb24ucHVzaChsYXN0VGV4dE9iamVjdCk7XHJcbiAgfVxyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHRPYmplY3RDb2xsZWN0aW9uLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgaXRlbSA9IHRleHRPYmplY3RDb2xsZWN0aW9uW2ldO1xyXG4gICAgbGV0IGxpbmVTdGFydFBvaXN0aW9uID0gY29udmVydENvb3JkaW5hdGVPcmlnaW4oaXRlbS5saW5lU3RhcnQueCwgaXRlbS5saW5lU3RhcnQueSwgY2VudGVyKTtcclxuICAgIGxldCBsaW5lRW5kUG9pc3Rpb24gPSBjb252ZXJ0Q29vcmRpbmF0ZU9yaWdpbihpdGVtLmxpbmVFbmQueCwgaXRlbS5saW5lRW5kLnksIGNlbnRlcik7XHJcbiAgICBsZXQgdGV4dFBvc2l0aW9uID0gY29udmVydENvb3JkaW5hdGVPcmlnaW4oaXRlbS5zdGFydC54LCBpdGVtLnN0YXJ0LnksIGNlbnRlcik7XHJcbiAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgIGNvbnRleHQuc2V0Rm9udFNpemUoY29uZmlnLmZvbnRTaXplKTtcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGl0ZW0uY29sb3IpO1xyXG4gICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaXRlbS5jb2xvcik7XHJcbiAgICBjb250ZXh0Lm1vdmVUbyhsaW5lU3RhcnRQb2lzdGlvbi54LCBsaW5lU3RhcnRQb2lzdGlvbi55KTtcclxuICAgIGxldCBjdXJ2ZVN0YXJ0WCA9IGl0ZW0uc3RhcnQueCA8IDAgPyB0ZXh0UG9zaXRpb24ueCArIGl0ZW0ud2lkdGggOiB0ZXh0UG9zaXRpb24ueDtcclxuICAgIGxldCB0ZXh0U3RhcnRYID0gaXRlbS5zdGFydC54IDwgMCA/IHRleHRQb3NpdGlvbi54IC0gNSA6IHRleHRQb3NpdGlvbi54ICsgNTtcclxuICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbyhsaW5lRW5kUG9pc3Rpb24ueCwgbGluZUVuZFBvaXN0aW9uLnksIGN1cnZlU3RhcnRYLCB0ZXh0UG9zaXRpb24ueSk7XHJcbiAgICBjb250ZXh0Lm1vdmVUbyhsaW5lU3RhcnRQb2lzdGlvbi54LCBsaW5lU3RhcnRQb2lzdGlvbi55KTtcclxuICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgIGNvbnRleHQubW92ZVRvKHRleHRQb3NpdGlvbi54ICsgaXRlbS53aWR0aCwgdGV4dFBvc2l0aW9uLnkpO1xyXG4gICAgY29udGV4dC5hcmMoY3VydmVTdGFydFgsIHRleHRQb3NpdGlvbi55LCAyLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgY29udGV4dC5maWxsKCk7XHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRGb250U2l6ZShpdGVtLnRleHRTaXplIHx8IGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLnRleHRDb2xvciB8fCAnIzY2NjY2NicpO1xyXG4gICAgY29udGV4dC5maWxsVGV4dChpdGVtLnRleHQsIHRleHRTdGFydFgsIHRleHRQb3NpdGlvbi55ICsgMyk7XHJcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3VG9vbFRpcFNwbGl0TGluZShvZmZzZXRYLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICB2YXIgdG9vbFRpcE9wdGlvbiA9IG9wdHMuZXh0cmEudG9vbHRpcCB8fCB7fTtcclxuICB0b29sVGlwT3B0aW9uLmdyaWRUeXBlID0gdG9vbFRpcE9wdGlvbi5ncmlkVHlwZSA9PSB1bmRlZmluZWQgPyAnc29saWQnIDogdG9vbFRpcE9wdGlvbi5ncmlkVHlwZTtcclxuICB0b29sVGlwT3B0aW9uLmRhc2hMZW5ndGggPSB0b29sVGlwT3B0aW9uLmRhc2hMZW5ndGggPT0gdW5kZWZpbmVkID8gNCA6IHRvb2xUaXBPcHRpb24uZGFzaExlbmd0aDtcclxuICB2YXIgc3RhcnRZID0gb3B0cy5hcmVhWzBdO1xyXG4gIHZhciBlbmRZID0gb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMl07XHJcblxyXG4gIGlmICh0b29sVGlwT3B0aW9uLmdyaWRUeXBlID09ICdkYXNoJykge1xyXG4gICAgY29udGV4dC5zZXRMaW5lRGFzaChbdG9vbFRpcE9wdGlvbi5kYXNoTGVuZ3RoLCB0b29sVGlwT3B0aW9uLmRhc2hMZW5ndGhdKTtcclxuICB9XHJcbiAgY29udGV4dC5zZXRTdHJva2VTdHlsZSh0b29sVGlwT3B0aW9uLmdyaWRDb2xvciB8fCAnI2NjY2NjYycpO1xyXG4gIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgY29udGV4dC5tb3ZlVG8ob2Zmc2V0WCwgc3RhcnRZKTtcclxuICBjb250ZXh0LmxpbmVUbyhvZmZzZXRYLCBlbmRZKTtcclxuICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gIGNvbnRleHQuc2V0TGluZURhc2goW10pO1xyXG5cclxuICBpZiAodG9vbFRpcE9wdGlvbi54QXhpc0xhYmVsKSB7XHJcbiAgICBsZXQgbGFiZWxUZXh0ID0gb3B0cy5jYXRlZ29yaWVzW29wdHMudG9vbHRpcC5pbmRleF07XHJcbiAgICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgICBsZXQgdGV4dFdpZHRoID0gbWVhc3VyZVRleHQobGFiZWxUZXh0LCBjb25maWcuZm9udFNpemUpO1xyXG5cclxuICAgIGxldCB0ZXh0WCA9IG9mZnNldFggLSAwLjUgKiB0ZXh0V2lkdGg7XHJcbiAgICBsZXQgdGV4dFkgPSBlbmRZO1xyXG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGhleFRvUmdiKHRvb2xUaXBPcHRpb24ubGFiZWxCZ0NvbG9yIHx8IGNvbmZpZy50b29sVGlwQmFja2dyb3VuZCwgdG9vbFRpcE9wdGlvbi5sYWJlbEJnT3BhY2l0eSB8fCBjb25maWcudG9vbFRpcE9wYWNpdHkpKTtcclxuICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUodG9vbFRpcE9wdGlvbi5sYWJlbEJnQ29sb3IgfHwgY29uZmlnLnRvb2xUaXBCYWNrZ3JvdW5kKTtcclxuICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgY29udGV4dC5yZWN0KHRleHRYIC0gY29uZmlnLnRvb2xUaXBQYWRkaW5nLCB0ZXh0WSwgdGV4dFdpZHRoICsgMiAqIGNvbmZpZy50b29sVGlwUGFkZGluZywgY29uZmlnLmZvbnRTaXplICsgMiAqIGNvbmZpZy50b29sVGlwUGFkZGluZyk7XHJcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgIGNvbnRleHQuZmlsbCgpO1xyXG5cclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZSh0b29sVGlwT3B0aW9uLmxhYmVsRm9udENvbG9yIHx8IGNvbmZpZy5mb250Q29sb3IpO1xyXG4gICAgY29udGV4dC5maWxsVGV4dChTdHJpbmcobGFiZWxUZXh0KSwgdGV4dFgsIHRleHRZICsgY29uZmlnLnRvb2xUaXBQYWRkaW5nICsgY29uZmlnLmZvbnRTaXplKTtcclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd01hcmtMaW5lKG1pblJhbmdlLCBtYXhSYW5nZSwgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgbGV0IG1hcmtMaW5lT3B0aW9uID0gYXNzaWduKHt9LCB7XHJcbiAgICB0eXBlOiAnc29saWQnLFxyXG4gICAgZGFzaExlbmd0aDogNCxcclxuICAgIGRhdGE6IFtdXHJcbiAgfSwgb3B0cy5leHRyYS5tYXJrTGluZSk7XHJcbiAgbGV0IHN0YXJ0WCA9IG9wdHMuYXJlYVszXTtcclxuICBsZXQgZW5kWCA9IG9wdHMud2lkdGggLSBvcHRzLnBhZGRpbmdbMV07XHJcbiAgbGV0IHBvaW50cyA9IGNhbE1hcmtMaW5lRGF0YShtaW5SYW5nZSwgbWF4UmFuZ2UsIG1hcmtMaW5lT3B0aW9uLmRhdGEsIG9wdHMpO1xyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IGl0ZW0gPSBhc3NpZ24oe30sIHtcclxuICAgICAgbGluZUNvbG9yOiAnI0RFNEE0MicsXHJcbiAgICAgIHNob3dMYWJlbDogZmFsc2UsXHJcbiAgICAgIGxhYmVsRm9udENvbG9yOiAnIzY2NjY2NicsXHJcbiAgICAgIGxhYmVsQmdDb2xvcjogJyNERkU4RkYnLFxyXG4gICAgICBsYWJlbEJnT3BhY2l0eTogMC44LFxyXG4gICAgICB5QXhpc0luZGV4OiAwXHJcbiAgICB9LCBwb2ludHNbaV0pO1xyXG5cclxuICAgIGlmIChtYXJrTGluZU9wdGlvbi50eXBlID09ICdkYXNoJykge1xyXG4gICAgICBjb250ZXh0LnNldExpbmVEYXNoKFttYXJrTGluZU9wdGlvbi5kYXNoTGVuZ3RoLCBtYXJrTGluZU9wdGlvbi5kYXNoTGVuZ3RoXSk7XHJcbiAgICB9XHJcbiAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGl0ZW0ubGluZUNvbG9yKTtcclxuICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgaXRlbS55KTtcclxuICAgIGNvbnRleHQubGluZVRvKGVuZFgsIGl0ZW0ueSk7XHJcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgY29udGV4dC5zZXRMaW5lRGFzaChbXSk7XHJcbiAgICBpZiAoaXRlbS5zaG93TGFiZWwpIHtcclxuICAgICAgbGV0IGxhYmVsVGV4dCA9IG9wdHMueUF4aXMuZm9ybWF0ID8gb3B0cy55QXhpcy5mb3JtYXQoTnVtYmVyKGl0ZW0udmFsdWUpKSA6IGl0ZW0udmFsdWU7XHJcbiAgICAgIGNvbnRleHQuc2V0Rm9udFNpemUoY29uZmlnLmZvbnRTaXplKTtcclxuICAgICAgbGV0IHRleHRXaWR0aCA9IG1lYXN1cmVUZXh0KGxhYmVsVGV4dCwgY29uZmlnLmZvbnRTaXplKTtcclxuICAgICAgbGV0IGJnU3RhcnRYID0gb3B0cy5wYWRkaW5nWzNdICsgY29uZmlnLnlBeGlzVGl0bGVXaWR0aCAtIGNvbmZpZy50b29sVGlwUGFkZGluZztcclxuICAgICAgbGV0IGJnRW5kWCA9IE1hdGgubWF4KG9wdHMuYXJlYVszXSwgdGV4dFdpZHRoICsgY29uZmlnLnRvb2xUaXBQYWRkaW5nICogMik7XHJcbiAgICAgIGxldCBiZ1dpZHRoID0gYmdFbmRYIC0gYmdTdGFydFg7XHJcblxyXG4gICAgICBsZXQgdGV4dFggPSBiZ1N0YXJ0WCArIChiZ1dpZHRoIC0gdGV4dFdpZHRoKSAvIDI7XHJcbiAgICAgIGxldCB0ZXh0WSA9IGl0ZW0ueTtcclxuICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IoaXRlbS5sYWJlbEJnQ29sb3IsIGl0ZW0ubGFiZWxCZ09wYWNpdHkpKTtcclxuICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShpdGVtLmxhYmVsQmdDb2xvcik7XHJcbiAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjb250ZXh0LnJlY3QoYmdTdGFydFgsIHRleHRZIC0gMC41ICogY29uZmlnLmZvbnRTaXplIC0gY29uZmlnLnRvb2xUaXBQYWRkaW5nLCBiZ1dpZHRoLCBjb25maWcuZm9udFNpemUgKyAyICogY29uZmlnLnRvb2xUaXBQYWRkaW5nKTtcclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgY29udGV4dC5maWxsKCk7XHJcblxyXG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0ubGFiZWxGb250Q29sb3IpO1xyXG4gICAgICBjb250ZXh0LmZpbGxUZXh0KFN0cmluZyhsYWJlbFRleHQpLCB0ZXh0WCwgdGV4dFkgKyAwLjUgKiBjb25maWcuZm9udFNpemUpO1xyXG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1Rvb2xUaXBIb3JpemVudGFsTGluZShvcHRzLCBjb25maWcsIGNvbnRleHQsIGVhY2hTcGFjaW5nLCB4QXhpc1BvaW50cykge1xyXG4gIHZhciB0b29sVGlwT3B0aW9uID0gYXNzaWduKHt9LCB7XHJcbiAgICBncmlkVHlwZTogJ3NvbGlkJyxcclxuICAgIGRhc2hMZW5ndGg6IDRcclxuICB9LCBvcHRzLmV4dHJhLnRvb2x0aXApO1xyXG5cclxuICB2YXIgc3RhcnRYID0gb3B0cy5hcmVhWzNdO1xyXG4gIHZhciBlbmRYID0gb3B0cy53aWR0aCAtIG9wdHMucGFkZGluZ1sxXTtcclxuXHJcbiAgaWYgKHRvb2xUaXBPcHRpb24uZ3JpZFR5cGUgPT0gJ2Rhc2gnKSB7XHJcbiAgICBjb250ZXh0LnNldExpbmVEYXNoKFt0b29sVGlwT3B0aW9uLmRhc2hMZW5ndGgsIHRvb2xUaXBPcHRpb24uZGFzaExlbmd0aF0pO1xyXG4gIH1cclxuICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKHRvb2xUaXBPcHRpb24uZ3JpZENvbG9yIHx8ICcjY2NjY2NjJyk7XHJcbiAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICBjb250ZXh0Lm1vdmVUbyhzdGFydFgsIG9wdHMudG9vbHRpcC5vZmZzZXQueSk7XHJcbiAgY29udGV4dC5saW5lVG8oZW5kWCwgb3B0cy50b29sdGlwLm9mZnNldC55KTtcclxuICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gIGNvbnRleHQuc2V0TGluZURhc2goW10pO1xyXG5cclxuICBpZiAodG9vbFRpcE9wdGlvbi55QXhpc0xhYmVsKSB7XHJcbiAgICBsZXQgbGFiZWxUZXh0ID0gY2FsVG9vbHRpcFlBeGlzRGF0YShvcHRzLnRvb2x0aXAub2Zmc2V0LnksIG9wdHMuc2VyaWVzLCBvcHRzLCBjb25maWcsIGVhY2hTcGFjaW5nKTtcclxuICAgIGNvbnRleHQuc2V0Rm9udFNpemUoY29uZmlnLmZvbnRTaXplKTtcclxuICAgIGxldCB0ZXh0V2lkdGggPSBtZWFzdXJlVGV4dChsYWJlbFRleHQsIGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgICBsZXQgYmdTdGFydFggPSBvcHRzLnBhZGRpbmdbM10gKyBjb25maWcueUF4aXNUaXRsZVdpZHRoIC0gY29uZmlnLnRvb2xUaXBQYWRkaW5nO1xyXG4gICAgbGV0IGJnRW5kWCA9IE1hdGgubWF4KG9wdHMuYXJlYVszXSwgdGV4dFdpZHRoICsgY29uZmlnLnRvb2xUaXBQYWRkaW5nICogMik7XHJcbiAgICBsZXQgYmdXaWR0aCA9IGJnRW5kWCAtIGJnU3RhcnRYO1xyXG5cclxuICAgIGxldCB0ZXh0WCA9IGJnU3RhcnRYICsgKGJnV2lkdGggLSB0ZXh0V2lkdGgpIC8gMjtcclxuICAgIGxldCB0ZXh0WSA9IG9wdHMudG9vbHRpcC5vZmZzZXQueTtcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShoZXhUb1JnYih0b29sVGlwT3B0aW9uLmxhYmVsQmdDb2xvciB8fCBjb25maWcudG9vbFRpcEJhY2tncm91bmQsIHRvb2xUaXBPcHRpb24ubGFiZWxCZ09wYWNpdHkgfHwgY29uZmlnLnRvb2xUaXBPcGFjaXR5KSk7XHJcbiAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKHRvb2xUaXBPcHRpb24ubGFiZWxCZ0NvbG9yIHx8IGNvbmZpZy50b29sVGlwQmFja2dyb3VuZCk7XHJcbiAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgIGNvbnRleHQucmVjdChiZ1N0YXJ0WCwgdGV4dFkgLSAwLjUgKiBjb25maWcuZm9udFNpemUgLSBjb25maWcudG9vbFRpcFBhZGRpbmcsIGJnV2lkdGgsIGNvbmZpZy5mb250U2l6ZSArIDIgKiBjb25maWcudG9vbFRpcFBhZGRpbmcpO1xyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICBjb250ZXh0LmZpbGwoKTtcclxuXHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRGb250U2l6ZShjb25maWcuZm9udFNpemUpO1xyXG4gICAgY29udGV4dC5zZXRGaWxsU3R5bGUodG9vbFRpcE9wdGlvbi5sYWJlbEZvbnRDb2xvciB8fCBjb25maWcuZm9udENvbG9yKTtcclxuICAgIGNvbnRleHQuZmlsbFRleHQobGFiZWxUZXh0LCB0ZXh0WCwgdGV4dFkgKyAwLjUgKiBjb25maWcuZm9udFNpemUpO1xyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3VG9vbFRpcFNwbGl0QXJlYShvZmZzZXRYLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIGVhY2hTcGFjaW5nKSB7XHJcbiAgdmFyIHRvb2xUaXBPcHRpb24gPSBhc3NpZ24oe30sIHtcclxuICAgIGFjdGl2ZUJnQ29sb3I6ICcjMDAwMDAwJyxcclxuICAgIGFjdGl2ZUJnT3BhY2l0eTogMC4wOFxyXG4gIH0sIG9wdHMuZXh0cmEudG9vbHRpcCk7XHJcbiAgdmFyIHN0YXJ0WSA9IG9wdHMuYXJlYVswXTtcclxuICB2YXIgZW5kWSA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzJdO1xyXG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IodG9vbFRpcE9wdGlvbi5hY3RpdmVCZ0NvbG9yLCB0b29sVGlwT3B0aW9uLmFjdGl2ZUJnT3BhY2l0eSkpO1xyXG4gIGNvbnRleHQucmVjdChvZmZzZXRYIC0gZWFjaFNwYWNpbmcgLyAyLCBzdGFydFksIGVhY2hTcGFjaW5nLCBlbmRZIC0gc3RhcnRZKTtcclxuICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gIGNvbnRleHQuZmlsbCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3VG9vbFRpcCh0ZXh0TGlzdCwgb2Zmc2V0LCBvcHRzLCBjb25maWcsIGNvbnRleHQsIGVhY2hTcGFjaW5nLCB4QXhpc1BvaW50cykge1xyXG4gIHZhciB0b29sVGlwT3B0aW9uID0gYXNzaWduKHt9LCB7XHJcbiAgICBiZ0NvbG9yOiAnIzAwMDAwMCcsXHJcbiAgICBiZ09wYWNpdHk6IDAuNyxcclxuICAgIGZvbnRDb2xvcjogJyNGRkZGRkYnXHJcbiAgfSwgb3B0cy5leHRyYS50b29sdGlwKTtcclxuICB2YXIgbGVnZW5kV2lkdGggPSA0ICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIHZhciBsZWdlbmRNYXJnaW5SaWdodCA9IDUgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgdmFyIGFycm93V2lkdGggPSA4ICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIHZhciBpc092ZXJSaWdodEJvcmRlciA9IGZhbHNlO1xyXG4gIGlmIChvcHRzLnR5cGUgPT0gJ2xpbmUnIHx8IG9wdHMudHlwZSA9PSAnYXJlYScgfHwgb3B0cy50eXBlID09ICdjYW5kbGUnIHx8IG9wdHMudHlwZSA9PSAnbWl4Jykge1xyXG4gICAgZHJhd1Rvb2xUaXBTcGxpdExpbmUob3B0cy50b29sdGlwLm9mZnNldC54LCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gIH1cclxuXHJcbiAgb2Zmc2V0ID0gYXNzaWduKHtcclxuICAgIHg6IDAsXHJcbiAgICB5OiAwXHJcbiAgfSwgb2Zmc2V0KTtcclxuICBvZmZzZXQueSAtPSA4ICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIHZhciB0ZXh0V2lkdGggPSB0ZXh0TGlzdC5tYXAoZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgcmV0dXJuIG1lYXN1cmVUZXh0KGl0ZW0udGV4dCwgY29uZmlnLmZvbnRTaXplKTtcclxuICB9KTtcclxuICB2YXIgdG9vbFRpcFdpZHRoID0gbGVnZW5kV2lkdGggKyBsZWdlbmRNYXJnaW5SaWdodCArIDQgKiBjb25maWcudG9vbFRpcFBhZGRpbmcgKyBNYXRoLm1heC5hcHBseShudWxsLCB0ZXh0V2lkdGgpO1xyXG4gIHZhciB0b29sVGlwSGVpZ2h0ID0gMiAqIGNvbmZpZy50b29sVGlwUGFkZGluZyArIHRleHRMaXN0Lmxlbmd0aCAqIGNvbmZpZy50b29sVGlwTGluZUhlaWdodDtcclxuXHJcbiAgLy8gaWYgYmV5b25kIHRoZSByaWdodCBib3JkZXJcclxuICBpZiAob2Zmc2V0LnggLSBNYXRoLmFicyhvcHRzLl9zY3JvbGxEaXN0YW5jZV8pICsgYXJyb3dXaWR0aCArIHRvb2xUaXBXaWR0aCA+IG9wdHMud2lkdGgpIHtcclxuICAgIGlzT3ZlclJpZ2h0Qm9yZGVyID0gdHJ1ZTtcclxuICB9XHJcbiAgaWYgKHRvb2xUaXBIZWlnaHQgKyBvZmZzZXQueSA+IG9wdHMuaGVpZ2h0KSB7XHJcbiAgICBvZmZzZXQueSA9IG9wdHMuaGVpZ2h0IC0gdG9vbFRpcEhlaWdodDtcclxuICB9XHJcbiAgLy8gZHJhdyBiYWNrZ3JvdW5kIHJlY3RcclxuICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gIGNvbnRleHQuc2V0RmlsbFN0eWxlKGhleFRvUmdiKHRvb2xUaXBPcHRpb24uYmdDb2xvciB8fCBjb25maWcudG9vbFRpcEJhY2tncm91bmQsIHRvb2xUaXBPcHRpb24uYmdPcGFjaXR5IHx8IGNvbmZpZy50b29sVGlwT3BhY2l0eSkpO1xyXG4gIGlmIChpc092ZXJSaWdodEJvcmRlcikge1xyXG4gICAgY29udGV4dC5tb3ZlVG8ob2Zmc2V0LngsIG9mZnNldC55ICsgMTAgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggLSBhcnJvd1dpZHRoLCBvZmZzZXQueSArIDEwICogb3B0cy5waXhlbFJhdGlvIC0gNSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCAtIGFycm93V2lkdGgsIG9mZnNldC55KTtcclxuICAgIGNvbnRleHQubGluZVRvKG9mZnNldC54IC0gYXJyb3dXaWR0aCAtIE1hdGgucm91bmQodG9vbFRpcFdpZHRoKSwgb2Zmc2V0LnkpO1xyXG4gICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggLSBhcnJvd1dpZHRoIC0gTWF0aC5yb3VuZCh0b29sVGlwV2lkdGgpLCBvZmZzZXQueSArIHRvb2xUaXBIZWlnaHQpO1xyXG4gICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggLSBhcnJvd1dpZHRoLCBvZmZzZXQueSArIHRvb2xUaXBIZWlnaHQpO1xyXG4gICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggLSBhcnJvd1dpZHRoLCBvZmZzZXQueSArIDEwICogb3B0cy5waXhlbFJhdGlvICsgNSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCwgb2Zmc2V0LnkgKyAxMCAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnRleHQubW92ZVRvKG9mZnNldC54LCBvZmZzZXQueSArIDEwICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgIGNvbnRleHQubGluZVRvKG9mZnNldC54ICsgYXJyb3dXaWR0aCwgb2Zmc2V0LnkgKyAxMCAqIG9wdHMucGl4ZWxSYXRpbyAtIDUgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggKyBhcnJvd1dpZHRoLCBvZmZzZXQueSk7XHJcbiAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCArIGFycm93V2lkdGggKyBNYXRoLnJvdW5kKHRvb2xUaXBXaWR0aCksIG9mZnNldC55KTtcclxuICAgIGNvbnRleHQubGluZVRvKG9mZnNldC54ICsgYXJyb3dXaWR0aCArIE1hdGgucm91bmQodG9vbFRpcFdpZHRoKSwgb2Zmc2V0LnkgKyB0b29sVGlwSGVpZ2h0KTtcclxuICAgIGNvbnRleHQubGluZVRvKG9mZnNldC54ICsgYXJyb3dXaWR0aCwgb2Zmc2V0LnkgKyB0b29sVGlwSGVpZ2h0KTtcclxuICAgIGNvbnRleHQubGluZVRvKG9mZnNldC54ICsgYXJyb3dXaWR0aCwgb2Zmc2V0LnkgKyAxMCAqIG9wdHMucGl4ZWxSYXRpbyArIDUgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LngsIG9mZnNldC55ICsgMTAgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gIH1cclxuXHJcbiAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICBjb250ZXh0LmZpbGwoKTtcclxuXHJcbiAgLy8gZHJhdyBsZWdlbmRcclxuICB0ZXh0TGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICBpZiAoaXRlbS5jb2xvciAhPT0gbnVsbCkge1xyXG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLmNvbG9yKTtcclxuICAgICAgdmFyIHN0YXJ0WCA9IG9mZnNldC54ICsgYXJyb3dXaWR0aCArIDIgKiBjb25maWcudG9vbFRpcFBhZGRpbmc7XHJcbiAgICAgIHZhciBzdGFydFkgPSBvZmZzZXQueSArIChjb25maWcudG9vbFRpcExpbmVIZWlnaHQgLSBjb25maWcuZm9udFNpemUpIC8gMiArIGNvbmZpZy50b29sVGlwTGluZUhlaWdodCAqIGluZGV4ICtcclxuICAgICAgICBjb25maWcudG9vbFRpcFBhZGRpbmcgKyAxO1xyXG4gICAgICBpZiAoaXNPdmVyUmlnaHRCb3JkZXIpIHtcclxuICAgICAgICBzdGFydFggPSBvZmZzZXQueCAtIHRvb2xUaXBXaWR0aCAtIGFycm93V2lkdGggKyAyICogY29uZmlnLnRvb2xUaXBQYWRkaW5nO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnRleHQuZmlsbFJlY3Qoc3RhcnRYLCBzdGFydFksIGxlZ2VuZFdpZHRoLCBjb25maWcuZm9udFNpemUpO1xyXG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAvLyBkcmF3IHRleHQgbGlzdFxyXG5cclxuICB0ZXh0TGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICB2YXIgc3RhcnRYID0gb2Zmc2V0LnggKyBhcnJvd1dpZHRoICsgMiAqIGNvbmZpZy50b29sVGlwUGFkZGluZyArIGxlZ2VuZFdpZHRoICsgbGVnZW5kTWFyZ2luUmlnaHQ7XHJcbiAgICBpZiAoaXNPdmVyUmlnaHRCb3JkZXIpIHtcclxuICAgICAgc3RhcnRYID0gb2Zmc2V0LnggLSB0b29sVGlwV2lkdGggLSBhcnJvd1dpZHRoICsgMiAqIGNvbmZpZy50b29sVGlwUGFkZGluZyArICtsZWdlbmRXaWR0aCArIGxlZ2VuZE1hcmdpblJpZ2h0O1xyXG4gICAgfVxyXG4gICAgdmFyIHN0YXJ0WSA9IG9mZnNldC55ICsgKGNvbmZpZy50b29sVGlwTGluZUhlaWdodCAtIGNvbmZpZy5mb250U2l6ZSkgLyAyICsgY29uZmlnLnRvb2xUaXBMaW5lSGVpZ2h0ICogaW5kZXggK1xyXG4gICAgICBjb25maWcudG9vbFRpcFBhZGRpbmc7XHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRGb250U2l6ZShjb25maWcuZm9udFNpemUpO1xyXG4gICAgY29udGV4dC5zZXRGaWxsU3R5bGUodG9vbFRpcE9wdGlvbi5mb250Q29sb3IpO1xyXG4gICAgY29udGV4dC5maWxsVGV4dChpdGVtLnRleHQsIHN0YXJ0WCwgc3RhcnRZICsgY29uZmlnLmZvbnRTaXplKTtcclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3WUF4aXNUaXRsZSh0aXRsZSwgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgdmFyIHN0YXJ0WCA9IGNvbmZpZy54QXhpc0hlaWdodCArIChvcHRzLmhlaWdodCAtIGNvbmZpZy54QXhpc0hlaWdodCAtIG1lYXN1cmVUZXh0KHRpdGxlKSkgLyAyO1xyXG4gIGNvbnRleHQuc2F2ZSgpO1xyXG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgY29udGV4dC5zZXRGb250U2l6ZShjb25maWcuZm9udFNpemUpO1xyXG4gIGNvbnRleHQuc2V0RmlsbFN0eWxlKG9wdHMueUF4aXMudGl0bGVGb250Q29sb3IgfHwgJyMzMzMzMzMnKTtcclxuICBjb250ZXh0LnRyYW5zbGF0ZSgwLCBvcHRzLmhlaWdodCk7XHJcbiAgY29udGV4dC5yb3RhdGUoLTkwICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgY29udGV4dC5maWxsVGV4dCh0aXRsZSwgc3RhcnRYLCBvcHRzLnBhZGRpbmdbM10gKyAwLjUgKiBjb25maWcuZm9udFNpemUpO1xyXG4gIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgY29udGV4dC5zdHJva2UoKTtcclxuICBjb250ZXh0LnJlc3RvcmUoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0NvbHVtbkRhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICBsZXQgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMTtcclxuICBsZXQgcmFuZ2VzID0gW10uY29uY2F0KG9wdHMuY2hhcnREYXRhLnlBeGlzRGF0YS5yYW5nZXMpO1xyXG4gIGxldCB4QXhpc0RhdGEgPSBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEsXHJcbiAgICB4QXhpc1BvaW50cyA9IHhBeGlzRGF0YS54QXhpc1BvaW50cyxcclxuICAgIGVhY2hTcGFjaW5nID0geEF4aXNEYXRhLmVhY2hTcGFjaW5nO1xyXG4gIGxldCBjb2x1bW5PcHRpb24gPSBhc3NpZ24oe30sIHtcclxuICAgIHR5cGU6ICdncm91cCcsXHJcbiAgICB3aWR0aDogZWFjaFNwYWNpbmcgLyAyLFxyXG4gICAgbWV0ZXI6IHtcclxuICAgICAgYm9yZGVyOiA0LFxyXG4gICAgICBmaWxsQ29sb3I6ICcjRkZGRkZGJ1xyXG4gICAgfVxyXG4gIH0sIG9wdHMuZXh0cmEuY29sdW1uKTtcclxuICBsZXQgbWluUmFuZ2UgPSByYW5nZXMucG9wKCk7XHJcbiAgbGV0IG1heFJhbmdlID0gcmFuZ2VzLnNoaWZ0KCk7XHJcbiAgbGV0IGNhbFBvaW50cyA9IFtdO1xyXG5cclxuICBjb250ZXh0LnNhdmUoKTtcclxuICBpZiAob3B0cy5fc2Nyb2xsRGlzdGFuY2VfICYmIG9wdHMuX3Njcm9sbERpc3RhbmNlXyAhPT0gMCAmJiBvcHRzLmVuYWJsZVNjcm9sbCA9PT0gdHJ1ZSkge1xyXG4gICAgY29udGV4dC50cmFuc2xhdGUob3B0cy5fc2Nyb2xsRGlzdGFuY2VfLCAwKTtcclxuICB9XHJcbiAgaWYgKG9wdHMudG9vbHRpcCAmJiBvcHRzLnRvb2x0aXAudGV4dExpc3QgJiYgb3B0cy50b29sdGlwLnRleHRMaXN0Lmxlbmd0aCAmJiBwcm9jZXNzID09PSAxKSB7XHJcbiAgICBkcmF3VG9vbFRpcFNwbGl0QXJlYShvcHRzLnRvb2x0aXAub2Zmc2V0LngsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgZWFjaFNwYWNpbmcpO1xyXG4gIH1cclxuXHJcbiAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24oZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcclxuICAgIHZhciBkYXRhID0gZWFjaFNlcmllcy5kYXRhO1xyXG4gICAgc3dpdGNoIChjb2x1bW5PcHRpb24udHlwZSkge1xyXG4gICAgICBjYXNlICdncm91cCc6XHJcbiAgICAgICAgdmFyIHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XHJcbiAgICAgICAgdmFyIHRvb2x0aXBQb2ludHMgPSBnZXRTdGFja0RhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgc2VyaWVzSW5kZXgsIHNlcmllcywgcHJvY2Vzcyk7XHJcbiAgICAgICAgY2FsUG9pbnRzLnB1c2godG9vbHRpcFBvaW50cyk7XHJcbiAgICAgICAgcG9pbnRzID0gZml4Q29sdW1lRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBzZXJpZXMubGVuZ3RoLCBzZXJpZXNJbmRleCwgY29uZmlnLCBvcHRzKTtcclxuICAgICAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICAgICAgaWYgKGl0ZW0gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShpdGVtLmNvbG9yIHx8IGVhY2hTZXJpZXMuY29sb3IpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxKVxyXG4gICAgICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLmNvbG9yIHx8IGVhY2hTZXJpZXMuY29sb3IpO1xyXG4gICAgICAgICAgICB2YXIgc3RhcnRYID0gaXRlbS54IC0gaXRlbS53aWR0aCAvIDI7XHJcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSBvcHRzLmhlaWdodCAtIGl0ZW0ueSAtIG9wdHMuYXJlYVsyXTtcclxuICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLTEsIGl0ZW0ueSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCtpdGVtLndpZHRoLTIsaXRlbS55KTtcclxuICAgICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYK2l0ZW0ud2lkdGgtMixvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVsyXSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCxvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVsyXSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCxpdGVtLnkpO1xyXG4gICAgICAgICAgICAvL2NvbnRleHQucmVjdChzdGFydFgsIGl0ZW0ueSwgaXRlbS53aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3N0YWNrJzpcclxuICAgICAgICAvLyDnu5jliLbloIblj6DmlbDmja7lm75cclxuICAgICAgICB2YXIgcG9pbnRzID0gZ2V0U3RhY2tEYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsXHJcbiAgICAgICAgICBzZXJpZXNJbmRleCxcclxuICAgICAgICAgIHNlcmllcywgcHJvY2Vzcyk7XHJcbiAgICAgICAgY2FsUG9pbnRzLnB1c2gocG9pbnRzKTtcclxuICAgICAgICBwb2ludHMgPSBmaXhDb2x1bWVTdGFja0RhdGEocG9pbnRzLCBlYWNoU3BhY2luZywgc2VyaWVzLmxlbmd0aCwgc2VyaWVzSW5kZXgsIGNvbmZpZywgb3B0cywgc2VyaWVzKTtcclxuXHJcbiAgICAgICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgICAgICAgIGlmIChpdGVtICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0uY29sb3IgfHwgZWFjaFNlcmllcy5jb2xvcik7XHJcbiAgICAgICAgICAgIHZhciBzdGFydFggPSBpdGVtLnggLSBpdGVtLndpZHRoIC8gMiArIDE7XHJcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSBvcHRzLmhlaWdodCAtIGl0ZW0ueSAtIG9wdHMuYXJlYVsyXTtcclxuICAgICAgICAgICAgdmFyIGhlaWdodDAgPSBvcHRzLmhlaWdodCAtIGl0ZW0ueTAgLSBvcHRzLmFyZWFbMl07XHJcbiAgICAgICAgICAgIGlmIChzZXJpZXNJbmRleCA+IDApIHtcclxuICAgICAgICAgICAgICBoZWlnaHQgLT0gaGVpZ2h0MDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFgsIGl0ZW0ueSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3Qoc3RhcnRYLCBpdGVtLnksIGl0ZW0ud2lkdGggLSAyLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnbWV0ZXInOlxyXG4gICAgICAgIC8vIOe7mOWItua4qeW6puiuoeaVsOaNruWbvlxyXG4gICAgICAgIHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xyXG4gICAgICAgIGNhbFBvaW50cy5wdXNoKHBvaW50cyk7XHJcbiAgICAgICAgcG9pbnRzID0gZml4Q29sdW1lTWV0ZXJEYXRhKHBvaW50cywgZWFjaFNwYWNpbmcsIHNlcmllcy5sZW5ndGgsIHNlcmllc0luZGV4LCBjb25maWcsIG9wdHMsIGNvbHVtbk9wdGlvbi5tZXRlclxyXG4gICAgICAgICAgLmJvcmRlcik7XHJcbiAgICAgICAgaWYgKHNlcmllc0luZGV4ID09IDApIHtcclxuICAgICAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgLy/nlLvog4zmma/popzoibJcclxuICAgICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGNvbHVtbk9wdGlvbi5tZXRlci5maWxsQ29sb3IpO1xyXG4gICAgICAgICAgICAgIHZhciBzdGFydFggPSBpdGVtLnggLSBpdGVtLndpZHRoIC8gMjtcclxuICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gb3B0cy5oZWlnaHQgLSBpdGVtLnkgLSBvcHRzLmFyZWFbMl07XHJcbiAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLCBpdGVtLnkpO1xyXG4gICAgICAgICAgICAgIGNvbnRleHQuZmlsbFJlY3Qoc3RhcnRYLCBpdGVtLnksIGl0ZW0ud2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgICAgICAgICAvL+eUu+i+ueahhue6v1xyXG4gICAgICAgICAgICAgIGlmIChjb2x1bW5PcHRpb24ubWV0ZXIuYm9yZGVyID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNldExpbmVXaWR0aChjb2x1bW5PcHRpb24ubWV0ZXIuYm9yZGVyICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCArIGNvbHVtbk9wdGlvbi5tZXRlci5ib3JkZXIgKiAwLjUsIGl0ZW0ueSArIGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzdGFydFggKyBjb2x1bW5PcHRpb24ubWV0ZXIuYm9yZGVyICogMC41LCBpdGVtLnkgKyBjb2x1bW5PcHRpb24ubWV0ZXIuYm9yZGVyICogMC41KTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCArIGl0ZW0ud2lkdGggLSBjb2x1bW5PcHRpb24ubWV0ZXIuYm9yZGVyICogMC41LCBpdGVtLnkgKyBjb2x1bW5PcHRpb24ubWV0ZXIuYm9yZGVyICogMC41KTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCArIGl0ZW0ud2lkdGggLSBjb2x1bW5PcHRpb24ubWV0ZXIuYm9yZGVyICogMC41LCBpdGVtLnkgKyBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICAgICAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaXRlbS5jb2xvciB8fCBlYWNoU2VyaWVzLmNvbG9yKTtcclxuICAgICAgICAgICAgICB2YXIgc3RhcnRYID0gaXRlbS54IC0gaXRlbS53aWR0aCAvIDI7XHJcbiAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IG9wdHMuaGVpZ2h0IC0gaXRlbS55IC0gb3B0cy5hcmVhWzJdO1xyXG4gICAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgaXRlbS55KTtcclxuICAgICAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KHN0YXJ0WCwgaXRlbS55LCBpdGVtLndpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgaWYgKG9wdHMuZGF0YUxhYmVsICE9PSBmYWxzZSAmJiBwcm9jZXNzID09PSAxKSB7XHJcbiAgICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbihlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xyXG4gICAgICB2YXIgZGF0YSA9IGVhY2hTZXJpZXMuZGF0YTtcclxuICAgICAgc3dpdGNoIChjb2x1bW5PcHRpb24udHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ2dyb3VwJzpcclxuICAgICAgICAgIHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xyXG4gICAgICAgICAgcG9pbnRzID0gZml4Q29sdW1lRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBzZXJpZXMubGVuZ3RoLCBzZXJpZXNJbmRleCwgY29uZmlnLCBvcHRzKTtcclxuXHJcbiAgICAgICAgICBkcmF3UG9pbnRUZXh0KHBvaW50cywgZWFjaFNlcmllcywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3N0YWNrJzpcclxuICAgICAgICAgIHZhciBwb2ludHMgPSBnZXRTdGFja0RhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZyxcclxuICAgICAgICAgICAgc2VyaWVzSW5kZXgsXHJcbiAgICAgICAgICAgIHNlcmllcywgcHJvY2Vzcyk7XHJcbiAgICAgICAgICBkcmF3UG9pbnRUZXh0KHBvaW50cywgZWFjaFNlcmllcywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ21ldGVyJzpcclxuICAgICAgICAgIHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xyXG4gICAgICAgICAgZHJhd1BvaW50VGV4dChwb2ludHMsIGVhY2hTZXJpZXMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb250ZXh0LnJlc3RvcmUoKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHhBeGlzUG9pbnRzOiB4QXhpc1BvaW50cyxcclxuICAgIGNhbFBvaW50czogY2FsUG9pbnRzLFxyXG4gICAgZWFjaFNwYWNpbmc6IGVhY2hTcGFjaW5nLFxyXG4gICAgbWluUmFuZ2U6IG1pblJhbmdlLFxyXG4gICAgbWF4UmFuZ2U6IG1heFJhbmdlXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0NhbmRsZURhdGFQb2ludHMoc2VyaWVzLCBzZXJpZXNNQSwgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDE7XHJcbiAgdmFyIGNhbmRsZU9wdGlvbiA9IGFzc2lnbih7fSwge1xyXG4gICAgY29sb3I6IHt9LFxyXG4gICAgYXZlcmFnZToge31cclxuICB9LCBvcHRzLmV4dHJhLmNhbmRsZSk7XHJcbiAgY2FuZGxlT3B0aW9uLmNvbG9yID0gYXNzaWduKHt9LCB7XHJcbiAgICB1cExpbmU6ICcjZjA0ODY0JyxcclxuICAgIHVwRmlsbDogJyNmMDQ4NjQnLFxyXG4gICAgZG93bkxpbmU6ICcjMmZjMjViJyxcclxuICAgIGRvd25GaWxsOiAnIzJmYzI1YidcclxuICB9LCBjYW5kbGVPcHRpb24uY29sb3IpO1xyXG4gIGNhbmRsZU9wdGlvbi5hdmVyYWdlID0gYXNzaWduKHt9LCB7XHJcbiAgICBzaG93OiBmYWxzZSxcclxuICAgIG5hbWU6IFtdLFxyXG4gICAgZGF5OiBbXSxcclxuICAgIGNvbG9yOiBjb25maWcuY29sb3JzXHJcbiAgfSwgY2FuZGxlT3B0aW9uLmF2ZXJhZ2UpO1xyXG4gIG9wdHMuZXh0cmEuY2FuZGxlID0gY2FuZGxlT3B0aW9uO1xyXG5cclxuICBsZXQgcmFuZ2VzID0gW10uY29uY2F0KG9wdHMuY2hhcnREYXRhLnlBeGlzRGF0YS5yYW5nZXMpO1xyXG4gIGxldCB4QXhpc0RhdGEgPSBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEsXHJcbiAgICB4QXhpc1BvaW50cyA9IHhBeGlzRGF0YS54QXhpc1BvaW50cyxcclxuICAgIGVhY2hTcGFjaW5nID0geEF4aXNEYXRhLmVhY2hTcGFjaW5nO1xyXG5cclxuICBsZXQgbWluUmFuZ2UgPSByYW5nZXMucG9wKCk7XHJcbiAgbGV0IG1heFJhbmdlID0gcmFuZ2VzLnNoaWZ0KCk7XHJcbiAgbGV0IGNhbFBvaW50cyA9IFtdO1xyXG5cclxuICBjb250ZXh0LnNhdmUoKTtcclxuICBpZiAob3B0cy5fc2Nyb2xsRGlzdGFuY2VfICYmIG9wdHMuX3Njcm9sbERpc3RhbmNlXyAhPT0gMCAmJiBvcHRzLmVuYWJsZVNjcm9sbCA9PT0gdHJ1ZSkge1xyXG4gICAgY29udGV4dC50cmFuc2xhdGUob3B0cy5fc2Nyb2xsRGlzdGFuY2VfLCAwKTtcclxuICB9XHJcbiAgLy/nlLvlnYfnur9cclxuICBpZiAoY2FuZGxlT3B0aW9uLmF2ZXJhZ2Uuc2hvdykge1xyXG4gICAgc2VyaWVzTUEuZm9yRWFjaChmdW5jdGlvbihlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xyXG4gICAgICB2YXIgZGF0YSA9IGVhY2hTZXJpZXMuZGF0YTtcclxuICAgICAgdmFyIHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XHJcbiAgICAgIC8vY2FsUG9pbnRzLnB1c2gocG9pbnRzKTtcclxuICAgICAgdmFyIHNwbGl0UG9pbnRMaXN0ID0gc3BsaXRQb2ludHMocG9pbnRzKTtcclxuXHJcbiAgICAgIHNwbGl0UG9pbnRMaXN0LmZvckVhY2goZnVuY3Rpb24ocG9pbnRzLCBpbmRleCkge1xyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShlYWNoU2VyaWVzLmNvbG9yKTtcclxuICAgICAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxKTtcclxuICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTtcclxuICAgICAgICAgIGNvbnRleHQuYXJjKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSwgMSwgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xyXG4gICAgICAgICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICAgIHZhciBjdHJsUG9pbnQgPSBjcmVhdGVDdXJ2ZUNvbnRyb2xQb2ludHMocG9pbnRzLCBpbmRleCAtIDEpO1xyXG4gICAgICAgICAgICAgIGNvbnRleHQuYmV6aWVyQ3VydmVUbyhjdHJsUG9pbnQuY3RyQS54LCBjdHJsUG9pbnQuY3RyQS55LCBjdHJsUG9pbnQuY3RyQi54LCBjdHJsUG9pbnQuY3RyQi55LFxyXG4gICAgICAgICAgICAgICAgaXRlbS54LCBpdGVtXHJcbiAgICAgICAgICAgICAgICAueSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICAvL+eUu0vnur9cclxuICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbihlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xyXG4gICAgdmFyIGRhdGEgPSBlYWNoU2VyaWVzLmRhdGE7XHJcbiAgICB2YXIgcG9pbnRzID0gZ2V0Q2FuZGxlRGF0YVBvaW50cyhkYXRhLCBtaW5SYW5nZSwgbWF4UmFuZ2UsIHhBeGlzUG9pbnRzLCBlYWNoU3BhY2luZywgb3B0cywgY29uZmlnLCBwcm9jZXNzKTtcclxuICAgIGNhbFBvaW50cy5wdXNoKHBvaW50cyk7XHJcbiAgICB2YXIgc3BsaXRQb2ludExpc3QgPSBzcGxpdFBvaW50cyhwb2ludHMpO1xyXG4gICAgc3BsaXRQb2ludExpc3QgPSBzcGxpdFBvaW50TGlzdFswXTtcclxuXHJcbiAgICBzcGxpdFBvaW50TGlzdC5mb3JFYWNoKGZ1bmN0aW9uKHBvaW50cywgaW5kZXgpIHtcclxuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgLy/lpoLmnpzkuIrmtqhcclxuICAgICAgaWYgKGRhdGFbaW5kZXhdWzFdIC0gZGF0YVtpbmRleF1bMF0gPiAwKSB7XHJcbiAgICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShjYW5kbGVPcHRpb24uY29sb3IudXBMaW5lKTtcclxuICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShjYW5kbGVPcHRpb24uY29sb3IudXBGaWxsKTtcclxuICAgICAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbM10ueCwgcG9pbnRzWzNdLnkpOyAvL+mhtueCuVxyXG4gICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50c1sxXS54LCBwb2ludHNbMV0ueSk7IC8v5pS255uY5Lit6Ze054K5XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8ocG9pbnRzWzFdLnggLSBlYWNoU3BhY2luZyAvIDQsIHBvaW50c1sxXS55KTsgLy/mlLbnm5jlt6bkvqfngrlcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMF0ueCAtIGVhY2hTcGFjaW5nIC8gNCwgcG9pbnRzWzBdLnkpOyAvL+W8gOebmOW3puS+p+eCuVxyXG4gICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7IC8v5byA55uY5Lit6Ze054K5XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8ocG9pbnRzWzJdLngsIHBvaW50c1syXS55KTsgLy/lupXngrlcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpOyAvL+W8gOebmOS4remXtOeCuVxyXG4gICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50c1swXS54ICsgZWFjaFNwYWNpbmcgLyA0LCBwb2ludHNbMF0ueSk7IC8v5byA55uY5Y+z5L6n54K5XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8ocG9pbnRzWzFdLnggKyBlYWNoU3BhY2luZyAvIDQsIHBvaW50c1sxXS55KTsgLy/mlLbnm5jlj7PkvqfngrlcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMV0ueCwgcG9pbnRzWzFdLnkpOyAvL+aUtuebmOS4remXtOeCuVxyXG4gICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1szXS54LCBwb2ludHNbM10ueSk7IC8v6aG254K5XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShjYW5kbGVPcHRpb24uY29sb3IuZG93bkxpbmUpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGNhbmRsZU9wdGlvbi5jb2xvci5kb3duRmlsbCk7XHJcbiAgICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8ocG9pbnRzWzNdLngsIHBvaW50c1szXS55KTsgLy/pobbngrlcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpOyAvL+W8gOebmOS4remXtOeCuVxyXG4gICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50c1swXS54IC0gZWFjaFNwYWNpbmcgLyA0LCBwb2ludHNbMF0ueSk7IC8v5byA55uY5bem5L6n54K5XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8ocG9pbnRzWzFdLnggLSBlYWNoU3BhY2luZyAvIDQsIHBvaW50c1sxXS55KTsgLy/mlLbnm5jlt6bkvqfngrlcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMV0ueCwgcG9pbnRzWzFdLnkpOyAvL+aUtuebmOS4remXtOeCuVxyXG4gICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50c1syXS54LCBwb2ludHNbMl0ueSk7IC8v5bqV54K5XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8ocG9pbnRzWzFdLngsIHBvaW50c1sxXS55KTsgLy/mlLbnm5jkuK3pl7TngrlcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMV0ueCArIGVhY2hTcGFjaW5nIC8gNCwgcG9pbnRzWzFdLnkpOyAvL+aUtuebmOWPs+S+p+eCuVxyXG4gICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50c1swXS54ICsgZWFjaFNwYWNpbmcgLyA0LCBwb2ludHNbMF0ueSk7IC8v5byA55uY5Y+z5L6n54K5XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTsgLy/lvIDnm5jkuK3pl7TngrlcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbM10ueCwgcG9pbnRzWzNdLnkpOyAvL+mhtueCuVxyXG4gICAgICB9XHJcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGNvbnRleHQucmVzdG9yZSgpO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgeEF4aXNQb2ludHM6IHhBeGlzUG9pbnRzLFxyXG4gICAgY2FsUG9pbnRzOiBjYWxQb2ludHMsXHJcbiAgICBlYWNoU3BhY2luZzogZWFjaFNwYWNpbmcsXHJcbiAgICBtaW5SYW5nZTogbWluUmFuZ2UsXHJcbiAgICBtYXhSYW5nZTogbWF4UmFuZ2VcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3QXJlYURhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMTtcclxuICB2YXIgYXJlYU9wdGlvbiA9IGFzc2lnbih7fSx7XHJcbiAgICB0eXBlOiAnc3RyYWlnaHQnLFxyXG4gICAgb3BhY2l0eTogMC4yLFxyXG4gICAgYWRkTGluZTogZmFsc2UsXHJcbiAgICB3aWR0aDogMlxyXG4gIH0sb3B0cy5leHRyYS5hcmVhKTtcclxuXHJcbiAgbGV0IHJhbmdlcyA9IFtdLmNvbmNhdChvcHRzLmNoYXJ0RGF0YS55QXhpc0RhdGEucmFuZ2VzKTtcclxuICBsZXQgeEF4aXNEYXRhID0gb3B0cy5jaGFydERhdGEueEF4aXNEYXRhLFxyXG4gICAgeEF4aXNQb2ludHMgPSB4QXhpc0RhdGEueEF4aXNQb2ludHMsXHJcbiAgICBlYWNoU3BhY2luZyA9IHhBeGlzRGF0YS5lYWNoU3BhY2luZztcclxuXHJcbiAgbGV0IG1pblJhbmdlID0gcmFuZ2VzLnBvcCgpO1xyXG4gIGxldCBtYXhSYW5nZSA9IHJhbmdlcy5zaGlmdCgpO1xyXG4gIGxldCBlbmRZID0gb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMl07XHJcbiAgbGV0IGNhbFBvaW50cyA9IFtdO1xyXG5cclxuICBjb250ZXh0LnNhdmUoKTtcclxuICBpZiAob3B0cy5fc2Nyb2xsRGlzdGFuY2VfICYmIG9wdHMuX3Njcm9sbERpc3RhbmNlXyAhPT0gMCAmJiBvcHRzLmVuYWJsZVNjcm9sbCA9PT0gdHJ1ZSkge1xyXG4gICAgY29udGV4dC50cmFuc2xhdGUob3B0cy5fc2Nyb2xsRGlzdGFuY2VfLCAwKTtcclxuICB9XHJcblxyXG4gIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uKGVhY2hTZXJpZXMsIHNlcmllc0luZGV4KSB7XHJcbiAgICBsZXQgZGF0YSA9IGVhY2hTZXJpZXMuZGF0YTtcclxuICAgIGxldCBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xyXG4gICAgY2FsUG9pbnRzLnB1c2gocG9pbnRzKTtcclxuXHJcbiAgICBsZXQgc3BsaXRQb2ludExpc3QgPSBzcGxpdFBvaW50cyhwb2ludHMpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3BsaXRQb2ludExpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgbGV0IHBvaW50cyA9IHNwbGl0UG9pbnRMaXN0W2ldO1xyXG4gICAgICAvLyDnu5jliLbljLrln5/mlbBcclxuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShoZXhUb1JnYihlYWNoU2VyaWVzLmNvbG9yLCBhcmVhT3B0aW9uLm9wYWNpdHkpKTtcclxuICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IoZWFjaFNlcmllcy5jb2xvciwgYXJlYU9wdGlvbi5vcGFjaXR5KSk7XHJcbiAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKGFyZWFPcHRpb24ud2lkdGggKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICBpZiAocG9pbnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICBsZXQgZmlyc3RQb2ludCA9IHBvaW50c1swXTtcclxuICAgICAgICBsZXQgbGFzdFBvaW50ID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXTtcclxuXHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkpO1xyXG4gICAgICAgIGlmIChhcmVhT3B0aW9uLnR5cGUgPT09ICdjdXJ2ZScpIHtcclxuICAgICAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcclxuICAgICAgICAgICAgICBsZXQgY3RybFBvaW50ID0gY3JlYXRlQ3VydmVDb250cm9sUG9pbnRzKHBvaW50cywgaW5kZXggLSAxKTtcclxuICAgICAgICAgICAgICBjb250ZXh0LmJlemllckN1cnZlVG8oY3RybFBvaW50LmN0ckEueCwgY3RybFBvaW50LmN0ckEueSwgY3RybFBvaW50LmN0ckIueCwgY3RybFBvaW50LmN0ckIueSxpdGVtLngsIGl0ZW0ueSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XHJcbiAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54LCBpdGVtLnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGxhc3RQb2ludC54LCBlbmRZKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhmaXJzdFBvaW50LngsIGVuZFkpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsZXQgaXRlbSA9IHBvaW50c1swXTtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtLnggLSBlYWNoU3BhY2luZyAvIDIsIGl0ZW0ueSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54ICsgZWFjaFNwYWNpbmcgLyAyLCBpdGVtLnkpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCArIGVhY2hTcGFjaW5nIC8gMiwgZW5kWSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54IC0gZWFjaFNwYWNpbmcgLyAyLCBlbmRZKTtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtLnggLSBlYWNoU3BhY2luZyAvIDIsIGl0ZW0ueSk7XHJcbiAgICAgIH1cclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgY29udGV4dC5maWxsKCk7XHJcblxyXG4gICAgICAvL+eUu+i/nue6v1xyXG4gICAgICBpZiAoYXJlYU9wdGlvbi5hZGRMaW5lKSB7XHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGVhY2hTZXJpZXMuY29sb3IpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKGFyZWFPcHRpb24ud2lkdGggKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICAgIGlmIChwb2ludHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xyXG4gICAgICAgICAgY29udGV4dC5hcmMocG9pbnRzWzBdLngsIHBvaW50c1swXS55LCAxLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XHJcbiAgICAgICAgICBpZiAoYXJlYU9wdGlvbi50eXBlID09PSAnY3VydmUnKSB7XHJcbiAgICAgICAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGN0cmxQb2ludCA9IGNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyhwb2ludHMsIGluZGV4IC0gMSk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmJlemllckN1cnZlVG8oY3RybFBvaW50LmN0ckEueCwgY3RybFBvaW50LmN0ckEueSwgY3RybFBvaW50LmN0ckIueCwgY3RybFBvaW50LmN0ckIueSxpdGVtLngsaXRlbS55KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLngsIGl0ZW0ueSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8v55S754K5XHJcbiAgICBpZiAob3B0cy5kYXRhUG9pbnRTaGFwZSAhPT0gZmFsc2UpIHtcclxuICAgICAgdmFyIHNoYXBlID0gY29uZmlnLmRhdGFQb2ludFNoYXBlW3Nlcmllc0luZGV4ICUgY29uZmlnLmRhdGFQb2ludFNoYXBlLmxlbmd0aF07XHJcbiAgICAgIGRyYXdQb2ludFNoYXBlKHBvaW50cywgZWFjaFNlcmllcy5jb2xvciwgc2hhcGUsIGNvbnRleHQsIG9wdHMpO1xyXG4gICAgfVxyXG5cclxuICB9KTtcclxuXHJcbiAgaWYgKG9wdHMuZGF0YUxhYmVsICE9PSBmYWxzZSAmJiBwcm9jZXNzID09PSAxKSB7XHJcbiAgICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbihlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xyXG4gICAgICB2YXIgZGF0YSA9IGVhY2hTZXJpZXMuZGF0YTtcclxuICAgICAgdmFyIHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XHJcbiAgICAgIGRyYXdQb2ludFRleHQocG9pbnRzLCBlYWNoU2VyaWVzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb250ZXh0LnJlc3RvcmUoKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHhBeGlzUG9pbnRzOiB4QXhpc1BvaW50cyxcclxuICAgIGNhbFBvaW50czogY2FsUG9pbnRzLFxyXG4gICAgZWFjaFNwYWNpbmc6IGVhY2hTcGFjaW5nLFxyXG4gICAgbWluUmFuZ2U6IG1pblJhbmdlLFxyXG4gICAgbWF4UmFuZ2U6IG1heFJhbmdlXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0xpbmVEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDE7XHJcbiAgdmFyIGxpbmVPcHRpb24gPSBvcHRzLmV4dHJhLmxpbmUgfHwge1xyXG4gICAgdHlwZTogJ3N0cmFpZ2h0JyxcclxuICAgIHdpZHRoOiAyXHJcbiAgfTtcclxuICBsaW5lT3B0aW9uLnR5cGUgPSBsaW5lT3B0aW9uLnR5cGUgPyBsaW5lT3B0aW9uLnR5cGUgOiAnc3RyYWlnaHQnO1xyXG4gIGxpbmVPcHRpb24ud2lkdGggPSBsaW5lT3B0aW9uLndpZHRoID8gbGluZU9wdGlvbi53aWR0aCA6IDI7XHJcblxyXG4gIGxldCByYW5nZXMgPSBbXS5jb25jYXQob3B0cy5jaGFydERhdGEueUF4aXNEYXRhLnJhbmdlcyk7XHJcbiAgbGV0IHhBeGlzRGF0YSA9IG9wdHMuY2hhcnREYXRhLnhBeGlzRGF0YSxcclxuICAgIHhBeGlzUG9pbnRzID0geEF4aXNEYXRhLnhBeGlzUG9pbnRzLFxyXG4gICAgZWFjaFNwYWNpbmcgPSB4QXhpc0RhdGEuZWFjaFNwYWNpbmc7XHJcblxyXG4gIHZhciBtaW5SYW5nZSA9IHJhbmdlcy5wb3AoKTtcclxuICB2YXIgbWF4UmFuZ2UgPSByYW5nZXMuc2hpZnQoKTtcclxuICB2YXIgY2FsUG9pbnRzID0gW107XHJcblxyXG4gIGNvbnRleHQuc2F2ZSgpO1xyXG4gIGlmIChvcHRzLl9zY3JvbGxEaXN0YW5jZV8gJiYgb3B0cy5fc2Nyb2xsRGlzdGFuY2VfICE9PSAwICYmIG9wdHMuZW5hYmxlU2Nyb2xsID09PSB0cnVlKSB7XHJcbiAgICBjb250ZXh0LnRyYW5zbGF0ZShvcHRzLl9zY3JvbGxEaXN0YW5jZV8sIDApO1xyXG4gIH1cclxuXHJcbiAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24oZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcclxuICAgIHZhciBkYXRhID0gZWFjaFNlcmllcy5kYXRhO1xyXG4gICAgdmFyIHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XHJcbiAgICBjYWxQb2ludHMucHVzaChwb2ludHMpO1xyXG4gICAgdmFyIHNwbGl0UG9pbnRMaXN0ID0gc3BsaXRQb2ludHMocG9pbnRzKTtcclxuXHJcbiAgICBzcGxpdFBvaW50TGlzdC5mb3JFYWNoKGZ1bmN0aW9uKHBvaW50cywgaW5kZXgpIHtcclxuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShlYWNoU2VyaWVzLmNvbG9yKTtcclxuICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgobGluZU9wdGlvbi53aWR0aCAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgIGlmIChwb2ludHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTtcclxuICAgICAgICBjb250ZXh0LmFyYyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnksIDEsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xyXG4gICAgICAgIGlmIChsaW5lT3B0aW9uLnR5cGUgPT09ICdjdXJ2ZScpIHtcclxuICAgICAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcclxuICAgICAgICAgICAgICB2YXIgY3RybFBvaW50ID0gY3JlYXRlQ3VydmVDb250cm9sUG9pbnRzKHBvaW50cywgaW5kZXggLSAxKTtcclxuICAgICAgICAgICAgICBjb250ZXh0LmJlemllckN1cnZlVG8oY3RybFBvaW50LmN0ckEueCwgY3RybFBvaW50LmN0ckEueSwgY3RybFBvaW50LmN0ckIueCwgY3RybFBvaW50LmN0ckIueSxcclxuICAgICAgICAgICAgICAgIGl0ZW0ueCwgaXRlbVxyXG4gICAgICAgICAgICAgICAgLnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCwgaXRlbS55KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XHJcbiAgICAgIH1cclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChvcHRzLmRhdGFQb2ludFNoYXBlICE9PSBmYWxzZSkge1xyXG4gICAgICB2YXIgc2hhcGUgPSBjb25maWcuZGF0YVBvaW50U2hhcGVbc2VyaWVzSW5kZXggJSBjb25maWcuZGF0YVBvaW50U2hhcGUubGVuZ3RoXTtcclxuICAgICAgZHJhd1BvaW50U2hhcGUocG9pbnRzLCBlYWNoU2VyaWVzLmNvbG9yLCBzaGFwZSwgY29udGV4dCwgb3B0cyk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGlmIChvcHRzLmRhdGFMYWJlbCAhPT0gZmFsc2UgJiYgcHJvY2VzcyA9PT0gMSkge1xyXG4gICAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24oZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcclxuICAgICAgdmFyIGRhdGEgPSBlYWNoU2VyaWVzLmRhdGE7XHJcbiAgICAgIHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xyXG4gICAgICBkcmF3UG9pbnRUZXh0KHBvaW50cywgZWFjaFNlcmllcywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY29udGV4dC5yZXN0b3JlKCk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB4QXhpc1BvaW50czogeEF4aXNQb2ludHMsXHJcbiAgICBjYWxQb2ludHM6IGNhbFBvaW50cyxcclxuICAgIGVhY2hTcGFjaW5nOiBlYWNoU3BhY2luZyxcclxuICAgIG1pblJhbmdlOiBtaW5SYW5nZSxcclxuICAgIG1heFJhbmdlOiBtYXhSYW5nZVxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdNaXhEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgbGV0IHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDE7XHJcbiAgbGV0IHJhbmdlcyA9IFtdLmNvbmNhdChvcHRzLmNoYXJ0RGF0YS55QXhpc0RhdGEucmFuZ2VzKTtcclxuICBsZXQgeEF4aXNEYXRhID0gb3B0cy5jaGFydERhdGEueEF4aXNEYXRhLFxyXG4gICAgeEF4aXNQb2ludHMgPSB4QXhpc0RhdGEueEF4aXNQb2ludHMsXHJcbiAgICBlYWNoU3BhY2luZyA9IHhBeGlzRGF0YS5lYWNoU3BhY2luZztcclxuXHJcbiAgbGV0IG1pblJhbmdlID0gcmFuZ2VzLnBvcCgpO1xyXG4gIGxldCBtYXhSYW5nZSA9IHJhbmdlcy5zaGlmdCgpO1xyXG4gIGxldCBlbmRZID0gb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMl07XHJcbiAgbGV0IGNhbFBvaW50cyA9IFtdO1xyXG5cclxuICB2YXIgY29sdW1uSW5kZXggPSAwO1xyXG4gIHZhciBjb2x1bW5MZW5ndGggPSAwO1xyXG4gIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uKGVhY2hTZXJpZXMsIHNlcmllc0luZGV4KSB7XHJcbiAgICBpZiAoZWFjaFNlcmllcy50eXBlID09ICdjb2x1bW4nKSB7XHJcbiAgICAgIGNvbHVtbkxlbmd0aCArPSAxO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIGNvbnRleHQuc2F2ZSgpO1xyXG4gIGlmIChvcHRzLl9zY3JvbGxEaXN0YW5jZV8gJiYgb3B0cy5fc2Nyb2xsRGlzdGFuY2VfICE9PSAwICYmIG9wdHMuZW5hYmxlU2Nyb2xsID09PSB0cnVlKSB7XHJcbiAgICBjb250ZXh0LnRyYW5zbGF0ZShvcHRzLl9zY3JvbGxEaXN0YW5jZV8sIDApO1xyXG4gIH1cclxuXHJcbiAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24oZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcclxuICAgIHZhciBkYXRhID0gZWFjaFNlcmllcy5kYXRhO1xyXG4gICAgdmFyIHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XHJcbiAgICBjYWxQb2ludHMucHVzaChwb2ludHMpO1xyXG5cclxuICAgIC8vIOe7mOWItuafseeKtuaVsOaNruWbvlxyXG4gICAgaWYgKGVhY2hTZXJpZXMudHlwZSA9PSAnY29sdW1uJykge1xyXG4gICAgICBwb2ludHMgPSBmaXhDb2x1bWVEYXRhKHBvaW50cywgZWFjaFNwYWNpbmcsIGNvbHVtbkxlbmd0aCwgY29sdW1uSW5kZXgsIGNvbmZpZywgb3B0cyk7XHJcbiAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgaWYgKGl0ZW0gIT09IG51bGwpIHtcclxuICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGl0ZW0uY29sb3IgfHwgZWFjaFNlcmllcy5jb2xvcik7XHJcbiAgICAgICAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxKVxyXG4gICAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaXRlbS5jb2xvciB8fCBlYWNoU2VyaWVzLmNvbG9yKTtcclxuICAgICAgICAgIHZhciBzdGFydFggPSBpdGVtLnggLSBpdGVtLndpZHRoIC8gMjtcclxuICAgICAgICAgIHZhciBoZWlnaHQgPSBvcHRzLmhlaWdodCAtIGl0ZW0ueSAtIG9wdHMuYXJlYVsyXTtcclxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgaXRlbS55KTtcclxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WC0xLCBpdGVtLnkpO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYK2l0ZW0ud2lkdGgtMixpdGVtLnkpO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYK2l0ZW0ud2lkdGgtMixvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVsyXSk7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzdGFydFgsb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMl0pO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYLGl0ZW0ueSk7XHJcbiAgICAgICAgICAvL2NvbnRleHQucmVjdChzdGFydFgsIGl0ZW0ueSwgaXRlbS53aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgY29sdW1uSW5kZXggKz0gMTtcclxuICAgIH1cclxuXHJcbiAgICAvL+e7mOWItuWMuuWfn+WbvuaVsOaNrlxyXG5cclxuICAgIGlmIChlYWNoU2VyaWVzLnR5cGUgPT0gJ2FyZWEnKSB7XHJcbiAgICAgIGxldCBzcGxpdFBvaW50TGlzdCA9IHNwbGl0UG9pbnRzKHBvaW50cyk7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3BsaXRQb2ludExpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgcG9pbnRzID0gc3BsaXRQb2ludExpc3RbaV07XHJcbiAgICAgICAgLy8g57uY5Yi25Yy65Z+f5pWw5o2uXHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGVhY2hTZXJpZXMuY29sb3IpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGhleFRvUmdiKGVhY2hTZXJpZXMuY29sb3IsIDAuMikpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDIgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICAgIGlmIChwb2ludHMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgdmFyIGZpcnN0UG9pbnQgPSBwb2ludHNbMF07XHJcbiAgICAgICAgICBsZXQgbGFzdFBvaW50ID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55KTtcclxuICAgICAgICAgIGlmIChlYWNoU2VyaWVzLnN0eWxlID09PSAnY3VydmUnKSB7XHJcbiAgICAgICAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN0cmxQb2ludCA9IGNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyhwb2ludHMsIGluZGV4IC0gMSk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmJlemllckN1cnZlVG8oY3RybFBvaW50LmN0ckEueCwgY3RybFBvaW50LmN0ckEueSwgY3RybFBvaW50LmN0ckIueCwgY3RybFBvaW50LmN0ckIueSwgaXRlbS54LCBpdGVtLnkpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCwgaXRlbS55KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8obGFzdFBvaW50LngsIGVuZFkpO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oZmlyc3RQb2ludC54LCBlbmRZKTtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgbGV0IGl0ZW0gPSBwb2ludHNbMF07XHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtLnggLSBlYWNoU3BhY2luZyAvIDIsIGl0ZW0ueSk7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLnggKyBlYWNoU3BhY2luZyAvIDIsIGl0ZW0ueSk7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLnggKyBlYWNoU3BhY2luZyAvIDIsIGVuZFkpO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54IC0gZWFjaFNwYWNpbmcgLyAyLCBlbmRZKTtcclxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKGl0ZW0ueCAtIGVhY2hTcGFjaW5nIC8gMiwgaXRlbS55KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOe7mOWItuaKmOe6v+aVsOaNruWbvlxyXG4gICAgaWYgKGVhY2hTZXJpZXMudHlwZSA9PSAnbGluZScpIHtcclxuICAgICAgdmFyIHNwbGl0UG9pbnRMaXN0ID0gc3BsaXRQb2ludHMocG9pbnRzKTtcclxuICAgICAgc3BsaXRQb2ludExpc3QuZm9yRWFjaChmdW5jdGlvbihwb2ludHMsIGluZGV4KSB7XHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGVhY2hTZXJpZXMuY29sb3IpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDIgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICAgIGlmIChwb2ludHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xyXG4gICAgICAgICAgY29udGV4dC5hcmMocG9pbnRzWzBdLngsIHBvaW50c1swXS55LCAxLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XHJcbiAgICAgICAgICBpZiAoZWFjaFNlcmllcy5zdHlsZSA9PSAnY3VydmUnKSB7XHJcbiAgICAgICAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN0cmxQb2ludCA9IGNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyhwb2ludHMsIGluZGV4IC0gMSk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmJlemllckN1cnZlVG8oY3RybFBvaW50LmN0ckEueCwgY3RybFBvaW50LmN0ckEueSwgY3RybFBvaW50LmN0ckIueCwgY3RybFBvaW50LmN0ckIueSxcclxuICAgICAgICAgICAgICAgICAgaXRlbS54LFxyXG4gICAgICAgICAgICAgICAgICBpdGVtLnkpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCwgaXRlbS55KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDnu5jliLbngrnmlbDmja7lm75cclxuICAgIGlmIChlYWNoU2VyaWVzLnR5cGUgPT0gJ3BvaW50Jykge1xyXG4gICAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbihwb2ludHNhLCBpbmRleCkge1xyXG4gICAgICAgIGlmIChwb2ludHNhKSB7XHJcbiAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XHJcbiAgICAgICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKCcjRkZGRkZGJyk7XHJcbiAgICAgICAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c2EueCArIDMuNSAqIG9wdHMucGl4ZWxSYXRpbywgcG9pbnRzYS55KTtcclxuICAgICAgICAgIGNvbnRleHQuYXJjKHBvaW50c2EueCwgcG9pbnRzYS55LCA0ICogb3B0cy5waXhlbFJhdGlvLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGVhY2hTZXJpZXMuYWRkUG9pbnQgPT0gdHJ1ZSAmJiBlYWNoU2VyaWVzLnR5cGUgIT09ICdjb2x1bW4nKSB7XHJcbiAgICAgIHZhciBzaGFwZSA9IGNvbmZpZy5kYXRhUG9pbnRTaGFwZVtzZXJpZXNJbmRleCAlIGNvbmZpZy5kYXRhUG9pbnRTaGFwZS5sZW5ndGhdO1xyXG4gICAgICBkcmF3UG9pbnRTaGFwZShwb2ludHMsIGVhY2hTZXJpZXMuY29sb3IsIHNoYXBlLCBjb250ZXh0LCBvcHRzKTtcclxuICAgIH1cclxuICB9KTtcclxuICBpZiAob3B0cy5kYXRhTGFiZWwgIT09IGZhbHNlICYmIHByb2Nlc3MgPT09IDEpIHtcclxuICAgIHZhciBjb2x1bW5JbmRleCA9IDA7XHJcbiAgICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbihlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xyXG4gICAgICB2YXIgZGF0YSA9IGVhY2hTZXJpZXMuZGF0YTtcclxuICAgICAgdmFyIHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XHJcbiAgICAgIGlmIChlYWNoU2VyaWVzLnR5cGUgIT09ICdjb2x1bW4nKSB7XHJcbiAgICAgICAgZHJhd1BvaW50VGV4dChwb2ludHMsIGVhY2hTZXJpZXMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcG9pbnRzID0gZml4Q29sdW1lRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBjb2x1bW5MZW5ndGgsIGNvbHVtbkluZGV4LCBjb25maWcsIG9wdHMpO1xyXG4gICAgICAgIGRyYXdQb2ludFRleHQocG9pbnRzLCBlYWNoU2VyaWVzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgIGNvbHVtbkluZGV4ICs9IDE7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNvbnRleHQucmVzdG9yZSgpO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgeEF4aXNQb2ludHM6IHhBeGlzUG9pbnRzLFxyXG4gICAgY2FsUG9pbnRzOiBjYWxQb2ludHMsXHJcbiAgICBlYWNoU3BhY2luZzogZWFjaFNwYWNpbmcsXHJcbiAgICBtaW5SYW5nZTogbWluUmFuZ2UsXHJcbiAgICBtYXhSYW5nZTogbWF4UmFuZ2VcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3VG9vbFRpcEJyaWRnZShvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MsIGVhY2hTcGFjaW5nLCB4QXhpc1BvaW50cykge1xyXG4gIHZhciB0b29sVGlwT3B0aW9uID0gb3B0cy5leHRyYS50b29sdGlwIHx8IHt9O1xyXG4gIGlmICh0b29sVGlwT3B0aW9uLmhvcml6ZW50YWxMaW5lICYmIG9wdHMudG9vbHRpcCAmJiBwcm9jZXNzID09PSAxICYmIChvcHRzLnR5cGUgPT0gJ2xpbmUnIHx8IG9wdHMudHlwZSA9PSAnYXJlYScgfHwgb3B0cy50eXBlID09ICdjb2x1bW4nIHx8IG9wdHMudHlwZSA9PSAnY2FuZGxlJyB8fCBvcHRzLnR5cGUgPT0gJ21peCcpKSB7XHJcbiAgICBkcmF3VG9vbFRpcEhvcml6ZW50YWxMaW5lKG9wdHMsIGNvbmZpZywgY29udGV4dCwgZWFjaFNwYWNpbmcsIHhBeGlzUG9pbnRzKVxyXG4gIH1cclxuICBjb250ZXh0LnNhdmUoKTtcclxuICBpZiAob3B0cy5fc2Nyb2xsRGlzdGFuY2VfICYmIG9wdHMuX3Njcm9sbERpc3RhbmNlXyAhPT0gMCAmJiBvcHRzLmVuYWJsZVNjcm9sbCA9PT0gdHJ1ZSkge1xyXG4gICAgY29udGV4dC50cmFuc2xhdGUob3B0cy5fc2Nyb2xsRGlzdGFuY2VfLCAwKTtcclxuICB9XHJcbiAgaWYgKG9wdHMudG9vbHRpcCAmJiBvcHRzLnRvb2x0aXAudGV4dExpc3QgJiYgb3B0cy50b29sdGlwLnRleHRMaXN0Lmxlbmd0aCAmJiBwcm9jZXNzID09PSAxKSB7XHJcbiAgICBkcmF3VG9vbFRpcChvcHRzLnRvb2x0aXAudGV4dExpc3QsIG9wdHMudG9vbHRpcC5vZmZzZXQsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgZWFjaFNwYWNpbmcsIHhBeGlzUG9pbnRzKTtcclxuICB9XHJcbiAgY29udGV4dC5yZXN0b3JlKCk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3WEF4aXMoY2F0ZWdvcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcblxyXG4gIGxldCB4QXhpc0RhdGEgPSBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEsXHJcbiAgICB4QXhpc1BvaW50cyA9IHhBeGlzRGF0YS54QXhpc1BvaW50cyxcclxuICAgIHN0YXJ0WCA9IHhBeGlzRGF0YS5zdGFydFgsXHJcbiAgICBlbmRYID0geEF4aXNEYXRhLmVuZFgsXHJcbiAgICBlYWNoU3BhY2luZyA9IHhBeGlzRGF0YS5lYWNoU3BhY2luZztcclxuICB2YXIgYm91bmRhcnlHYXA9J2NlbnRlcic7XHJcbiAgaWYgKG9wdHMudHlwZSA9PSAnbGluZSd8fG9wdHMudHlwZSA9PSAnYXJlYScpe1xyXG4gICAgYm91bmRhcnlHYXA9b3B0cy54QXhpcy5ib3VuZGFyeUdhcDtcclxuICB9XHJcbiAgdmFyIHN0YXJ0WSA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzJdO1xyXG4gIHZhciBlbmRZID0gb3B0cy5hcmVhWzBdO1xyXG5cclxuICAvL+e7mOWItua7muWKqOadoVxyXG4gIGlmIChvcHRzLmVuYWJsZVNjcm9sbCAmJiBvcHRzLnhBeGlzLnNjcm9sbFNob3cpIHtcclxuICAgIHZhciBzY3JvbGxZID0gb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMl0gKyBjb25maWcueEF4aXNIZWlnaHQ7XHJcbiAgICB2YXIgc2Nyb2xsU2NyZWVuV2lkdGggPSBlbmRYIC0gc3RhcnRYO1xyXG4gICAgdmFyIHNjcm9sbFRvdGFsV2lkdGggPSBlYWNoU3BhY2luZyAqICh4QXhpc1BvaW50cy5sZW5ndGggLSAxKTtcclxuICAgIHZhciBzY3JvbGxXaWR0aCA9IHNjcm9sbFNjcmVlbldpZHRoICogc2Nyb2xsU2NyZWVuV2lkdGggLyBzY3JvbGxUb3RhbFdpZHRoO1xyXG4gICAgdmFyIHNjcm9sbExlZnQgPSAwO1xyXG4gICAgaWYgKG9wdHMuX3Njcm9sbERpc3RhbmNlXykge1xyXG4gICAgICBzY3JvbGxMZWZ0ID0gLW9wdHMuX3Njcm9sbERpc3RhbmNlXyAqIChzY3JvbGxTY3JlZW5XaWR0aCkgLyBzY3JvbGxUb3RhbFdpZHRoO1xyXG4gICAgfVxyXG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgIGNvbnRleHQuc2V0TGluZUNhcCgncm91bmQnKTtcclxuICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDYgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShvcHRzLnhBeGlzLnNjcm9sbEJhY2tncm91bmRDb2xvciB8fCBcIiNFRkVCRUZcIik7XHJcbiAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFgsIHNjcm9sbFkpO1xyXG4gICAgY29udGV4dC5saW5lVG8oZW5kWCwgc2Nyb2xsWSk7XHJcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldExpbmVDYXAoJ3JvdW5kJyk7XHJcbiAgICBjb250ZXh0LnNldExpbmVXaWR0aCg2ICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUob3B0cy54QXhpcy5zY3JvbGxDb2xvciB8fCBcIiNBNkE2QTZcIik7XHJcbiAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFggKyBzY3JvbGxMZWZ0LCBzY3JvbGxZKTtcclxuICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCArIHNjcm9sbExlZnQgKyBzY3JvbGxXaWR0aCwgc2Nyb2xsWSk7XHJcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGNvbnRleHQuc2V0TGluZUNhcCgnYnV0dCcpO1xyXG4gIH1cclxuXHJcbiAgY29udGV4dC5zYXZlKCk7XHJcblxyXG4gIGlmIChvcHRzLl9zY3JvbGxEaXN0YW5jZV8gJiYgb3B0cy5fc2Nyb2xsRGlzdGFuY2VfICE9PSAwKSB7XHJcbiAgICBjb250ZXh0LnRyYW5zbGF0ZShvcHRzLl9zY3JvbGxEaXN0YW5jZV8sIDApO1xyXG4gIH1cclxuXHJcblxyXG4gIGlmIChvcHRzLnhBeGlzLmRpc2FibGVHcmlkICE9PSB0cnVlKSB7XHJcbiAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKG9wdHMueEF4aXMuZ3JpZENvbG9yIHx8IFwiI2NjY2NjY1wiKTtcclxuICAgIGNvbnRleHQuc2V0TGluZUNhcCgnYnV0dCcpO1xyXG4gICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICBpZiAob3B0cy54QXhpcy5ncmlkVHlwZSA9PSAnZGFzaCcpIHtcclxuICAgICAgY29udGV4dC5zZXRMaW5lRGFzaChbb3B0cy54QXhpcy5kYXNoTGVuZ3RoLCBvcHRzLnhBeGlzLmRhc2hMZW5ndGhdKTtcclxuICAgIH1cclxuICAgIGlmIChvcHRzLnhBeGlzLnR5cGUgPT09ICdjYWxpYnJhdGlvbicpIHtcclxuICAgICAgeEF4aXNQb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICAgIGlmIChpbmRleCA+IDApIHtcclxuICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtIC0gZWFjaFNwYWNpbmcgLyAyLCBzdGFydFkpO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbSAtIGVhY2hTcGFjaW5nIC8gMiwgc3RhcnRZICsgNCAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb3B0cy54QXhpcy5ncmlkRXZhbCA9IG9wdHMueEF4aXMuZ3JpZEV2YWwgfHwgMTtcclxuICAgICAgeEF4aXNQb2ludHMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICAgIGlmIChpbmRleCAlIG9wdHMueEF4aXMuZ3JpZEV2YWwgPT0gMCkge1xyXG4gICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKGl0ZW0sIHN0YXJ0WSk7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLCBlbmRZKTtcclxuICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGNvbnRleHQuc2V0TGluZURhc2goW10pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8v5LiN57uY5Yi2WOi9tFxyXG4gIGlmIChvcHRzLnhBeGlzLmRpc2FibGVkICE9PSB0cnVlKSB7XHJcbiAgICAvLyDlr7lY6L205YiX6KGo5YGa5oq956iA5aSE55CGXHJcbiAgICBsZXQgdmFsaWRXaWR0aCA9IG9wdHMud2lkdGggLSBvcHRzLnBhZGRpbmdbMV0gLSBvcHRzLnBhZGRpbmdbM10gLSBjb25maWcueUF4aXNXaWR0aCAtIGNvbmZpZy55QXhpc1RpdGxlV2lkdGg7XHJcbiAgICAvL+m7mOiupOWFqOmDqOaYvuekuljovbTmoIfnrb5cclxuICAgIGxldCBtYXhYQXhpc0xpc3RMZW5ndGggPSBjYXRlZ29yaWVzLmxlbmd0aDtcclxuICAgIC8v5aaC5p6c6K6+572u5LqGWOi9tOWNleWxj+aVsOmHj1xyXG4gICAgaWYgKG9wdHMueEF4aXMubGFiZWxDb3VudCkge1xyXG4gICAgICAvL+WmguaenOiuvue9rljovbTlr4bluqZcclxuICAgICAgaWYgKG9wdHMueEF4aXMuaXRlbUNvdW50KSB7XHJcbiAgICAgICAgbWF4WEF4aXNMaXN0TGVuZ3RoID0gTWF0aC5jZWlsKGNhdGVnb3JpZXMubGVuZ3RoIC8gb3B0cy54QXhpcy5pdGVtQ291bnQgKiBvcHRzLnhBeGlzLmxhYmVsQ291bnQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG1heFhBeGlzTGlzdExlbmd0aCA9IG9wdHMueEF4aXMubGFiZWxDb3VudDtcclxuICAgICAgfVxyXG4gICAgICBtYXhYQXhpc0xpc3RMZW5ndGggLT0gMTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmF0aW8gPSBNYXRoLmNlaWwoY2F0ZWdvcmllcy5sZW5ndGggLyBtYXhYQXhpc0xpc3RMZW5ndGgpO1xyXG5cclxuICAgIGxldCBuZXdDYXRlZ29yaWVzID0gW107XHJcbiAgICBsZXQgY2dMZW5ndGggPSBjYXRlZ29yaWVzLmxlbmd0aDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2dMZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAoaSAlIHJhdGlvICE9PSAwKSB7XHJcbiAgICAgICAgbmV3Q2F0ZWdvcmllcy5wdXNoKFwiXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5ld0NhdGVnb3JpZXMucHVzaChjYXRlZ29yaWVzW2ldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgbmV3Q2F0ZWdvcmllc1tjZ0xlbmd0aCAtIDFdID0gY2F0ZWdvcmllc1tjZ0xlbmd0aCAtIDFdO1xyXG5cclxuICAgIHZhciB4QXhpc0ZvbnRTaXplID0gb3B0cy54QXhpcy5mb250U2l6ZSB8fCBjb25maWcuZm9udFNpemU7XHJcbiAgICBpZiAoY29uZmlnLl94QXhpc1RleHRBbmdsZV8gPT09IDApIHtcclxuICAgICAgbmV3Q2F0ZWdvcmllcy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgdmFyIG9mZnNldCA9IC0gbWVhc3VyZVRleHQoaXRlbSwgeEF4aXNGb250U2l6ZSkgLyAyO1xyXG4gICAgICAgIGlmKGJvdW5kYXJ5R2FwID09ICdjZW50ZXInKXtcclxuICAgICAgICAgIG9mZnNldCs9ZWFjaFNwYWNpbmcgLyAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0Rm9udFNpemUoeEF4aXNGb250U2l6ZSk7XHJcbiAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUob3B0cy54QXhpcy5mb250Q29sb3IgfHwgJyM2NjY2NjYnKTtcclxuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KGl0ZW0sIHhBeGlzUG9pbnRzW2luZGV4XSArIG9mZnNldCwgc3RhcnRZICsgeEF4aXNGb250U2l6ZSArIChjb25maWcueEF4aXNIZWlnaHQgLSB4QXhpc0ZvbnRTaXplKSAvIDIpO1xyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbmV3Q2F0ZWdvcmllcy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnNldEZvbnRTaXplKHhBeGlzRm9udFNpemUpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKG9wdHMueEF4aXMuZm9udENvbG9yIHx8ICcjNjY2NjY2Jyk7XHJcbiAgICAgICAgdmFyIHRleHRXaWR0aCA9IG1lYXN1cmVUZXh0KGl0ZW0pO1xyXG4gICAgICAgIHZhciBvZmZzZXQgPSAtIHRleHRXaWR0aDtcclxuICAgICAgICBpZihib3VuZGFyeUdhcCA9PSAnY2VudGVyJyl7XHJcbiAgICAgICAgICBvZmZzZXQrPWVhY2hTcGFjaW5nIC8gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF9jYWxSb3RhdGVUcmFuc2xhdGUgPSBjYWxSb3RhdGVUcmFuc2xhdGUoeEF4aXNQb2ludHNbaW5kZXhdICsgZWFjaFNwYWNpbmcgLyAyLCBzdGFydFkgKyB4QXhpc0ZvbnRTaXplIC8gMiArIDUsIG9wdHMuaGVpZ2h0KSxcclxuICAgICAgICAgIHRyYW5zWCA9IF9jYWxSb3RhdGVUcmFuc2xhdGUudHJhbnNYLFxyXG4gICAgICAgICAgdHJhbnNZID0gX2NhbFJvdGF0ZVRyYW5zbGF0ZS50cmFuc1k7XHJcblxyXG4gICAgICAgIGNvbnRleHQucm90YXRlKC0xICogY29uZmlnLl94QXhpc1RleHRBbmdsZV8pO1xyXG4gICAgICAgIGNvbnRleHQudHJhbnNsYXRlKHRyYW5zWCwgdHJhbnNZKTtcclxuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KGl0ZW0sIHhBeGlzUG9pbnRzW2luZGV4XSArIG9mZnNldCwgc3RhcnRZICsgeEF4aXNGb250U2l6ZSArIDUpO1xyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbnRleHQucmVzdG9yZSgpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1lBeGlzR3JpZChjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICBpZiAob3B0cy55QXhpcy5kaXNhYmxlR3JpZCA9PT0gdHJ1ZSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBsZXQgc3BhY2luZ1ZhbGlkID0gb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMF0gLSBvcHRzLmFyZWFbMl07XHJcbiAgbGV0IGVhY2hTcGFjaW5nID0gc3BhY2luZ1ZhbGlkIC8gY29uZmlnLnlBeGlzU3BsaXQ7XHJcbiAgbGV0IHN0YXJ0WCA9IG9wdHMuYXJlYVszXTtcclxuICBsZXQgeEF4aXNQb2ludHMgPSBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEueEF4aXNQb2ludHMsXHJcbiAgICB4QXhpc2VhY2hTcGFjaW5nID0gb3B0cy5jaGFydERhdGEueEF4aXNEYXRhLmVhY2hTcGFjaW5nO1xyXG4gIGxldCBUb3RhbFdpZHRoID0geEF4aXNlYWNoU3BhY2luZyAqICh4QXhpc1BvaW50cy5sZW5ndGggLSAxKTtcclxuICBsZXQgZW5kWCA9IHN0YXJ0WCArIFRvdGFsV2lkdGg7XHJcblxyXG4gIGxldCBwb2ludHMgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbmZpZy55QXhpc1NwbGl0ICsgMTsgaSsrKSB7XHJcbiAgICBwb2ludHMucHVzaChvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVsyXSAtIGVhY2hTcGFjaW5nICogaSk7XHJcbiAgfVxyXG5cclxuICBjb250ZXh0LnNhdmUoKTtcclxuICBpZiAob3B0cy5fc2Nyb2xsRGlzdGFuY2VfICYmIG9wdHMuX3Njcm9sbERpc3RhbmNlXyAhPT0gMCkge1xyXG4gICAgY29udGV4dC50cmFuc2xhdGUob3B0cy5fc2Nyb2xsRGlzdGFuY2VfLCAwKTtcclxuICB9XHJcblxyXG4gIGlmIChvcHRzLnlBeGlzLmdyaWRUeXBlID09ICdkYXNoJykge1xyXG4gICAgY29udGV4dC5zZXRMaW5lRGFzaChbb3B0cy55QXhpcy5kYXNoTGVuZ3RoLCBvcHRzLnlBeGlzLmRhc2hMZW5ndGhdKTtcclxuICB9XHJcbiAgY29udGV4dC5zZXRTdHJva2VTdHlsZShvcHRzLnlBeGlzLmdyaWRDb2xvciB8fCBcIiNjY2NjY2NcIik7XHJcbiAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0Lm1vdmVUbyhzdGFydFgsIGl0ZW0pO1xyXG4gICAgY29udGV4dC5saW5lVG8oZW5kWCwgaXRlbSk7XHJcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gIH0pO1xyXG4gIGNvbnRleHQuc2V0TGluZURhc2goW10pO1xyXG5cclxuICBjb250ZXh0LnJlc3RvcmUoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1lBeGlzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgaWYgKG9wdHMueUF4aXMuZGlzYWJsZWQgPT09IHRydWUpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgbGV0IHJhbmdlc0Zvcm1hdCA9IG9wdHMuY2hhcnREYXRhLnlBeGlzRGF0YS5yYW5nZXNGb3JtYXQ7XHJcbiAgdmFyIHNwYWNpbmdWYWxpZCA9IG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzBdIC0gb3B0cy5hcmVhWzJdO1xyXG4gIHZhciBlYWNoU3BhY2luZyA9IE1hdGguZmxvb3Ioc3BhY2luZ1ZhbGlkIC8gY29uZmlnLnlBeGlzU3BsaXQpO1xyXG4gIHZhciBzdGFydFggPSBvcHRzLmFyZWFbM107XHJcbiAgdmFyIGVuZFggPSBvcHRzLndpZHRoIC0gb3B0cy5hcmVhWzFdO1xyXG4gIHZhciBlbmRZID0gb3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMl07XHJcbiAgdmFyIGZpbGxFbmRZID0gZW5kWSArIGNvbmZpZy54QXhpc0hlaWdodDtcclxuICBpZiAob3B0cy54QXhpcy5zY3JvbGxTaG93KSB7XHJcbiAgICBmaWxsRW5kWSAtPSAzICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIH1cclxuICAvLyBzZXQgWUF4aXMgYmFja2dyb3VuZFxyXG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgY29udGV4dC5zZXRGaWxsU3R5bGUob3B0cy5iYWNrZ3JvdW5kIHx8ICcjZmZmZmZmJyk7XHJcbiAgaWYgKG9wdHMuX3Njcm9sbERpc3RhbmNlXyA8IDApIHtcclxuICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgc3RhcnRYLCBmaWxsRW5kWSk7XHJcbiAgfVxyXG4gIGlmKG9wdHMuZW5hYmxlU2Nyb2xsID09IHRydWUpe1xyXG4gICAgY29udGV4dC5maWxsUmVjdChlbmRYLCAwLCBvcHRzLndpZHRoLCBmaWxsRW5kWSk7XHJcbiAgfVxyXG4gIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgY29udGV4dC5zdHJva2UoKTtcclxuXHJcbiAgdmFyIHBvaW50cyA9IFtdO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IGNvbmZpZy55QXhpc1NwbGl0OyBpKyspIHtcclxuICAgIHBvaW50cy5wdXNoKG9wdHMuYXJlYVswXSArIGVhY2hTcGFjaW5nICogaSk7XHJcbiAgfVxyXG5cclxuICB2YXIgeUF4aXNGb250U2l6ZSA9IG9wdHMueUF4aXMuZm9udFNpemUgfHwgY29uZmlnLmZvbnRTaXplO1xyXG4gIHJhbmdlc0Zvcm1hdC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICB2YXIgcG9zID0gcG9pbnRzW2luZGV4XSA/IHBvaW50c1tpbmRleF0gOiBlbmRZO1xyXG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgIGNvbnRleHQuc2V0Rm9udFNpemUoeUF4aXNGb250U2l6ZSk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShvcHRzLnlBeGlzLmZvbnRDb2xvciB8fCAnIzY2NjY2NicpO1xyXG4gICAgY29udGV4dC5maWxsVGV4dChTdHJpbmcoaXRlbSksIG9wdHMuYXJlYVszXSAtIGNvbmZpZy55QXhpc1dpZHRoLCBwb3MgKyB5QXhpc0ZvbnRTaXplIC8gMik7XHJcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgY29udGV4dC5zdHJva2UoKTtcclxuICB9KTtcclxuXHJcbiAgaWYgKG9wdHMueUF4aXMudGl0bGUpIHtcclxuICAgIGRyYXdZQXhpc1RpdGxlKG9wdHMueUF4aXMudGl0bGUsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3TGVnZW5kKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBjaGFydERhdGEpIHtcclxuICBpZiAob3B0cy5sZWdlbmQuc2hvdyA9PT0gZmFsc2UpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgbGV0IGxlZ2VuZERhdGEgPSBjaGFydERhdGEubGVnZW5kRGF0YTtcclxuICBsZXQgbGVnZW5kTGlzdCA9IGxlZ2VuZERhdGEucG9pbnRzO1xyXG4gIGxldCBsZWdlbmRBcmVhID0gbGVnZW5kRGF0YS5hcmVhO1xyXG4gIGxldCBwYWRkaW5nID0gb3B0cy5sZWdlbmQucGFkZGluZztcclxuICBsZXQgZm9udFNpemUgPSBvcHRzLmxlZ2VuZC5mb250U2l6ZTtcclxuICBsZXQgc2hhcGVXaWR0aCA9IDE1ICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIGxldCBzaGFwZVJpZ2h0ID0gNSAqIG9wdHMucGl4ZWxSYXRpbztcclxuICBsZXQgaXRlbUdhcCA9IG9wdHMubGVnZW5kLml0ZW1HYXA7XHJcbiAgbGV0IGxpbmVIZWlnaHQgPSBNYXRoLm1heChvcHRzLmxlZ2VuZC5saW5lSGVpZ2h0ICogb3B0cy5waXhlbFJhdGlvLCBmb250U2l6ZSk7XHJcblxyXG4gIC8v55S76IOM5pmv5Y+K6L655qGGXHJcbiAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICBjb250ZXh0LnNldExpbmVXaWR0aChvcHRzLmxlZ2VuZC5ib3JkZXJXaWR0aCk7XHJcbiAgY29udGV4dC5zZXRTdHJva2VTdHlsZShvcHRzLmxlZ2VuZC5ib3JkZXJDb2xvcik7XHJcbiAgY29udGV4dC5zZXRGaWxsU3R5bGUob3B0cy5sZWdlbmQuYmFja2dyb3VuZENvbG9yKTtcclxuICBjb250ZXh0Lm1vdmVUbyhsZWdlbmRBcmVhLnN0YXJ0LngsIGxlZ2VuZEFyZWEuc3RhcnQueSk7XHJcbiAgY29udGV4dC5yZWN0KGxlZ2VuZEFyZWEuc3RhcnQueCwgbGVnZW5kQXJlYS5zdGFydC55LCBsZWdlbmRBcmVhLndpZHRoLCBsZWdlbmRBcmVhLmhlaWdodCk7XHJcbiAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICBjb250ZXh0LmZpbGwoKTtcclxuICBjb250ZXh0LnN0cm9rZSgpO1xyXG5cclxuICBsZWdlbmRMaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbUxpc3QsIGxpc3RJbmRleCkge1xyXG4gICAgbGV0IHdpZHRoID0gMDtcclxuICAgIGxldCBoZWlnaHQgPSAwO1xyXG4gICAgd2lkdGggPSBsZWdlbmREYXRhLndpZHRoQXJyW2xpc3RJbmRleF07XHJcbiAgICBoZWlnaHQgPSBsZWdlbmREYXRhLmhlaWdodEFycltsaXN0SW5kZXhdO1xyXG4gICAgbGV0IHN0YXJ0WCA9IDA7XHJcbiAgICBsZXQgc3RhcnRZID0gMDtcclxuICAgIGlmIChvcHRzLmxlZ2VuZC5wb3NpdGlvbiA9PSAndG9wJyB8fCBvcHRzLmxlZ2VuZC5wb3NpdGlvbiA9PSAnYm90dG9tJykge1xyXG4gICAgICBzdGFydFggPSBsZWdlbmRBcmVhLnN0YXJ0LnggKyAobGVnZW5kQXJlYS53aWR0aCAtIHdpZHRoKSAvIDI7XHJcbiAgICAgIHN0YXJ0WSA9IGxlZ2VuZEFyZWEuc3RhcnQueSArIHBhZGRpbmcgKyBsaXN0SW5kZXggKiBsaW5lSGVpZ2h0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKGxpc3RJbmRleCA9PSAwKSB7XHJcbiAgICAgICAgd2lkdGggPSAwO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHdpZHRoID0gbGVnZW5kRGF0YS53aWR0aEFycltsaXN0SW5kZXggLSAxXTtcclxuICAgICAgfVxyXG4gICAgICBzdGFydFggPSBsZWdlbmRBcmVhLnN0YXJ0LnggKyBwYWRkaW5nICsgd2lkdGg7XHJcbiAgICAgIHN0YXJ0WSA9IGxlZ2VuZEFyZWEuc3RhcnQueSArIHBhZGRpbmcgKyAobGVnZW5kQXJlYS5oZWlnaHQgLSBoZWlnaHQpIC8gMjtcclxuICAgIH1cclxuXHJcbiAgICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1MaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGxldCBpdGVtID0gaXRlbUxpc3RbaV07XHJcbiAgICAgIGl0ZW0uYXJlYSA9IFswLCAwLCAwLCAwXTtcclxuICAgICAgaXRlbS5hcmVhWzBdID0gc3RhcnRYO1xyXG4gICAgICBpdGVtLmFyZWFbMV0gPSBzdGFydFk7XHJcbiAgICAgIGl0ZW0uYXJlYVszXSA9IHN0YXJ0WSArIGxpbmVIZWlnaHQ7XHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGl0ZW0uc2hvdyA/IGl0ZW0uY29sb3IgOiBvcHRzLmxlZ2VuZC5oaWRkZW5Db2xvcik7XHJcbiAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0uc2hvdyA/IGl0ZW0uY29sb3IgOiBvcHRzLmxlZ2VuZC5oaWRkZW5Db2xvcik7XHJcbiAgICAgIHN3aXRjaCAoaXRlbS5sZWdlbmRTaGFwZSkge1xyXG4gICAgICAgIGNhc2UgJ2xpbmUnOlxyXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0IC0gMiAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KHN0YXJ0WCwgc3RhcnRZICsgMC41ICogbGluZUhlaWdodCAtIDIgKiBvcHRzLnBpeGVsUmF0aW8sIDE1ICogb3B0cy5waXhlbFJhdGlvLCA0ICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3RyaWFuZ2xlJzpcclxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCArIDcuNSAqIG9wdHMucGl4ZWxSYXRpbywgc3RhcnRZICsgMC41ICogbGluZUhlaWdodCAtIDUgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYICsgMi41ICogb3B0cy5waXhlbFJhdGlvLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0ICsgNSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzdGFydFggKyAxMi41ICogb3B0cy5waXhlbFJhdGlvLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0ICsgNSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzdGFydFggKyA3LjUgKiBvcHRzLnBpeGVsUmF0aW8sIHN0YXJ0WSArIDAuNSAqIGxpbmVIZWlnaHQgLSA1ICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2RpYW1vbmQnOlxyXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYICsgNy41ICogb3B0cy5waXhlbFJhdGlvLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0IC0gNSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzdGFydFggKyAyLjUgKiBvcHRzLnBpeGVsUmF0aW8sIHN0YXJ0WSArIDAuNSAqIGxpbmVIZWlnaHQpO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRYICsgNy41ICogb3B0cy5waXhlbFJhdGlvLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0ICsgNSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzdGFydFggKyAxMi41ICogb3B0cy5waXhlbFJhdGlvLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0KTtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKHN0YXJ0WCArIDcuNSAqIG9wdHMucGl4ZWxSYXRpbywgc3RhcnRZICsgMC41ICogbGluZUhlaWdodCAtIDUgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnY2lyY2xlJzpcclxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCArIDcuNSAqIG9wdHMucGl4ZWxSYXRpbywgc3RhcnRZICsgMC41ICogbGluZUhlaWdodCk7XHJcbiAgICAgICAgICBjb250ZXh0LmFyYyhzdGFydFggKyA3LjUgKiBvcHRzLnBpeGVsUmF0aW8sIHN0YXJ0WSArIDAuNSAqIGxpbmVIZWlnaHQsIDUgKiBvcHRzLnBpeGVsUmF0aW8sIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3JlY3QnOlxyXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0IC0gNSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KHN0YXJ0WCwgc3RhcnRZICsgMC41ICogbGluZUhlaWdodCAtIDUgKiBvcHRzLnBpeGVsUmF0aW8sIDE1ICogb3B0cy5waXhlbFJhdGlvLCAxMCAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLCBzdGFydFkgKyAwLjUgKiBsaW5lSGVpZ2h0IC0gNSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KHN0YXJ0WCwgc3RhcnRZICsgMC41ICogbGluZUhlaWdodCAtIDUgKiBvcHRzLnBpeGVsUmF0aW8sIDE1ICogb3B0cy5waXhlbFJhdGlvLCAxMCAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgIH1cclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcblxyXG4gICAgICBzdGFydFggKz0gc2hhcGVXaWR0aCArIHNoYXBlUmlnaHQ7XHJcbiAgICAgIGxldCBmb250VHJhbnMgPSAwLjUgKiBsaW5lSGVpZ2h0ICsgMC41ICogZm9udFNpemUgLSAyO1xyXG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjb250ZXh0LnNldEZvbnRTaXplKGZvbnRTaXplKTtcclxuICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaXRlbS5zaG93ID8gb3B0cy5sZWdlbmQuZm9udENvbG9yIDogb3B0cy5sZWdlbmQuaGlkZGVuQ29sb3IpO1xyXG4gICAgICBjb250ZXh0LmZpbGxUZXh0KGl0ZW0ubmFtZSwgc3RhcnRYLCBzdGFydFkgKyBmb250VHJhbnMpO1xyXG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICBpZiAob3B0cy5sZWdlbmQucG9zaXRpb24gPT0gJ3RvcCcgfHwgb3B0cy5sZWdlbmQucG9zaXRpb24gPT0gJ2JvdHRvbScpIHtcclxuICAgICAgICBzdGFydFggKz0gbWVhc3VyZVRleHQoaXRlbS5uYW1lLCBmb250U2l6ZSkgKyBpdGVtR2FwO1xyXG4gICAgICAgIGl0ZW0uYXJlYVsyXSA9IHN0YXJ0WDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpdGVtLmFyZWFbMl0gPSBzdGFydFggKyBtZWFzdXJlVGV4dChpdGVtLm5hbWUsIGZvbnRTaXplKSArIGl0ZW1HYXA7O1xyXG4gICAgICAgIHN0YXJ0WCAtPSBzaGFwZVdpZHRoICsgc2hhcGVSaWdodDtcclxuICAgICAgICBzdGFydFkgKz0gbGluZUhlaWdodDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3UGllRGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAxO1xyXG4gIHZhciBwaWVPcHRpb24gPSBhc3NpZ24oe30sIHtcclxuICAgIGFjdGl2ZU9wYWNpdHk6IDAuNSxcclxuICAgIGFjdGl2ZVJhZGl1czogMTAgKiBvcHRzLnBpeGVsUmF0aW8sXHJcbiAgICBvZmZzZXRBbmdsZTogMCxcclxuICAgIGxhYmVsV2lkdGg6IDE1ICogb3B0cy5waXhlbFJhdGlvLFxyXG4gICAgcmluZ1dpZHRoOiAwLFxyXG4gICAgYm9yZGVyOmZhbHNlLFxyXG4gICAgYm9yZGVyV2lkdGg6MixcclxuICAgIGJvcmRlckNvbG9yOicjRkZGRkZGJ1xyXG4gIH0sIG9wdHMuZXh0cmEucGllKTtcclxuICB2YXIgY2VudGVyUG9zaXRpb24gPSB7XHJcbiAgICB4OiBvcHRzLmFyZWFbM10gKyAob3B0cy53aWR0aCAtIG9wdHMuYXJlYVsxXSAtIG9wdHMuYXJlYVszXSkgLyAyLFxyXG4gICAgeTogb3B0cy5hcmVhWzBdICsgKG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzBdIC0gb3B0cy5hcmVhWzJdKSAvIDJcclxuICB9O1xyXG4gIGlmIChjb25maWcucGllQ2hhcnRMaW5lUGFkZGluZyA9PSAwKSB7XHJcbiAgICBjb25maWcucGllQ2hhcnRMaW5lUGFkZGluZyA9IHBpZU9wdGlvbi5hY3RpdmVSYWRpdXM7XHJcbiAgfVxyXG5cclxuICB2YXIgcmFkaXVzID0gTWF0aC5taW4oKG9wdHMud2lkdGggLSBvcHRzLmFyZWFbMV0gLSBvcHRzLmFyZWFbM10pIC8gMiAtIGNvbmZpZy5waWVDaGFydExpbmVQYWRkaW5nIC0gY29uZmlnLnBpZUNoYXJ0VGV4dFBhZGRpbmcgLSBjb25maWcuX3BpZVRleHRNYXhMZW5ndGhfLCAob3B0cy5oZWlnaHQgLSBvcHRzLmFyZWFbMF0gLSBvcHRzLmFyZWFbMl0pIC8gMiAtIGNvbmZpZy5waWVDaGFydExpbmVQYWRkaW5nIC0gY29uZmlnLnBpZUNoYXJ0VGV4dFBhZGRpbmcpO1xyXG5cclxuICBzZXJpZXMgPSBnZXRQaWVEYXRhUG9pbnRzKHNlcmllcywgcmFkaXVzLCBwcm9jZXNzKTtcclxuXHJcbiAgdmFyIGFjdGl2ZVJhZGl1cyA9IHBpZU9wdGlvbi5hY3RpdmVSYWRpdXM7XHJcblxyXG4gIHNlcmllcyA9IHNlcmllcy5tYXAoZnVuY3Rpb24oZWFjaFNlcmllcykge1xyXG4gICAgZWFjaFNlcmllcy5fc3RhcnRfICs9IChwaWVPcHRpb24ub2Zmc2V0QW5nbGUpICogTWF0aC5QSSAvIDE4MDtcclxuICAgIHJldHVybiBlYWNoU2VyaWVzO1xyXG4gIH0pO1xyXG4gIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uKGVhY2hTZXJpZXMsIHNlcmllc0luZGV4KSB7XHJcbiAgICBpZiAob3B0cy50b29sdGlwKSB7XHJcbiAgICAgIGlmIChvcHRzLnRvb2x0aXAuaW5kZXggPT0gc2VyaWVzSW5kZXgpIHtcclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGhleFRvUmdiKGVhY2hTZXJpZXMuY29sb3IsIG9wdHMuZXh0cmEucGllLmFjdGl2ZU9wYWNpdHkgfHwgMC41KSk7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSk7XHJcbiAgICAgICAgY29udGV4dC5hcmMoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSwgZWFjaFNlcmllcy5fcmFkaXVzXyArIGFjdGl2ZVJhZGl1cywgZWFjaFNlcmllcy5fc3RhcnRfLFxyXG4gICAgICAgICAgZWFjaFNlcmllcy5fc3RhcnRfICsgMiAqXHJcbiAgICAgICAgICBlYWNoU2VyaWVzLl9wcm9wb3J0aW9uXyAqIE1hdGguUEkpO1xyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldExpbmVXaWR0aChwaWVPcHRpb24uYm9yZGVyV2lkdGggKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgY29udGV4dC5saW5lSm9pbiA9IFwicm91bmRcIjtcclxuICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUocGllT3B0aW9uLmJvcmRlckNvbG9yKTtcclxuICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGVhY2hTZXJpZXMuY29sb3IpO1xyXG4gICAgY29udGV4dC5tb3ZlVG8oY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSk7XHJcbiAgICBjb250ZXh0LmFyYyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55LCBlYWNoU2VyaWVzLl9yYWRpdXNfLCBlYWNoU2VyaWVzLl9zdGFydF8sIGVhY2hTZXJpZXMuX3N0YXJ0XyArIDIgKiBlYWNoU2VyaWVzLl9wcm9wb3J0aW9uXyAqIE1hdGguUEkpO1xyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgaWYgKHBpZU9wdGlvbi5ib3JkZXIgPT0gdHJ1ZSkge1xyXG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBpZiAob3B0cy50eXBlID09PSAncmluZycpIHtcclxuICAgIHZhciBpbm5lclBpZVdpZHRoID0gcmFkaXVzICogMC42O1xyXG4gICAgaWYgKHR5cGVvZiBvcHRzLmV4dHJhLnBpZS5yaW5nV2lkdGggPT09ICdudW1iZXInICYmIG9wdHMuZXh0cmEucGllLnJpbmdXaWR0aCA+IDApIHtcclxuICAgICAgaW5uZXJQaWVXaWR0aCA9IE1hdGgubWF4KDAsIHJhZGl1cyAtIG9wdHMuZXh0cmEucGllLnJpbmdXaWR0aCk7XHJcbiAgICB9XHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRGaWxsU3R5bGUob3B0cy5iYWNrZ3JvdW5kIHx8ICcjZmZmZmZmJyk7XHJcbiAgICBjb250ZXh0Lm1vdmVUbyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55KTtcclxuICAgIGNvbnRleHQuYXJjKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnksIGlubmVyUGllV2lkdGgsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICBjb250ZXh0LmZpbGwoKTtcclxuICB9XHJcblxyXG4gIGlmIChvcHRzLmRhdGFMYWJlbCAhPT0gZmFsc2UgJiYgcHJvY2VzcyA9PT0gMSkge1xyXG4gICAgdmFyIHZhbGlkID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc2VyaWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgIGlmIChzZXJpZXNbaV0uZGF0YSA+IDApIHtcclxuICAgICAgICB2YWxpZCA9IHRydWU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodmFsaWQpIHtcclxuICAgICAgZHJhd1BpZVRleHQoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHJhZGl1cywgY2VudGVyUG9zaXRpb24pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKHByb2Nlc3MgPT09IDEgJiYgb3B0cy50eXBlID09PSAncmluZycpIHtcclxuICAgIGRyYXdSaW5nVGl0bGUob3B0cywgY29uZmlnLCBjb250ZXh0LCBjZW50ZXJQb3NpdGlvbik7XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgY2VudGVyOiBjZW50ZXJQb3NpdGlvbixcclxuICAgIHJhZGl1czogcmFkaXVzLFxyXG4gICAgc2VyaWVzOiBzZXJpZXNcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3Um9zZURhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMTtcclxuICB2YXIgcm9zZU9wdGlvbiA9IGFzc2lnbih7fSwge1xyXG4gICAgdHlwZTogJ2FyZWEnLFxyXG4gICAgYWN0aXZlT3BhY2l0eTogMC41LFxyXG4gICAgYWN0aXZlUmFkaXVzOiAxMCAqIG9wdHMucGl4ZWxSYXRpbyxcclxuICAgIG9mZnNldEFuZ2xlOiAwLFxyXG4gICAgbGFiZWxXaWR0aDogMTUgKiBvcHRzLnBpeGVsUmF0aW8sXHJcbiAgICBib3JkZXI6ZmFsc2UsXHJcbiAgICBib3JkZXJXaWR0aDoyLFxyXG4gICAgYm9yZGVyQ29sb3I6JyNGRkZGRkYnXHJcbiAgfSwgb3B0cy5leHRyYS5yb3NlKTtcclxuICBpZiAoY29uZmlnLnBpZUNoYXJ0TGluZVBhZGRpbmcgPT0gMCkge1xyXG4gICAgY29uZmlnLnBpZUNoYXJ0TGluZVBhZGRpbmcgPSByb3NlT3B0aW9uLmFjdGl2ZVJhZGl1cztcclxuICB9XHJcbiAgdmFyIGNlbnRlclBvc2l0aW9uID0ge1xyXG4gICAgeDogb3B0cy5hcmVhWzNdICsgKG9wdHMud2lkdGggLSBvcHRzLmFyZWFbMV0gLSBvcHRzLmFyZWFbM10pIC8gMixcclxuICAgIHk6IG9wdHMuYXJlYVswXSArIChvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVswXSAtIG9wdHMuYXJlYVsyXSkgLyAyXHJcbiAgfTtcclxuICAgdmFyIHJhZGl1cyA9IE1hdGgubWluKChvcHRzLndpZHRoIC0gb3B0cy5hcmVhWzFdIC0gb3B0cy5hcmVhWzNdKSAvIDIgLSBjb25maWcucGllQ2hhcnRMaW5lUGFkZGluZyAtIGNvbmZpZy5waWVDaGFydFRleHRQYWRkaW5nIC0gY29uZmlnLl9waWVUZXh0TWF4TGVuZ3RoXywgKG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzBdIC0gb3B0cy5hcmVhWzJdKSAvIDIgLSBjb25maWcucGllQ2hhcnRMaW5lUGFkZGluZyAtIGNvbmZpZy5waWVDaGFydFRleHRQYWRkaW5nKTtcclxuICB2YXIgbWluUmFkaXVzID0gcm9zZU9wdGlvbi5taW5SYWRpdXMgfHwgcmFkaXVzICogMC41O1xyXG5cclxuICBzZXJpZXMgPSBnZXRSb3NlRGF0YVBvaW50cyhzZXJpZXMsIHJvc2VPcHRpb24udHlwZSwgbWluUmFkaXVzLCByYWRpdXMsIHByb2Nlc3MpO1xyXG5cclxuICB2YXIgYWN0aXZlUmFkaXVzID0gcm9zZU9wdGlvbi5hY3RpdmVSYWRpdXM7XHJcblxyXG4gIHNlcmllcyA9IHNlcmllcy5tYXAoZnVuY3Rpb24oZWFjaFNlcmllcykge1xyXG4gICAgZWFjaFNlcmllcy5fc3RhcnRfICs9IChyb3NlT3B0aW9uLm9mZnNldEFuZ2xlIHx8IDApICogTWF0aC5QSSAvIDE4MDtcclxuICAgIHJldHVybiBlYWNoU2VyaWVzO1xyXG4gIH0pO1xyXG5cclxuICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbihlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xyXG4gICAgaWYgKG9wdHMudG9vbHRpcCkge1xyXG4gICAgICBpZiAob3B0cy50b29sdGlwLmluZGV4ID09IHNlcmllc0luZGV4KSB7XHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShoZXhUb1JnYihlYWNoU2VyaWVzLmNvbG9yLCByb3NlT3B0aW9uLmFjdGl2ZU9wYWNpdHkgfHwgMC41KSk7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSk7XHJcbiAgICAgICAgY29udGV4dC5hcmMoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSwgYWN0aXZlUmFkaXVzICsgZWFjaFNlcmllcy5fcmFkaXVzXywgZWFjaFNlcmllcy5fc3RhcnRfLFxyXG4gICAgICAgICAgZWFjaFNlcmllcy5fc3RhcnRfICsgMiAqIGVhY2hTZXJpZXMuX3Jvc2VfcHJvcG9ydGlvbl8gKiBNYXRoLlBJKTtcclxuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRMaW5lV2lkdGgocm9zZU9wdGlvbi5ib3JkZXJXaWR0aCAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICBjb250ZXh0LmxpbmVKb2luID0gXCJyb3VuZFwiO1xyXG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShyb3NlT3B0aW9uLmJvcmRlckNvbG9yKTtcclxuICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGVhY2hTZXJpZXMuY29sb3IpO1xyXG4gICAgY29udGV4dC5tb3ZlVG8oY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSk7XHJcbiAgICBjb250ZXh0LmFyYyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55LCBlYWNoU2VyaWVzLl9yYWRpdXNfLCBlYWNoU2VyaWVzLl9zdGFydF8sIGVhY2hTZXJpZXMuX3N0YXJ0XyArIDIgKlxyXG4gICAgICBlYWNoU2VyaWVzLl9yb3NlX3Byb3BvcnRpb25fICogTWF0aC5QSSk7XHJcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgY29udGV4dC5maWxsKCk7XHJcbiAgICBpZiAocm9zZU9wdGlvbi5ib3JkZXIgPT0gdHJ1ZSkge1xyXG4gICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBpZiAob3B0cy5kYXRhTGFiZWwgIT09IGZhbHNlICYmIHByb2Nlc3MgPT09IDEpIHtcclxuICAgIHZhciB2YWxpZCA9IGZhbHNlO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNlcmllcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICBpZiAoc2VyaWVzW2ldLmRhdGEgPiAwKSB7XHJcbiAgICAgICAgdmFsaWQgPSB0cnVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgIGRyYXdQaWVUZXh0KHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCByYWRpdXMsIGNlbnRlclBvc2l0aW9uKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBjZW50ZXI6IGNlbnRlclBvc2l0aW9uLFxyXG4gICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICBzZXJpZXM6IHNlcmllc1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdBcmNiYXJEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDE7XHJcbiAgdmFyIGFyY2Jhck9wdGlvbiA9IGFzc2lnbih7fSwge1xyXG4gICAgc3RhcnRBbmdsZTogMC43NSxcclxuICAgIGVuZEFuZ2xlOiAwLjI1LFxyXG4gICAgdHlwZTogJ2RlZmF1bHQnLFxyXG4gICAgd2lkdGg6IDEyICogb3B0cy5waXhlbFJhdGlvXHJcbiAgfSwgb3B0cy5leHRyYS5hcmNiYXIpO1xyXG5cclxuICBzZXJpZXMgPSBnZXRBcmNiYXJEYXRhUG9pbnRzKHNlcmllcywgYXJjYmFyT3B0aW9uLCBwcm9jZXNzKTtcclxuICB2YXIgY2VudGVyUG9zaXRpb24gPSB7XHJcbiAgICB4OiBvcHRzLndpZHRoIC8gMixcclxuICAgIHk6IG9wdHMuaGVpZ2h0IC8gMlxyXG4gIH07XHJcbiAgdmFyIHJhZGl1cyA9IE1hdGgubWluKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnkpO1xyXG4gIHJhZGl1cyAtPSA1ICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIHJhZGl1cyAtPSBhcmNiYXJPcHRpb24ud2lkdGggLyAyO1xyXG5cclxuICAvL+iDjOaZr+minOiJslxyXG4gIGNvbnRleHQuc2V0TGluZVdpZHRoKGFyY2Jhck9wdGlvbi53aWR0aCk7XHJcbiAgY29udGV4dC5zZXRTdHJva2VTdHlsZShhcmNiYXJPcHRpb24uYmFja2dyb3VuZENvbG9yIHx8ICcjRTlFOUU5Jyk7XHJcbiAgY29udGV4dC5zZXRMaW5lQ2FwKCdyb3VuZCcpO1xyXG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgaWYgKGFyY2Jhck9wdGlvbi50eXBlID09ICdkZWZhdWx0Jykge1xyXG4gICAgY29udGV4dC5hcmMoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSwgcmFkaXVzLCBhcmNiYXJPcHRpb24uc3RhcnRBbmdsZSAqIE1hdGguUEksIGFyY2Jhck9wdGlvbi5lbmRBbmdsZSAqXHJcbiAgICAgIE1hdGguUEksIGZhbHNlKTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29udGV4dC5hcmMoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSwgcmFkaXVzLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xyXG4gIH1cclxuICBjb250ZXh0LnN0cm9rZSgpO1xyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IGVhY2hTZXJpZXMgPSBzZXJpZXNbaV07XHJcbiAgICBjb250ZXh0LnNldExpbmVXaWR0aChhcmNiYXJPcHRpb24ud2lkdGgpO1xyXG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShlYWNoU2VyaWVzLmNvbG9yKTtcclxuICAgIGNvbnRleHQuc2V0TGluZUNhcCgncm91bmQnKTtcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LmFyYyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55LCByYWRpdXMsIGFyY2Jhck9wdGlvbi5zdGFydEFuZ2xlICogTWF0aC5QSSwgZWFjaFNlcmllcy5fcHJvcG9ydGlvbl8gKlxyXG4gICAgICBNYXRoLlBJLCBmYWxzZSk7XHJcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gIH1cclxuXHJcbiAgZHJhd1JpbmdUaXRsZShvcHRzLCBjb25maWcsIGNvbnRleHQsIGNlbnRlclBvc2l0aW9uKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGNlbnRlcjogY2VudGVyUG9zaXRpb24sXHJcbiAgICByYWRpdXM6IHJhZGl1cyxcclxuICAgIHNlcmllczogc2VyaWVzXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0dhdWdlRGF0YVBvaW50cyhjYXRlZ29yaWVzLCBzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAxO1xyXG4gIHZhciBnYXVnZU9wdGlvbiA9IGFzc2lnbih7fSwge1xyXG4gICAgc3RhcnRBbmdsZTogMC43NSxcclxuICAgIGVuZEFuZ2xlOiAwLjI1LFxyXG4gICAgd2lkdGg6IDE1LFxyXG4gICAgc3BsaXRMaW5lOiB7XHJcbiAgICAgIGZpeFJhZGl1czogMCxcclxuICAgICAgc3BsaXROdW1iZXI6IDEwLFxyXG4gICAgICB3aWR0aDogMTUsXHJcbiAgICAgIGNvbG9yOiAnI0ZGRkZGRicsXHJcbiAgICAgIGNoaWxkTnVtYmVyOiA1LFxyXG4gICAgICBjaGlsZFdpZHRoOiA1XHJcbiAgICB9LFxyXG4gICAgcG9pbnRlcjoge1xyXG4gICAgICB3aWR0aDogMTUsXHJcbiAgICAgIGNvbG9yOiAnYXV0bydcclxuICAgIH1cclxuICB9LCBvcHRzLmV4dHJhLmdhdWdlKTtcclxuXHJcbiAgaWYgKGdhdWdlT3B0aW9uLm9sZEFuZ2xlID09IHVuZGVmaW5lZCkge1xyXG4gICAgZ2F1Z2VPcHRpb24ub2xkQW5nbGUgPSBnYXVnZU9wdGlvbi5zdGFydEFuZ2xlO1xyXG4gIH1cclxuICBpZiAoZ2F1Z2VPcHRpb24ub2xkRGF0YSA9PSB1bmRlZmluZWQpIHtcclxuICAgIGdhdWdlT3B0aW9uLm9sZERhdGEgPSAwO1xyXG4gIH1cclxuICBjYXRlZ29yaWVzID0gZ2V0R2F1Z2VBeGlzUG9pbnRzKGNhdGVnb3JpZXMsIGdhdWdlT3B0aW9uLnN0YXJ0QW5nbGUsIGdhdWdlT3B0aW9uLmVuZEFuZ2xlKTtcclxuXHJcbiAgdmFyIGNlbnRlclBvc2l0aW9uID0ge1xyXG4gICAgeDogb3B0cy53aWR0aCAvIDIsXHJcbiAgICB5OiBvcHRzLmhlaWdodCAvIDJcclxuICB9O1xyXG4gIHZhciByYWRpdXMgPSBNYXRoLm1pbihjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55KTtcclxuICByYWRpdXMgLT0gNSAqIG9wdHMucGl4ZWxSYXRpbztcclxuICByYWRpdXMgLT0gZ2F1Z2VPcHRpb24ud2lkdGggLyAyO1xyXG4gIHZhciBpbm5lclJhZGl1cyA9IHJhZGl1cyAtIGdhdWdlT3B0aW9uLndpZHRoO1xyXG5cclxuICAvL+eUu+iDjOaZr1xyXG4gIGNvbnRleHQuc2V0TGluZVdpZHRoKGdhdWdlT3B0aW9uLndpZHRoKTtcclxuICBjb250ZXh0LnNldExpbmVDYXAoJ2J1dHQnKTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNhdGVnb3JpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgIGxldCBlYWNoQ2F0ZWdvcmllcyA9IGNhdGVnb3JpZXNbaV07XHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShlYWNoQ2F0ZWdvcmllcy5jb2xvcik7XHJcbiAgICBjb250ZXh0LmFyYyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55LCByYWRpdXMsIGVhY2hDYXRlZ29yaWVzLl9zdGFydEFuZ2xlXyAqIE1hdGguUEksIGVhY2hDYXRlZ29yaWVzLl9lbmRBbmdsZV8gKlxyXG4gICAgICBNYXRoLlBJLCBmYWxzZSk7XHJcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gIH1cclxuICBjb250ZXh0LnNhdmUoKTtcclxuXHJcbiAgLy/nlLvliLvluqbnur9cclxuICBsZXQgdG90YWxBbmdsZSA9IGdhdWdlT3B0aW9uLnN0YXJ0QW5nbGUgLSBnYXVnZU9wdGlvbi5lbmRBbmdsZSArIDE7XHJcbiAgbGV0IHNwbGl0QW5nbGUgPSB0b3RhbEFuZ2xlIC8gZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLnNwbGl0TnVtYmVyO1xyXG4gIGxldCBjaGlsZEFuZ2xlID0gdG90YWxBbmdsZSAvIGdhdWdlT3B0aW9uLnNwbGl0TGluZS5zcGxpdE51bWJlciAvIGdhdWdlT3B0aW9uLnNwbGl0TGluZS5jaGlsZE51bWJlcjtcclxuICBsZXQgc3RhcnRYID0gLXJhZGl1cyAtIGdhdWdlT3B0aW9uLndpZHRoICogMC41IC0gZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLmZpeFJhZGl1cztcclxuICBsZXQgZW5kWCA9IC1yYWRpdXMgLSBnYXVnZU9wdGlvbi53aWR0aCAqIDAuNSAtIGdhdWdlT3B0aW9uLnNwbGl0TGluZS5maXhSYWRpdXMgKyBnYXVnZU9wdGlvbi5zcGxpdExpbmUud2lkdGg7XHJcbiAgbGV0IGNoaWxkZW5kWCA9IC1yYWRpdXMgLSBnYXVnZU9wdGlvbi53aWR0aCAqIDAuNSAtIGdhdWdlT3B0aW9uLnNwbGl0TGluZS5maXhSYWRpdXMgKyBnYXVnZU9wdGlvbi5zcGxpdExpbmUuY2hpbGRXaWR0aDtcclxuXHJcbiAgY29udGV4dC50cmFuc2xhdGUoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSk7XHJcbiAgY29udGV4dC5yb3RhdGUoKGdhdWdlT3B0aW9uLnN0YXJ0QW5nbGUgLSAxKSAqIE1hdGguUEkpO1xyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGdhdWdlT3B0aW9uLnNwbGl0TGluZS5zcGxpdE51bWJlciArIDE7IGkrKykge1xyXG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLmNvbG9yKTtcclxuICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDIgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLCAwKTtcclxuICAgIGNvbnRleHQubGluZVRvKGVuZFgsIDApO1xyXG4gICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgIGNvbnRleHQucm90YXRlKHNwbGl0QW5nbGUgKiBNYXRoLlBJKTtcclxuICB9XHJcbiAgY29udGV4dC5yZXN0b3JlKCk7XHJcblxyXG4gIGNvbnRleHQuc2F2ZSgpO1xyXG4gIGNvbnRleHQudHJhbnNsYXRlKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnkpO1xyXG4gIGNvbnRleHQucm90YXRlKChnYXVnZU9wdGlvbi5zdGFydEFuZ2xlIC0gMSkgKiBNYXRoLlBJKTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBnYXVnZU9wdGlvbi5zcGxpdExpbmUuc3BsaXROdW1iZXIgKiBnYXVnZU9wdGlvbi5zcGxpdExpbmUuY2hpbGROdW1iZXIgKyAxOyBpKyspIHtcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGdhdWdlT3B0aW9uLnNwbGl0TGluZS5jb2xvcik7XHJcbiAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxICogb3B0cy5waXhlbFJhdGlvKTtcclxuICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgMCk7XHJcbiAgICBjb250ZXh0LmxpbmVUbyhjaGlsZGVuZFgsIDApO1xyXG4gICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgIGNvbnRleHQucm90YXRlKGNoaWxkQW5nbGUgKiBNYXRoLlBJKTtcclxuICB9XHJcbiAgY29udGV4dC5yZXN0b3JlKCk7XHJcblxyXG4gIC8v55S75oyH6ZKIXHJcbiAgc2VyaWVzID0gZ2V0R2F1Z2VEYXRhUG9pbnRzKHNlcmllcywgY2F0ZWdvcmllcywgZ2F1Z2VPcHRpb24sIHByb2Nlc3MpO1xyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IGVhY2hTZXJpZXMgPSBzZXJpZXNbaV07XHJcbiAgICBjb250ZXh0LnNhdmUoKTtcclxuICAgIGNvbnRleHQudHJhbnNsYXRlKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnkpO1xyXG4gICAgY29udGV4dC5yb3RhdGUoKGVhY2hTZXJpZXMuX3Byb3BvcnRpb25fIC0gMSkgKiBNYXRoLlBJKTtcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShlYWNoU2VyaWVzLmNvbG9yKTtcclxuICAgIGNvbnRleHQubW92ZVRvKGdhdWdlT3B0aW9uLnBvaW50ZXIud2lkdGgsIDApO1xyXG4gICAgY29udGV4dC5saW5lVG8oMCwgLWdhdWdlT3B0aW9uLnBvaW50ZXIud2lkdGggLyAyKTtcclxuICAgIGNvbnRleHQubGluZVRvKC1pbm5lclJhZGl1cywgMCk7XHJcbiAgICBjb250ZXh0LmxpbmVUbygwLCBnYXVnZU9wdGlvbi5wb2ludGVyLndpZHRoIC8gMik7XHJcbiAgICBjb250ZXh0LmxpbmVUbyhnYXVnZU9wdGlvbi5wb2ludGVyLndpZHRoLCAwKTtcclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZSgnI0ZGRkZGRicpO1xyXG4gICAgY29udGV4dC5hcmMoMCwgMCwgZ2F1Z2VPcHRpb24ucG9pbnRlci53aWR0aCAvIDYsIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSk7XHJcbiAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gIH1cclxuXHJcbiAgaWYgKG9wdHMuZGF0YUxhYmVsICE9PSBmYWxzZSkge1xyXG4gICAgZHJhd0dhdWdlTGFiZWwoZ2F1Z2VPcHRpb24sIHJhZGl1cywgY2VudGVyUG9zaXRpb24sIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgfVxyXG5cclxuICBkcmF3UmluZ1RpdGxlKG9wdHMsIGNvbmZpZywgY29udGV4dCwgY2VudGVyUG9zaXRpb24pO1xyXG5cclxuICBpZiAocHJvY2VzcyA9PT0gMSAmJiBvcHRzLnR5cGUgPT09ICdnYXVnZScpIHtcclxuICAgIG9wdHMuZXh0cmEuZ2F1Z2Uub2xkQW5nbGUgPSBzZXJpZXNbMF0uX3Byb3BvcnRpb25fO1xyXG4gICAgb3B0cy5leHRyYS5nYXVnZS5vbGREYXRhID0gc2VyaWVzWzBdLmRhdGE7XHJcbiAgfVxyXG4gIHJldHVybiB7XHJcbiAgICBjZW50ZXI6IGNlbnRlclBvc2l0aW9uLFxyXG4gICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICBpbm5lclJhZGl1czogaW5uZXJSYWRpdXMsXHJcbiAgICBjYXRlZ29yaWVzOiBjYXRlZ29yaWVzLFxyXG4gICAgdG90YWxBbmdsZTogdG90YWxBbmdsZVxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdSYWRhckRhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMTtcclxuICB2YXIgcmFkYXJPcHRpb24gPSBhc3NpZ24oe30se1xyXG4gICAgZ3JpZENvbG9yOiAnI2NjY2NjYycsXHJcbiAgICBsYWJlbENvbG9yOiAnIzY2NjY2NicsXHJcbiAgICBvcGFjaXR5OiAwLjJcclxuICB9LG9wdHMuZXh0cmEucmFkYXIpO1xyXG5cclxuICB2YXIgY29vcmRpbmF0ZUFuZ2xlID0gZ2V0UmFkYXJDb29yZGluYXRlU2VyaWVzKG9wdHMuY2F0ZWdvcmllcy5sZW5ndGgpO1xyXG5cclxuICB2YXIgY2VudGVyUG9zaXRpb24gPSB7XHJcbiAgICB4OiBvcHRzLmFyZWFbM10gKyAob3B0cy53aWR0aCAtIG9wdHMuYXJlYVsxXSAtIG9wdHMuYXJlYVszXSkgLyAyLFxyXG4gICAgeTogb3B0cy5hcmVhWzBdICsgKG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzBdIC0gb3B0cy5hcmVhWzJdKSAvIDJcclxuICB9O1xyXG5cclxuICB2YXIgcmFkaXVzID0gTWF0aC5taW4oY2VudGVyUG9zaXRpb24ueCAtIChnZXRNYXhUZXh0TGlzdExlbmd0aChvcHRzLmNhdGVnb3JpZXMpICsgY29uZmlnLnJhZGFyTGFiZWxUZXh0TWFyZ2luKSxcclxuICAgIGNlbnRlclBvc2l0aW9uLnkgLSBjb25maWcucmFkYXJMYWJlbFRleHRNYXJnaW4pO1xyXG4gIC8vVE9ET+mAu+i+keS4jeWvuVxyXG4gIHJhZGl1cyAtPSBvcHRzLnBhZGRpbmdbMV07XHJcblxyXG4gIC8vIGRyYXcgZ3JpZFxyXG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgY29udGV4dC5zZXRTdHJva2VTdHlsZShyYWRhck9wdGlvbi5ncmlkQ29sb3IpO1xyXG4gIGNvb3JkaW5hdGVBbmdsZS5mb3JFYWNoKGZ1bmN0aW9uKGFuZ2xlKSB7XHJcbiAgICB2YXIgcG9zID0gY29udmVydENvb3JkaW5hdGVPcmlnaW4ocmFkaXVzICogTWF0aC5jb3MoYW5nbGUpLCByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSksIGNlbnRlclBvc2l0aW9uKTtcclxuICAgIGNvbnRleHQubW92ZVRvKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnkpO1xyXG4gICAgY29udGV4dC5saW5lVG8ocG9zLngsIHBvcy55KTtcclxuICB9KTtcclxuICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgLy8gZHJhdyBzcGxpdCBsaW5lIGdyaWRcclxuXHJcbiAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaSkge1xyXG4gICAgdmFyIHN0YXJ0UG9zID0ge307XHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKHJhZGFyT3B0aW9uLmdyaWRDb2xvcik7XHJcbiAgICBjb29yZGluYXRlQW5nbGUuZm9yRWFjaChmdW5jdGlvbihhbmdsZSwgaW5kZXgpIHtcclxuICAgICAgdmFyIHBvcyA9IGNvbnZlcnRDb29yZGluYXRlT3JpZ2luKHJhZGl1cyAvIGNvbmZpZy5yYWRhckdyaWRDb3VudCAqIGkgKiBNYXRoLmNvcyhhbmdsZSksIHJhZGl1cyAvIGNvbmZpZy5yYWRhckdyaWRDb3VudCAqXHJcbiAgICAgICAgaSAqIE1hdGguc2luKGFuZ2xlKSwgY2VudGVyUG9zaXRpb24pO1xyXG4gICAgICBpZiAoaW5kZXggPT09IDApIHtcclxuICAgICAgICBzdGFydFBvcyA9IHBvcztcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb3MueCwgcG9zLnkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKHBvcy54LCBwb3MueSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY29udGV4dC5saW5lVG8oc3RhcnRQb3MueCwgc3RhcnRQb3MueSk7XHJcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICB9O1xyXG5cclxuICBmb3IgKHZhciBpID0gMTsgaSA8PSBjb25maWcucmFkYXJHcmlkQ291bnQ7IGkrKykge1xyXG4gICAgX2xvb3AoaSk7XHJcbiAgfVxyXG5cclxuICB2YXIgcmFkYXJEYXRhUG9pbnRzID0gZ2V0UmFkYXJEYXRhUG9pbnRzKGNvb3JkaW5hdGVBbmdsZSwgY2VudGVyUG9zaXRpb24sIHJhZGl1cywgc2VyaWVzLCBvcHRzLCBwcm9jZXNzKTtcclxuXHJcbiAgcmFkYXJEYXRhUG9pbnRzLmZvckVhY2goZnVuY3Rpb24oZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcclxuICAgIC8vIOe7mOWItuWMuuWfn+aVsOaNrlxyXG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGhleFRvUmdiKGVhY2hTZXJpZXMuY29sb3IsIHJhZGFyT3B0aW9uLm9wYWNpdHkpKTtcclxuICAgIGVhY2hTZXJpZXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgIGlmIChpbmRleCA9PT0gMCkge1xyXG4gICAgICAgIGNvbnRleHQubW92ZVRvKGl0ZW0ucG9zaXRpb24ueCwgaXRlbS5wb3NpdGlvbi55KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLnBvc2l0aW9uLngsIGl0ZW0ucG9zaXRpb24ueSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGNvbnRleHQuZmlsbCgpO1xyXG5cclxuICAgIGlmIChvcHRzLmRhdGFQb2ludFNoYXBlICE9PSBmYWxzZSkge1xyXG4gICAgICB2YXIgc2hhcGUgPSBjb25maWcuZGF0YVBvaW50U2hhcGVbc2VyaWVzSW5kZXggJSBjb25maWcuZGF0YVBvaW50U2hhcGUubGVuZ3RoXTtcclxuICAgICAgdmFyIHBvaW50cyA9IGVhY2hTZXJpZXMuZGF0YS5tYXAoZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgIHJldHVybiBpdGVtLnBvc2l0aW9uO1xyXG4gICAgICB9KTtcclxuICAgICAgZHJhd1BvaW50U2hhcGUocG9pbnRzLCBlYWNoU2VyaWVzLmNvbG9yLCBzaGFwZSwgY29udGV4dCwgb3B0cyk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgLy8gZHJhdyBsYWJlbCB0ZXh0XHJcbiAgZHJhd1JhZGFyTGFiZWwoY29vcmRpbmF0ZUFuZ2xlLCByYWRpdXMsIGNlbnRlclBvc2l0aW9uLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgY2VudGVyOiBjZW50ZXJQb3NpdGlvbixcclxuICAgIHJhZGl1czogcmFkaXVzLFxyXG4gICAgYW5nbGVMaXN0OiBjb29yZGluYXRlQW5nbGVcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBub3JtYWxJbnQobWluLCBtYXgsIGl0ZXIpIHtcclxuICAgIGl0ZXIgPSBpdGVyPT0wPzE6aXRlcjtcclxuICAgIHZhciBhcnIgPSBbXTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlcjsgaSsrKSB7XHJcbiAgICAgICAgYXJyW2ldID0gTWF0aC5yYW5kb20oKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gIE1hdGguZmxvb3IoYXJyLnJlZHVjZShmdW5jdGlvbihpLGope3JldHVybiBpK2p9KS9pdGVyKihtYXgtbWluKSkrbWluO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gY29sbGlzaW9uTmV3KGFyZWEscG9pbnRzLHdpZHRoLGhlaWdodCl7XHJcbiAgICB2YXIgaXNJbj1mYWxzZTtcclxuICAgIGZvcihsZXQgaT0wO2k8cG9pbnRzLmxlbmd0aDtpKyspe1xyXG4gICAgICBpZihwb2ludHNbaV0uYXJlYSl7XHJcbiAgICAgICAgaWYoYXJlYVszXTxwb2ludHNbaV0uYXJlYVsxXXx8YXJlYVswXT5wb2ludHNbaV0uYXJlYVsyXXx8YXJlYVsxXT5wb2ludHNbaV0uYXJlYVszXXx8YXJlYVsyXTxwb2ludHNbaV0uYXJlYVswXSl7XHJcbiAgICAgICAgICBpZihhcmVhWzBdPDAgfHwgYXJlYVsxXTwwIHx8IGFyZWFbMl0+d2lkdGggfHwgYXJlYVszXT5oZWlnaHQpe1xyXG4gICAgICAgICAgICBpc0luPXRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIGlzSW49ZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBpc0luPXRydWU7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBpc0luO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gZ2V0Qm91bmRpbmdCb3goZGF0YSkge1xyXG4gIHZhciBib3VuZHMgPSB7fSwgY29vcmRzO1xyXG4gIGJvdW5kcy54TWluID0gMTgwO1xyXG4gIGJvdW5kcy54TWF4ID0gMDtcclxuICBib3VuZHMueU1pbiA9IDkwO1xyXG4gIGJvdW5kcy55TWF4ID0gMFxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgY29vcmRhID0gZGF0YVtpXS5nZW9tZXRyeS5jb29yZGluYXRlc1xyXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGNvb3JkYS5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgY29vcmRzID0gY29vcmRhW2tdO1xyXG4gICAgICAgICAgaWYgKGNvb3Jkcy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgIGNvb3JkcyA9IGNvb3Jkc1swXVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjb29yZHMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICB2YXIgbG9uZ2l0dWRlID0gY29vcmRzW2pdWzBdO1xyXG4gICAgICAgICAgICAgIHZhciBsYXRpdHVkZSA9IGNvb3Jkc1tqXVsxXTtcclxuICAgICAgICAgICAgICB2YXIgcG9pbnQgPSB7XHJcbiAgICAgICAgICAgICAgICAgIHg6IGxvbmdpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgeTogbGF0aXR1ZGVcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYm91bmRzLnhNaW4gPSBib3VuZHMueE1pbiA8IHBvaW50LnggPyBib3VuZHMueE1pbiA6IHBvaW50Lng7XHJcbiAgICAgICAgICAgICAgYm91bmRzLnhNYXggPSBib3VuZHMueE1heCA+IHBvaW50LnggPyBib3VuZHMueE1heCA6IHBvaW50Lng7XHJcbiAgICAgICAgICAgICAgYm91bmRzLnlNaW4gPSBib3VuZHMueU1pbiA8IHBvaW50LnkgPyBib3VuZHMueU1pbiA6IHBvaW50Lnk7XHJcbiAgICAgICAgICAgICAgYm91bmRzLnlNYXggPSBib3VuZHMueU1heCA+IHBvaW50LnkgPyBib3VuZHMueU1heCA6IHBvaW50Lnk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGJvdW5kcztcclxufVxyXG5cclxuZnVuY3Rpb24gY29vcmRpbmF0ZVRvUG9pbnQobGF0aXR1ZGUsIGxvbmdpdHVkZSxib3VuZHMsc2NhbGUseG9mZnNldCx5b2Zmc2V0KSB7XHJcbiAgcmV0dXJuIHtcclxuICAgICAgeDogKGxvbmdpdHVkZSAtIGJvdW5kcy54TWluKSAqIHNjYWxlK3hvZmZzZXQsXHJcbiAgICAgIHk6IChib3VuZHMueU1heCAtIGxhdGl0dWRlKSAqIHNjYWxlK3lvZmZzZXRcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBwb2ludFRvQ29vcmRpbmF0ZShwb2ludFksIHBvaW50WCxib3VuZHMsc2NhbGUseG9mZnNldCx5b2Zmc2V0KSB7XHJcbiAgcmV0dXJuIHtcclxuICAgICAgeDogKHBvaW50WC14b2Zmc2V0KS9zY2FsZStib3VuZHMueE1pbixcclxuICAgICAgeTogYm91bmRzLnlNYXggLSAocG9pbnRZLXlvZmZzZXQpL3NjYWxlXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNSYXlJbnRlcnNlY3RzU2VnbWVudChwb2ksc19wb2ksZV9wb2kpe1xyXG4gICAgICBpZiAoc19wb2lbMV09PWVfcG9pWzFdKXtyZXR1cm4gZmFsc2U7fVxyXG4gICAgICBpZiAoc19wb2lbMV0+cG9pWzFdICYmIGVfcG9pWzFdPnBvaVsxXSl7cmV0dXJuIGZhbHNlO31cclxuICAgICAgaWYgKHNfcG9pWzFdPHBvaVsxXSAmJiBlX3BvaVsxXTxwb2lbMV0pe3JldHVybiBmYWxzZTt9XHJcbiAgICAgIGlmIChzX3BvaVsxXT09cG9pWzFdICYmIGVfcG9pWzFdPnBvaVsxXSl7cmV0dXJuIGZhbHNlO31cclxuICAgICAgaWYgKGVfcG9pWzFdPT1wb2lbMV0gJiYgc19wb2lbMV0+cG9pWzFdKXtyZXR1cm4gZmFsc2U7fVxyXG4gICAgICBpZiAoc19wb2lbMF08cG9pWzBdICYmIGVfcG9pWzFdPHBvaVsxXSl7cmV0dXJuIGZhbHNlO31cclxuICAgICAgbGV0IHhzZWc9ZV9wb2lbMF0tKGVfcG9pWzBdLXNfcG9pWzBdKSooZV9wb2lbMV0tcG9pWzFdKS8oZV9wb2lbMV0tc19wb2lbMV0pO1xyXG4gICAgICBpZiAoeHNlZzxwb2lbMF0pe1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaXNQb2lXaXRoaW5Qb2x5KHBvaSxwb2x5KXtcclxuICBsZXQgc2luc2M9MDtcclxuICBmb3IgKGxldCBpPTA7aTxwb2x5Lmxlbmd0aDtpKyspe1xyXG4gICAgbGV0IGVwb2x5PXBvbHlbaV1bMF07XHJcbiAgICBpZiAocG9seS5sZW5ndGggPT0gMSkge1xyXG4gICAgICBlcG9seSA9IHBvbHlbaV1bMF1cclxuICAgIH1cclxuICAgIGZvcihsZXQgaj0wO2o8ZXBvbHkubGVuZ3RoLTE7aisrKXtcclxuICAgICAgbGV0IHNfcG9pPWVwb2x5W2pdO1xyXG4gICAgICBsZXQgZV9wb2k9ZXBvbHlbaisxXTtcclxuICAgICAgaWYgKGlzUmF5SW50ZXJzZWN0c1NlZ21lbnQocG9pLHNfcG9pLGVfcG9pKSl7XHJcbiAgICAgICAgc2luc2MrPTE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmKHNpbnNjJTI9PTEpe1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfWVsc2V7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZHJhd01hcERhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICB2YXIgbWFwT3B0aW9uPWFzc2lnbih7fSx7XHJcbiAgICBib3JkZXI6dHJ1ZSxcclxuICAgIGJvcmRlcldpZHRoOjEsXHJcbiAgICBib3JkZXJDb2xvcjonIzY2NjY2NicsXHJcbiAgICBmaWxsT3BhY2l0eTowLjYsXHJcbiAgICBhY3RpdmVCb3JkZXJDb2xvcjonI2YwNDg2NCcsXHJcbiAgICBhY3RpdmVGaWxsQ29sb3I6JyNmYWNjMTQnLFxyXG4gICAgYWN0aXZlRmlsbE9wYWNpdHk6MVxyXG4gIH0sb3B0cy5leHRyYS5tYXApO1xyXG4gIHZhciBjb29yZHMsIHBvaW50O1xyXG4gIHZhciBkYXRhID0gc2VyaWVzO1xyXG4gIHZhciBib3VuZHM9IGdldEJvdW5kaW5nQm94KGRhdGEpO1xyXG4gIHZhciB4U2NhbGUgPSBvcHRzLndpZHRoIC8gTWF0aC5hYnMoYm91bmRzLnhNYXggLSBib3VuZHMueE1pbik7XHJcbiAgdmFyIHlTY2FsZSA9IG9wdHMuaGVpZ2h0IC8gTWF0aC5hYnMoYm91bmRzLnlNYXggLSBib3VuZHMueU1pbik7XHJcbiAgdmFyIHNjYWxlID0geFNjYWxlIDwgeVNjYWxlID8geFNjYWxlIDogeVNjYWxlO1xyXG4gIHZhciB4b2Zmc2V0PW9wdHMud2lkdGgvMi1NYXRoLmFicyhib3VuZHMueE1heCAtIGJvdW5kcy54TWluKS8yKnNjYWxlO1xyXG4gIHZhciB5b2Zmc2V0PW9wdHMuaGVpZ2h0LzItTWF0aC5hYnMoYm91bmRzLnlNYXggLSBib3VuZHMueU1pbikvMipzY2FsZTtcclxuICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcclxuICBjb250ZXh0LnNldEZpbGxTdHlsZShvcHRzLmJhY2tncm91bmR8fCcjRkZGRkZGJyk7XHJcbiAgY29udGV4dC5yZWN0KDAsMCxvcHRzLndpZHRoLG9wdHMuaGVpZ2h0KTtcclxuICBjb250ZXh0LmZpbGwoKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldExpbmVXaWR0aChtYXBPcHRpb24uYm9yZGVyV2lkdGggKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShtYXBPcHRpb24uYm9yZGVyQ29sb3IpO1xyXG4gICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2Ioc2VyaWVzW2ldLmNvbG9yLCBtYXBPcHRpb24uZmlsbE9wYWNpdHkpKTtcclxuICAgIGlmIChvcHRzLnRvb2x0aXApIHtcclxuICAgICAgaWYgKG9wdHMudG9vbHRpcC5pbmRleCA9PSBpICkge1xyXG4gICAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUobWFwT3B0aW9uLmFjdGl2ZUJvcmRlckNvbG9yKTtcclxuICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShoZXhUb1JnYihtYXBPcHRpb24uYWN0aXZlRmlsbENvbG9yLCBtYXBPcHRpb24uYWN0aXZlRmlsbE9wYWNpdHkpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdmFyIGNvb3JkYSA9IGRhdGFbaV0uZ2VvbWV0cnkuY29vcmRpbmF0ZXNcclxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgY29vcmRhLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgIGNvb3JkcyA9IGNvb3JkYVtrXTtcclxuICAgICAgaWYgKGNvb3Jkcy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgIGNvb3JkcyA9IGNvb3Jkc1swXVxyXG4gICAgICB9XHJcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY29vcmRzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgcG9pbnQgPSBjb29yZGluYXRlVG9Qb2ludChjb29yZHNbal1bMV0sIGNvb3Jkc1tqXVswXSxib3VuZHMsc2NhbGUseG9mZnNldCx5b2Zmc2V0KVxyXG4gICAgICAgIGlmIChqID09PSAwKSB7XHJcbiAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8ocG9pbnQueCwgcG9pbnQueSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKHBvaW50LngsIHBvaW50LnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgaWYobWFwT3B0aW9uLmJvcmRlciA9PSB0cnVlKXtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZihvcHRzLmRhdGFMYWJlbCA9PSB0cnVlKXtcclxuICAgICAgdmFyIGNlbnRlclBvaW50ID0gZGF0YVtpXS5wcm9wZXJ0aWVzLmNlbnRyb2lkO1xyXG4gICAgICBpZihjZW50ZXJQb2ludCl7XHJcbiAgICAgICAgcG9pbnQgPSBjb29yZGluYXRlVG9Qb2ludChjZW50ZXJQb2ludFsxXSwgY2VudGVyUG9pbnRbMF0sYm91bmRzLHNjYWxlLHhvZmZzZXQseW9mZnNldCk7XHJcbiAgICAgICAgbGV0IGZvbnRTaXplPWRhdGFbaV0udGV4dFNpemV8fGNvbmZpZy5mb250U2l6ZTtcclxuICAgICAgICBsZXQgdGV4dD1kYXRhW2ldLnByb3BlcnRpZXMubmFtZTtcclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0Rm9udFNpemUoZm9udFNpemUpXHJcbiAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoZGF0YVtpXS50ZXh0Q29sb3J8fCcjNjY2NjY2JylcclxuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KHRleHQsIHBvaW50LngtbWVhc3VyZVRleHQodGV4dCxmb250U2l6ZSkvMiwgcG9pbnQueStmb250U2l6ZS8yKTtcclxuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgb3B0cy5jaGFydERhdGEubWFwRGF0YT17XHJcbiAgICBib3VuZHM6Ym91bmRzLFxyXG4gICAgc2NhbGU6c2NhbGUsXHJcbiAgICB4b2Zmc2V0OnhvZmZzZXQsXHJcbiAgICB5b2Zmc2V0OnlvZmZzZXRcclxuICB9XHJcbiAgZHJhd1Rvb2xUaXBCcmlkZ2Uob3B0cywgY29uZmlnLCBjb250ZXh0LDEpO1xyXG4gIGNvbnRleHQuZHJhdygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRXb3JkQ2xvdWRQb2ludChvcHRzLHR5cGUpe1xyXG4gIGxldCBwb2ludHMgPSBvcHRzLnNlcmllcy5zb3J0KGZ1bmN0aW9uKGEsYil7cmV0dXJuIHBhcnNlSW50KGIudGV4dFNpemUpLXBhcnNlSW50KGEudGV4dFNpemUpO30pO1xyXG4gIHN3aXRjaCAodHlwZSkge1xyXG4gICAgY2FzZSAnbm9ybWFsJzpcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgdGV4dCA9IHBvaW50c1tpXS5uYW1lO1xyXG4gICAgICAgIGxldCB0SGVpZ2h0ID0gcG9pbnRzW2ldLnRleHRTaXplO1xyXG4gICAgICAgIGxldCB0V2lkdGggPSBtZWFzdXJlVGV4dCh0ZXh0LHRIZWlnaHQpO1xyXG4gICAgICAgIGxldCB4LHk7XHJcbiAgICAgICAgbGV0IGFyZWE7XHJcbiAgICAgICAgbGV0IGJyZWFrbnVtPTA7XHJcbiAgICAgICAgd2hpbGUodHJ1ZSkge1xyXG4gICAgICAgICAgICBicmVha251bSsrO1xyXG4gICAgICAgICAgICB4ID0gbm9ybWFsSW50KC1vcHRzLndpZHRoLzIsIG9wdHMud2lkdGgvMiw1KSAtIHRXaWR0aC8yO1xyXG4gICAgICAgICAgICB5ID0gbm9ybWFsSW50KC1vcHRzLmhlaWdodC8yLCBvcHRzLmhlaWdodC8yLDUpICsgdEhlaWdodC8yO1xyXG4gICAgICAgICAgICBhcmVhPVt4LTUrb3B0cy53aWR0aC8yLHktNS10SGVpZ2h0K29wdHMuaGVpZ2h0LzIseCt0V2lkdGgrNStvcHRzLndpZHRoLzIseSs1K29wdHMuaGVpZ2h0LzJdO1xyXG4gICAgICAgICAgICBsZXQgaXNDb2xsaXNpb24gPSBjb2xsaXNpb25OZXcoYXJlYSxwb2ludHMsb3B0cy53aWR0aCxvcHRzLmhlaWdodCk7XHJcbiAgICAgICAgICAgIGlmICghaXNDb2xsaXNpb24pIGJyZWFrO1xyXG4gICAgICAgICAgICBpZiAoYnJlYWtudW09PTEwMDApe1xyXG4gICAgICAgICAgICAgIGFyZWE9Wy0xMDAsLTEwMCwtMTAwLC0xMDBdO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBwb2ludHNbaV0uYXJlYT1hcmVhO1xyXG4gICAgICB9XHJcbiAgICBicmVhaztcclxuICAgIGNhc2UgJ3ZlcnRpY2FsJzpcclxuICAgICAgZnVuY3Rpb24gU3Bpbigpe1xyXG4gICAgICAgIC8v6I635Y+W5Z2H5YyA6ZqP5py65YC877yM5piv5ZCm5peL6L2s77yM5peL6L2s55qE5qaC546H5Li677yIMS0wLjXvvIlcclxuICAgICAgICBpZiAoTWF0aC5yYW5kb20oKT4wLjcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfWVsc2Uge3JldHVybiBmYWxzZX07XHJcbiAgICAgIH07XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IHRleHQgPSBwb2ludHNbaV0ubmFtZTtcclxuICAgICAgICBsZXQgdEhlaWdodCA9IHBvaW50c1tpXS50ZXh0U2l6ZTtcclxuICAgICAgICBsZXQgdFdpZHRoID0gbWVhc3VyZVRleHQodGV4dCx0SGVpZ2h0KTtcclxuICAgICAgICBsZXQgaXNTcGluID0gU3BpbigpO1xyXG4gICAgICAgIGxldCB4LHksYXJlYSxhcmVhdjtcclxuICAgICAgICBsZXQgYnJlYWtudW09MDtcclxuICAgICAgICB3aGlsZSh0cnVlKSB7XHJcbiAgICAgICAgICBicmVha251bSsrO1xyXG4gICAgICAgICAgbGV0IGlzQ29sbGlzaW9uO1xyXG4gICAgICAgICAgaWYgKGlzU3Bpbikge1xyXG4gICAgICAgICAgICAgIHggPSBub3JtYWxJbnQoLW9wdHMud2lkdGgvMiwgb3B0cy53aWR0aC8yLDUpIC0gdFdpZHRoLzI7XHJcbiAgICAgICAgICAgICAgeSA9IG5vcm1hbEludCgtb3B0cy5oZWlnaHQvMiwgb3B0cy5oZWlnaHQvMiw1KSt0SGVpZ2h0LzI7XHJcbiAgICAgICAgICAgICAgYXJlYT1beS01LXRXaWR0aCtvcHRzLndpZHRoLzIsKC14LTUrb3B0cy5oZWlnaHQvMikseSs1K29wdHMud2lkdGgvMiwoLXgrdEhlaWdodCs1K29wdHMuaGVpZ2h0LzIpXTtcclxuICAgICAgICAgICAgICBhcmVhdj1bb3B0cy53aWR0aC0ob3B0cy53aWR0aC8yLW9wdHMuaGVpZ2h0LzIpLSgteCt0SGVpZ2h0KzUrb3B0cy5oZWlnaHQvMiktNSwob3B0cy5oZWlnaHQvMi1vcHRzLndpZHRoLzIpKyh5LTUtdFdpZHRoK29wdHMud2lkdGgvMiktNSxvcHRzLndpZHRoLShvcHRzLndpZHRoLzItb3B0cy5oZWlnaHQvMiktKC14K3RIZWlnaHQrNStvcHRzLmhlaWdodC8yKSt0SGVpZ2h0LChvcHRzLmhlaWdodC8yLW9wdHMud2lkdGgvMikrKHktNS10V2lkdGgrb3B0cy53aWR0aC8yKSt0V2lkdGgrNV07XHJcbiAgICAgICAgICAgICAgaXNDb2xsaXNpb24gPSBjb2xsaXNpb25OZXcoYXJlYXYscG9pbnRzLG9wdHMuaGVpZ2h0LG9wdHMud2lkdGgpO1xyXG4gICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHggPSBub3JtYWxJbnQoLW9wdHMud2lkdGgvMiwgb3B0cy53aWR0aC8yLDUpIC0gdFdpZHRoLzI7XHJcbiAgICAgICAgICAgIHkgPSBub3JtYWxJbnQoLW9wdHMuaGVpZ2h0LzIsIG9wdHMuaGVpZ2h0LzIsNSkrdEhlaWdodC8yO1xyXG4gICAgICAgICAgICBhcmVhPVt4LTUrb3B0cy53aWR0aC8yLHktNS10SGVpZ2h0K29wdHMuaGVpZ2h0LzIseCt0V2lkdGgrNStvcHRzLndpZHRoLzIseSs1K29wdHMuaGVpZ2h0LzJdO1xyXG4gICAgICAgICAgICBpc0NvbGxpc2lvbiA9IGNvbGxpc2lvbk5ldyhhcmVhLHBvaW50cyxvcHRzLndpZHRoLG9wdHMuaGVpZ2h0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICghaXNDb2xsaXNpb24pIGJyZWFrO1xyXG4gICAgICAgICAgaWYgKGJyZWFrbnVtPT0xMDAwKXtcclxuICAgICAgICAgICAgYXJlYT1bLTEwMDAsLTEwMDAsLTEwMDAsLTEwMDBdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChpc1NwaW4pIHtcclxuICAgICAgICAgIHBvaW50c1tpXS5hcmVhPWFyZWF2O1xyXG4gICAgICAgICAgcG9pbnRzW2ldLmFyZWF2PWFyZWE7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBwb2ludHNbaV0uYXJlYT1hcmVhO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwb2ludHNbaV0ucm90YXRlPWlzU3BpbjtcclxuICAgICAgfTtcclxuICAgIGJyZWFrO1xyXG4gIH1cclxuICByZXR1cm4gcG9pbnRzO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZHJhd1dvcmRDbG91ZERhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICBsZXQgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMTtcclxuICBsZXQgd29yZE9wdGlvbiA9IGFzc2lnbih7fSx7XHJcbiAgICB0eXBlOiAnbm9ybWFsJyxcclxuICAgIGF1dG9Db2xvcnM6IHRydWVcclxuICB9LG9wdHMuZXh0cmEud29yZCk7XHJcblxyXG4gIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgY29udGV4dC5zZXRGaWxsU3R5bGUob3B0cy5iYWNrZ3JvdW5kfHwnI0ZGRkZGRicpO1xyXG4gIGNvbnRleHQucmVjdCgwLDAsb3B0cy53aWR0aCxvcHRzLmhlaWdodCk7XHJcbiAgY29udGV4dC5maWxsKCk7XHJcbiAgY29udGV4dC5zYXZlKCk7XHJcbiAgbGV0IHBvaW50cyA9IG9wdHMuY2hhcnREYXRhLndvcmRDbG91ZERhdGE7XHJcbiAgY29udGV4dC50cmFuc2xhdGUob3B0cy53aWR0aC8yLG9wdHMuaGVpZ2h0LzIpO1xyXG5cclxuICBmb3IobGV0IGk9MDtpPHBvaW50cy5sZW5ndGg7aSsrKXtcclxuICAgICAgY29udGV4dC5zYXZlKCk7XHJcbiAgICAgIGlmKHBvaW50c1tpXS5yb3RhdGUpe1xyXG4gICAgICAgIGNvbnRleHQucm90YXRlKDkwICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IHRleHQgPSBwb2ludHNbaV0ubmFtZTtcclxuICAgICAgbGV0IHRIZWlnaHQgPSBwb2ludHNbaV0udGV4dFNpemU7XHJcbiAgICAgIGxldCB0V2lkdGggPSBtZWFzdXJlVGV4dCh0ZXh0LHRIZWlnaHQpO1xyXG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKHBvaW50c1tpXS5jb2xvcik7XHJcbiAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKHBvaW50c1tpXS5jb2xvcik7XHJcbiAgICAgIGNvbnRleHQuc2V0Rm9udFNpemUodEhlaWdodCk7XHJcbiAgICAgIGlmKHBvaW50c1tpXS5yb3RhdGUpe1xyXG4gICAgICAgIGlmKHBvaW50c1tpXS5hcmVhdlswXT4wKXtcclxuICAgICAgICAgIGlmIChvcHRzLnRvb2x0aXApIHtcclxuICAgICAgICAgICAgaWYgKG9wdHMudG9vbHRpcC5pbmRleCA9PSBpKSB7XHJcbiAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VUZXh0KHRleHQsKHBvaW50c1tpXS5hcmVhdlswXSs1LW9wdHMud2lkdGgvMikqcHJvY2Vzcy10V2lkdGgqKDEtcHJvY2VzcykvMiwocG9pbnRzW2ldLmFyZWF2WzFdKzUrdEhlaWdodC1vcHRzLmhlaWdodC8yKSpwcm9jZXNzKTtcclxuICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQodGV4dCwocG9pbnRzW2ldLmFyZWF2WzBdKzUtb3B0cy53aWR0aC8yKSpwcm9jZXNzLXRXaWR0aCooMS1wcm9jZXNzKS8yLChwb2ludHNbaV0uYXJlYXZbMV0rNSt0SGVpZ2h0LW9wdHMuaGVpZ2h0LzIpKnByb2Nlc3MpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGxUZXh0KHRleHQsKHBvaW50c1tpXS5hcmVhdlswXSs1LW9wdHMud2lkdGgvMikqcHJvY2Vzcy10V2lkdGgqKDEtcHJvY2VzcykvMiwocG9pbnRzW2ldLmFyZWF2WzFdKzUrdEhlaWdodC1vcHRzLmhlaWdodC8yKSpwcm9jZXNzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIGlmKHBvaW50c1tpXS5hcmVhWzBdPjApe1xyXG4gICAgICAgICAgaWYgKG9wdHMudG9vbHRpcCkge1xyXG4gICAgICAgICAgICBpZiAob3B0cy50b29sdGlwLmluZGV4ID09IGkpIHtcclxuICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVRleHQodGV4dCwocG9pbnRzW2ldLmFyZWFbMF0rNS1vcHRzLndpZHRoLzIpKnByb2Nlc3MtdFdpZHRoKigxLXByb2Nlc3MpLzIsKHBvaW50c1tpXS5hcmVhWzFdKzUrdEhlaWdodC1vcHRzLmhlaWdodC8yKSpwcm9jZXNzKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dCh0ZXh0LChwb2ludHNbaV0uYXJlYVswXSs1LW9wdHMud2lkdGgvMikqcHJvY2Vzcy10V2lkdGgqKDEtcHJvY2VzcykvMiwocG9pbnRzW2ldLmFyZWFbMV0rNSt0SGVpZ2h0LW9wdHMuaGVpZ2h0LzIpKnByb2Nlc3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dCh0ZXh0LChwb2ludHNbaV0uYXJlYVswXSs1LW9wdHMud2lkdGgvMikqcHJvY2Vzcy10V2lkdGgqKDEtcHJvY2VzcykvMiwocG9pbnRzW2ldLmFyZWFbMV0rNSt0SGVpZ2h0LW9wdHMuaGVpZ2h0LzIpKnByb2Nlc3MpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gIH1cclxuICBjb250ZXh0LnJlc3RvcmUoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0Z1bm5lbERhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICBsZXQgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMTtcclxuICBsZXQgZnVubmVsT3B0aW9uID0gYXNzaWduKHt9LHtcclxuICAgIGFjdGl2ZVdpZHRoOjEwLFxyXG4gICAgYWN0aXZlT3BhY2l0eTowLjMsXHJcbiAgICBib3JkZXI6ZmFsc2UsXHJcbiAgICBib3JkZXJXaWR0aDoyLFxyXG4gICAgYm9yZGVyQ29sb3I6JyNGRkZGRkYnLFxyXG4gICAgZmlsbE9wYWNpdHk6MSxcclxuICAgIGxhYmVsQWxpZ246J3JpZ2h0J1xyXG4gIH0sb3B0cy5leHRyYS5mdW5uZWwpO1xyXG4gIGxldCBlYWNoU3BhY2luZyA9IChvcHRzLmhlaWdodCAtIG9wdHMuYXJlYVswXSAtIG9wdHMuYXJlYVsyXSkvc2VyaWVzLmxlbmd0aDtcclxuICBsZXQgY2VudGVyUG9zaXRpb24gPSB7XHJcbiAgICB4OiBvcHRzLmFyZWFbM10gKyAob3B0cy53aWR0aCAtIG9wdHMuYXJlYVsxXSAtIG9wdHMuYXJlYVszXSkgLyAyLFxyXG4gICAgeTogb3B0cy5oZWlnaHQtb3B0cy5hcmVhWzJdXHJcbiAgfTtcclxuICBsZXQgYWN0aXZlV2lkdGggPSBmdW5uZWxPcHRpb24uYWN0aXZlV2lkdGg7XHJcbiAgbGV0IHJhZGl1cyA9IE1hdGgubWluKChvcHRzLndpZHRoIC0gb3B0cy5hcmVhWzFdIC0gb3B0cy5hcmVhWzNdKSAvIDIgLSBhY3RpdmVXaWR0aCwgKG9wdHMuaGVpZ2h0IC0gb3B0cy5hcmVhWzBdIC0gb3B0cy5hcmVhWzJdKSAvIDIgLSBhY3RpdmVXaWR0aCk7XHJcbiAgc2VyaWVzID0gZ2V0RnVubmVsRGF0YVBvaW50cyhzZXJpZXMsIHJhZGl1cywgcHJvY2Vzcyk7XHJcbiAgY29udGV4dC5zYXZlKCk7XHJcbiAgY29udGV4dC50cmFuc2xhdGUoY2VudGVyUG9zaXRpb24ueCxjZW50ZXJQb3NpdGlvbi55KTtcclxuICBmb3IobGV0IGk9MDtpPHNlcmllcy5sZW5ndGg7aSsrKXtcclxuICAgIGlmKGk9PTApe1xyXG4gICAgICBpZiAob3B0cy50b29sdGlwKSB7XHJcbiAgICAgICAgaWYgKG9wdHMudG9vbHRpcC5pbmRleCA9PSBpKSB7XHJcbiAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2Ioc2VyaWVzW2ldLmNvbG9yLCBmdW5uZWxPcHRpb24uYWN0aXZlT3BhY2l0eSkpO1xyXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oLWFjdGl2ZVdpZHRoLCAwKTtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKC1zZXJpZXNbaV0ucmFkaXVzLWFjdGl2ZVdpZHRoLCAtZWFjaFNwYWNpbmcpO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc2VyaWVzW2ldLnJhZGl1cythY3RpdmVXaWR0aCwgLWVhY2hTcGFjaW5nKTtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKGFjdGl2ZVdpZHRoLCAwKTtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKC1hY3RpdmVXaWR0aCwgMCk7XHJcbiAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHNlcmllc1tpXS5mdW5uZWxBcmVhPVtjZW50ZXJQb3NpdGlvbi54LXNlcmllc1tpXS5yYWRpdXMsY2VudGVyUG9zaXRpb24ueS1lYWNoU3BhY2luZyxjZW50ZXJQb3NpdGlvbi54K3Nlcmllc1tpXS5yYWRpdXMsY2VudGVyUG9zaXRpb24ueV07XHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKGZ1bm5lbE9wdGlvbi5ib3JkZXJXaWR0aCAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZnVubmVsT3B0aW9uLmJvcmRlckNvbG9yKTtcclxuICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2Ioc2VyaWVzW2ldLmNvbG9yLCBmdW5uZWxPcHRpb24uZmlsbE9wYWNpdHkpKTtcclxuICAgICAgY29udGV4dC5tb3ZlVG8oMCwgMCk7XHJcbiAgICAgIGNvbnRleHQubGluZVRvKC1zZXJpZXNbaV0ucmFkaXVzLCAtZWFjaFNwYWNpbmcpO1xyXG4gICAgICBjb250ZXh0LmxpbmVUbyhzZXJpZXNbaV0ucmFkaXVzLCAtZWFjaFNwYWNpbmcpO1xyXG4gICAgICBjb250ZXh0LmxpbmVUbygwLCAwKTtcclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgIGlmKGZ1bm5lbE9wdGlvbi5ib3JkZXIgPT0gdHJ1ZSl7XHJcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgfVxyXG4gICAgfWVsc2V7XHJcbiAgICAgIGlmIChvcHRzLnRvb2x0aXApIHtcclxuICAgICAgICBpZiAob3B0cy50b29sdGlwLmluZGV4ID09IGkpIHtcclxuICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShoZXhUb1JnYihzZXJpZXNbaV0uY29sb3IsIGZ1bm5lbE9wdGlvbi5hY3RpdmVPcGFjaXR5KSk7XHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbygwLCAwKTtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKC1zZXJpZXNbaS0xXS5yYWRpdXMtYWN0aXZlV2lkdGgsIDApO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oLXNlcmllc1tpXS5yYWRpdXMtYWN0aXZlV2lkdGgsIC1lYWNoU3BhY2luZyk7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzZXJpZXNbaV0ucmFkaXVzK2FjdGl2ZVdpZHRoLCAtZWFjaFNwYWNpbmcpO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oc2VyaWVzW2ktMV0ucmFkaXVzK2FjdGl2ZVdpZHRoLCAwKTtcclxuICAgICAgICAgIGNvbnRleHQubGluZVRvKDAsIDApO1xyXG4gICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBzZXJpZXNbaV0uZnVubmVsQXJlYT1bY2VudGVyUG9zaXRpb24ueC1zZXJpZXNbaV0ucmFkaXVzLGNlbnRlclBvc2l0aW9uLnktZWFjaFNwYWNpbmcqKGkrMSksY2VudGVyUG9zaXRpb24ueCtzZXJpZXNbaV0ucmFkaXVzLGNlbnRlclBvc2l0aW9uLnktZWFjaFNwYWNpbmcqaV07XHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKGZ1bm5lbE9wdGlvbi5ib3JkZXJXaWR0aCAqIG9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZnVubmVsT3B0aW9uLmJvcmRlckNvbG9yKTtcclxuICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2Ioc2VyaWVzW2ldLmNvbG9yLCBmdW5uZWxPcHRpb24uZmlsbE9wYWNpdHkpKTtcclxuICAgICAgY29udGV4dC5tb3ZlVG8oMCwgMCk7XHJcbiAgICAgIGNvbnRleHQubGluZVRvKC1zZXJpZXNbaS0xXS5yYWRpdXMsIDApO1xyXG4gICAgICBjb250ZXh0LmxpbmVUbygtc2VyaWVzW2ldLnJhZGl1cywgLWVhY2hTcGFjaW5nKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oc2VyaWVzW2ldLnJhZGl1cywgLWVhY2hTcGFjaW5nKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oc2VyaWVzW2ktMV0ucmFkaXVzLCAwKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oMCwgMCk7XHJcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICBpZihmdW5uZWxPcHRpb24uYm9yZGVyID09IHRydWUpe1xyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnRleHQudHJhbnNsYXRlKDAsLWVhY2hTcGFjaW5nKVxyXG4gIH1cclxuICBjb250ZXh0LnJlc3RvcmUoKTtcclxuXHJcbiAgaWYgKG9wdHMuZGF0YUxhYmVsICE9PSBmYWxzZSAmJiBwcm9jZXNzID09PSAxKSB7XHJcbiAgICBkcmF3RnVubmVsVGV4dChzZXJpZXMsIG9wdHMsIGNvbnRleHQsIGVhY2hTcGFjaW5nLCBmdW5uZWxPcHRpb24ubGFiZWxBbGlnbiwgYWN0aXZlV2lkdGgsIGNlbnRlclBvc2l0aW9uKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBjZW50ZXI6IGNlbnRlclBvc2l0aW9uLFxyXG4gICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICBzZXJpZXM6IHNlcmllc1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdGdW5uZWxUZXh0KHNlcmllcywgb3B0cywgY29udGV4dCwgZWFjaFNwYWNpbmcsIGxhYmVsQWxpZ24sYWN0aXZlV2lkdGgsIGNlbnRlclBvc2l0aW9uKXtcclxuICBmb3IobGV0IGk9MDtpPHNlcmllcy5sZW5ndGg7aSsrKXtcclxuICAgIGxldCBpdGVtID0gc2VyaWVzW2ldO1xyXG4gICAgbGV0IHN0YXJ0WCxlbmRYLHN0YXJ0WSxmb250U2l6ZTtcclxuICAgIGxldCB0ZXh0ID0gaXRlbS5mb3JtYXQgPyBpdGVtLmZvcm1hdCgraXRlbS5fcHJvcG9ydGlvbl8udG9GaXhlZCgyKSkgOiB1dGlsLnRvRml4ZWQoaXRlbS5fcHJvcG9ydGlvbl8gKiAxMDApICsnJSc7XHJcbiAgICBpZihsYWJlbEFsaWduID09ICdyaWdodCcpe1xyXG4gICAgICBpZihpPT0wKXtcclxuICAgICAgICBzdGFydFg9KGl0ZW0uZnVubmVsQXJlYVsyXStjZW50ZXJQb3NpdGlvbi54KS8yO1xyXG4gICAgICB9ZWxzZXtcclxuICAgICAgICBzdGFydFg9KGl0ZW0uZnVubmVsQXJlYVsyXStzZXJpZXNbaS0xXS5mdW5uZWxBcmVhWzJdKS8yO1xyXG4gICAgICB9XHJcbiAgICAgIGVuZFg9c3RhcnRYK2FjdGl2ZVdpZHRoKjI7XHJcbiAgICAgIHN0YXJ0WT1pdGVtLmZ1bm5lbEFyZWFbMV0rZWFjaFNwYWNpbmcvMjtcclxuICAgICAgZm9udFNpemUgPSBpdGVtLnRleHRTaXplIHx8IG9wdHMuZm9udFNpemU7XHJcbiAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGl0ZW0uY29sb3IpO1xyXG4gICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLmNvbG9yKTtcclxuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLHN0YXJ0WSApO1xyXG4gICAgICBjb250ZXh0LmxpbmVUbyhlbmRYLHN0YXJ0WSk7XHJcbiAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgIGNvbnRleHQubW92ZVRvKGVuZFgsIHN0YXJ0WSk7XHJcbiAgICAgIGNvbnRleHQuYXJjKGVuZFgsIHN0YXJ0WSwgMiwgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgY29udGV4dC5zZXRGb250U2l6ZShmb250U2l6ZSk7XHJcbiAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0udGV4dENvbG9yIHx8ICcjNjY2NjY2Jyk7XHJcbiAgICAgIGNvbnRleHQuZmlsbFRleHQodGV4dCwgZW5kWCs1LCBzdGFydFkgKyBmb250U2l6ZS8yIC0yKTtcclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIH1lbHNle1xyXG4gICAgICBpZihpPT0wKXtcclxuICAgICAgICBzdGFydFg9KGl0ZW0uZnVubmVsQXJlYVswXStjZW50ZXJQb3NpdGlvbi54KS8yO1xyXG4gICAgICB9ZWxzZXtcclxuICAgICAgICBzdGFydFg9KGl0ZW0uZnVubmVsQXJlYVswXStzZXJpZXNbaS0xXS5mdW5uZWxBcmVhWzBdKS8yO1xyXG4gICAgICB9XHJcbiAgICAgIGVuZFg9c3RhcnRYLWFjdGl2ZVdpZHRoKjI7XHJcbiAgICAgIHN0YXJ0WT1pdGVtLmZ1bm5lbEFyZWFbMV0rZWFjaFNwYWNpbmcvMjtcclxuICAgICAgZm9udFNpemUgPSBpdGVtLnRleHRTaXplIHx8IG9wdHMuZm9udFNpemU7XHJcbiAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEgKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGl0ZW0uY29sb3IpO1xyXG4gICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLmNvbG9yKTtcclxuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLHN0YXJ0WSApO1xyXG4gICAgICBjb250ZXh0LmxpbmVUbyhlbmRYLHN0YXJ0WSk7XHJcbiAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgIGNvbnRleHQubW92ZVRvKGVuZFgsIHN0YXJ0WSk7XHJcbiAgICAgIGNvbnRleHQuYXJjKGVuZFgsIHN0YXJ0WSwgMiwgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgY29udGV4dC5zZXRGb250U2l6ZShmb250U2l6ZSk7XHJcbiAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0udGV4dENvbG9yIHx8ICcjNjY2NjY2Jyk7XHJcbiAgICAgIGNvbnRleHQuZmlsbFRleHQodGV4dCwgZW5kWC01LW1lYXN1cmVUZXh0KHRleHQpLCBzdGFydFkgKyBmb250U2l6ZS8yIC0yKTtcclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZHJhd0NhbnZhcyhvcHRzLCBjb250ZXh0KSB7XHJcbiAgY29udGV4dC5kcmF3KCk7XHJcbn1cclxuXHJcbnZhciBUaW1pbmcgPSB7XHJcbiAgZWFzZUluOiBmdW5jdGlvbiBlYXNlSW4ocG9zKSB7XHJcbiAgICByZXR1cm4gTWF0aC5wb3cocG9zLCAzKTtcclxuICB9LFxyXG4gIGVhc2VPdXQ6IGZ1bmN0aW9uIGVhc2VPdXQocG9zKSB7XHJcbiAgICByZXR1cm4gTWF0aC5wb3cocG9zIC0gMSwgMykgKyAxO1xyXG4gIH0sXHJcbiAgZWFzZUluT3V0OiBmdW5jdGlvbiBlYXNlSW5PdXQocG9zKSB7XHJcbiAgICBpZiAoKHBvcyAvPSAwLjUpIDwgMSkge1xyXG4gICAgICByZXR1cm4gMC41ICogTWF0aC5wb3cocG9zLCAzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiAwLjUgKiAoTWF0aC5wb3cocG9zIC0gMiwgMykgKyAyKTtcclxuICAgIH1cclxuICB9LFxyXG4gIGxpbmVhcjogZnVuY3Rpb24gbGluZWFyKHBvcykge1xyXG4gICAgcmV0dXJuIHBvcztcclxuICB9XHJcbn07XHJcblxyXG5mdW5jdGlvbiBBbmltYXRpb24ob3B0cykge1xyXG4gIHRoaXMuaXNTdG9wID0gZmFsc2U7XHJcbiAgb3B0cy5kdXJhdGlvbiA9IHR5cGVvZiBvcHRzLmR1cmF0aW9uID09PSAndW5kZWZpbmVkJyA/IDEwMDAgOiBvcHRzLmR1cmF0aW9uO1xyXG4gIG9wdHMudGltaW5nID0gb3B0cy50aW1pbmcgfHwgJ2xpbmVhcic7XHJcbiAgdmFyIGRlbGF5ID0gMTc7XHJcblxyXG4gIGZ1bmN0aW9uIGNyZWF0ZUFuaW1hdGlvbkZyYW1lKCkge1xyXG4gICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RlcCwgZGVsYXkpIHtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgdmFyIHRpbWVTdGFtcCA9ICtuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgc3RlcCh0aW1lU3RhbXApO1xyXG4gICAgICAgIH0sIGRlbGF5KTtcclxuICAgICAgfTtcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdGVwKSB7XHJcbiAgICAgICAgc3RlcChudWxsKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9O1xyXG4gIHZhciBhbmltYXRpb25GcmFtZSA9IGNyZWF0ZUFuaW1hdGlvbkZyYW1lKCk7XHJcbiAgdmFyIHN0YXJ0VGltZVN0YW1wID0gbnVsbDtcclxuICB2YXIgX3N0ZXAgPSBmdW5jdGlvbiBzdGVwKHRpbWVzdGFtcCkge1xyXG4gICAgaWYgKHRpbWVzdGFtcCA9PT0gbnVsbCB8fCB0aGlzLmlzU3RvcCA9PT0gdHJ1ZSkge1xyXG4gICAgICBvcHRzLm9uUHJvY2VzcyAmJiBvcHRzLm9uUHJvY2VzcygxKTtcclxuICAgICAgb3B0cy5vbkFuaW1hdGlvbkZpbmlzaCAmJiBvcHRzLm9uQW5pbWF0aW9uRmluaXNoKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChzdGFydFRpbWVTdGFtcCA9PT0gbnVsbCkge1xyXG4gICAgICBzdGFydFRpbWVTdGFtcCA9IHRpbWVzdGFtcDtcclxuICAgIH1cclxuICAgIGlmICh0aW1lc3RhbXAgLSBzdGFydFRpbWVTdGFtcCA8IG9wdHMuZHVyYXRpb24pIHtcclxuICAgICAgdmFyIHByb2Nlc3MgPSAodGltZXN0YW1wIC0gc3RhcnRUaW1lU3RhbXApIC8gb3B0cy5kdXJhdGlvbjtcclxuICAgICAgdmFyIHRpbWluZ0Z1bmN0aW9uID0gVGltaW5nW29wdHMudGltaW5nXTtcclxuICAgICAgcHJvY2VzcyA9IHRpbWluZ0Z1bmN0aW9uKHByb2Nlc3MpO1xyXG5cclxuICAgICAgb3B0cy5vblByb2Nlc3MgJiYgb3B0cy5vblByb2Nlc3MocHJvY2Vzcyk7XHJcbiAgICAgIGFuaW1hdGlvbkZyYW1lKF9zdGVwLCBkZWxheSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvcHRzLm9uUHJvY2VzcyAmJiBvcHRzLm9uUHJvY2VzcygxKTtcclxuICAgICAgb3B0cy5vbkFuaW1hdGlvbkZpbmlzaCAmJiBvcHRzLm9uQW5pbWF0aW9uRmluaXNoKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBfc3RlcCA9IF9zdGVwLmJpbmQodGhpcyk7XHJcbiAgYW5pbWF0aW9uRnJhbWUoX3N0ZXAsIGRlbGF5KTtcclxufVxyXG5cclxuLy8gc3RvcCBhbmltYXRpb24gaW1tZWRpYXRlbHlcclxuLy8gYW5kIHRpZ2dlciBvbkFuaW1hdGlvbkZpbmlzaFxyXG5BbmltYXRpb24ucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcclxuICB0aGlzLmlzU3RvcCA9IHRydWU7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBkcmF3Q2hhcnRzKHR5cGUsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgdmFyIHNlcmllcyA9IG9wdHMuc2VyaWVzO1xyXG4gIHZhciBjYXRlZ29yaWVzID0gb3B0cy5jYXRlZ29yaWVzO1xyXG4gIHNlcmllcyA9IGZpbGxTZXJpZXMoc2VyaWVzLCBvcHRzLCBjb25maWcpO1xyXG4gIHZhciBkdXJhdGlvbiA9IG9wdHMuYW5pbWF0aW9uID8gb3B0cy5kdXJhdGlvbiA6IDA7XHJcbiAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSAmJiB0aGlzLmFuaW1hdGlvbkluc3RhbmNlLnN0b3AoKTtcclxuICB2YXIgc2VyaWVzTUEgPSBudWxsO1xyXG4gIGlmICh0eXBlID09ICdjYW5kbGUnKSB7XHJcbiAgICBsZXQgYXZlcmFnZSA9IGFzc2lnbih7fSwgb3B0cy5leHRyYS5jYW5kbGUuYXZlcmFnZSk7XHJcbiAgICBpZiAoYXZlcmFnZS5zaG93KSB7XHJcbiAgICAgIHNlcmllc01BID0gY2FsQ2FuZGxlTUEoYXZlcmFnZS5kYXksIGF2ZXJhZ2UubmFtZSwgYXZlcmFnZS5jb2xvciwgc2VyaWVzWzBdLmRhdGEpO1xyXG4gICAgICBzZXJpZXNNQSA9IGZpbGxTZXJpZXMoc2VyaWVzTUEsIG9wdHMsIGNvbmZpZyk7XHJcbiAgICAgIG9wdHMuc2VyaWVzTUEgPSBzZXJpZXNNQTtcclxuICAgIH0gZWxzZSBpZiAob3B0cy5zZXJpZXNNQSkge1xyXG4gICAgICBzZXJpZXNNQSA9IG9wdHMuc2VyaWVzTUEgPSBmaWxsU2VyaWVzKG9wdHMuc2VyaWVzTUEsIG9wdHMsIGNvbmZpZyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzZXJpZXNNQSA9IHNlcmllcztcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgc2VyaWVzTUEgPSBzZXJpZXM7XHJcbiAgfVxyXG5cclxuICAvKiDov4fmu6TmjolzaG93PWZhbHNl55qEc2VyaWVzICovXHJcbiAgb3B0cy5fc2VyaWVzXyA9IHNlcmllcyA9IGZpbHRlclNlcmllcyhzZXJpZXMpO1xyXG5cclxuICAvL+mHjeaWsOiuoeeul+WbvuihqOWMuuWfn1xyXG5cclxuICBvcHRzLmFyZWEgPSBuZXcgQXJyYXkoNCk7XHJcbiAgLy/lpI3kvY3nu5jlm77ljLrln59cclxuICBmb3IgKGxldCBqID0gMDsgaiA8IDQ7IGorKykge1xyXG4gICAgb3B0cy5hcmVhW2pdID0gb3B0cy5wYWRkaW5nW2pdO1xyXG4gIH1cclxuXHJcbiAgLy/pgJrov4forqHnrpfkuInlpKfljLrln5/vvJrlm77kvovjgIFY6L2044CBWei9tOeahOWkp+Wwj++8jOehruWumue7mOWbvuWMuuWfn1xyXG4gIHZhciBfY2FsTGVnZW5kRGF0YSA9IGNhbExlZ2VuZERhdGEoc2VyaWVzTUEsIG9wdHMsIGNvbmZpZywgb3B0cy5jaGFydERhdGEpLFxyXG4gICAgbGVnZW5kSGVpZ2h0ID0gX2NhbExlZ2VuZERhdGEuYXJlYS53aG9sZUhlaWdodCxcclxuICAgIGxlZ2VuZFdpZHRoID0gX2NhbExlZ2VuZERhdGEuYXJlYS53aG9sZVdpZHRoO1xyXG4gIC8vVE9ET+W6n+W8g2NvbmZpZy5sZWdlbmRIZWlnaHTlj4LmlbBcclxuICBjb25maWcubGVnZW5kSGVpZ2h0ID0gbGVnZW5kSGVpZ2h0O1xyXG4gIHN3aXRjaCAob3B0cy5sZWdlbmQucG9zaXRpb24pIHtcclxuICAgIGNhc2UgJ3RvcCc6XHJcbiAgICAgIG9wdHMuYXJlYVswXSArPSBsZWdlbmRIZWlnaHQ7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnYm90dG9tJzpcclxuICAgICAgb3B0cy5hcmVhWzJdICs9IGxlZ2VuZEhlaWdodDtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgb3B0cy5hcmVhWzNdICs9IGxlZ2VuZFdpZHRoO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ3JpZ2h0JzpcclxuICAgICAgb3B0cy5hcmVhWzFdICs9IGxlZ2VuZFdpZHRoO1xyXG4gICAgICBicmVhaztcclxuICB9XHJcblxyXG4gIGxldCBfY2FsWUF4aXNEYXRhID0ge30seUF4aXNXaWR0aCA9IDA7XHJcbiAgaWYgKG9wdHMudHlwZSA9PT0gJ2xpbmUnIHx8IG9wdHMudHlwZSA9PT0gJ2NvbHVtbicgfHwgb3B0cy50eXBlID09PSAnYXJlYScgfHwgb3B0cy50eXBlID09PSAnbWl4JyB8fCBvcHRzLnR5cGUgPT09ICdjYW5kbGUnKSB7XHJcbiAgICBfY2FsWUF4aXNEYXRhID0gY2FsWUF4aXNEYXRhKHNlcmllcywgb3B0cywgY29uZmlnKTtcclxuICAgIHlBeGlzV2lkdGggPSBfY2FsWUF4aXNEYXRhLnlBeGlzV2lkdGg7XHJcbiAgICBjb25maWcueUF4aXNXaWR0aCA9IHlBeGlzV2lkdGg7XHJcbiAgICBvcHRzLmFyZWFbM10gKz0geUF4aXNXaWR0aDtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uZmlnLnlBeGlzV2lkdGggPSB5QXhpc1dpZHRoO1xyXG4gIH1cclxuICBvcHRzLmNoYXJ0RGF0YS55QXhpc0RhdGEgPSBfY2FsWUF4aXNEYXRhO1xyXG5cclxuICBpZiAob3B0cy5jYXRlZ29yaWVzICYmIG9wdHMuY2F0ZWdvcmllcy5sZW5ndGgpIHtcclxuICAgIG9wdHMuY2hhcnREYXRhLnhBeGlzRGF0YSA9IGdldFhBeGlzUG9pbnRzKG9wdHMuY2F0ZWdvcmllcywgb3B0cywgY29uZmlnKTtcclxuICAgIGxldCBfY2FsQ2F0ZWdvcmllc0RhdGEgPSBjYWxDYXRlZ29yaWVzRGF0YShvcHRzLmNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgb3B0cy5jaGFydERhdGEueEF4aXNEYXRhLmVhY2hTcGFjaW5nKSxcclxuICAgICAgeEF4aXNIZWlnaHQgPSBfY2FsQ2F0ZWdvcmllc0RhdGEueEF4aXNIZWlnaHQsXHJcbiAgICAgIGFuZ2xlID0gX2NhbENhdGVnb3JpZXNEYXRhLmFuZ2xlO1xyXG4gICAgY29uZmlnLnhBeGlzSGVpZ2h0ID0geEF4aXNIZWlnaHQ7XHJcbiAgICBjb25maWcuX3hBeGlzVGV4dEFuZ2xlXyA9IGFuZ2xlO1xyXG4gICAgb3B0cy5hcmVhWzJdICs9IHhBeGlzSGVpZ2h0O1xyXG4gICAgb3B0cy5jaGFydERhdGEuY2F0ZWdvcmllc0RhdGEgPSBfY2FsQ2F0ZWdvcmllc0RhdGE7XHJcbiAgfVxyXG5cclxuICAvL+iuoeeul+WPs+Wvuem9kOWBj+enu+i3neemu1xyXG4gIGlmIChvcHRzLmVuYWJsZVNjcm9sbCAmJiBvcHRzLnhBeGlzLnNjcm9sbEFsaWduID09ICdyaWdodCcgJiYgb3B0cy5fc2Nyb2xsRGlzdGFuY2VfID09PSB1bmRlZmluZWQpIHtcclxuICAgIGxldCBvZmZzZXRMZWZ0ID0gMCxcclxuICAgICAgeEF4aXNQb2ludHMgPSBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEueEF4aXNQb2ludHMsXHJcbiAgICAgIHN0YXJ0WCA9IG9wdHMuY2hhcnREYXRhLnhBeGlzRGF0YS5zdGFydFgsXHJcbiAgICAgIGVuZFggPSBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEuZW5kWCxcclxuICAgICAgZWFjaFNwYWNpbmcgPSBvcHRzLmNoYXJ0RGF0YS54QXhpc0RhdGEuZWFjaFNwYWNpbmc7XHJcbiAgICBsZXQgdG90YWxXaWR0aCA9IGVhY2hTcGFjaW5nICogKHhBeGlzUG9pbnRzLmxlbmd0aCAtIDEpO1xyXG4gICAgbGV0IHNjcmVlbldpZHRoID0gZW5kWCAtIHN0YXJ0WDtcclxuICAgIG9mZnNldExlZnQgPSBzY3JlZW5XaWR0aCAtIHRvdGFsV2lkdGg7XHJcbiAgICBfdGhpcy5zY3JvbGxPcHRpb24gPSB7XHJcbiAgICAgIGN1cnJlbnRPZmZzZXQ6IG9mZnNldExlZnQsXHJcbiAgICAgIHN0YXJ0VG91Y2hYOiBvZmZzZXRMZWZ0LFxyXG4gICAgICBkaXN0YW5jZTogMCxcclxuICAgICAgbGFzdE1vdmVUaW1lOiAwXHJcbiAgICB9O1xyXG4gICAgb3B0cy5fc2Nyb2xsRGlzdGFuY2VfID0gb2Zmc2V0TGVmdDtcclxuICB9XHJcblxyXG4gIGlmICh0eXBlID09PSAncGllJyB8fCB0eXBlID09PSAncmluZycgfHwgdHlwZSA9PT0gJ3Jvc2UnKSB7XHJcbiAgICBjb25maWcuX3BpZVRleHRNYXhMZW5ndGhfID0gb3B0cy5kYXRhTGFiZWwgPT09IGZhbHNlID8gMCA6IGdldFBpZVRleHRNYXhMZW5ndGgoc2VyaWVzTUEpO1xyXG4gIH1cclxuXHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlICd3b3JkJzpcclxuICAgICAgbGV0IHdvcmRPcHRpb24gPSBhc3NpZ24oe30se1xyXG4gICAgICAgIHR5cGU6ICdub3JtYWwnLFxyXG4gICAgICAgIGF1dG9Db2xvcnM6IHRydWVcclxuICAgICAgfSxvcHRzLmV4dHJhLndvcmQpO1xyXG4gICAgICBpZihvcHRzLnVwZGF0ZURhdGE9PXRydWUgfHwgb3B0cy51cGRhdGVEYXRhPT11bmRlZmluZWQpe1xyXG4gICAgICAgIG9wdHMuY2hhcnREYXRhLndvcmRDbG91ZERhdGE9Z2V0V29yZENsb3VkUG9pbnQob3B0cyx3b3JkT3B0aW9uLnR5cGUpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgPSBuZXcgQW5pbWF0aW9uKHtcclxuICAgICAgICB0aW1pbmc6ICdlYXNlSW5PdXQnLFxyXG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuICAgICAgICBvblByb2Nlc3M6IGZ1bmN0aW9uKHByb2Nlc3MpIHtcclxuICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcclxuICAgICAgICAgIGlmIChvcHRzLnJvdGF0ZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0Um90YXRlKGNvbnRleHQsIG9wdHMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZHJhd1dvcmRDbG91ZERhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQscHJvY2Vzcyk7XHJcbiAgICAgICAgICBkcmF3Q2FudmFzKG9wdHMsIGNvbnRleHQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25BbmltYXRpb25GaW5pc2g6IGZ1bmN0aW9uIG9uQW5pbWF0aW9uRmluaXNoKCkge1xyXG4gICAgICAgICAgX3RoaXMuZXZlbnQudHJpZ2dlcigncmVuZGVyQ29tcGxldGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgYnJlYWs7XHJcbiAgICBjYXNlICdtYXAnOlxyXG4gICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XHJcbiAgICAgIGRyYXdNYXBEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnZnVubmVsJzpcclxuICAgICAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSA9IG5ldyBBbmltYXRpb24oe1xyXG4gICAgICAgIHRpbWluZzogJ2Vhc2VJbk91dCcsXHJcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxyXG4gICAgICAgIG9uUHJvY2VzczogZnVuY3Rpb24ocHJvY2Vzcykge1xyXG4gICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgb3B0cy53aWR0aCwgb3B0cy5oZWlnaHQpO1xyXG4gICAgICAgICAgaWYgKG9wdHMucm90YXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRSb3RhdGUoY29udGV4dCwgb3B0cyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS5mdW5uZWxEYXRhID0gZHJhd0Z1bm5lbERhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpO1xyXG4gICAgICAgICAgZHJhd0xlZ2VuZChvcHRzLnNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBvcHRzLmNoYXJ0RGF0YSk7XHJcbiAgICAgICAgICBkcmF3VG9vbFRpcEJyaWRnZShvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpO1xyXG4gICAgICAgICAgZHJhd0NhbnZhcyhvcHRzLCBjb250ZXh0KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcclxuICAgICAgICAgIF90aGlzLmV2ZW50LnRyaWdnZXIoJ3JlbmRlckNvbXBsZXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnbGluZSc6XHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgPSBuZXcgQW5pbWF0aW9uKHtcclxuICAgICAgICB0aW1pbmc6ICdlYXNlSW4nLFxyXG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuICAgICAgICBvblByb2Nlc3M6IGZ1bmN0aW9uIG9uUHJvY2Vzcyhwcm9jZXNzKSB7XHJcbiAgICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XHJcbiAgICAgICAgICBpZiAob3B0cy5yb3RhdGUpIHtcclxuICAgICAgICAgICAgY29udGV4dFJvdGF0ZShjb250ZXh0LCBvcHRzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGRyYXdZQXhpc0dyaWQoY2F0ZWdvcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgIGRyYXdYQXhpcyhjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgdmFyIF9kcmF3TGluZURhdGFQb2ludHMgPSBkcmF3TGluZURhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpLFxyXG4gICAgICAgICAgICB4QXhpc1BvaW50cyA9IF9kcmF3TGluZURhdGFQb2ludHMueEF4aXNQb2ludHMsXHJcbiAgICAgICAgICAgIGNhbFBvaW50cyA9IF9kcmF3TGluZURhdGFQb2ludHMuY2FsUG9pbnRzLFxyXG4gICAgICAgICAgICBlYWNoU3BhY2luZyA9IF9kcmF3TGluZURhdGFQb2ludHMuZWFjaFNwYWNpbmcsXHJcbiAgICAgICAgICAgIG1pblJhbmdlID0gX2RyYXdMaW5lRGF0YVBvaW50cy5taW5SYW5nZSxcclxuICAgICAgICAgICAgbWF4UmFuZ2UgPSBfZHJhd0xpbmVEYXRhUG9pbnRzLm1heFJhbmdlO1xyXG4gICAgICAgICAgb3B0cy5jaGFydERhdGEueEF4aXNQb2ludHMgPSB4QXhpc1BvaW50cztcclxuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLmNhbFBvaW50cyA9IGNhbFBvaW50cztcclxuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLmVhY2hTcGFjaW5nID0gZWFjaFNwYWNpbmc7XHJcbiAgICAgICAgICBkcmF3WUF4aXMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgaWYgKG9wdHMuZW5hYmxlTWFya0xpbmUgIT09IGZhbHNlICYmIHByb2Nlc3MgPT09IDEpIHtcclxuICAgICAgICAgICAgZHJhd01hcmtMaW5lKG1pblJhbmdlLCBtYXhSYW5nZSwgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGRyYXdMZWdlbmQob3B0cy5zZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgb3B0cy5jaGFydERhdGEpO1xyXG4gICAgICAgICAgZHJhd1Rvb2xUaXBCcmlkZ2Uob3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzLCBlYWNoU3BhY2luZywgeEF4aXNQb2ludHMpO1xyXG4gICAgICAgICAgZHJhd0NhbnZhcyhvcHRzLCBjb250ZXh0KTtcclxuXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XHJcbiAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnbWl4JzpcclxuICAgICAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSA9IG5ldyBBbmltYXRpb24oe1xyXG4gICAgICAgIHRpbWluZzogJ2Vhc2VJbicsXHJcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxyXG4gICAgICAgIG9uUHJvY2VzczogZnVuY3Rpb24gb25Qcm9jZXNzKHByb2Nlc3MpIHtcclxuICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcclxuICAgICAgICAgIGlmIChvcHRzLnJvdGF0ZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0Um90YXRlKGNvbnRleHQsIG9wdHMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZHJhd1lBeGlzR3JpZChjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgZHJhd1hBeGlzKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICB2YXIgX2RyYXdNaXhEYXRhUG9pbnRzID0gZHJhd01peERhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpLFxyXG4gICAgICAgICAgICB4QXhpc1BvaW50cyA9IF9kcmF3TWl4RGF0YVBvaW50cy54QXhpc1BvaW50cyxcclxuICAgICAgICAgICAgY2FsUG9pbnRzID0gX2RyYXdNaXhEYXRhUG9pbnRzLmNhbFBvaW50cyxcclxuICAgICAgICAgICAgZWFjaFNwYWNpbmcgPSBfZHJhd01peERhdGFQb2ludHMuZWFjaFNwYWNpbmcsXHJcbiAgICAgICAgICAgIG1pblJhbmdlID0gX2RyYXdNaXhEYXRhUG9pbnRzLm1pblJhbmdlLFxyXG4gICAgICAgICAgICBtYXhSYW5nZSA9IF9kcmF3TWl4RGF0YVBvaW50cy5tYXhSYW5nZTtcclxuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLnhBeGlzUG9pbnRzID0geEF4aXNQb2ludHM7XHJcbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS5jYWxQb2ludHMgPSBjYWxQb2ludHM7XHJcbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS5lYWNoU3BhY2luZyA9IGVhY2hTcGFjaW5nO1xyXG4gICAgICAgICAgZHJhd1lBeGlzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgIGlmIChvcHRzLmVuYWJsZU1hcmtMaW5lICE9PSBmYWxzZSAmJiBwcm9jZXNzID09PSAxKSB7XHJcbiAgICAgICAgICAgIGRyYXdNYXJrTGluZShtaW5SYW5nZSwgbWF4UmFuZ2UsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBkcmF3TGVnZW5kKG9wdHMuc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIG9wdHMuY2hhcnREYXRhKTtcclxuICAgICAgICAgIGRyYXdUb29sVGlwQnJpZGdlKG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2VzcywgZWFjaFNwYWNpbmcsIHhBeGlzUG9pbnRzKTtcclxuICAgICAgICAgIGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XHJcbiAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnY29sdW1uJzpcclxuICAgICAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSA9IG5ldyBBbmltYXRpb24oe1xyXG4gICAgICAgIHRpbWluZzogJ2Vhc2VJbicsXHJcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxyXG4gICAgICAgIG9uUHJvY2VzczogZnVuY3Rpb24gb25Qcm9jZXNzKHByb2Nlc3MpIHtcclxuICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcclxuICAgICAgICAgIGlmIChvcHRzLnJvdGF0ZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0Um90YXRlKGNvbnRleHQsIG9wdHMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZHJhd1lBeGlzR3JpZChjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgZHJhd1hBeGlzKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICB2YXIgX2RyYXdDb2x1bW5EYXRhUG9pbnRzID0gZHJhd0NvbHVtbkRhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpLFxyXG4gICAgICAgICAgICB4QXhpc1BvaW50cyA9IF9kcmF3Q29sdW1uRGF0YVBvaW50cy54QXhpc1BvaW50cyxcclxuICAgICAgICAgICAgY2FsUG9pbnRzID0gX2RyYXdDb2x1bW5EYXRhUG9pbnRzLmNhbFBvaW50cyxcclxuICAgICAgICAgICAgZWFjaFNwYWNpbmcgPSBfZHJhd0NvbHVtbkRhdGFQb2ludHMuZWFjaFNwYWNpbmcsXHJcbiAgICAgICAgICAgIG1pblJhbmdlID0gX2RyYXdDb2x1bW5EYXRhUG9pbnRzLm1pblJhbmdlLFxyXG4gICAgICAgICAgICBtYXhSYW5nZSA9IF9kcmF3Q29sdW1uRGF0YVBvaW50cy5tYXhSYW5nZTtcclxuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLnhBeGlzUG9pbnRzID0geEF4aXNQb2ludHM7XHJcbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS5jYWxQb2ludHMgPSBjYWxQb2ludHM7XHJcbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS5lYWNoU3BhY2luZyA9IGVhY2hTcGFjaW5nO1xyXG4gICAgICAgICAgZHJhd1lBeGlzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgIGlmIChvcHRzLmVuYWJsZU1hcmtMaW5lICE9PSBmYWxzZSAmJiBwcm9jZXNzID09PSAxKSB7XHJcbiAgICAgICAgICAgIGRyYXdNYXJrTGluZShtaW5SYW5nZSwgbWF4UmFuZ2UsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBkcmF3TGVnZW5kKG9wdHMuc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIG9wdHMuY2hhcnREYXRhKTtcclxuICAgICAgICAgIGRyYXdUb29sVGlwQnJpZGdlKG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2VzcywgZWFjaFNwYWNpbmcsIHhBeGlzUG9pbnRzKTtcclxuICAgICAgICAgIGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XHJcbiAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnYXJlYSc6XHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgPSBuZXcgQW5pbWF0aW9uKHtcclxuICAgICAgICB0aW1pbmc6ICdlYXNlSW4nLFxyXG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuICAgICAgICBvblByb2Nlc3M6IGZ1bmN0aW9uIG9uUHJvY2Vzcyhwcm9jZXNzKSB7XHJcbiAgICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XHJcbiAgICAgICAgICBpZiAob3B0cy5yb3RhdGUpIHtcclxuICAgICAgICAgICAgY29udGV4dFJvdGF0ZShjb250ZXh0LCBvcHRzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGRyYXdZQXhpc0dyaWQoY2F0ZWdvcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgIGRyYXdYQXhpcyhjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgdmFyIF9kcmF3QXJlYURhdGFQb2ludHMgPSBkcmF3QXJlYURhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpLFxyXG4gICAgICAgICAgICB4QXhpc1BvaW50cyA9IF9kcmF3QXJlYURhdGFQb2ludHMueEF4aXNQb2ludHMsXHJcbiAgICAgICAgICAgIGNhbFBvaW50cyA9IF9kcmF3QXJlYURhdGFQb2ludHMuY2FsUG9pbnRzLFxyXG4gICAgICAgICAgICBlYWNoU3BhY2luZyA9IF9kcmF3QXJlYURhdGFQb2ludHMuZWFjaFNwYWNpbmcsXHJcbiAgICAgICAgICAgIG1pblJhbmdlID0gX2RyYXdBcmVhRGF0YVBvaW50cy5taW5SYW5nZSxcclxuICAgICAgICAgICAgbWF4UmFuZ2UgPSBfZHJhd0FyZWFEYXRhUG9pbnRzLm1heFJhbmdlO1xyXG4gICAgICAgICAgb3B0cy5jaGFydERhdGEueEF4aXNQb2ludHMgPSB4QXhpc1BvaW50cztcclxuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLmNhbFBvaW50cyA9IGNhbFBvaW50cztcclxuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLmVhY2hTcGFjaW5nID0gZWFjaFNwYWNpbmc7XHJcbiAgICAgICAgICBkcmF3WUF4aXMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgaWYgKG9wdHMuZW5hYmxlTWFya0xpbmUgIT09IGZhbHNlICYmIHByb2Nlc3MgPT09IDEpIHtcclxuICAgICAgICAgICAgZHJhd01hcmtMaW5lKG1pblJhbmdlLCBtYXhSYW5nZSwgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGRyYXdMZWdlbmQob3B0cy5zZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgb3B0cy5jaGFydERhdGEpO1xyXG4gICAgICAgICAgZHJhd1Rvb2xUaXBCcmlkZ2Uob3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzLCBlYWNoU3BhY2luZywgeEF4aXNQb2ludHMpO1xyXG4gICAgICAgICAgZHJhd0NhbnZhcyhvcHRzLCBjb250ZXh0KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcclxuICAgICAgICAgIF90aGlzLmV2ZW50LnRyaWdnZXIoJ3JlbmRlckNvbXBsZXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdyaW5nJzpcclxuICAgIGNhc2UgJ3BpZSc6XHJcbiAgICAgIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgPSBuZXcgQW5pbWF0aW9uKHtcclxuICAgICAgICB0aW1pbmc6ICdlYXNlSW5PdXQnLFxyXG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuICAgICAgICBvblByb2Nlc3M6IGZ1bmN0aW9uIG9uUHJvY2Vzcyhwcm9jZXNzKSB7XHJcbiAgICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XHJcbiAgICAgICAgICBpZiAob3B0cy5yb3RhdGUpIHtcclxuICAgICAgICAgICAgY29udGV4dFJvdGF0ZShjb250ZXh0LCBvcHRzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIG9wdHMuY2hhcnREYXRhLnBpZURhdGEgPSBkcmF3UGllRGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2Vzcyk7XHJcbiAgICAgICAgICBkcmF3TGVnZW5kKG9wdHMuc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIG9wdHMuY2hhcnREYXRhKTtcclxuICAgICAgICAgIGRyYXdUb29sVGlwQnJpZGdlKG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2Vzcyk7XHJcbiAgICAgICAgICBkcmF3Q2FudmFzKG9wdHMsIGNvbnRleHQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25BbmltYXRpb25GaW5pc2g6IGZ1bmN0aW9uIG9uQW5pbWF0aW9uRmluaXNoKCkge1xyXG4gICAgICAgICAgX3RoaXMuZXZlbnQudHJpZ2dlcigncmVuZGVyQ29tcGxldGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ3Jvc2UnOlxyXG4gICAgICB0aGlzLmFuaW1hdGlvbkluc3RhbmNlID0gbmV3IEFuaW1hdGlvbih7XHJcbiAgICAgICAgdGltaW5nOiAnZWFzZUluT3V0JyxcclxuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXHJcbiAgICAgICAgb25Qcm9jZXNzOiBmdW5jdGlvbiBvblByb2Nlc3MocHJvY2Vzcykge1xyXG4gICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgb3B0cy53aWR0aCwgb3B0cy5oZWlnaHQpO1xyXG4gICAgICAgICAgaWYgKG9wdHMucm90YXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRSb3RhdGUoY29udGV4dCwgb3B0cyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS5waWVEYXRhID0gZHJhd1Jvc2VEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKTtcclxuICAgICAgICAgIGRyYXdMZWdlbmQob3B0cy5zZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgb3B0cy5jaGFydERhdGEpO1xyXG4gICAgICAgICAgZHJhd1Rvb2xUaXBCcmlkZ2Uob3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKTtcclxuICAgICAgICAgIGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XHJcbiAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAncmFkYXInOlxyXG4gICAgICB0aGlzLmFuaW1hdGlvbkluc3RhbmNlID0gbmV3IEFuaW1hdGlvbih7XHJcbiAgICAgICAgdGltaW5nOiAnZWFzZUluT3V0JyxcclxuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXHJcbiAgICAgICAgb25Qcm9jZXNzOiBmdW5jdGlvbiBvblByb2Nlc3MocHJvY2Vzcykge1xyXG4gICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgb3B0cy53aWR0aCwgb3B0cy5oZWlnaHQpO1xyXG4gICAgICAgICAgaWYgKG9wdHMucm90YXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRSb3RhdGUoY29udGV4dCwgb3B0cyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS5yYWRhckRhdGEgPSBkcmF3UmFkYXJEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKTtcclxuICAgICAgICAgIGRyYXdMZWdlbmQob3B0cy5zZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgb3B0cy5jaGFydERhdGEpO1xyXG4gICAgICAgICAgZHJhd1Rvb2xUaXBCcmlkZ2Uob3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKTtcclxuICAgICAgICAgIGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XHJcbiAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnYXJjYmFyJzpcclxuICAgICAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSA9IG5ldyBBbmltYXRpb24oe1xyXG4gICAgICAgIHRpbWluZzogJ2Vhc2VJbk91dCcsXHJcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxyXG4gICAgICAgIG9uUHJvY2VzczogZnVuY3Rpb24gb25Qcm9jZXNzKHByb2Nlc3MpIHtcclxuICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcclxuICAgICAgICAgIGlmIChvcHRzLnJvdGF0ZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0Um90YXRlKGNvbnRleHQsIG9wdHMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgb3B0cy5jaGFydERhdGEuYXJjYmFyRGF0YSA9IGRyYXdBcmNiYXJEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKTtcclxuICAgICAgICAgIGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XHJcbiAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnZ2F1Z2UnOlxyXG4gICAgICB0aGlzLmFuaW1hdGlvbkluc3RhbmNlID0gbmV3IEFuaW1hdGlvbih7XHJcbiAgICAgICAgdGltaW5nOiAnZWFzZUluT3V0JyxcclxuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXHJcbiAgICAgICAgb25Qcm9jZXNzOiBmdW5jdGlvbiBvblByb2Nlc3MocHJvY2Vzcykge1xyXG4gICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgb3B0cy53aWR0aCwgb3B0cy5oZWlnaHQpO1xyXG4gICAgICAgICAgaWYgKG9wdHMucm90YXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHRSb3RhdGUoY29udGV4dCwgb3B0cyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS5nYXVnZURhdGEgPSBkcmF3R2F1Z2VEYXRhUG9pbnRzKGNhdGVnb3JpZXMsIHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKTtcclxuICAgICAgICAgIGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XHJcbiAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnY2FuZGxlJzpcclxuICAgICAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSA9IG5ldyBBbmltYXRpb24oe1xyXG4gICAgICAgIHRpbWluZzogJ2Vhc2VJbicsXHJcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxyXG4gICAgICAgIG9uUHJvY2VzczogZnVuY3Rpb24gb25Qcm9jZXNzKHByb2Nlc3MpIHtcclxuICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcclxuICAgICAgICAgIGlmIChvcHRzLnJvdGF0ZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0Um90YXRlKGNvbnRleHQsIG9wdHMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZHJhd1lBeGlzR3JpZChjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgZHJhd1hBeGlzKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICB2YXIgX2RyYXdDYW5kbGVEYXRhUG9pbnRzID0gZHJhd0NhbmRsZURhdGFQb2ludHMoc2VyaWVzLCBzZXJpZXNNQSwgb3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKSxcclxuICAgICAgICAgICAgeEF4aXNQb2ludHMgPSBfZHJhd0NhbmRsZURhdGFQb2ludHMueEF4aXNQb2ludHMsXHJcbiAgICAgICAgICAgIGNhbFBvaW50cyA9IF9kcmF3Q2FuZGxlRGF0YVBvaW50cy5jYWxQb2ludHMsXHJcbiAgICAgICAgICAgIGVhY2hTcGFjaW5nID0gX2RyYXdDYW5kbGVEYXRhUG9pbnRzLmVhY2hTcGFjaW5nLFxyXG4gICAgICAgICAgICBtaW5SYW5nZSA9IF9kcmF3Q2FuZGxlRGF0YVBvaW50cy5taW5SYW5nZSxcclxuICAgICAgICAgICAgbWF4UmFuZ2UgPSBfZHJhd0NhbmRsZURhdGFQb2ludHMubWF4UmFuZ2U7XHJcbiAgICAgICAgICBvcHRzLmNoYXJ0RGF0YS54QXhpc1BvaW50cyA9IHhBeGlzUG9pbnRzO1xyXG4gICAgICAgICAgb3B0cy5jaGFydERhdGEuY2FsUG9pbnRzID0gY2FsUG9pbnRzO1xyXG4gICAgICAgICAgb3B0cy5jaGFydERhdGEuZWFjaFNwYWNpbmcgPSBlYWNoU3BhY2luZztcclxuICAgICAgICAgIGRyYXdZQXhpcyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICBpZiAob3B0cy5lbmFibGVNYXJrTGluZSAhPT0gZmFsc2UgJiYgcHJvY2VzcyA9PT0gMSkge1xyXG4gICAgICAgICAgICBkcmF3TWFya0xpbmUobWluUmFuZ2UsIG1heFJhbmdlLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKHNlcmllc01BKSB7XHJcbiAgICAgICAgICAgIGRyYXdMZWdlbmQoc2VyaWVzTUEsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgb3B0cy5jaGFydERhdGEpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZHJhd0xlZ2VuZChvcHRzLnNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBvcHRzLmNoYXJ0RGF0YSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBkcmF3VG9vbFRpcEJyaWRnZShvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MsIGVhY2hTcGFjaW5nLCB4QXhpc1BvaW50cyk7XHJcbiAgICAgICAgICBkcmF3Q2FudmFzKG9wdHMsIGNvbnRleHQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25BbmltYXRpb25GaW5pc2g6IGZ1bmN0aW9uIG9uQW5pbWF0aW9uRmluaXNoKCkge1xyXG4gICAgICAgICAgX3RoaXMuZXZlbnQudHJpZ2dlcigncmVuZGVyQ29tcGxldGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBicmVhaztcclxuICB9XHJcbn1cclxuXHJcbi8vIHNpbXBsZSBldmVudCBpbXBsZW1lbnRcclxuXHJcbmZ1bmN0aW9uIEV2ZW50KCkge1xyXG4gIHRoaXMuZXZlbnRzID0ge307XHJcbn1cclxuXHJcbkV2ZW50LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcclxuICB0aGlzLmV2ZW50c1t0eXBlXSA9IHRoaXMuZXZlbnRzW3R5cGVdIHx8IFtdO1xyXG4gIHRoaXMuZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xyXG59O1xyXG5cclxuRXZlbnQucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbigpIHtcclxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xyXG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcclxuICB9XHJcblxyXG4gIHZhciB0eXBlID0gYXJnc1swXTtcclxuICB2YXIgcGFyYW1zID0gYXJncy5zbGljZSgxKTtcclxuICBpZiAoISF0aGlzLmV2ZW50c1t0eXBlXSkge1xyXG4gICAgdGhpcy5ldmVudHNbdHlwZV0uZm9yRWFjaChmdW5jdGlvbihsaXN0ZW5lcikge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGxpc3RlbmVyLmFwcGx5KG51bGwsIHBhcmFtcyk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn07XHJcblxyXG52YXIgQ2hhcnRzID0gZnVuY3Rpb24gQ2hhcnRzKG9wdHMpIHtcclxuICBvcHRzLnBpeGVsUmF0aW8gPSBvcHRzLnBpeGVsUmF0aW8gPyBvcHRzLnBpeGVsUmF0aW8gOiAxO1xyXG4gIG9wdHMuZm9udFNpemUgPSBvcHRzLmZvbnRTaXplID8gb3B0cy5mb250U2l6ZSAqIG9wdHMucGl4ZWxSYXRpbyA6IDEzICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIG9wdHMudGl0bGUgPSBhc3NpZ24oe30sIG9wdHMudGl0bGUpO1xyXG4gIG9wdHMuc3VidGl0bGUgPSBhc3NpZ24oe30sIG9wdHMuc3VidGl0bGUpO1xyXG4gIG9wdHMuZHVyYXRpb24gPSBvcHRzLmR1cmF0aW9uID8gb3B0cy5kdXJhdGlvbiA6IDEwMDA7XHJcbiAgb3B0cy55QXhpcyA9IGFzc2lnbih7fSwge1xyXG4gICAgZ3JpZFR5cGU6ICdzb2xpZCcsXHJcbiAgICBkYXNoTGVuZ3RoOiA0ICogb3B0cy5waXhlbFJhdGlvXHJcbiAgfSwgb3B0cy55QXhpcyk7XHJcbiAgb3B0cy54QXhpcyA9IGFzc2lnbih7fSwge1xyXG4gICAgcm90YXRlTGFiZWw6IGZhbHNlLFxyXG4gICAgdHlwZTogJ2NhbGlicmF0aW9uJyxcclxuICAgIGdyaWRUeXBlOiAnc29saWQnLFxyXG4gICAgZGFzaExlbmd0aDogNCAqIG9wdHMucGl4ZWxSYXRpbyxcclxuICAgIHNjcm9sbEFsaWduOiAnbGVmdCcsXHJcbiAgICBib3VuZGFyeUdhcDonY2VudGVyJ1xyXG4gIH0sIG9wdHMueEF4aXMpO1xyXG4gIG9wdHMubGVnZW5kID0gYXNzaWduKHt9LCB7XHJcbiAgICBzaG93OiB0cnVlLFxyXG4gICAgcG9zaXRpb246ICdib3R0b20nLFxyXG4gICAgZmxvYXQ6ICdjZW50ZXInLFxyXG4gICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwKScsXHJcbiAgICBib3JkZXJDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxyXG4gICAgYm9yZGVyV2lkdGg6IDAsXHJcbiAgICBwYWRkaW5nOiA1LFxyXG4gICAgbWFyZ2luOiA1LFxyXG4gICAgaXRlbUdhcDogMTAsXHJcbiAgICBmb250U2l6ZTogb3B0cy5mb250U2l6ZSxcclxuICAgIGxpbmVIZWlnaHQ6IG9wdHMuZm9udFNpemUsXHJcbiAgICBmb250Q29sb3I6ICcjMzMzMzMzJyxcclxuICAgIGZvcm1hdDoge30sXHJcbiAgICBoaWRkZW5Db2xvcjogJyNDRUNFQ0UnXHJcbiAgfSwgb3B0cy5sZWdlbmQpO1xyXG4gIG9wdHMubGVnZW5kLmJvcmRlcldpZHRoID0gb3B0cy5sZWdlbmQuYm9yZGVyV2lkdGggKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgb3B0cy5sZWdlbmQuaXRlbUdhcCA9IG9wdHMubGVnZW5kLml0ZW1HYXAgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgb3B0cy5sZWdlbmQucGFkZGluZyA9IG9wdHMubGVnZW5kLnBhZGRpbmcgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgb3B0cy5sZWdlbmQubWFyZ2luID0gb3B0cy5sZWdlbmQubWFyZ2luICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIG9wdHMuZXh0cmEgPSBhc3NpZ24oe30sIG9wdHMuZXh0cmEpO1xyXG4gIG9wdHMucm90YXRlID0gb3B0cy5yb3RhdGUgPyB0cnVlIDogZmFsc2U7XHJcbiAgb3B0cy5hbmltYXRpb24gPSBvcHRzLmFuaW1hdGlvbiA/IHRydWUgOiBmYWxzZTtcclxuXHJcbiAgbGV0IGNvbmZpZyQkMSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7XHJcbiAgY29uZmlnJCQxLmNvbG9ycyA9IG9wdHMuY29sb3JzID8gb3B0cy5jb2xvcnMgOiBjb25maWckJDEuY29sb3JzO1xyXG4gIGNvbmZpZyQkMS55QXhpc1RpdGxlV2lkdGggPSBvcHRzLnlBeGlzLmRpc2FibGVkICE9PSB0cnVlICYmIG9wdHMueUF4aXMudGl0bGUgPyBjb25maWckJDEueUF4aXNUaXRsZVdpZHRoIDogMDtcclxuICBpZiAob3B0cy50eXBlID09ICdwaWUnIHx8IG9wdHMudHlwZSA9PSAncmluZycpIHtcclxuICAgIGNvbmZpZyQkMS5waWVDaGFydExpbmVQYWRkaW5nID0gb3B0cy5kYXRhTGFiZWwgPT09IGZhbHNlID8gMCA6IG9wdHMuZXh0cmEucGllLmxhYmVsV2lkdGggKiBvcHRzLnBpeGVsUmF0aW8gfHwgY29uZmlnJCQxLnBpZUNoYXJ0TGluZVBhZGRpbmcgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgfVxyXG4gIGlmIChvcHRzLnR5cGUgPT0gJ3Jvc2UnKSB7XHJcbiAgICBjb25maWckJDEucGllQ2hhcnRMaW5lUGFkZGluZyA9IG9wdHMuZGF0YUxhYmVsID09PSBmYWxzZSA/IDAgOiBvcHRzLmV4dHJhLnJvc2UubGFiZWxXaWR0aCAqIG9wdHMucGl4ZWxSYXRpbyB8fCBjb25maWckJDEucGllQ2hhcnRMaW5lUGFkZGluZyAqIG9wdHMucGl4ZWxSYXRpbztcclxuICB9XHJcbiAgY29uZmlnJCQxLnBpZUNoYXJ0VGV4dFBhZGRpbmcgPSBvcHRzLmRhdGFMYWJlbCA9PT0gZmFsc2UgPyAwIDogY29uZmlnJCQxLnBpZUNoYXJ0VGV4dFBhZGRpbmcgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgY29uZmlnJCQxLnlBeGlzU3BsaXQgPSBvcHRzLnlBeGlzLnNwbGl0TnVtYmVyID8gb3B0cy55QXhpcy5zcGxpdE51bWJlciA6IGNvbmZpZy55QXhpc1NwbGl0O1xyXG5cclxuICAvL+Wxj+W5leaXi+i9rFxyXG4gIGNvbmZpZyQkMS5yb3RhdGUgPSBvcHRzLnJvdGF0ZTtcclxuICBpZiAob3B0cy5yb3RhdGUpIHtcclxuICAgIGxldCB0ZW1wV2lkdGggPSBvcHRzLndpZHRoO1xyXG4gICAgbGV0IHRlbXBIZWlnaHQgPSBvcHRzLmhlaWdodDtcclxuICAgIG9wdHMud2lkdGggPSB0ZW1wSGVpZ2h0O1xyXG4gICAgb3B0cy5oZWlnaHQgPSB0ZW1wV2lkdGg7XHJcbiAgfVxyXG5cclxuICAvL+mAgumFjemrmOWIhuWxj1xyXG4gIG9wdHMucGFkZGluZyA9IG9wdHMucGFkZGluZyA/IG9wdHMucGFkZGluZyA6IGNvbmZpZyQkMS5wYWRkaW5nO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XHJcbiAgICBvcHRzLnBhZGRpbmdbaV0gKj0gb3B0cy5waXhlbFJhdGlvO1xyXG4gIH1cclxuICBjb25maWckJDEueUF4aXNXaWR0aCA9IGNvbmZpZy55QXhpc1dpZHRoICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIGNvbmZpZyQkMS54QXhpc0hlaWdodCA9IGNvbmZpZy54QXhpc0hlaWdodCAqIG9wdHMucGl4ZWxSYXRpbztcclxuICBpZiAob3B0cy5lbmFibGVTY3JvbGwgJiYgb3B0cy54QXhpcy5zY3JvbGxTaG93KSB7XHJcbiAgICBjb25maWckJDEueEF4aXNIZWlnaHQgKz0gNiAqIG9wdHMucGl4ZWxSYXRpbztcclxuICB9XHJcbiAgY29uZmlnJCQxLnhBeGlzTGluZUhlaWdodCA9IGNvbmZpZy54QXhpc0xpbmVIZWlnaHQgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgY29uZmlnJCQxLmxlZ2VuZEhlaWdodCA9IGNvbmZpZy5sZWdlbmRIZWlnaHQgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgY29uZmlnJCQxLmZvbnRTaXplID0gb3B0cy5mb250U2l6ZTtcclxuICBjb25maWckJDEudGl0bGVGb250U2l6ZSA9IGNvbmZpZy50aXRsZUZvbnRTaXplICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIGNvbmZpZyQkMS5zdWJ0aXRsZUZvbnRTaXplID0gY29uZmlnLnN1YnRpdGxlRm9udFNpemUgKiBvcHRzLnBpeGVsUmF0aW87XHJcbiAgY29uZmlnJCQxLnRvb2xUaXBQYWRkaW5nID0gY29uZmlnLnRvb2xUaXBQYWRkaW5nICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIGNvbmZpZyQkMS50b29sVGlwTGluZUhlaWdodCA9IGNvbmZpZy50b29sVGlwTGluZUhlaWdodCAqIG9wdHMucGl4ZWxSYXRpbztcclxuICBjb25maWckJDEuY29sdW1lUGFkZGluZyA9IGNvbmZpZy5jb2x1bWVQYWRkaW5nICogb3B0cy5waXhlbFJhdGlvO1xyXG4gIG9wdHMuJHRoaXMgPSBvcHRzLiR0aGlzID8gb3B0cy4kdGhpcyA6IHRoaXM7XHJcblxyXG4gIHRoaXMuY29udGV4dCA9IHVuaS5jcmVhdGVDYW52YXNDb250ZXh0KG9wdHMuY2FudmFzSWQsIG9wdHMuJHRoaXMpO1xyXG4gIC8qIOWFvOWuueWOn+eUn0g1XHJcbiAgdGhpcy5jb250ZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3B0cy5jYW52YXNJZCkuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gIHRoaXMuY29udGV4dC5zZXRTdHJva2VTdHlsZSA9IGZ1bmN0aW9uKGUpeyByZXR1cm4gdGhpcy5zdHJva2VTdHlsZT1lOyB9XHJcbiAgdGhpcy5jb250ZXh0LnNldExpbmVXaWR0aCA9IGZ1bmN0aW9uKGUpeyByZXR1cm4gdGhpcy5saW5lV2lkdGg9ZTsgfVxyXG4gIHRoaXMuY29udGV4dC5zZXRMaW5lQ2FwID0gZnVuY3Rpb24oZSl7IHJldHVybiB0aGlzLmxpbmVDYXA9ZTsgfVxyXG4gIHRoaXMuY29udGV4dC5zZXRGb250U2l6ZSA9IGZ1bmN0aW9uKGUpeyByZXR1cm4gdGhpcy5mb250PWUrXCJweCBzYW5zLXNlcmlmXCI7IH1cclxuICB0aGlzLmNvbnRleHQuc2V0RmlsbFN0eWxlID0gZnVuY3Rpb24oZSl7IHJldHVybiB0aGlzLmZpbGxTdHlsZT1lOyB9XHJcbiAgdGhpcy5jb250ZXh0LmRyYXcgPSBmdW5jdGlvbigpeyB9XHJcbiAgKi9cclxuXHJcbiAgb3B0cy5jaGFydERhdGEgPSB7fTtcclxuICB0aGlzLmV2ZW50ID0gbmV3IEV2ZW50KCk7XHJcbiAgdGhpcy5zY3JvbGxPcHRpb24gPSB7XHJcbiAgICBjdXJyZW50T2Zmc2V0OiAwLFxyXG4gICAgc3RhcnRUb3VjaFg6IDAsXHJcbiAgICBkaXN0YW5jZTogMCxcclxuICAgIGxhc3RNb3ZlVGltZTogMFxyXG4gIH07XHJcblxyXG4gIHRoaXMub3B0cyA9IG9wdHM7XHJcbiAgdGhpcy5jb25maWcgPSBjb25maWckJDE7XHJcblxyXG4gIGRyYXdDaGFydHMuY2FsbCh0aGlzLCBvcHRzLnR5cGUsIG9wdHMsIGNvbmZpZyQkMSwgdGhpcy5jb250ZXh0KTtcclxufTtcclxuXHJcbkNoYXJ0cy5wcm90b3R5cGUudXBkYXRlRGF0YSA9IGZ1bmN0aW9uKCkge1xyXG4gIGxldCBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcclxuICB0aGlzLm9wdHMgPSBhc3NpZ24oe30sIHRoaXMub3B0cywgZGF0YSk7XHJcbiAgdGhpcy5vcHRzLnVwZGF0ZURhdGEgPSB0cnVlO1xyXG4gIGxldCBzY3JvbGxQb3NpdGlvbiA9IGRhdGEuc2Nyb2xsUG9zaXRpb24gfHwgJ2N1cnJlbnQnO1xyXG4gIHN3aXRjaCAoc2Nyb2xsUG9zaXRpb24pIHtcclxuICAgIGNhc2UgJ2N1cnJlbnQnOlxyXG4gICAgICB0aGlzLm9wdHMuX3Njcm9sbERpc3RhbmNlXyA9IHRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQ7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnbGVmdCc6XHJcbiAgICAgIHRoaXMub3B0cy5fc2Nyb2xsRGlzdGFuY2VfID0gMDtcclxuICAgICAgdGhpcy5zY3JvbGxPcHRpb24gPSB7XHJcbiAgICAgICAgY3VycmVudE9mZnNldDogMCxcclxuICAgICAgICBzdGFydFRvdWNoWDogMCxcclxuICAgICAgICBkaXN0YW5jZTogMCxcclxuICAgICAgICBsYXN0TW92ZVRpbWU6IDBcclxuICAgICAgfTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdyaWdodCc6XHJcbiAgICAgIGxldCBfY2FsWUF4aXNEYXRhID0gY2FsWUF4aXNEYXRhKHRoaXMub3B0cy5zZXJpZXMsIHRoaXMub3B0cywgdGhpcy5jb25maWcpLFxyXG4gICAgICAgIHlBeGlzV2lkdGggPSBfY2FsWUF4aXNEYXRhLnlBeGlzV2lkdGg7XHJcbiAgICAgIHRoaXMuY29uZmlnLnlBeGlzV2lkdGggPSB5QXhpc1dpZHRoO1xyXG4gICAgICBsZXQgb2Zmc2V0TGVmdCA9IDA7XHJcbiAgICAgIGxldCBfZ2V0WEF4aXNQb2ludHMwID0gZ2V0WEF4aXNQb2ludHModGhpcy5vcHRzLmNhdGVnb3JpZXMsIHRoaXMub3B0cywgdGhpcy5jb25maWcpLFxyXG4gICAgICAgIHhBeGlzUG9pbnRzID0gX2dldFhBeGlzUG9pbnRzMC54QXhpc1BvaW50cyxcclxuICAgICAgICBzdGFydFggPSBfZ2V0WEF4aXNQb2ludHMwLnN0YXJ0WCxcclxuICAgICAgICBlbmRYID0gX2dldFhBeGlzUG9pbnRzMC5lbmRYLFxyXG4gICAgICAgIGVhY2hTcGFjaW5nID0gX2dldFhBeGlzUG9pbnRzMC5lYWNoU3BhY2luZztcclxuICAgICAgbGV0IHRvdGFsV2lkdGggPSBlYWNoU3BhY2luZyAqICh4QXhpc1BvaW50cy5sZW5ndGggLSAxKTtcclxuICAgICAgbGV0IHNjcmVlbldpZHRoID0gZW5kWCAtIHN0YXJ0WDtcclxuICAgICAgb2Zmc2V0TGVmdCA9IHNjcmVlbldpZHRoIC0gdG90YWxXaWR0aDtcclxuICAgICAgdGhpcy5zY3JvbGxPcHRpb24gPSB7XHJcbiAgICAgICAgY3VycmVudE9mZnNldDogb2Zmc2V0TGVmdCxcclxuICAgICAgICBzdGFydFRvdWNoWDogb2Zmc2V0TGVmdCxcclxuICAgICAgICBkaXN0YW5jZTogMCxcclxuICAgICAgICBsYXN0TW92ZVRpbWU6IDBcclxuICAgICAgfTtcclxuICAgICAgdGhpcy5vcHRzLl9zY3JvbGxEaXN0YW5jZV8gPSBvZmZzZXRMZWZ0O1xyXG4gICAgICBicmVhaztcclxuICB9XHJcbiAgZHJhd0NoYXJ0cy5jYWxsKHRoaXMsIHRoaXMub3B0cy50eXBlLCB0aGlzLm9wdHMsIHRoaXMuY29uZmlnLCB0aGlzLmNvbnRleHQpO1xyXG59O1xyXG5cclxuQ2hhcnRzLnByb3RvdHlwZS56b29tID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHZhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdGhpcy5vcHRzLnhBeGlzLml0ZW1Db3VudDtcclxuICBpZiAodGhpcy5vcHRzLmVuYWJsZVNjcm9sbCAhPT0gdHJ1ZSkge1xyXG4gICAgY29uc29sZS5sb2coJ+ivt+WQr+eUqOa7muWKqOadoeWQjuS9v+eUqO+8gScpXHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8v5b2T5YmN5bGP5bmV5Lit6Ze054K5XHJcbiAgbGV0IGNlbnRlclBvaW50ID0gTWF0aC5yb3VuZChNYXRoLmFicyh0aGlzLnNjcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0KSAvIHRoaXMub3B0cy5jaGFydERhdGEuZWFjaFNwYWNpbmcpICsgTWF0aC5yb3VuZChcclxuICAgIHRoaXMub3B0cy54QXhpcy5pdGVtQ291bnQgLyAyKTtcclxuICB0aGlzLm9wdHMuYW5pbWF0aW9uID0gZmFsc2U7XHJcbiAgdGhpcy5vcHRzLnhBeGlzLml0ZW1Db3VudCA9IHZhbC5pdGVtQ291bnQ7XHJcbiAgLy/ph43mlrDorqHnrpd46L205YGP56e76Led56a7XHJcbiAgbGV0IF9jYWxZQXhpc0RhdGEgPSBjYWxZQXhpc0RhdGEodGhpcy5vcHRzLnNlcmllcywgdGhpcy5vcHRzLCB0aGlzLmNvbmZpZyksXHJcbiAgICB5QXhpc1dpZHRoID0gX2NhbFlBeGlzRGF0YS55QXhpc1dpZHRoO1xyXG4gIHRoaXMuY29uZmlnLnlBeGlzV2lkdGggPSB5QXhpc1dpZHRoO1xyXG4gIGxldCBvZmZzZXRMZWZ0ID0gMDtcclxuICBsZXQgX2dldFhBeGlzUG9pbnRzMCA9IGdldFhBeGlzUG9pbnRzKHRoaXMub3B0cy5jYXRlZ29yaWVzLCB0aGlzLm9wdHMsIHRoaXMuY29uZmlnKSxcclxuICAgIHhBeGlzUG9pbnRzID0gX2dldFhBeGlzUG9pbnRzMC54QXhpc1BvaW50cyxcclxuICAgIHN0YXJ0WCA9IF9nZXRYQXhpc1BvaW50czAuc3RhcnRYLFxyXG4gICAgZW5kWCA9IF9nZXRYQXhpc1BvaW50czAuZW5kWCxcclxuICAgIGVhY2hTcGFjaW5nID0gX2dldFhBeGlzUG9pbnRzMC5lYWNoU3BhY2luZztcclxuICBsZXQgY2VudGVyTGVmdCA9IGVhY2hTcGFjaW5nICogY2VudGVyUG9pbnQ7XHJcbiAgbGV0IHNjcmVlbldpZHRoID0gZW5kWCAtIHN0YXJ0WDtcclxuICBsZXQgTWF4TGVmdCA9IHNjcmVlbldpZHRoIC0gZWFjaFNwYWNpbmcgKiAoeEF4aXNQb2ludHMubGVuZ3RoIC0gMSk7XHJcbiAgb2Zmc2V0TGVmdCA9IHNjcmVlbldpZHRoIC8gMiAtIGNlbnRlckxlZnQ7XHJcbiAgaWYgKG9mZnNldExlZnQgPiAwKSB7XHJcbiAgICBvZmZzZXRMZWZ0ID0gMDtcclxuICB9XHJcbiAgaWYgKG9mZnNldExlZnQgPCBNYXhMZWZ0KSB7XHJcbiAgICBvZmZzZXRMZWZ0ID0gTWF4TGVmdDtcclxuICB9XHJcbiAgdGhpcy5zY3JvbGxPcHRpb24gPSB7XHJcbiAgICBjdXJyZW50T2Zmc2V0OiBvZmZzZXRMZWZ0LFxyXG4gICAgc3RhcnRUb3VjaFg6IG9mZnNldExlZnQsXHJcbiAgICBkaXN0YW5jZTogMCxcclxuICAgIGxhc3RNb3ZlVGltZTogMFxyXG4gIH07XHJcbiAgdGhpcy5vcHRzLl9zY3JvbGxEaXN0YW5jZV8gPSBvZmZzZXRMZWZ0O1xyXG4gIGRyYXdDaGFydHMuY2FsbCh0aGlzLCB0aGlzLm9wdHMudHlwZSwgdGhpcy5vcHRzLCB0aGlzLmNvbmZpZywgdGhpcy5jb250ZXh0KTtcclxufTtcclxuXHJcbkNoYXJ0cy5wcm90b3R5cGUuc3RvcEFuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgJiYgdGhpcy5hbmltYXRpb25JbnN0YW5jZS5zdG9wKCk7XHJcbn07XHJcblxyXG5DaGFydHMucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xyXG4gIHRoaXMuZXZlbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcik7XHJcbn07XHJcblxyXG5DaGFydHMucHJvdG90eXBlLmdldEN1cnJlbnREYXRhSW5kZXggPSBmdW5jdGlvbihlKSB7XHJcbiAgdmFyIHRvdWNoZXMgPSBudWxsO1xyXG4gIGlmIChlLmNoYW5nZWRUb3VjaGVzKSB7XHJcbiAgICB0b3VjaGVzID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcclxuICB9IGVsc2Uge1xyXG4gICAgdG91Y2hlcyA9IGUubXAuY2hhbmdlZFRvdWNoZXNbMF07XHJcbiAgfVxyXG4gIGlmICh0b3VjaGVzKSB7XHJcbiAgICBsZXQgX3RvdWNoZXMkID0gZ2V0VG91Y2hlcyh0b3VjaGVzLCB0aGlzLm9wdHMsIGUpO1xyXG4gICAgaWYgKHRoaXMub3B0cy50eXBlID09PSAncGllJyB8fCB0aGlzLm9wdHMudHlwZSA9PT0gJ3JpbmcnIHx8IHRoaXMub3B0cy50eXBlID09PSAncm9zZScpIHtcclxuICAgICAgcmV0dXJuIGZpbmRQaWVDaGFydEN1cnJlbnRJbmRleCh7XHJcbiAgICAgICAgeDogX3RvdWNoZXMkLngsXHJcbiAgICAgICAgeTogX3RvdWNoZXMkLnlcclxuICAgICAgfSwgdGhpcy5vcHRzLmNoYXJ0RGF0YS5waWVEYXRhKTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRzLnR5cGUgPT09ICdyYWRhcicpIHtcclxuICAgICAgcmV0dXJuIGZpbmRSYWRhckNoYXJ0Q3VycmVudEluZGV4KHtcclxuICAgICAgICB4OiBfdG91Y2hlcyQueCxcclxuICAgICAgICB5OiBfdG91Y2hlcyQueVxyXG4gICAgICB9LCB0aGlzLm9wdHMuY2hhcnREYXRhLnJhZGFyRGF0YSwgdGhpcy5vcHRzLmNhdGVnb3JpZXMubGVuZ3RoKTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRzLnR5cGUgPT09ICdmdW5uZWwnKSB7XHJcbiAgICAgIHJldHVybiBmaW5kRnVubmVsQ2hhcnRDdXJyZW50SW5kZXgoe1xyXG4gICAgICAgIHg6IF90b3VjaGVzJC54LFxyXG4gICAgICAgIHk6IF90b3VjaGVzJC55XHJcbiAgICAgIH0sIHRoaXMub3B0cy5jaGFydERhdGEuZnVubmVsRGF0YSk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0cy50eXBlID09PSAnbWFwJykge1xyXG4gICAgICByZXR1cm4gZmluZE1hcENoYXJ0Q3VycmVudEluZGV4KHtcclxuICAgICAgICB4OiBfdG91Y2hlcyQueCxcclxuICAgICAgICB5OiBfdG91Y2hlcyQueVxyXG4gICAgICB9LCB0aGlzLm9wdHMpO1xyXG4gICAgfWVsc2UgaWYgKHRoaXMub3B0cy50eXBlID09PSAnd29yZCcpIHtcclxuICAgICAgcmV0dXJuIGZpbmRXb3JkQ2hhcnRDdXJyZW50SW5kZXgoe1xyXG4gICAgICAgIHg6IF90b3VjaGVzJC54LFxyXG4gICAgICAgIHk6IF90b3VjaGVzJC55XHJcbiAgICAgIH0sIHRoaXMub3B0cy5jaGFydERhdGEud29yZENsb3VkRGF0YSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gZmluZEN1cnJlbnRJbmRleCh7XHJcbiAgICAgICAgeDogX3RvdWNoZXMkLngsXHJcbiAgICAgICAgeTogX3RvdWNoZXMkLnlcclxuICAgICAgfSwgdGhpcy5vcHRzLmNoYXJ0RGF0YS54QXhpc1BvaW50cywgdGhpcy5vcHRzLCB0aGlzLmNvbmZpZywgTWF0aC5hYnModGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldCkpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gLTE7XHJcbn07XHJcblxyXG5DaGFydHMucHJvdG90eXBlLmdldExlZ2VuZERhdGFJbmRleCA9IGZ1bmN0aW9uKGUpIHtcclxuICB2YXIgdG91Y2hlcyA9IG51bGw7XHJcbiAgaWYgKGUuY2hhbmdlZFRvdWNoZXMpIHtcclxuICAgIHRvdWNoZXMgPSBlLmNoYW5nZWRUb3VjaGVzWzBdO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0b3VjaGVzID0gZS5tcC5jaGFuZ2VkVG91Y2hlc1swXTtcclxuICB9XHJcbiAgaWYgKHRvdWNoZXMpIHtcclxuICAgIGxldCBfdG91Y2hlcyQgPSBnZXRUb3VjaGVzKHRvdWNoZXMsIHRoaXMub3B0cywgZSk7XHJcbiAgICByZXR1cm4gZmluZExlZ2VuZEluZGV4KHtcclxuICAgICAgeDogX3RvdWNoZXMkLngsXHJcbiAgICAgIHk6IF90b3VjaGVzJC55XHJcbiAgICB9LCB0aGlzLm9wdHMuY2hhcnREYXRhLmxlZ2VuZERhdGEpO1xyXG4gIH1cclxuICByZXR1cm4gLTE7XHJcbn07XHJcblxyXG5DaGFydHMucHJvdG90eXBlLnRvdWNoTGVnZW5kID0gZnVuY3Rpb24oZSkge1xyXG4gIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xyXG4gIHZhciB0b3VjaGVzID0gbnVsbDtcclxuICBpZiAoZS5jaGFuZ2VkVG91Y2hlcykge1xyXG4gICAgdG91Y2hlcyA9IGUuY2hhbmdlZFRvdWNoZXNbMF07XHJcbiAgfSBlbHNlIHtcclxuICAgIHRvdWNoZXMgPSBlLm1wLmNoYW5nZWRUb3VjaGVzWzBdO1xyXG4gIH1cclxuICBpZiAodG91Y2hlcykge1xyXG4gICAgdmFyIF90b3VjaGVzJCA9IGdldFRvdWNoZXModG91Y2hlcywgdGhpcy5vcHRzLCBlKTtcclxuICAgIHZhciBpbmRleCA9IHRoaXMuZ2V0TGVnZW5kRGF0YUluZGV4KGUpO1xyXG4gICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgdGhpcy5vcHRzLnNlcmllc1tpbmRleF0uc2hvdyA9ICF0aGlzLm9wdHMuc2VyaWVzW2luZGV4XS5zaG93O1xyXG4gICAgICB0aGlzLm9wdHMuYW5pbWF0aW9uID0gb3B0aW9uLmFuaW1hdGlvbiA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgZHJhd0NoYXJ0cy5jYWxsKHRoaXMsIHRoaXMub3B0cy50eXBlLCB0aGlzLm9wdHMsIHRoaXMuY29uZmlnLCB0aGlzLmNvbnRleHQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn07XHJcblxyXG5DaGFydHMucHJvdG90eXBlLnNob3dUb29sVGlwID0gZnVuY3Rpb24oZSkge1xyXG4gIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xyXG4gIHZhciB0b3VjaGVzID0gbnVsbDtcclxuICBpZiAoZS5jaGFuZ2VkVG91Y2hlcykge1xyXG4gICAgdG91Y2hlcyA9IGUuY2hhbmdlZFRvdWNoZXNbMF07XHJcbiAgfSBlbHNlIHtcclxuICAgIHRvdWNoZXMgPSBlLm1wLmNoYW5nZWRUb3VjaGVzWzBdO1xyXG4gIH1cclxuICBpZiAoIXRvdWNoZXMpIHtcclxuICAgIGNvbnNvbGUubG9nKFwidG91Y2hFcnJvclwiKTtcclxuICB9XHJcbiAgdmFyIF90b3VjaGVzJCA9IGdldFRvdWNoZXModG91Y2hlcywgdGhpcy5vcHRzLCBlKTtcclxuICB2YXIgY3VycmVudE9mZnNldCA9IHRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQ7XHJcbiAgdmFyIG9wdHMgPSBhc3NpZ24oe30sIHRoaXMub3B0cywge1xyXG4gICAgX3Njcm9sbERpc3RhbmNlXzogY3VycmVudE9mZnNldCxcclxuICAgIGFuaW1hdGlvbjogZmFsc2VcclxuICB9KTtcclxuICBpZiAodGhpcy5vcHRzLnR5cGUgPT09ICdsaW5lJyB8fCB0aGlzLm9wdHMudHlwZSA9PT0gJ2FyZWEnIHx8IHRoaXMub3B0cy50eXBlID09PSAnY29sdW1uJykge1xyXG4gICAgdmFyIGluZGV4ID0gdGhpcy5nZXRDdXJyZW50RGF0YUluZGV4KGUpO1xyXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgdmFyIHNlcmllc0RhdGEgPSBnZXRTZXJpZXNEYXRhSXRlbSh0aGlzLm9wdHMuc2VyaWVzLCBpbmRleCk7XHJcbiAgICAgIGlmIChzZXJpZXNEYXRhLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgIHZhciBfZ2V0VG9vbFRpcERhdGEgPSBnZXRUb29sVGlwRGF0YShzZXJpZXNEYXRhLCB0aGlzLm9wdHMuY2hhcnREYXRhLmNhbFBvaW50cywgaW5kZXgsIHRoaXMub3B0cy5jYXRlZ29yaWVzLG9wdGlvbiksXHJcbiAgICAgICAgICB0ZXh0TGlzdCA9IF9nZXRUb29sVGlwRGF0YS50ZXh0TGlzdCxcclxuICAgICAgICAgIG9mZnNldCA9IF9nZXRUb29sVGlwRGF0YS5vZmZzZXQ7XHJcbiAgICAgICAgb2Zmc2V0LnkgPSBfdG91Y2hlcyQueTtcclxuICAgICAgICBvcHRzLnRvb2x0aXAgPSB7XHJcbiAgICAgICAgICB0ZXh0TGlzdDogdGV4dExpc3QsXHJcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcclxuICAgICAgICAgIG9wdGlvbjogb3B0aW9uLFxyXG4gICAgICAgICAgaW5kZXg6IGluZGV4XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZHJhd0NoYXJ0cy5jYWxsKHRoaXMsIG9wdHMudHlwZSwgb3B0cywgdGhpcy5jb25maWcsIHRoaXMuY29udGV4dCk7XHJcbiAgfVxyXG4gIGlmICh0aGlzLm9wdHMudHlwZSA9PT0gJ21peCcpIHtcclxuICAgIHZhciBpbmRleCA9IHRoaXMuZ2V0Q3VycmVudERhdGFJbmRleChlKTtcclxuICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gdGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldDtcclxuICAgICAgdmFyIG9wdHMgPSBhc3NpZ24oe30sIHRoaXMub3B0cywge1xyXG4gICAgICAgIF9zY3JvbGxEaXN0YW5jZV86IGN1cnJlbnRPZmZzZXQsXHJcbiAgICAgICAgYW5pbWF0aW9uOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgICAgdmFyIHNlcmllc0RhdGEgPSBnZXRTZXJpZXNEYXRhSXRlbSh0aGlzLm9wdHMuc2VyaWVzLCBpbmRleCk7XHJcbiAgICAgIGlmIChzZXJpZXNEYXRhLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgIHZhciBfZ2V0TWl4VG9vbFRpcERhdGEgPSBnZXRNaXhUb29sVGlwRGF0YShzZXJpZXNEYXRhLCB0aGlzLm9wdHMuY2hhcnREYXRhLmNhbFBvaW50cywgaW5kZXgsIHRoaXMub3B0cy5jYXRlZ29yaWVzLG9wdGlvbiksXHJcbiAgICAgICAgICB0ZXh0TGlzdCA9IF9nZXRNaXhUb29sVGlwRGF0YS50ZXh0TGlzdCxcclxuICAgICAgICAgIG9mZnNldCA9IF9nZXRNaXhUb29sVGlwRGF0YS5vZmZzZXQ7XHJcbiAgICAgICAgb2Zmc2V0LnkgPSBfdG91Y2hlcyQueTtcclxuICAgICAgICBvcHRzLnRvb2x0aXAgPSB7XHJcbiAgICAgICAgICB0ZXh0TGlzdDogdGV4dExpc3QsXHJcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcclxuICAgICAgICAgIG9wdGlvbjogb3B0aW9uLFxyXG4gICAgICAgICAgaW5kZXg6IGluZGV4XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZHJhd0NoYXJ0cy5jYWxsKHRoaXMsIG9wdHMudHlwZSwgb3B0cywgdGhpcy5jb25maWcsIHRoaXMuY29udGV4dCk7XHJcbiAgfVxyXG4gIGlmICh0aGlzLm9wdHMudHlwZSA9PT0gJ2NhbmRsZScpIHtcclxuICAgIHZhciBpbmRleCA9IHRoaXMuZ2V0Q3VycmVudERhdGFJbmRleChlKTtcclxuICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gdGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldDtcclxuICAgICAgdmFyIG9wdHMgPSBhc3NpZ24oe30sIHRoaXMub3B0cywge1xyXG4gICAgICAgIF9zY3JvbGxEaXN0YW5jZV86IGN1cnJlbnRPZmZzZXQsXHJcbiAgICAgICAgYW5pbWF0aW9uOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgICAgdmFyIHNlcmllc0RhdGEgPSBnZXRTZXJpZXNEYXRhSXRlbSh0aGlzLm9wdHMuc2VyaWVzLCBpbmRleCk7XHJcbiAgICAgIGlmIChzZXJpZXNEYXRhLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgIHZhciBfZ2V0VG9vbFRpcERhdGEgPSBnZXRDYW5kbGVUb29sVGlwRGF0YSh0aGlzLm9wdHMuc2VyaWVzWzBdLmRhdGEsIHNlcmllc0RhdGEsIHRoaXMub3B0cy5jaGFydERhdGEuY2FsUG9pbnRzLFxyXG4gICAgICAgICAgICBpbmRleCwgdGhpcy5vcHRzLmNhdGVnb3JpZXMsIHRoaXMub3B0cy5leHRyYS5jYW5kbGUsIG9wdGlvbiksXHJcbiAgICAgICAgICB0ZXh0TGlzdCA9IF9nZXRUb29sVGlwRGF0YS50ZXh0TGlzdCxcclxuICAgICAgICAgIG9mZnNldCA9IF9nZXRUb29sVGlwRGF0YS5vZmZzZXQ7XHJcbiAgICAgICAgb2Zmc2V0LnkgPSBfdG91Y2hlcyQueTtcclxuICAgICAgICBvcHRzLnRvb2x0aXAgPSB7XHJcbiAgICAgICAgICB0ZXh0TGlzdDogdGV4dExpc3QsXHJcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcclxuICAgICAgICAgIG9wdGlvbjogb3B0aW9uLFxyXG4gICAgICAgICAgaW5kZXg6IGluZGV4XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZHJhd0NoYXJ0cy5jYWxsKHRoaXMsIG9wdHMudHlwZSwgb3B0cywgdGhpcy5jb25maWcsIHRoaXMuY29udGV4dCk7XHJcbiAgfVxyXG4gIGlmICh0aGlzLm9wdHMudHlwZSA9PT0gJ3BpZScgfHwgdGhpcy5vcHRzLnR5cGUgPT09ICdyaW5nJyB8fCB0aGlzLm9wdHMudHlwZSA9PT0gJ3Jvc2UnfHx0aGlzLm9wdHMudHlwZSA9PT0gJ2Z1bm5lbCcgKSB7XHJcbiAgICB2YXIgaW5kZXggPSB0aGlzLmdldEN1cnJlbnREYXRhSW5kZXgoZSk7XHJcbiAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICB2YXIgY3VycmVudE9mZnNldCA9IHRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQ7XHJcbiAgICAgIHZhciBvcHRzID0gYXNzaWduKHt9LCB0aGlzLm9wdHMsIHtcclxuICAgICAgICBfc2Nyb2xsRGlzdGFuY2VfOiBjdXJyZW50T2Zmc2V0LFxyXG4gICAgICAgIGFuaW1hdGlvbjogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICAgIHZhciBzZXJpZXNEYXRhID0gdGhpcy5vcHRzLl9zZXJpZXNfW2luZGV4XTtcclxuICAgICAgdmFyIHRleHRMaXN0ID0gW3tcclxuICAgICAgICB0ZXh0OiBvcHRpb24uZm9ybWF0ID8gb3B0aW9uLmZvcm1hdChzZXJpZXNEYXRhKSA6IHNlcmllc0RhdGEubmFtZSArICc6ICcgKyBzZXJpZXNEYXRhLmRhdGEsXHJcbiAgICAgICAgY29sb3I6IHNlcmllc0RhdGEuY29sb3JcclxuICAgICAgfV07XHJcbiAgICAgIHZhciBvZmZzZXQgPSB7XHJcbiAgICAgICAgeDogX3RvdWNoZXMkLngsXHJcbiAgICAgICAgeTogX3RvdWNoZXMkLnlcclxuICAgICAgfTtcclxuICAgICAgb3B0cy50b29sdGlwID0ge1xyXG4gICAgICAgIHRleHRMaXN0OiB0ZXh0TGlzdCxcclxuICAgICAgICBvZmZzZXQ6IG9mZnNldCxcclxuICAgICAgICBvcHRpb246IG9wdGlvbixcclxuICAgICAgICBpbmRleDogaW5kZXhcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGRyYXdDaGFydHMuY2FsbCh0aGlzLCBvcHRzLnR5cGUsIG9wdHMsIHRoaXMuY29uZmlnLCB0aGlzLmNvbnRleHQpO1xyXG4gIH1cclxuICBpZiAodGhpcy5vcHRzLnR5cGUgPT09ICdtYXAnfHx0aGlzLm9wdHMudHlwZSA9PT0gJ3dvcmQnKSB7XHJcbiAgICB2YXIgaW5kZXggPSB0aGlzLmdldEN1cnJlbnREYXRhSW5kZXgoZSk7XHJcbiAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICB2YXIgY3VycmVudE9mZnNldCA9IHRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQ7XHJcbiAgICAgIHZhciBvcHRzID0gYXNzaWduKHt9LCB0aGlzLm9wdHMsIHtcclxuICAgICAgICBfc2Nyb2xsRGlzdGFuY2VfOiBjdXJyZW50T2Zmc2V0LFxyXG4gICAgICAgIGFuaW1hdGlvbjogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICAgIHZhciBzZXJpZXNEYXRhID0gdGhpcy5vcHRzLl9zZXJpZXNfW2luZGV4XTtcclxuICAgICAgdmFyIHRleHRMaXN0ID0gW3tcclxuICAgICAgICB0ZXh0OiBvcHRpb24uZm9ybWF0ID8gb3B0aW9uLmZvcm1hdChzZXJpZXNEYXRhKSA6IHNlcmllc0RhdGEucHJvcGVydGllcy5uYW1lICxcclxuICAgICAgICBjb2xvcjogc2VyaWVzRGF0YS5jb2xvclxyXG4gICAgICB9XTtcclxuICAgICAgdmFyIG9mZnNldCA9IHtcclxuICAgICAgICB4OiBfdG91Y2hlcyQueCxcclxuICAgICAgICB5OiBfdG91Y2hlcyQueVxyXG4gICAgICB9O1xyXG4gICAgICBvcHRzLnRvb2x0aXAgPSB7XHJcbiAgICAgICAgdGV4dExpc3Q6IHRleHRMaXN0LFxyXG4gICAgICAgIG9mZnNldDogb2Zmc2V0LFxyXG4gICAgICAgIG9wdGlvbjogb3B0aW9uLFxyXG4gICAgICAgIGluZGV4OiBpbmRleFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgb3B0cy51cGRhdGVEYXRhID0gZmFsc2U7XHJcbiAgICBkcmF3Q2hhcnRzLmNhbGwodGhpcywgb3B0cy50eXBlLCBvcHRzLCB0aGlzLmNvbmZpZywgdGhpcy5jb250ZXh0KTtcclxuICB9XHJcbiAgaWYgKHRoaXMub3B0cy50eXBlID09PSAncmFkYXInKSB7XHJcbiAgICB2YXIgaW5kZXggPSB0aGlzLmdldEN1cnJlbnREYXRhSW5kZXgoZSk7XHJcbiAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICB2YXIgY3VycmVudE9mZnNldCA9IHRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQ7XHJcbiAgICAgIHZhciBvcHRzID0gYXNzaWduKHt9LCB0aGlzLm9wdHMsIHtcclxuICAgICAgICBfc2Nyb2xsRGlzdGFuY2VfOiBjdXJyZW50T2Zmc2V0LFxyXG4gICAgICAgIGFuaW1hdGlvbjogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICAgIHZhciBzZXJpZXNEYXRhID0gZ2V0U2VyaWVzRGF0YUl0ZW0odGhpcy5vcHRzLnNlcmllcywgaW5kZXgpO1xyXG4gICAgICBpZiAoc2VyaWVzRGF0YS5sZW5ndGggIT09IDApIHtcclxuICAgICAgICB2YXIgdGV4dExpc3QgPSBzZXJpZXNEYXRhLm1hcChmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0ZXh0OiBvcHRpb24uZm9ybWF0ID8gb3B0aW9uLmZvcm1hdChpdGVtKSA6IGl0ZW0ubmFtZSArICc6ICcgKyBpdGVtLmRhdGEsXHJcbiAgICAgICAgICAgIGNvbG9yOiBpdGVtLmNvbG9yXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBvZmZzZXQgPSB7XHJcbiAgICAgICAgICB4OiBfdG91Y2hlcyQueCxcclxuICAgICAgICAgIHk6IF90b3VjaGVzJC55XHJcbiAgICAgICAgfTtcclxuICAgICAgICBvcHRzLnRvb2x0aXAgPSB7XHJcbiAgICAgICAgICB0ZXh0TGlzdDogdGV4dExpc3QsXHJcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcclxuICAgICAgICAgIG9wdGlvbjogb3B0aW9uLFxyXG4gICAgICAgICAgaW5kZXg6IGluZGV4XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZHJhd0NoYXJ0cy5jYWxsKHRoaXMsIG9wdHMudHlwZSwgb3B0cywgdGhpcy5jb25maWcsIHRoaXMuY29udGV4dCk7XHJcbiAgfVxyXG59O1xyXG5cclxuQ2hhcnRzLnByb3RvdHlwZS50cmFuc2xhdGUgPSBmdW5jdGlvbihkaXN0YW5jZSkge1xyXG4gIHRoaXMuc2Nyb2xsT3B0aW9uID0ge1xyXG4gICAgY3VycmVudE9mZnNldDogZGlzdGFuY2UsXHJcbiAgICBzdGFydFRvdWNoWDogZGlzdGFuY2UsXHJcbiAgICBkaXN0YW5jZTogMCxcclxuICAgIGxhc3RNb3ZlVGltZTogMFxyXG4gIH07XHJcbiAgbGV0IG9wdHMgPSBhc3NpZ24oe30sIHRoaXMub3B0cywge1xyXG4gICAgX3Njcm9sbERpc3RhbmNlXzogZGlzdGFuY2UsXHJcbiAgICBhbmltYXRpb246IGZhbHNlXHJcbiAgfSk7XHJcbiAgZHJhd0NoYXJ0cy5jYWxsKHRoaXMsIHRoaXMub3B0cy50eXBlLCBvcHRzLCB0aGlzLmNvbmZpZywgdGhpcy5jb250ZXh0KTtcclxufTtcclxuXHJcbkNoYXJ0cy5wcm90b3R5cGUuc2Nyb2xsU3RhcnQgPSBmdW5jdGlvbihlKSB7XHJcbiAgdmFyIHRvdWNoZXMgPSBudWxsO1xyXG4gIGlmIChlLmNoYW5nZWRUb3VjaGVzKSB7XHJcbiAgICB0b3VjaGVzID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcclxuICB9IGVsc2Uge1xyXG4gICAgdG91Y2hlcyA9IGUubXAuY2hhbmdlZFRvdWNoZXNbMF07XHJcbiAgfVxyXG4gIHZhciBfdG91Y2hlcyQgPSBnZXRUb3VjaGVzKHRvdWNoZXMsIHRoaXMub3B0cywgZSk7XHJcbiAgaWYgKHRvdWNoZXMgJiYgdGhpcy5vcHRzLmVuYWJsZVNjcm9sbCA9PT0gdHJ1ZSkge1xyXG4gICAgdGhpcy5zY3JvbGxPcHRpb24uc3RhcnRUb3VjaFggPSBfdG91Y2hlcyQueDtcclxuICB9XHJcbn07XHJcblxyXG5DaGFydHMucHJvdG90eXBlLnNjcm9sbCA9IGZ1bmN0aW9uKGUpIHtcclxuICBpZiAodGhpcy5zY3JvbGxPcHRpb24ubGFzdE1vdmVUaW1lID09PSAwKSB7XHJcbiAgICB0aGlzLnNjcm9sbE9wdGlvbi5sYXN0TW92ZVRpbWUgPSBEYXRlLm5vdygpO1xyXG4gIH1cclxuICBsZXQgTGltaXQgPSB0aGlzLm9wdHMuZXh0cmEudG91Y2hNb3ZlTGltaXQgfHwgMjA7XHJcbiAgbGV0IGN1cnJNb3ZlVGltZSA9IERhdGUubm93KCk7XHJcbiAgbGV0IGR1cmF0aW9uID0gY3Vyck1vdmVUaW1lIC0gdGhpcy5zY3JvbGxPcHRpb24ubGFzdE1vdmVUaW1lO1xyXG4gIGlmIChkdXJhdGlvbiA8IE1hdGguZmxvb3IoMTAwMCAvIExpbWl0KSkgcmV0dXJuO1xyXG4gIHRoaXMuc2Nyb2xsT3B0aW9uLmxhc3RNb3ZlVGltZSA9IGN1cnJNb3ZlVGltZTtcclxuICB2YXIgdG91Y2hlcyA9IG51bGw7XHJcbiAgaWYgKGUuY2hhbmdlZFRvdWNoZXMpIHtcclxuICAgIHRvdWNoZXMgPSBlLmNoYW5nZWRUb3VjaGVzWzBdO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0b3VjaGVzID0gZS5tcC5jaGFuZ2VkVG91Y2hlc1swXTtcclxuICB9XHJcbiAgaWYgKHRvdWNoZXMgJiYgdGhpcy5vcHRzLmVuYWJsZVNjcm9sbCA9PT0gdHJ1ZSkge1xyXG4gICAgdmFyIF90b3VjaGVzJCA9IGdldFRvdWNoZXModG91Y2hlcywgdGhpcy5vcHRzLCBlKTtcclxuICAgIHZhciBfZGlzdGFuY2U7XHJcbiAgICBfZGlzdGFuY2UgPSBfdG91Y2hlcyQueCAtIHRoaXMuc2Nyb2xsT3B0aW9uLnN0YXJ0VG91Y2hYO1xyXG4gICAgdmFyIGN1cnJlbnRPZmZzZXQgPSB0aGlzLnNjcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0O1xyXG4gICAgdmFyIHZhbGlkRGlzdGFuY2UgPSBjYWxWYWxpZERpc3RhbmNlKGN1cnJlbnRPZmZzZXQgKyBfZGlzdGFuY2UsIHRoaXMub3B0cy5jaGFydERhdGEsIHRoaXMuY29uZmlnLCB0aGlzLm9wdHMpO1xyXG4gICAgdGhpcy5zY3JvbGxPcHRpb24uZGlzdGFuY2UgPSBfZGlzdGFuY2UgPSB2YWxpZERpc3RhbmNlIC0gY3VycmVudE9mZnNldDtcclxuICAgIHZhciBvcHRzID0gYXNzaWduKHt9LCB0aGlzLm9wdHMsIHtcclxuICAgICAgX3Njcm9sbERpc3RhbmNlXzogY3VycmVudE9mZnNldCArIF9kaXN0YW5jZSxcclxuICAgICAgYW5pbWF0aW9uOiBmYWxzZVxyXG4gICAgfSk7XHJcbiAgICBkcmF3Q2hhcnRzLmNhbGwodGhpcywgb3B0cy50eXBlLCBvcHRzLCB0aGlzLmNvbmZpZywgdGhpcy5jb250ZXh0KTtcclxuICAgIHJldHVybiBjdXJyZW50T2Zmc2V0ICsgX2Rpc3RhbmNlO1xyXG4gIH1cclxufTtcclxuXHJcbkNoYXJ0cy5wcm90b3R5cGUuc2Nyb2xsRW5kID0gZnVuY3Rpb24oZSkge1xyXG4gIGlmICh0aGlzLm9wdHMuZW5hYmxlU2Nyb2xsID09PSB0cnVlKSB7XHJcbiAgICB2YXIgX3Njcm9sbE9wdGlvbiA9IHRoaXMuc2Nyb2xsT3B0aW9uLFxyXG4gICAgICBjdXJyZW50T2Zmc2V0ID0gX3Njcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0LFxyXG4gICAgICBkaXN0YW5jZSA9IF9zY3JvbGxPcHRpb24uZGlzdGFuY2U7XHJcbiAgICB0aGlzLnNjcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0ID0gY3VycmVudE9mZnNldCArIGRpc3RhbmNlO1xyXG4gICAgdGhpcy5zY3JvbGxPcHRpb24uZGlzdGFuY2UgPSAwO1xyXG4gIH1cclxufTtcclxuaWYgKHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBDaGFydHM7XHJcbiAgLy9leHBvcnQgZGVmYXVsdCBDaGFydHM7Ly/lu7rorq7kvb/nlKhub2RlanPnmoRtb2R1bGXlr7zlh7rmlrnlvI/vvIzlpoLmiqXplJnor7fkvb/nlKhleHBvcnTmlrnlvI/lr7zlh7pcclxufVxyXG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSwgLyogdnVlLWNsaSBvbmx5ICovXG4gIGNvbXBvbmVudHMsIC8vIGZpeGVkIGJ5IHh4eHh4eCBhdXRvIGNvbXBvbmVudHNcbiAgcmVuZGVyanMgLy8gZml4ZWQgYnkgeHh4eHh4IHJlbmRlcmpzXG4pIHtcbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyBmaXhlZCBieSB4eHh4eHggYXV0byBjb21wb25lbnRzXG4gIGlmIChjb21wb25lbnRzKSB7XG4gICAgaWYgKCFvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICAgIG9wdGlvbnMuY29tcG9uZW50cyA9IHt9XG4gICAgfVxuICAgIHZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICAgZm9yICh2YXIgbmFtZSBpbiBjb21wb25lbnRzKSB7XG4gICAgICBpZiAoaGFzT3duLmNhbGwoY29tcG9uZW50cywgbmFtZSkgJiYgIWhhc093bi5jYWxsKG9wdGlvbnMuY29tcG9uZW50cywgbmFtZSkpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gY29tcG9uZW50c1tuYW1lXVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBmaXhlZCBieSB4eHh4eHggcmVuZGVyanNcbiAgaWYgKHJlbmRlcmpzKSB7XG4gICAgKHJlbmRlcmpzLmJlZm9yZUNyZWF0ZSB8fCAocmVuZGVyanMuYmVmb3JlQ3JlYXRlID0gW10pKS51bnNoaWZ0KGZ1bmN0aW9uKCkge1xuICAgICAgdGhpc1tyZW5kZXJqcy5fX21vZHVsZV0gPSB0aGlzXG4gICAgfSk7XG4gICAgKG9wdGlvbnMubWl4aW5zIHx8IChvcHRpb25zLm1peGlucyA9IFtdKSkucHVzaChyZW5kZXJqcylcbiAgfVxuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIiwiaW1wb3J0IHN0b3JlIGZyb20gJ0Avc3RvcmUnXHJcbi8vIOato+W8j+acjeWKoeWZqFxyXG52YXIgd2ViaG9zdCA9IFwiaHR0cHM6Ly90YXNrLnZzY2xvdWRzLmNvbS9cIjtcclxuXHJcbi8vIOW8gOWPkeacjeWKoeWZqFxyXG4vLyB2YXIgd2ViaG9zdCA9IFwiaHR0cDovLzE5Mi4xNjguMy45OjgwODAvXCI7XHJcblxyXG4vLyDlvIDlj5HmnI3liqHlmahcclxuLy92YXIgd2ViaG9zdCA9IFwiaHR0cHM6Ly9qaWVsb25ndGVzdC52c2Nsb3Vkcy5jb20vODA4MC9wb2xseS9cIjtcclxuXHJcbi8vIOaOpeWPo+WIl+ihqFxyXG52YXIgd2ViYXBpID0ge1xyXG5cdC8vIOS7u+WKoeexu+WIq+WIm+W7ulxyXG5cdGNUYXNrVHlwZTogd2ViaG9zdCArICd0eXBlL2NyZWF0ZScsXHJcblxyXG5cdC8vIOS7u+WKoeexu+WIq+WIoOmZpFxyXG5cdGRUYXNrVHlwZTogd2ViaG9zdCArICd0eXBlL2RlbGV0ZScsXHJcblxyXG5cdC8vIOafpeivouS7u+WKoeexu+WIq+WIl+ihqFxyXG5cdHJUYXNrVHlwZTogd2ViaG9zdCArICd0eXBlL2xpc3QnLFxyXG5cclxuXHQvLyDliJvlu7rku7vliqFcclxuXHRjVGFzazogd2ViaG9zdCArICdqb2IvY3JlYXRlJyxcclxuXHJcblx0Ly8g5L+u5pS55Lu75YqhXHJcblx0dVRhc2s6IHdlYmhvc3QgKyAnam9iL3VwZGF0ZScsXHJcblxyXG5cdC8vIOWIoOmZpOS7u+WKoVxyXG5cdGRUYXNrOiB3ZWJob3N0ICsgJ2pvYi9kZWxldGUnLFxyXG5cclxuXHQvLyDku7vliqHliJfooahcclxuXHRUYXNrTGlzdDogd2ViaG9zdCArICdqb2IvbGlzdCcsXHJcblxyXG5cdC8vIOS7u+WKoee7k+adn+WKqOS9nFxyXG5cdFRhc2tFbmQ6IHdlYmhvc3QgKyAnam9iL2VuZCcsXHJcblx0XHJcblx0Ly8g5o6S6KGM5qacXHJcblx0cmFua2xpc3Q6d2ViaG9zdCArICdyYW5rL2xpc3QnLFxyXG5cclxuXHQvLyDlvq7kv6HnmbvpmYZcclxuXHR1bmlMb2dpbjogd2ViaG9zdCArIFwicHVibGljL3dlaXhpbi9tcC9jb21tb24vdXNlci9sb2dpbi93eFwiLFxyXG5cdFxyXG5cdC8vIOa4uOWuoueZu+W9lVxyXG5cdHZpc2l0TG9naW46IHdlYmhvc3QgKyBcInB1YmxpYy93ZWl4aW4vbXAvY29tbW9uL3RvdXJpc3QvbG9naW4vd3hcIixcclxuXHRcclxuXHQvLyDojrflj5bnlKjmiLfkv6Hmga9cclxuXHR1c2VySW5mbzogd2ViaG9zdCArIFwid2VpeGluL21wL2NvbW1vbi91c2VyL2luZm9cIixcclxuXHRcclxuXHQvLyDkv67mlLnnlKjmiLfmmLXnp7BcclxuXHRlZGl0TmFtZTogd2ViaG9zdCArIFwiY29tbW9uL2MvdXNlci91cGRhdGVcIixcclxuXHRcclxuXHQvLyDnu4/pqozmjqXlj6NcclxuXHRleHA6IHdlYmhvc3QgKyBcInVzZXIvZXhwZXJpZW5jZS9jdW11bGF0aXZlXCIsXHJcblx0XHJcblx0Ly8g5pif5o6l5Y+jICDmmJ/mlbDosIPmlbRcclxuXHRzdGFyOiB3ZWJob3N0ICsgXCJzdGFyL2FkanVzdC9jcmVhdGVcIixcclxuXHRcclxuXHQvLyDmmJ/osIPmlbTljoblj7JcclxuXHRzdGFyaGlzdG9yeTogd2ViaG9zdCArICdzdGFyL2FkanVzdC9oaXN0b3J5JyxcclxuXHRcclxuXHQvLyDliJvlu7rlpZblirFcclxuXHRjcmV3YXJkOiB3ZWJob3N0ICsgJ3N0YXIvZXhjaGFuZ2UvY3JlYXRlJyxcclxuXHRcclxuXHQvLyDlpZblirHkv67mlLlcclxuXHR1cmV3YXJkOiB3ZWJob3N0ICsgJ3N0YXIvZXhjaGFuZ2UvdXBkYXRlJyxcclxuXHRcclxuXHQvLyDlhZHmjaLorrDlvZXmn6Xor6JcclxuXHRyZXdhcmRMaXN0OiB3ZWJob3N0ICsgJ3N0YXIvZXhjaGFuZ2UvbGlzdCcsXHJcblx0XHJcblx0Ly8g5aWW5Yqx5YWR5o2iXHJcblx0cmV3YXJkT2s6IHdlYmhvc3QgKyAnc3Rhci9leGNoYW5nZS9leGNoYW5nZScsXHJcblx0XHJcblx0Ly8g5Yig6Zmk5YWR5o2i6K6w5b2VXHJcblx0cmV3YXJkRGVsZXRlOndlYmhvc3QgKyAnc3Rhci9leGNoYW5nZS9kZWxldGUnLFxyXG5cdFxyXG5cdC8vIOe7n+iuoeWbvuihqGNoYXJ0XHJcblx0Y2hhcnRzOiB3ZWJob3N0ICsgJ2pvYi91Y2hhcnQnLFxyXG5cdFxyXG5cdC8vIOetvuWIsFxyXG5cdHNpZ25pbjp3ZWJob3N0ICsgJ3NpZ24vaW4nLFxyXG5cdFxyXG5cdC8vIOWFrOWRilxyXG5cdG5vdGljZTogd2ViaG9zdCArICdhbm5vdW5jZW1lbnQvY3VycmVudCcsXHJcblx0IFxyXG5cdC8vIOetvuWIsOafpeivolxyXG5cdHNpZ25nZXQ6IHdlYmhvc3QgKyAnc2lnbi9nZXQnLFxyXG5cdFxyXG5cdC8vIOetvuWIsOa4heepulxyXG5cdHNpZ25jbGVhcjogd2ViaG9zdCArICdzaWduL2NsZWFyJyxcclxuXHRcclxuXHQvLyDmuIXnqbrnlKjmiLfkv6Hmga9cclxuXHR1c2VyY2xlYXI6IHdlYmhvc3QgKyAndXNlci9leHBlcmllbmNlL2NsZWFyJyxcclxuXHRcclxuXHQvLyDmiJDlsLHliJfooahcclxuXHRjakxpc3Q6d2ViaG9zdCArICdhY2hpZXZlbWVudC91c2VyL2xpc3QnLFxyXG5cdFxyXG5cdC8vIOaIkOWwseivt+axglxyXG5cdGNqUmVxdWVzdDp3ZWJob3N0ICsgJ2FjaGlldmVtZW50L3VzZXIvY2hlY2snXHJcblx0XHJcblx0XHJcbn1cclxuXHJcbi8vIOaIkOWwseWbvuagh1xyXG52YXIgaG9ub3JUaXRsZSA9IFsn6IOcJywn5LiJJywn5Y2BJywn55m+Jywn5Y2DJywn5YidJywn5LygJywn5bqUJywn56eSJywn56izJywn5Z2aJywn5oGSJywn57K+J107XHJcblxyXG5jb25zdCBob25vckNvcnJlcyA9IChob25vcikgPT4ge1xyXG5cdHZhciBob25vckxpc3QgPSBbXHJcblx0XHR7XHJcblx0XHRcdHRpdGxlOlwi5peX5byA5b6X6IOcXCIsXHJcblx0XHRcdGljb246XCLog5xcIlxyXG5cdFx0fSxcclxuXHRcdHtcclxuXHRcdFx0dGl0bGU6XCLkuInpmLPlvIDms7BcIixcclxuXHRcdFx0aWNvbjpcIuS4iVwiXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHR0aXRsZTpcIuWNgeWFqOWNgee+jlwiLFxyXG5cdFx0XHRpY29uOlwi5Y2BXCJcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdHRpdGxlOlwi55m+5bC656u/5aS0XCIsXHJcblx0XHRcdGljb246XCLnmb5cIlxyXG5cdFx0fSxcclxuXHRcdHtcclxuXHRcdFx0dGl0bGU6XCLljYPplKTnmb7ngrxcIixcclxuXHRcdFx0aWNvbjpcIuWNg1wiXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHR0aXRsZTpcIuWIneWHuuiMheW6kFwiLFxyXG5cdFx0XHRpY29uOlwi5YidXCJcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdHRpdGxlOlwi5Y2B5Y+j55u45LygXCIsXHJcblx0XHRcdGljb246XCLkvKBcIlxyXG5cdFx0fSxcclxuXHRcdHtcclxuXHRcdFx0dGl0bGU6XCLkuIDlkbznmb7lupRcIixcclxuXHRcdFx0aWNvbjpcIuW6lFwiXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHR0aXRsZTpcIuS6ieWIhuWkuuenklwiLFxyXG5cdFx0XHRpY29uOlwi56eSXCJcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdHRpdGxlOlwi6auY5p6V5peg5b+nXCIsXHJcblx0XHRcdGljb246XCLnqLNcIlxyXG5cdFx0fSxcclxuXHRcdHtcclxuXHRcdFx0dGl0bGU6XCLlnZrmjIHkuI3mh4hcIixcclxuXHRcdFx0aWNvbjpcIuWdmlwiXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHR0aXRsZTpcIuaMgeS5i+S7peaBklwiLFxyXG5cdFx0XHRpY29uOlwi5oGSXCJcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdHRpdGxlOlwi57K+55uK5rGC57K+XCIsXHJcblx0XHRcdGljb246XCLnsr5cIlxyXG5cdFx0fVxyXG5cdF1cclxuXHR2YXIgY3VyaWNvbiA9IFwiXCI7XHJcblx0aG9ub3JMaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbSxpbmRleCxhcnIpe1xyXG5cdFx0aWYoaG9ub3IgPT0gaXRlbS50aXRsZSl7XHJcblx0XHRcdGN1cmljb24gPSBpdGVtLmljb25cclxuXHRcdH1cclxuXHR9KVxyXG5cdHJldHVybiBjdXJpY29uXHJcbn1cclxuXHJcbi8vIOe7j+mqjOWAvOiuvue9rlxyXG52YXIgZXhwdmFsID0ge1xyXG5cdGN0YXNrOjEwLFxyXG5cdGVuZHRhc2s6MzAsXHJcblx0c2lnbmluOjEwLFxyXG5cdHNoYXJlOjUwXHJcbn1cclxuXHJcbi8vIOiOt+W+l+WRqOWHoFxyXG5jb25zdCBnZXRXZWVrRGF5ID0gKCkgPT57XHJcblx0dmFyIG15RGF0ZSA9IG5ldyBEYXRlKCk7XHJcblx0dmFyIGRheXMgPSBteURhdGUuZ2V0RGF5KCk7XHJcblx0aWYoZGF5cyA9PSAwKXtcclxuXHRcdHJldHVybiA3XHJcblx0fWVsc2V7XHJcblx0XHRyZXR1cm4gZGF5c1xyXG5cdH1cclxufVxyXG5jb25zdCBob25vciA9IHtcclxuXHRxdDpcIumdkumTnOWtpua4o1wiLFxyXG5cdGJ5Olwi55m96ZO25a2m5rCRXCIsXHJcblx0aGo6XCLpu4Tph5HlrabpnLhcIixcclxuXHRiajpcIumTgumHkeWtpuW4nVwiLFxyXG5cdHpzOlwi6ZK755+z5a2m5LuZXCIsXHJcblx0eHM6XCLlrabnpZ5cIlxyXG59XHJcbi8vIOe7j+mqjOWAvOWvueW6lOensOWPt1xyXG5jb25zdCBleHBUaXRsZSA9IChsZXZlbCkgPT4ge1xyXG5cdGlmKGxldmVsID49IDEgJiYgbGV2ZWwgPD0gMil7XHJcblx0XHRyZXR1cm4gaG9ub3IucXRcclxuXHR9XHJcblx0aWYobGV2ZWwgPj0gMyAmJiBsZXZlbCA8PSA0KXtcclxuXHRcdHJldHVybiBob25vci5ieVxyXG5cdH1cclxuXHRpZihsZXZlbCA+PSA1ICYmIGxldmVsIDw9IDYpe1xyXG5cdFx0cmV0dXJuIGhvbm9yLmhqXHJcblx0fVxyXG5cdGlmKGxldmVsID49IDcgJiYgbGV2ZWwgPD0gOCl7XHJcblx0XHRyZXR1cm4gaG9ub3IuYmpcclxuXHR9XHJcblx0aWYobGV2ZWwgPj0gOSAmJiBsZXZlbCA8PSAxMCl7XHJcblx0XHRyZXR1cm4gaG9ub3IuenNcclxuXHR9XHJcblx0aWYobGV2ZWwgPjEwKXtcclxuXHRcdHJldHVybiBob25vci54c1xyXG5cdH1cclxufVxyXG5cclxuLy8gcmVxdWVzdCBnZXQg6K+35rGCXHJcbmNvbnN0IGdldERhdGEgPSAodXJsLCBwYXJhbSkgPT4ge1xyXG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHR1bmkucmVxdWVzdCh7XHJcblx0XHRcdHVybDogdXJsLFxyXG5cdFx0XHRtZXRob2Q6ICdHRVQnLFxyXG5cdFx0XHRkYXRhOiBwYXJhbSxcclxuXHRcdFx0dGltZW91dDogMTIwMDAsXHJcblx0XHRcdGhlYWRlcjoge1xyXG5cdFx0XHRcdFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG5cdFx0XHRcdHRva2VuOiB1bmkuZ2V0U3RvcmFnZVN5bmMoXCJ0b2tlblwiKVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRzdWNjZXNzKHJlcykge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKHJlcyk7XHJcblx0XHRcdFx0aWYgKHJlcy5zdGF0dXNDb2RlID09IDIwMCB8fCByZXMuc3RhdHVzQ29kZSA9PSA0MDEpIHtcclxuXHRcdFx0XHRcdHJlc29sdmUocmVzLmRhdGEpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRpZiAocmVzLnN0YXR1c0NvZGUgPT0gNDA0KSB7XHJcblx0XHRcdFx0XHRcdHVuaS5zaG93VG9hc3Qoe1xyXG5cdFx0XHRcdFx0XHRcdHRpdGxlOiAn6K6/6Zeu6LWE5rqQ6ZSZ6K+vJyxcclxuXHRcdFx0XHRcdFx0XHRpY29uOiAnbm9uZScsXHJcblx0XHRcdFx0XHRcdFx0ZHVyYXRpb246IDEwMDBcclxuXHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHVuaS5zaG93VG9hc3Qoe1xyXG5cdFx0XHRcdFx0XHRcdHRpdGxlOiByZXMuZGF0YS5tZXNzYWdlLFxyXG5cdFx0XHRcdFx0XHRcdGljb246ICdub25lJyxcclxuXHRcdFx0XHRcdFx0XHRkdXJhdGlvbjogMTAwMFxyXG5cdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHRcdHVuaS5zd2l0Y2hUYWIoe1xyXG5cdFx0XHRcdFx0XHRcdHVybDogJy9wYWdlcy9yd2xpc3QvcndsaXN0JyxcclxuXHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdH0sIDEwMDApXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRmYWlsKGVycikge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKGVycik7XHJcblx0XHRcdFx0cmVqZWN0KGVycilcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHR9KVxyXG59XHJcblxyXG4vLyByZXF1ZXN0IHBvc3Qg6K+35rGCXHJcbmNvbnN0IHBvc3REYXRhID0gKHVybCwgcGFyYW0pID0+IHtcclxuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0dW5pLnJlcXVlc3Qoe1xyXG5cdFx0XHR1cmw6IHVybCxcclxuXHRcdFx0bWV0aG9kOiAnUE9TVCcsXHJcblx0XHRcdGRhdGE6IHBhcmFtLFxyXG5cdFx0XHR0aW1lb3V0OiAxMjAwMCxcclxuXHRcdFx0aGVhZGVyOiB7XHJcblx0XHRcdFx0Ly8gJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnIC8vIOm7mOiupOWAvFxyXG5cdFx0XHRcdFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG5cdFx0XHRcdHRva2VuOiB1bmkuZ2V0U3RvcmFnZVN5bmMoXCJ0b2tlblwiKVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRzdWNjZXNzKHJlcykge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKHJlcylcclxuXHRcdFx0XHRyZXNvbHZlKHJlcy5kYXRhKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0ZmFpbChlcnIpIHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnIpO1xyXG5cclxuXHRcdFx0XHRyZWplY3QoZXJyKVxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdH0pXHJcbn1cclxuXHJcblxyXG4vLyDlrZfnrKblnovnmoR0cnVlIGZhbHNl6L2s5o2i5biD5bCU5Z6LXHJcbmNvbnN0IHN0cmJvb2wgPSAoc3RyKSA9PntcclxuICBpZihzdHIgPT0gJ3RydWUnKXtcclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG4gIGlmIChzdHIgPT0gJ2ZhbHNlJykge1xyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG4gIGlmIChzdHIgPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG59XHJcblxyXG4vLyDojrflj5bnlKjmiLfkv6Hmga9cclxuY29uc3QgZ2V0VXNlcmluZm8gPSBhc3luYygpID0+IHtcclxuXHQvLyDojrflj5bnlKjmiLfkv6Hmga9cclxuXHR2YXIgdXNlclJlcyA9IGF3YWl0IGdldERhdGEod2ViYXBpLnVzZXJJbmZvKTtcclxuXHQvLyBjb25zb2xlLmxvZygndG9rZW4gaXMnKTtcclxuXHQvLyBjb25zb2xlLmxvZyh1bmkuZ2V0U3RvcmFnZVN5bmMoXCJ0b2tlblwiKSlcclxuXHQvLyBjb25zb2xlLmxvZygndXNlcmluZm8gaXMnKVxyXG5cdC8vIGNvbnNvbGUubG9nKHVzZXJSZXMpXHJcblx0aWYgKHJlc2hvb2sodXNlclJlcykpIHtcclxuXHRcdFxyXG5cdFx0Ly8gdXNlclJlc+Wtl+autSAgY3VycmVudEV4cGVyaWVuY2UgIOOAgSAgdG90YWxFeHBlcmllbmNlRm9yQ3VycmVudExldmVsXHJcblx0XHR2YXIgZXhwUHJvZ3Jlc3MgPSBwYXJzZUludCgodXNlclJlcy5kYXRhLnVzZXJMZXZlbEluZm8uY3VycmVudEV4cGVyaWVuY2UgLyB1c2VyUmVzLmRhdGEudXNlckxldmVsSW5mby50b3RhbEV4cGVyaWVuY2VGb3JDdXJyZW50TGV2ZWwpKjEwMCk7IFxyXG5cdFx0Ly8gY29uc29sZS5sb2coJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScpXHJcblx0XHQvLyBjb25zb2xlLmxvZygnY3VycmVudEV4cGVyaWVuY2UnKTtcclxuXHRcdC8vIGNvbnNvbGUubG9nKHVzZXJSZXMuZGF0YS51c2VyTGV2ZWxJbmZvLmN1cnJlbnRFeHBlcmllbmNlKTtcclxuXHRcdC8vIGNvbnNvbGUubG9nKCd0b3RhbEV4cGVyaWVuY2VGb3JDdXJyZW50TGV2ZWwnKTtcclxuXHRcdC8vIGNvbnNvbGUubG9nKHVzZXJSZXMuZGF0YS51c2VyTGV2ZWxJbmZvLnRvdGFsRXhwZXJpZW5jZUZvckN1cnJlbnRMZXZlbCk7XHJcblx0XHQvLyBjb25zb2xlLmxvZygnZXhwIFByb2dyZXNzIGlzID0gJyk7XHJcblx0XHQvLyBjb25zb2xlLmxvZyhleHBQcm9ncmVzcylcclxuXHRcdC8vIGNvbnNvbGUubG9nKCfojrflj5bnirbmgIHlvIDlp4stLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpXHJcblx0XHQvLyBjb25zb2xlLmxvZyhzdG9yZS5zdGF0ZSlcclxuXHRcdC8vIGNvbnNvbGUubG9nKCfojrflj5bnirbmgIHnu5PmnZ8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpXHJcblx0XHRcclxuXHRcdGlmKHVuaS5nZXRTdG9yYWdlU3luYygnbGV2ZWwnKSl7XHJcblx0XHRcdGlmKHVzZXJSZXMuZGF0YS51c2VyTGV2ZWxJbmZvLmxldmVsID09IHVuaS5nZXRTdG9yYWdlU3luYygnbGV2ZWwnKSl7XHJcblx0XHRcdFx0c3RvcmUuY29tbWl0KCdsZXZlbFVwZGF0YScsIGZhbHNlKVxyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRzdG9yZS5jb21taXQoJ2xldmVsVXBkYXRhJywgdHJ1ZSlcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRpZih1bmkuZ2V0U3RvcmFnZVN5bmMoJ2hvbm9yJykpe1xyXG5cdFx0XHRpZihleHBUaXRsZSh1c2VyUmVzLmRhdGEudXNlckxldmVsSW5mby5sZXZlbCkgPT0gdW5pLmdldFN0b3JhZ2VTeW5jKCdob25vcicpKXtcclxuXHRcdFx0XHRzdG9yZS5jb21taXQoJ2hvbm9yVXBkYXRhJywgZmFsc2UpXHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdHN0b3JlLmNvbW1pdCgnaG9ub3JVcGRhdGEnLCB0cnVlKVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHVuaS5zZXRTdG9yYWdlKHtcclxuXHRcdFx0a2V5OiAnbGV2ZWwnLFxyXG5cdFx0XHRkYXRhOiB1c2VyUmVzLmRhdGEudXNlckxldmVsSW5mby5sZXZlbFxyXG5cdFx0fSk7XHJcblx0XHRzdG9yZS5jb21taXQoJ2NoYW5nZUxldmVsJywgdXNlclJlcy5kYXRhLnVzZXJMZXZlbEluZm8ubGV2ZWwpXHJcblx0XHRcclxuXHRcdHVuaS5zZXRTdG9yYWdlKHtcclxuXHRcdFx0a2V5OiAnaG9ub3InLFxyXG5cdFx0XHRkYXRhOmV4cFRpdGxlKHVzZXJSZXMuZGF0YS51c2VyTGV2ZWxJbmZvLmxldmVsKVxyXG5cdFx0fSlcclxuXHRcdHN0b3JlLmNvbW1pdCgnY2hhbmdlSG9ub3InLCBleHBUaXRsZSh1c2VyUmVzLmRhdGEudXNlckxldmVsSW5mby5sZXZlbCkpXHJcblx0XHRcclxuXHRcdFxyXG5cdFx0dW5pLnNldFN0b3JhZ2Uoe1xyXG5cdFx0XHRrZXk6ICdwcm9ncmVzcycsXHJcblx0XHRcdGRhdGE6IGV4cFByb2dyZXNzXHJcblx0XHR9KVxyXG5cdFx0c3RvcmUuY29tbWl0KCdjaGFuZ2VQcm9ncmVzcycsIGV4cFByb2dyZXNzKVxyXG5cdFx0XHJcblx0XHR1bmkuc2V0U3RvcmFnZSh7XHJcblx0XHRcdGtleTogJ3N0YXJOdW0nLFxyXG5cdFx0XHRkYXRhOiB1c2VyUmVzLmRhdGEuc3RhclN1bW1hcnkuY3VycmVudENvdW50XHJcblx0XHR9KTtcclxuXHRcdHN0b3JlLmNvbW1pdCgnY2hhbmdlU3RhcicsIHVzZXJSZXMuZGF0YS5zdGFyU3VtbWFyeS5jdXJyZW50Q291bnQpXHJcblx0XHRyZXR1cm4gdHJ1ZVxyXG5cdH1lbHNle1xyXG5cdFx0dW5pLnNob3dNb2RhbCh7XHJcblx0XHQgIHRpdGxlOiAn55So5oi35L+h5oGv6I635Y+W5aSx6LSlJyxcclxuXHRcdCAgY29udGVudDogdW5pLmdldFN0b3JhZ2VTeW5jKCd0b2tlbicpP3VuaS5nZXRTdG9yYWdlU3luYygndG9rZW4nKTonbm8gdG9rZW4nLFxyXG5cdFx0ICBzdWNjZXNzIChyZXMpIHtcclxuXHRcdCAgICBpZiAocmVzLmNvbmZpcm0pIHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyh1c2VyUmVzKVxyXG5cdFx0ICAgICAgY29uc29sZS5sb2coJ+eUqOaIt+eCueWHu+ehruWumicpXHJcblx0XHQgICAgfSBlbHNlIGlmIChyZXMuY2FuY2VsKSB7XHJcblx0XHQgICAgICBjb25zb2xlLmxvZygn55So5oi354K55Ye75Y+W5raIJylcclxuXHRcdCAgICB9XHJcblx0XHQgIH1cclxuXHRcdH0pXHJcblx0XHQvLyB1bmkuc2hvd1RvYXN0KHtcclxuXHRcdC8vIFx0dGl0bGU6J+eUqOaIt+S/oeaBr+iOt+WPluWksei0pScsXHJcblx0XHQvLyBcdGljb246J25vbmUnLFxyXG5cdFx0Ly8gXHRkdXJhdGlvbjoxNTAwXHJcblx0XHQvLyB9KVxyXG5cdFx0cmV0dXJuIGZhbHNlXHJcblx0fVxyXG59XHJcblxyXG4vLyDnu4/pqozlj5jljJbmjqXlj6NcclxuY29uc3QgYWRkRXhwID0gYXN5bmMoZXhwLG5vZ2V0dXNlcik9PntcclxuXHRsZXQgcGFyYW1zID0ge1xyXG5cdFx0ZXhwZXJpZW5jZTpleHBcclxuXHR9XHJcblx0dmFyIGV4cFJlcyA9IGF3YWl0IHBvc3REYXRhKHdlYmFwaS5leHAscGFyYW1zKTtcclxuXHRpZihyZXNob29rKGV4cFJlcykpe1xyXG5cdFx0aWYoZXhwUmVzLnJlc3VsdENvZGUgPT0gMCl7XHJcblx0XHRcdGNvbnNvbGUubG9nKGV4cFJlcyk7XHJcblx0XHRcdGlmKG5vZ2V0dXNlcil7XHJcblx0XHRcdFx0XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdGdldFVzZXJpbmZvKClcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBcclxuXHRcdH1cclxuXHRcdFxyXG5cdH1cclxufVxyXG5cclxuLy8g5oiQ5bCx5Y+Y5YyW5qOA5p+lXHJcbmNvbnN0IGNqQ2hlY2sgPSBhc3luYyhjamluZm8pID0+IHtcclxuXHQvLyDor7fmsYLlj4LmlbDnpLrkvotcclxuXHQvLyB7XHJcblx0Ly8gICAgIFwiam9iSW5mb0lkXCI6MTIsXHJcblx0Ly8gICAgIFwidGhyZXNob2xkVHlwZUxpc3RcIjogW1xyXG5cdC8vICAgICAgICAgXCJqb2JcIixcclxuXHQvLyAgICAgICAgIFwiY29tcGxldGlvblRpbWVUb0VuZFwiXHJcblx0Ly8gICAgIF1cclxuXHQvLyB9XHJcblx0dmFyIGNoZWNrQ2ogPSBhd2FpdCBwb3N0RGF0YSh3ZWJhcGkuY2pSZXF1ZXN0LGNqaW5mbyk7XHJcblx0aWYocmVzaG9vayhjaGVja0NqKSl7XHJcblx0XHRjb25zb2xlLmxvZygn5oiQ5bCx6L+U5Zue57uT5p6cJylcclxuXHRcdGNvbnNvbGUubG9nKGNoZWNrQ2opO1xyXG5cdFx0aWYoY2hlY2tDai5yZXN1bHRDb2RlID09IDApe1xyXG5cdFx0XHRyZXR1cm4gY2hlY2tDajtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbi8vIOaYn+WPmOWMluaOpeWPo1xyXG5jb25zdCBzdGFyQWRqdXN0ID0gYXN5bmMoc3RhcixyZWFzb24sbm9nZXR1c2VyKSA9PntcclxuXHRsZXQgcGFyYW1zID0ge1xyXG5cdFx0YWRqdXN0Q291bnQ6c3RhcixcclxuXHRcdHJlYXNvbjpyZWFzb25cclxuXHR9XHJcblx0dmFyIHN0YXJSZXMgPSBhd2FpdCBwb3N0RGF0YSh3ZWJhcGkuc3RhcixwYXJhbXMpO1xyXG5cdGlmKHJlc2hvb2soc3RhclJlcykpe1xyXG5cdFx0aWYoc3RhclJlcy5yZXN1bHRDb2RlID09IDApe1xyXG5cdFx0XHRjb25zb2xlLmxvZyhzdGFyUmVzKTtcclxuXHRcdFx0aWYobm9nZXR1c2VyKXtcclxuXHRcdFx0XHRcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0Z2V0VXNlcmluZm8oKVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRcclxuXHR9XHJcbn1cclxuXHJcbi8vIGxvYWRpbmfliqDovb3mj5DnpLpcclxuY29uc3Qgc2hvd0xvYWRpbmcgPSAoKSA9PiB7XHJcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdHVuaS5zaG93TG9hZGluZyh7XHJcblx0XHRcdHRpdGxlOiAn5Yqg6L295LitLi4uJyxcclxuXHRcdFx0bWFzazogdHJ1ZSxcclxuXHRcdFx0c3VjY2VzcyhyZXMpIHtcclxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZygn5pi+56S6bG9hZGluZycpXHJcblx0XHRcdFx0cmVzb2x2ZShyZXMpXHJcblx0XHRcdH0sXHJcblx0XHRcdGZhaWwoZXJyKSB7XHJcblx0XHRcdFx0cmVqZWN0KGVycilcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHR9KVxyXG59XHJcblxyXG4vLyDlhbPpl61sb2FkaW5nXHJcbmNvbnN0IGhpZGVMb2FkaW5nID0gKCkgPT4ge1xyXG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG5cdFx0dW5pLmhpZGVMb2FkaW5nKClcclxuXHRcdC8vIGNvbnNvbGUubG9nKCfpmpDol49sb2FkaW5nJylcclxuXHRcdHJlc29sdmUoKVxyXG5cdH0pXHJcbn1cclxuXHJcbmNvbnN0IGNoZWNrQ29kZSA9IChjb2RlKSA9PiB7XHJcblx0Ly8gY29uc29sZS5sb2coY29kZSk7XHJcblx0aWYgKGNvZGUgPT0gMCkge1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fSBlbHNlIHtcclxuXHRcdHJldHVybiBmYWxzZVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gdHJpbShzdHIpeyAvL+WIoOmZpOW3puWPs+S4pOerr+eahOepuuagvFxyXG7jgIDjgIAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvKF5cXHMqKXwoXFxzKiQpL2csIFwiXCIpO1xyXG7jgIDjgIAgfVxyXG5cclxuY29uc3QgcmVzaG9vayA9IChyZXMsIHBhdGgpID0+IHtcclxuXHRpZiAoY2hlY2tDb2RlKHJlcy5yZXN1bHRDb2RlKSkge1xyXG5cdFx0cmV0dXJuIHRydWVcclxuXHR9IGVsc2Uge1xyXG5cdFx0aWYocmVzLnJlc3VsdENvZGUgPT0gNDAwMSkge1xyXG5cdFx0XHR2YXIgZGF0YSA9IHtcclxuXHRcdFx0XHR1cmw6IHBhdGhcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgb3JpZ2luID0gZW5jb2RlRGF0YShkYXRhKTtcclxuXHRcdFx0Y29uc29sZS5sb2coJy9wYWdlcy9sb2dpbi9sb2dpbj8nICsgb3JpZ2luKVxyXG5cdFx0XHR1bmkucmVkaXJlY3RUbyh7XHJcblx0XHRcdFx0dXJsOiAnL3BhZ2VzL2xvZ2luL2xvZ2luPycgKyBvcmlnaW5cclxuXHRcdFx0fSlcclxuXHRcdH1cclxuXHRcdGlmKHJlcy5yZXN1bHRDb2RlID09IDg3MDE0IHx8IHJlcy5yZXN1bHRDb2RlID09IDcwMDEpe1xyXG5cdFx0ICAgIHVuaS5zaG93VG9hc3Qoe1xyXG5cdFx0ICAgICAgdGl0bGU6IHJlcy5tZXNzYWdlLFxyXG5cdFx0ICAgICAgaWNvbjpcIm5vbmVcIixcclxuXHRcdCAgICAgIGR1cmF0aW9uOjE1MDBcclxuXHRcdCAgICB9KVxyXG5cdFx0ICB9XHJcblx0fVxyXG5cdGNvbnNvbGUubG9nKCdyZXNob29rJylcclxuXHRjb25zb2xlLmxvZyhyZXMpXHJcblx0Y29uc29sZS5sb2cocGF0aClcclxuXHRjb25zb2xlLmxvZyh0aGlzKVxyXG59XHJcblxyXG5jb25zdCBlbmNvZGVEYXRhID0gKGRhdGFkZXRhaWwpID0+IHtcclxuXHR2YXIgZGF0YXBhcmFtcyA9IE9iamVjdC5rZXlzKGRhdGFkZXRhaWwpLm1hcChmdW5jdGlvbihrZXkpIHtcclxuXHRcdHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGRhdGFkZXRhaWxba2V5XSk7XHJcblx0fSkuam9pbihcIiZcIik7XHJcblx0cmV0dXJuIGRhdGFwYXJhbXNcclxufVxyXG5cclxuLy8g56eS5pWw6L2s5q2j5bi45pe26Ze05pi+56S6IHjlsI/ml7Z45YiG6ZKfeOenklxyXG5cclxuY29uc3Qgc2VjVG9UaW1lID0gKHNlYykgPT57XHJcblx0aWYoc2VjID4gMzYwMCl7XHJcblx0XHRsZXQgaG91ciA9IHBhcnNlSW50KHNlYy8zNjAwKTtcclxuXHRcdGxldCBtaW51ID0gcGFyc2VJbnQoKHNlYy0oaG91ciozNjAwKSkvNjApO1xyXG5cdFx0bGV0IHNlY29uZCA9IHNlYy0gaG91ciozNjAwIC0gbWludSo2MDtcclxuXHRcdHJldHVybiBob3VyKyflsI/ml7YnK21pbnUrJ+WIhumSnycrc2Vjb25kKyfnp5InXHJcblx0fWVsc2V7XHJcblx0XHRsZXQgbWludSA9IHBhcnNlSW50KHNlYy82MCk7XHJcblx0XHRsZXQgc2Vjb25kID0gc2VjLSBtaW51KjYwO1xyXG5cdFx0cmV0dXJuICgobWludSA9PSAwKT8nJzptaW51KyfliIbpkp8nKStzZWNvbmQrJ+enkidcclxuXHR9XHJcbn1cclxuXHJcblxyXG4vKiogXHJcbiAqIG5ldyBEYXRlKCkgLS0tPiDovazljJbkuLog5bm0IOaciCDml6Ug5pe2IOWIhiDnp5JcclxuICogbGV0IGRhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gKiBkYXRlOiDkvKDlhaXlj4LmlbDml6XmnJ8gRGF0ZVxyXG4qL1xyXG4vLyDml7bpl7RcclxuXHJcbmZ1bmN0aW9uIGZvcm1hdE51bWJlcihuKSB7XHJcbiAgbiA9IG4udG9TdHJpbmcoKVxyXG4gIHJldHVybiBuWzFdID8gbiA6ICcwJyArIG5cclxufVxyXG5jb25zdCBmb3JtYXRUaW1lID0gKGRhdGUpID0+IHtcdFxyXG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpXHJcbiAgdmFyIG1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMVxyXG4gIHZhciBkYXkgPSBkYXRlLmdldERhdGUoKVxyXG4gIHJldHVybiBbeWVhciwgbW9udGgsIGRheV0ubWFwKGZvcm1hdE51bWJlcikuam9pbignLScpIFxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcblx0ZW5jb2RlRGF0YSxcclxuXHRnZXREYXRhLFxyXG5cdHBvc3REYXRhLFxyXG5cdHdlYmFwaSxcclxuXHRob25vcixcclxuXHRyZXNob29rLFxyXG5cdHNob3dMb2FkaW5nLFxyXG5cdGhpZGVMb2FkaW5nLFxyXG5cdGZvcm1hdFRpbWUsXHJcblx0Z2V0VXNlcmluZm8sXHJcblx0dHJpbSxcclxuXHRzZWNUb1RpbWUsXHJcblx0YWRkRXhwLFxyXG5cdHN0YXJBZGp1c3QsXHJcblx0ZXhwdmFsLFxyXG5cdGdldFdlZWtEYXksXHJcblx0ZXhwVGl0bGUsXHJcblx0aG9ub3JUaXRsZSxcclxuXHRjakNoZWNrLFxyXG5cdHN0cmJvb2wsXHJcblx0aG9ub3JDb3JyZXNcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9